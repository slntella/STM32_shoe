
smart_insole_October2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd2c  08000238  08000238  00010238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  0800cf64  0800cf64  0001cf64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d108  0800d108  0001d108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d110  0800d110  0001d110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d114  0800d114  0001d114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000209  20000000  0800d118  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006f8  2000020c  0800d321  0002020c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000904  0800d321  00020904  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY
 10 .debug_info   000238fd  00000000  00000000  0002023f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000036b9  00000000  00000000  00043b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ce0  00000000  00000000  000471f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001b98  00000000  00000000  00048ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037307  00000000  00000000  0004aa70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002447e  00000000  00000000  00081d77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00165f4e  00000000  00000000  000a61f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0020c143  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007fd8  00000000  00000000  0020c194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000020c 	.word	0x2000020c
 8000254:	00000000 	.word	0x00000000
 8000258:	0800cf4c 	.word	0x0800cf4c

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000210 	.word	0x20000210
 8000274:	0800cf4c 	.word	0x0800cf4c

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	; 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__aeabi_d2f>:
 8000a24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a28:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a2c:	bf24      	itt	cs
 8000a2e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a32:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a36:	d90d      	bls.n	8000a54 <__aeabi_d2f+0x30>
 8000a38:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a3c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a40:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a44:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a48:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a4c:	bf08      	it	eq
 8000a4e:	f020 0001 	biceq.w	r0, r0, #1
 8000a52:	4770      	bx	lr
 8000a54:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a58:	d121      	bne.n	8000a9e <__aeabi_d2f+0x7a>
 8000a5a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a5e:	bfbc      	itt	lt
 8000a60:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a64:	4770      	bxlt	lr
 8000a66:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a6e:	f1c2 0218 	rsb	r2, r2, #24
 8000a72:	f1c2 0c20 	rsb	ip, r2, #32
 8000a76:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a7e:	bf18      	it	ne
 8000a80:	f040 0001 	orrne.w	r0, r0, #1
 8000a84:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a88:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a8c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a90:	ea40 000c 	orr.w	r0, r0, ip
 8000a94:	fa23 f302 	lsr.w	r3, r3, r2
 8000a98:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a9c:	e7cc      	b.n	8000a38 <__aeabi_d2f+0x14>
 8000a9e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa2:	d107      	bne.n	8000ab4 <__aeabi_d2f+0x90>
 8000aa4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa8:	bf1e      	ittt	ne
 8000aaa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aae:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab2:	4770      	bxne	lr
 8000ab4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000abc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_uldivmod>:
 8000ac4:	b953      	cbnz	r3, 8000adc <__aeabi_uldivmod+0x18>
 8000ac6:	b94a      	cbnz	r2, 8000adc <__aeabi_uldivmod+0x18>
 8000ac8:	2900      	cmp	r1, #0
 8000aca:	bf08      	it	eq
 8000acc:	2800      	cmpeq	r0, #0
 8000ace:	bf1c      	itt	ne
 8000ad0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ad4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad8:	f000 b982 	b.w	8000de0 <__aeabi_idiv0>
 8000adc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ae4:	f000 f806 	bl	8000af4 <__udivmoddi4>
 8000ae8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af0:	b004      	add	sp, #16
 8000af2:	4770      	bx	lr

08000af4 <__udivmoddi4>:
 8000af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000af8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000afa:	4604      	mov	r4, r0
 8000afc:	460f      	mov	r7, r1
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d148      	bne.n	8000b94 <__udivmoddi4+0xa0>
 8000b02:	428a      	cmp	r2, r1
 8000b04:	4694      	mov	ip, r2
 8000b06:	d961      	bls.n	8000bcc <__udivmoddi4+0xd8>
 8000b08:	fab2 f382 	clz	r3, r2
 8000b0c:	b143      	cbz	r3, 8000b20 <__udivmoddi4+0x2c>
 8000b0e:	f1c3 0120 	rsb	r1, r3, #32
 8000b12:	409f      	lsls	r7, r3
 8000b14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b18:	409c      	lsls	r4, r3
 8000b1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000b1e:	430f      	orrs	r7, r1
 8000b20:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000b24:	fa1f fe8c 	uxth.w	lr, ip
 8000b28:	0c22      	lsrs	r2, r4, #16
 8000b2a:	fbb7 f6f1 	udiv	r6, r7, r1
 8000b2e:	fb01 7716 	mls	r7, r1, r6, r7
 8000b32:	fb06 f00e 	mul.w	r0, r6, lr
 8000b36:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b3a:	4290      	cmp	r0, r2
 8000b3c:	d908      	bls.n	8000b50 <__udivmoddi4+0x5c>
 8000b3e:	eb1c 0202 	adds.w	r2, ip, r2
 8000b42:	f106 37ff 	add.w	r7, r6, #4294967295
 8000b46:	d202      	bcs.n	8000b4e <__udivmoddi4+0x5a>
 8000b48:	4290      	cmp	r0, r2
 8000b4a:	f200 8137 	bhi.w	8000dbc <__udivmoddi4+0x2c8>
 8000b4e:	463e      	mov	r6, r7
 8000b50:	1a12      	subs	r2, r2, r0
 8000b52:	b2a4      	uxth	r4, r4
 8000b54:	fbb2 f0f1 	udiv	r0, r2, r1
 8000b58:	fb01 2210 	mls	r2, r1, r0, r2
 8000b5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b60:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b64:	45a6      	cmp	lr, r4
 8000b66:	d908      	bls.n	8000b7a <__udivmoddi4+0x86>
 8000b68:	eb1c 0404 	adds.w	r4, ip, r4
 8000b6c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b70:	d202      	bcs.n	8000b78 <__udivmoddi4+0x84>
 8000b72:	45a6      	cmp	lr, r4
 8000b74:	f200 811c 	bhi.w	8000db0 <__udivmoddi4+0x2bc>
 8000b78:	4610      	mov	r0, r2
 8000b7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b7e:	eba4 040e 	sub.w	r4, r4, lr
 8000b82:	2600      	movs	r6, #0
 8000b84:	b11d      	cbz	r5, 8000b8e <__udivmoddi4+0x9a>
 8000b86:	40dc      	lsrs	r4, r3
 8000b88:	2300      	movs	r3, #0
 8000b8a:	e9c5 4300 	strd	r4, r3, [r5]
 8000b8e:	4631      	mov	r1, r6
 8000b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b94:	428b      	cmp	r3, r1
 8000b96:	d909      	bls.n	8000bac <__udivmoddi4+0xb8>
 8000b98:	2d00      	cmp	r5, #0
 8000b9a:	f000 80fd 	beq.w	8000d98 <__udivmoddi4+0x2a4>
 8000b9e:	2600      	movs	r6, #0
 8000ba0:	e9c5 0100 	strd	r0, r1, [r5]
 8000ba4:	4630      	mov	r0, r6
 8000ba6:	4631      	mov	r1, r6
 8000ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bac:	fab3 f683 	clz	r6, r3
 8000bb0:	2e00      	cmp	r6, #0
 8000bb2:	d14b      	bne.n	8000c4c <__udivmoddi4+0x158>
 8000bb4:	428b      	cmp	r3, r1
 8000bb6:	f0c0 80f2 	bcc.w	8000d9e <__udivmoddi4+0x2aa>
 8000bba:	4282      	cmp	r2, r0
 8000bbc:	f240 80ef 	bls.w	8000d9e <__udivmoddi4+0x2aa>
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	2d00      	cmp	r5, #0
 8000bc4:	d0e3      	beq.n	8000b8e <__udivmoddi4+0x9a>
 8000bc6:	e9c5 4700 	strd	r4, r7, [r5]
 8000bca:	e7e0      	b.n	8000b8e <__udivmoddi4+0x9a>
 8000bcc:	b902      	cbnz	r2, 8000bd0 <__udivmoddi4+0xdc>
 8000bce:	deff      	udf	#255	; 0xff
 8000bd0:	fab2 f382 	clz	r3, r2
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	f040 809d 	bne.w	8000d14 <__udivmoddi4+0x220>
 8000bda:	1a89      	subs	r1, r1, r2
 8000bdc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000be0:	b297      	uxth	r7, r2
 8000be2:	2601      	movs	r6, #1
 8000be4:	0c20      	lsrs	r0, r4, #16
 8000be6:	fbb1 f2fe 	udiv	r2, r1, lr
 8000bea:	fb0e 1112 	mls	r1, lr, r2, r1
 8000bee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bf2:	fb07 f002 	mul.w	r0, r7, r2
 8000bf6:	4288      	cmp	r0, r1
 8000bf8:	d90f      	bls.n	8000c1a <__udivmoddi4+0x126>
 8000bfa:	eb1c 0101 	adds.w	r1, ip, r1
 8000bfe:	f102 38ff 	add.w	r8, r2, #4294967295
 8000c02:	bf2c      	ite	cs
 8000c04:	f04f 0901 	movcs.w	r9, #1
 8000c08:	f04f 0900 	movcc.w	r9, #0
 8000c0c:	4288      	cmp	r0, r1
 8000c0e:	d903      	bls.n	8000c18 <__udivmoddi4+0x124>
 8000c10:	f1b9 0f00 	cmp.w	r9, #0
 8000c14:	f000 80cf 	beq.w	8000db6 <__udivmoddi4+0x2c2>
 8000c18:	4642      	mov	r2, r8
 8000c1a:	1a09      	subs	r1, r1, r0
 8000c1c:	b2a4      	uxth	r4, r4
 8000c1e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c22:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c26:	fb00 f707 	mul.w	r7, r0, r7
 8000c2a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c2e:	42a7      	cmp	r7, r4
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x150>
 8000c32:	eb1c 0404 	adds.w	r4, ip, r4
 8000c36:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c3a:	d202      	bcs.n	8000c42 <__udivmoddi4+0x14e>
 8000c3c:	42a7      	cmp	r7, r4
 8000c3e:	f200 80b4 	bhi.w	8000daa <__udivmoddi4+0x2b6>
 8000c42:	4608      	mov	r0, r1
 8000c44:	1be4      	subs	r4, r4, r7
 8000c46:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000c4a:	e79b      	b.n	8000b84 <__udivmoddi4+0x90>
 8000c4c:	f1c6 0720 	rsb	r7, r6, #32
 8000c50:	40b3      	lsls	r3, r6
 8000c52:	fa01 f406 	lsl.w	r4, r1, r6
 8000c56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c5a:	40f9      	lsrs	r1, r7
 8000c5c:	40b2      	lsls	r2, r6
 8000c5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c62:	fa20 f307 	lsr.w	r3, r0, r7
 8000c66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c6a:	431c      	orrs	r4, r3
 8000c6c:	fa1f fe8c 	uxth.w	lr, ip
 8000c70:	fa00 f306 	lsl.w	r3, r0, r6
 8000c74:	0c20      	lsrs	r0, r4, #16
 8000c76:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c7a:	fb09 1118 	mls	r1, r9, r8, r1
 8000c7e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c82:	fb08 f00e 	mul.w	r0, r8, lr
 8000c86:	4288      	cmp	r0, r1
 8000c88:	d90f      	bls.n	8000caa <__udivmoddi4+0x1b6>
 8000c8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c8e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c92:	bf2c      	ite	cs
 8000c94:	f04f 0b01 	movcs.w	fp, #1
 8000c98:	f04f 0b00 	movcc.w	fp, #0
 8000c9c:	4288      	cmp	r0, r1
 8000c9e:	d903      	bls.n	8000ca8 <__udivmoddi4+0x1b4>
 8000ca0:	f1bb 0f00 	cmp.w	fp, #0
 8000ca4:	f000 808d 	beq.w	8000dc2 <__udivmoddi4+0x2ce>
 8000ca8:	46d0      	mov	r8, sl
 8000caa:	1a09      	subs	r1, r1, r0
 8000cac:	b2a4      	uxth	r4, r4
 8000cae:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cb2:	fb09 1110 	mls	r1, r9, r0, r1
 8000cb6:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cba:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cbe:	458e      	cmp	lr, r1
 8000cc0:	d907      	bls.n	8000cd2 <__udivmoddi4+0x1de>
 8000cc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cca:	d201      	bcs.n	8000cd0 <__udivmoddi4+0x1dc>
 8000ccc:	458e      	cmp	lr, r1
 8000cce:	d87f      	bhi.n	8000dd0 <__udivmoddi4+0x2dc>
 8000cd0:	4620      	mov	r0, r4
 8000cd2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cd6:	eba1 010e 	sub.w	r1, r1, lr
 8000cda:	fba0 9802 	umull	r9, r8, r0, r2
 8000cde:	4541      	cmp	r1, r8
 8000ce0:	464c      	mov	r4, r9
 8000ce2:	46c6      	mov	lr, r8
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0x1f8>
 8000ce6:	d106      	bne.n	8000cf6 <__udivmoddi4+0x202>
 8000ce8:	454b      	cmp	r3, r9
 8000cea:	d204      	bcs.n	8000cf6 <__udivmoddi4+0x202>
 8000cec:	3801      	subs	r0, #1
 8000cee:	ebb9 0402 	subs.w	r4, r9, r2
 8000cf2:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d070      	beq.n	8000ddc <__udivmoddi4+0x2e8>
 8000cfa:	1b1a      	subs	r2, r3, r4
 8000cfc:	eb61 010e 	sbc.w	r1, r1, lr
 8000d00:	fa22 f306 	lsr.w	r3, r2, r6
 8000d04:	fa01 f707 	lsl.w	r7, r1, r7
 8000d08:	40f1      	lsrs	r1, r6
 8000d0a:	2600      	movs	r6, #0
 8000d0c:	431f      	orrs	r7, r3
 8000d0e:	e9c5 7100 	strd	r7, r1, [r5]
 8000d12:	e73c      	b.n	8000b8e <__udivmoddi4+0x9a>
 8000d14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d18:	f1c3 0020 	rsb	r0, r3, #32
 8000d1c:	fa01 f203 	lsl.w	r2, r1, r3
 8000d20:	fa21 f600 	lsr.w	r6, r1, r0
 8000d24:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d28:	fa24 f100 	lsr.w	r1, r4, r0
 8000d2c:	fa1f f78c 	uxth.w	r7, ip
 8000d30:	409c      	lsls	r4, r3
 8000d32:	4311      	orrs	r1, r2
 8000d34:	fbb6 f0fe 	udiv	r0, r6, lr
 8000d38:	0c0a      	lsrs	r2, r1, #16
 8000d3a:	fb0e 6610 	mls	r6, lr, r0, r6
 8000d3e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000d42:	fb00 f607 	mul.w	r6, r0, r7
 8000d46:	4296      	cmp	r6, r2
 8000d48:	d90e      	bls.n	8000d68 <__udivmoddi4+0x274>
 8000d4a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d4e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d52:	bf2c      	ite	cs
 8000d54:	f04f 0901 	movcs.w	r9, #1
 8000d58:	f04f 0900 	movcc.w	r9, #0
 8000d5c:	4296      	cmp	r6, r2
 8000d5e:	d902      	bls.n	8000d66 <__udivmoddi4+0x272>
 8000d60:	f1b9 0f00 	cmp.w	r9, #0
 8000d64:	d031      	beq.n	8000dca <__udivmoddi4+0x2d6>
 8000d66:	4640      	mov	r0, r8
 8000d68:	1b92      	subs	r2, r2, r6
 8000d6a:	b289      	uxth	r1, r1
 8000d6c:	fbb2 f6fe 	udiv	r6, r2, lr
 8000d70:	fb0e 2216 	mls	r2, lr, r6, r2
 8000d74:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000d78:	fb06 f207 	mul.w	r2, r6, r7
 8000d7c:	428a      	cmp	r2, r1
 8000d7e:	d907      	bls.n	8000d90 <__udivmoddi4+0x29c>
 8000d80:	eb1c 0101 	adds.w	r1, ip, r1
 8000d84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d88:	d201      	bcs.n	8000d8e <__udivmoddi4+0x29a>
 8000d8a:	428a      	cmp	r2, r1
 8000d8c:	d823      	bhi.n	8000dd6 <__udivmoddi4+0x2e2>
 8000d8e:	4646      	mov	r6, r8
 8000d90:	1a89      	subs	r1, r1, r2
 8000d92:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d96:	e725      	b.n	8000be4 <__udivmoddi4+0xf0>
 8000d98:	462e      	mov	r6, r5
 8000d9a:	4628      	mov	r0, r5
 8000d9c:	e6f7      	b.n	8000b8e <__udivmoddi4+0x9a>
 8000d9e:	1a84      	subs	r4, r0, r2
 8000da0:	eb61 0303 	sbc.w	r3, r1, r3
 8000da4:	2001      	movs	r0, #1
 8000da6:	461f      	mov	r7, r3
 8000da8:	e70b      	b.n	8000bc2 <__udivmoddi4+0xce>
 8000daa:	4464      	add	r4, ip
 8000dac:	3802      	subs	r0, #2
 8000dae:	e749      	b.n	8000c44 <__udivmoddi4+0x150>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	e6e1      	b.n	8000b7a <__udivmoddi4+0x86>
 8000db6:	3a02      	subs	r2, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	e72e      	b.n	8000c1a <__udivmoddi4+0x126>
 8000dbc:	3e02      	subs	r6, #2
 8000dbe:	4462      	add	r2, ip
 8000dc0:	e6c6      	b.n	8000b50 <__udivmoddi4+0x5c>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4461      	add	r1, ip
 8000dc8:	e76f      	b.n	8000caa <__udivmoddi4+0x1b6>
 8000dca:	3802      	subs	r0, #2
 8000dcc:	4462      	add	r2, ip
 8000dce:	e7cb      	b.n	8000d68 <__udivmoddi4+0x274>
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	4461      	add	r1, ip
 8000dd4:	e77d      	b.n	8000cd2 <__udivmoddi4+0x1de>
 8000dd6:	3e02      	subs	r6, #2
 8000dd8:	4461      	add	r1, ip
 8000dda:	e7d9      	b.n	8000d90 <__udivmoddi4+0x29c>
 8000ddc:	462e      	mov	r6, r5
 8000dde:	e6d6      	b.n	8000b8e <__udivmoddi4+0x9a>

08000de0 <__aeabi_idiv0>:
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop

08000de4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dea:	f001 fef9 	bl	8002be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dee:	f000 f917 	bl	8001020 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000df2:	f000 f968 	bl	80010c6 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000df6:	f000 fc41 	bl	800167c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000dfa:	f000 f96b 	bl	80010d4 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000dfe:	f000 f9d7 	bl	80011b0 <MX_DAC1_Init>
  MX_I2C1_Init();
 8000e02:	f000 fa1d 	bl	8001240 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000e06:	f000 fa59 	bl	80012bc <MX_I2C2_Init>
  MX_I2C3_Init();
 8000e0a:	f000 fa95 	bl	8001338 <MX_I2C3_Init>
  MX_OPAMP1_Init();
 8000e0e:	f000 fad1 	bl	80013b4 <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 8000e12:	f000 faf9 	bl	8001408 <MX_OPAMP2_Init>
  MX_USART1_UART_Init();
 8000e16:	f000 fbe5 	bl	80015e4 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000e1a:	f000 fb19 	bl	8001450 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000e1e:	f000 fb6b 	bl	80014f8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /*Init serial rx buffer with DMA*/
  HAL_UART_Receive_DMA(&huart1, (uint8_t *)uart_rx_buf, (UART_RX_IDX_MAX + 1));
 8000e22:	2280      	movs	r2, #128	; 0x80
 8000e24:	496c      	ldr	r1, [pc, #432]	; (8000fd8 <main+0x1f4>)
 8000e26:	486d      	ldr	r0, [pc, #436]	; (8000fdc <main+0x1f8>)
 8000e28:	f00a ff6c 	bl	800bd04 <HAL_UART_Receive_DMA>

  /*---------------- Perform ADC calibration ----------------------------------------------- */
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 8000e2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e30:	2100      	movs	r1, #0
 8000e32:	486b      	ldr	r0, [pc, #428]	; (8000fe0 <main+0x1fc>)
 8000e34:	f003 fe84 	bl	8004b40 <HAL_ADCEx_Calibration_Start>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <main+0x5e>
   {
     /* Calibration Error */
     Error_Handler();
 8000e3e:	f001 fa65 	bl	800230c <Error_Handler>
   }

  /*---------------- Configure MAX77874 Buck Converters ------------------------------------ */

  configure_MAX77874_buck_conv();
 8000e42:	f000 fec3 	bl	8001bcc <configure_MAX77874_buck_conv>

  /*---------------- Change Bluetooth module name ------------------------------------------ */

   if (BM78_SetDeviceName() != HAL_OK) {
 8000e46:	f001 fa01 	bl	800224c <BM78_SetDeviceName>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <main+0x70>
     Error_Handler();
 8000e50:	f001 fa5c 	bl	800230c <Error_Handler>
   }

   HAL_Delay(1000); // Delay for 1 second between commands (adjust as needed)
 8000e54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e58:	f001 ff46 	bl	8002ce8 <HAL_Delay>

  /*---------------- Initialize Bluetooth BM78 module -------------------------------------- */

  configure_bluetooth();
 8000e5c:	f001 f9bc 	bl	80021d8 <configure_bluetooth>
  HAL_Delay(100);
 8000e60:	2064      	movs	r0, #100	; 0x64
 8000e62:	f001 ff41 	bl	8002ce8 <HAL_Delay>

  /*---------------- set all the select pins ----------------------------------------------- */
  for (int i=0; i<5; i++)
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	e01a      	b.n	8000ea2 <main+0xbe>
  {
	  if (i<2)	  HAL_GPIO_WritePin(GPIOB, select_pins_MUX[i], GPIO_PIN_RESET);
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	dc0a      	bgt.n	8000e88 <main+0xa4>
 8000e72:	4a5c      	ldr	r2, [pc, #368]	; (8000fe4 <main+0x200>)
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4859      	ldr	r0, [pc, #356]	; (8000fe8 <main+0x204>)
 8000e82:	f004 fd59 	bl	8005938 <HAL_GPIO_WritePin>
 8000e86:	e009      	b.n	8000e9c <main+0xb8>
	  else   	  HAL_GPIO_WritePin(GPIOE, select_pins_MUX[i], GPIO_PIN_RESET);
 8000e88:	4a56      	ldr	r2, [pc, #344]	; (8000fe4 <main+0x200>)
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	2200      	movs	r2, #0
 8000e94:	4619      	mov	r1, r3
 8000e96:	4855      	ldr	r0, [pc, #340]	; (8000fec <main+0x208>)
 8000e98:	f004 fd4e 	bl	8005938 <HAL_GPIO_WritePin>
  for (int i=0; i<5; i++)
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	613b      	str	r3, [r7, #16]
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	2b04      	cmp	r3, #4
 8000ea6:	dde1      	ble.n	8000e6c <main+0x88>
  }


  for(int i=0; i<NUMBER_OF_SENSORS; i++){
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	e014      	b.n	8000ed8 <main+0xf4>
  	  modules_state[i] = 1;  // set all modules state in the state storing array to 1
 8000eae:	4a50      	ldr	r2, [pc, #320]	; (8000ff0 <main+0x20c>)
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	701a      	strb	r2, [r3, #0]
  	HAL_GPIO_WritePin(pin_port[i], valve_pins[i], GPIO_PIN_SET);
 8000eb8:	4a4e      	ldr	r2, [pc, #312]	; (8000ff4 <main+0x210>)
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ec0:	4a4d      	ldr	r2, [pc, #308]	; (8000ff8 <main+0x214>)
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	2201      	movs	r2, #1
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f004 fd33 	bl	8005938 <HAL_GPIO_WritePin>
  for(int i=0; i<NUMBER_OF_SENSORS; i++){
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	2b1e      	cmp	r3, #30
 8000edc:	dde7      	ble.n	8000eae <main+0xca>
    }

  /*--------------- start the timer -------------------------------------------------------- */
  /*## Start the Input Capture in interrupt mode ##########################*/
  if(HAL_TIM_Base_Start_IT(&htim1) != HAL_OK)
 8000ede:	4847      	ldr	r0, [pc, #284]	; (8000ffc <main+0x218>)
 8000ee0:	f009 fa62 	bl	800a3a8 <HAL_TIM_Base_Start_IT>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <main+0x10a>
  {
    /* Starting Error */
    Error_Handler();
 8000eea:	f001 fa0f 	bl	800230c <Error_Handler>
  }
  old_time = HAL_GetTick();
 8000eee:	f001 feef 	bl	8002cd0 <HAL_GetTick>
 8000ef2:	6178      	str	r0, [r7, #20]

  /*--------------- start DAC -------------------------------------------------------------- */
  if (HAL_DAC_Start(&hdac1, DAC_CHANNEL_1) != HAL_OK)
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4842      	ldr	r0, [pc, #264]	; (8001000 <main+0x21c>)
 8000ef8:	f003 ffb7 	bl	8004e6a <HAL_DAC_Start>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <main+0x122>
  {
    /* Start Error */
    Error_Handler();
 8000f02:	f001 fa03 	bl	800230c <Error_Handler>
  }

  if (HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_8B_R, value_dac) != HAL_OK)
 8000f06:	2308      	movs	r3, #8
 8000f08:	2208      	movs	r2, #8
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	483c      	ldr	r0, [pc, #240]	; (8001000 <main+0x21c>)
 8000f0e:	f003 ffff 	bl	8004f10 <HAL_DAC_SetValue>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <main+0x138>
  {
    /* Setting value Error */
    Error_Handler();
 8000f18:	f001 f9f8 	bl	800230c <Error_Handler>
  }

  /* -------------- start opamps ------------------------------------------------------------*/
  HAL_OPAMP_Start(&hopamp1);
 8000f1c:	4839      	ldr	r0, [pc, #228]	; (8001004 <main+0x220>)
 8000f1e:	f005 fa21 	bl	8006364 <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp2);
 8000f22:	4839      	ldr	r0, [pc, #228]	; (8001008 <main+0x224>)
 8000f24:	f005 fa1e 	bl	8006364 <HAL_OPAMP_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  read_all_sensors();
 8000f28:	f000 fc96 	bl	8001858 <read_all_sensors>

	  create_pressure_map(pressure_map);
 8000f2c:	4837      	ldr	r0, [pc, #220]	; (800100c <main+0x228>)
 8000f2e:	f000 fccb 	bl	80018c8 <create_pressure_map>

	  for(int i=0; i<NUMBER_OF_SENSORS; i++){
 8000f32:	2300      	movs	r3, #0
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	e016      	b.n	8000f66 <main+0x182>
		  average_pressure_map[i] = average_pressure_map[i] + pressure_map[i];
 8000f38:	4a35      	ldr	r2, [pc, #212]	; (8001010 <main+0x22c>)
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	4413      	add	r3, r2
 8000f40:	ed93 7a00 	vldr	s14, [r3]
 8000f44:	4a31      	ldr	r2, [pc, #196]	; (800100c <main+0x228>)
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	4413      	add	r3, r2
 8000f4c:	edd3 7a00 	vldr	s15, [r3]
 8000f50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f54:	4a2e      	ldr	r2, [pc, #184]	; (8001010 <main+0x22c>)
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	4413      	add	r3, r2
 8000f5c:	edc3 7a00 	vstr	s15, [r3]
	  for(int i=0; i<NUMBER_OF_SENSORS; i++){
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	3301      	adds	r3, #1
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	2b1e      	cmp	r3, #30
 8000f6a:	dde5      	ble.n	8000f38 <main+0x154>
	  }
	  counter_average++;
 8000f6c:	4b29      	ldr	r3, [pc, #164]	; (8001014 <main+0x230>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	3301      	adds	r3, #1
 8000f72:	4a28      	ldr	r2, [pc, #160]	; (8001014 <main+0x230>)
 8000f74:	6013      	str	r3, [r2, #0]

	  if (autocontrol) {
 8000f76:	4b28      	ldr	r3, [pc, #160]	; (8001018 <main+0x234>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d009      	beq.n	8000f92 <main+0x1ae>
		  if(autocontrol_timeout){
 8000f7e:	4b27      	ldr	r3, [pc, #156]	; (800101c <main+0x238>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d004      	beq.n	8000f92 <main+0x1ae>
			  valves_autocontrol();
 8000f88:	f001 f8c6 	bl	8002118 <valves_autocontrol>
			  autocontrol_timeout = 0;
 8000f8c:	4b23      	ldr	r3, [pc, #140]	; (800101c <main+0x238>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	701a      	strb	r2, [r3, #0]
	  } else {
	  }

	  // use pressure_map and Bluetooth to send data to PC

	  send_to_uart(pressure_map);
 8000f92:	481e      	ldr	r0, [pc, #120]	; (800100c <main+0x228>)
 8000f94:	f000 fd2a 	bl	80019ec <send_to_uart>
	  read_uart();
 8000f98:	f000 fd58 	bl	8001a4c <read_uart>

	  // set all the select pins
	  for (int i=0; i<5; i++)
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	e00c      	b.n	8000fbc <main+0x1d8>
	  {
		  HAL_GPIO_WritePin(GPIOE, select_pins_MUX[i], GPIO_PIN_RESET);
 8000fa2:	4a10      	ldr	r2, [pc, #64]	; (8000fe4 <main+0x200>)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	2200      	movs	r2, #0
 8000fae:	4619      	mov	r1, r3
 8000fb0:	480e      	ldr	r0, [pc, #56]	; (8000fec <main+0x208>)
 8000fb2:	f004 fcc1 	bl	8005938 <HAL_GPIO_WritePin>
	  for (int i=0; i<5; i++)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2b04      	cmp	r3, #4
 8000fc0:	ddef      	ble.n	8000fa2 <main+0x1be>
	  }


	  //wait
	  do {
		  new_time = HAL_GetTick();
 8000fc2:	f001 fe85 	bl	8002cd0 <HAL_GetTick>
 8000fc6:	6038      	str	r0, [r7, #0]
	  }	while ((new_time-old_time) < 10); //100Hz
 8000fc8:	683a      	ldr	r2, [r7, #0]
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	2b09      	cmp	r3, #9
 8000fd0:	d9f7      	bls.n	8000fc2 <main+0x1de>
	  old_time = new_time;
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	617b      	str	r3, [r7, #20]
	  read_all_sensors();
 8000fd6:	e7a7      	b.n	8000f28 <main+0x144>
 8000fd8:	200005bc 	.word	0x200005bc
 8000fdc:	200004ac 	.word	0x200004ac
 8000fe0:	20000228 	.word	0x20000228
 8000fe4:	0800cf74 	.word	0x0800cf74
 8000fe8:	42020400 	.word	0x42020400
 8000fec:	42021000 	.word	0x42021000
 8000ff0:	200007b4 	.word	0x200007b4
 8000ff4:	20000088 	.word	0x20000088
 8000ff8:	2000000c 	.word	0x2000000c
 8000ffc:	20000414 	.word	0x20000414
 8001000:	200002b4 	.word	0x200002b4
 8001004:	200003ac 	.word	0x200003ac
 8001008:	200003e0 	.word	0x200003e0
 800100c:	20000640 	.word	0x20000640
 8001010:	200006bc 	.word	0x200006bc
 8001014:	200007dc 	.word	0x200007dc
 8001018:	2000063d 	.word	0x2000063d
 800101c:	2000063c 	.word	0x2000063c

08001020 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b09e      	sub	sp, #120	; 0x78
 8001024:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001026:	f107 0318 	add.w	r3, r7, #24
 800102a:	2260      	movs	r2, #96	; 0x60
 800102c:	2100      	movs	r1, #0
 800102e:	4618      	mov	r0, r3
 8001030:	f00b ff7c 	bl	800cf2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001034:	463b      	mov	r3, r7
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	611a      	str	r2, [r3, #16]
 8001042:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 8001044:	2000      	movs	r0, #0
 8001046:	f005 f9bf 	bl	80063c8 <HAL_PWREx_ControlVoltageScaling>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001050:	f001 f95c 	bl	800230c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8001054:	231a      	movs	r3, #26
 8001056:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001058:	f44f 7380 	mov.w	r3, #256	; 0x100
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800105e:	2310      	movs	r3, #16
 8001060:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001062:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001066:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001068:	2301      	movs	r3, #1
 800106a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800106c:	2310      	movs	r3, #16
 800106e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8001070:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001074:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8001076:	2300      	movs	r3, #0
 8001078:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800107a:	2300      	movs	r3, #0
 800107c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800107e:	f107 0318 	add.w	r3, r7, #24
 8001082:	4618      	mov	r0, r3
 8001084:	f005 fa42 	bl	800650c <HAL_RCC_OscConfig>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800108e:	f001 f93d 	bl	800230c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001092:	231f      	movs	r3, #31
 8001094:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001096:	2300      	movs	r3, #0
 8001098:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800109a:	2300      	movs	r3, #0
 800109c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010aa:	463b      	mov	r3, r7
 80010ac:	2100      	movs	r1, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f006 f902 	bl	80072b8 <HAL_RCC_ClockConfig>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80010ba:	f001 f927 	bl	800230c <Error_Handler>
  }
}
 80010be:	bf00      	nop
 80010c0:	3778      	adds	r7, #120	; 0x78
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0
}
 80010ca:	bf00      	nop
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010da:	463b      	mov	r3, r7
 80010dc:	2220      	movs	r2, #32
 80010de:	2100      	movs	r1, #0
 80010e0:	4618      	mov	r0, r3
 80010e2:	f00b ff23 	bl	800cf2c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010e6:	4b2f      	ldr	r3, [pc, #188]	; (80011a4 <MX_ADC1_Init+0xd0>)
 80010e8:	4a2f      	ldr	r2, [pc, #188]	; (80011a8 <MX_ADC1_Init+0xd4>)
 80010ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80010ec:	4b2d      	ldr	r3, [pc, #180]	; (80011a4 <MX_ADC1_Init+0xd0>)
 80010ee:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80010f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 80010f4:	4b2b      	ldr	r3, [pc, #172]	; (80011a4 <MX_ADC1_Init+0xd0>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 80010fa:	4b2a      	ldr	r3, [pc, #168]	; (80011a4 <MX_ADC1_Init+0xd0>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001100:	4b28      	ldr	r3, [pc, #160]	; (80011a4 <MX_ADC1_Init+0xd0>)
 8001102:	2200      	movs	r2, #0
 8001104:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001106:	4b27      	ldr	r3, [pc, #156]	; (80011a4 <MX_ADC1_Init+0xd0>)
 8001108:	2204      	movs	r2, #4
 800110a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800110c:	4b25      	ldr	r3, [pc, #148]	; (80011a4 <MX_ADC1_Init+0xd0>)
 800110e:	2200      	movs	r2, #0
 8001110:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001112:	4b24      	ldr	r3, [pc, #144]	; (80011a4 <MX_ADC1_Init+0xd0>)
 8001114:	2201      	movs	r2, #1
 8001116:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.NbrOfConversion = 1;
 800111a:	4b22      	ldr	r3, [pc, #136]	; (80011a4 <MX_ADC1_Init+0xd0>)
 800111c:	2201      	movs	r2, #1
 800111e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001120:	4b20      	ldr	r3, [pc, #128]	; (80011a4 <MX_ADC1_Init+0xd0>)
 8001122:	2200      	movs	r2, #0
 8001124:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001128:	4b1e      	ldr	r3, [pc, #120]	; (80011a4 <MX_ADC1_Init+0xd0>)
 800112a:	2200      	movs	r2, #0
 800112c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800112e:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <MX_ADC1_Init+0xd0>)
 8001130:	2200      	movs	r2, #0
 8001132:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001134:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <MX_ADC1_Init+0xd0>)
 8001136:	2200      	movs	r2, #0
 8001138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800113c:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <MX_ADC1_Init+0xd0>)
 800113e:	2200      	movs	r2, #0
 8001140:	669a      	str	r2, [r3, #104]	; 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001142:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <MX_ADC1_Init+0xd0>)
 8001144:	2200      	movs	r2, #0
 8001146:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001148:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <MX_ADC1_Init+0xd0>)
 800114a:	2200      	movs	r2, #0
 800114c:	651a      	str	r2, [r3, #80]	; 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <MX_ADC1_Init+0xd0>)
 8001150:	2200      	movs	r2, #0
 8001152:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001154:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <MX_ADC1_Init+0xd0>)
 8001156:	2200      	movs	r2, #0
 8001158:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800115c:	4811      	ldr	r0, [pc, #68]	; (80011a4 <MX_ADC1_Init+0xd0>)
 800115e:	f002 f925 	bl	80033ac <HAL_ADC_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001168:	f001 f8d0 	bl	800230c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800116c:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <MX_ADC1_Init+0xd8>)
 800116e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001170:	2306      	movs	r3, #6
 8001172:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 8001174:	2300      	movs	r3, #0
 8001176:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001178:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800117c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800117e:	2304      	movs	r3, #4
 8001180:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001186:	463b      	mov	r3, r7
 8001188:	4619      	mov	r1, r3
 800118a:	4806      	ldr	r0, [pc, #24]	; (80011a4 <MX_ADC1_Init+0xd0>)
 800118c:	f002 fda4 	bl	8003cd8 <HAL_ADC_ConfigChannel>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001196:	f001 f8b9 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800119a:	bf00      	nop
 800119c:	3720      	adds	r7, #32
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000228 	.word	0x20000228
 80011a8:	42028000 	.word	0x42028000
 80011ac:	08000004 	.word	0x08000004

080011b0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08e      	sub	sp, #56	; 0x38
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80011b6:	f107 0308 	add.w	r3, r7, #8
 80011ba:	2230      	movs	r2, #48	; 0x30
 80011bc:	2100      	movs	r1, #0
 80011be:	4618      	mov	r0, r3
 80011c0:	f00b feb4 	bl	800cf2c <memset>
  DAC_AutonomousModeConfTypeDef sAutonomousMode = {0};
 80011c4:	2300      	movs	r3, #0
 80011c6:	607b      	str	r3, [r7, #4]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80011c8:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <MX_DAC1_Init+0x88>)
 80011ca:	4a1c      	ldr	r2, [pc, #112]	; (800123c <MX_DAC1_Init+0x8c>)
 80011cc:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80011ce:	481a      	ldr	r0, [pc, #104]	; (8001238 <MX_DAC1_Init+0x88>)
 80011d0:	f003 fe29 	bl	8004e26 <HAL_DAC_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_DAC1_Init+0x2e>
  {
    Error_Handler();
 80011da:	f001 f897 	bl	800230c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80011de:	2300      	movs	r3, #0
 80011e0:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80011e2:	2300      	movs	r3, #0
 80011e4:	743b      	strb	r3, [r7, #16]
  sConfig.DAC_SignedFormat = DISABLE;
 80011e6:	2300      	movs	r3, #0
 80011e8:	747b      	strb	r3, [r7, #17]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80011f6:	2301      	movs	r3, #1
 80011f8:	623b      	str	r3, [r7, #32]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80011fa:	2300      	movs	r3, #0
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011fe:	f107 0308 	add.w	r3, r7, #8
 8001202:	2200      	movs	r2, #0
 8001204:	4619      	mov	r1, r3
 8001206:	480c      	ldr	r0, [pc, #48]	; (8001238 <MX_DAC1_Init+0x88>)
 8001208:	f003 feaa 	bl	8004f60 <HAL_DAC_ConfigChannel>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_DAC1_Init+0x66>
  {
    Error_Handler();
 8001212:	f001 f87b 	bl	800230c <Error_Handler>
  }

  /** Configure Autonomous Mode
  */
  sAutonomousMode.AutonomousModeState = DAC_AUTONOMOUS_MODE_DISABLE;
 8001216:	2300      	movs	r3, #0
 8001218:	607b      	str	r3, [r7, #4]
  if (HAL_DACEx_SetConfigAutonomousMode(&hdac1, &sAutonomousMode) != HAL_OK)
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	4619      	mov	r1, r3
 800121e:	4806      	ldr	r0, [pc, #24]	; (8001238 <MX_DAC1_Init+0x88>)
 8001220:	f004 f838 	bl	8005294 <HAL_DACEx_SetConfigAutonomousMode>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_DAC1_Init+0x7e>
  {
    Error_Handler();
 800122a:	f001 f86f 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800122e:	bf00      	nop
 8001230:	3738      	adds	r7, #56	; 0x38
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	200002b4 	.word	0x200002b4
 800123c:	46021800 	.word	0x46021800

08001240 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001244:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <MX_I2C1_Init+0x74>)
 8001246:	4a1c      	ldr	r2, [pc, #112]	; (80012b8 <MX_I2C1_Init+0x78>)
 8001248:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800124a:	4b1a      	ldr	r3, [pc, #104]	; (80012b4 <MX_I2C1_Init+0x74>)
 800124c:	f640 6214 	movw	r2, #3604	; 0xe14
 8001250:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001252:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <MX_I2C1_Init+0x74>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001258:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <MX_I2C1_Init+0x74>)
 800125a:	2201      	movs	r2, #1
 800125c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800125e:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <MX_I2C1_Init+0x74>)
 8001260:	2200      	movs	r2, #0
 8001262:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001264:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <MX_I2C1_Init+0x74>)
 8001266:	2200      	movs	r2, #0
 8001268:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800126a:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <MX_I2C1_Init+0x74>)
 800126c:	2200      	movs	r2, #0
 800126e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001270:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <MX_I2C1_Init+0x74>)
 8001272:	2200      	movs	r2, #0
 8001274:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001276:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <MX_I2C1_Init+0x74>)
 8001278:	2200      	movs	r2, #0
 800127a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800127c:	480d      	ldr	r0, [pc, #52]	; (80012b4 <MX_I2C1_Init+0x74>)
 800127e:	f004 fb73 	bl	8005968 <HAL_I2C_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001288:	f001 f840 	bl	800230c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800128c:	2100      	movs	r1, #0
 800128e:	4809      	ldr	r0, [pc, #36]	; (80012b4 <MX_I2C1_Init+0x74>)
 8001290:	f004 feec 	bl	800606c <HAL_I2CEx_ConfigAnalogFilter>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800129a:	f001 f837 	bl	800230c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800129e:	2100      	movs	r1, #0
 80012a0:	4804      	ldr	r0, [pc, #16]	; (80012b4 <MX_I2C1_Init+0x74>)
 80012a2:	f004 ff2e 	bl	8006102 <HAL_I2CEx_ConfigDigitalFilter>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80012ac:	f001 f82e 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	200002c8 	.word	0x200002c8
 80012b8:	40005400 	.word	0x40005400

080012bc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80012c0:	4b1b      	ldr	r3, [pc, #108]	; (8001330 <MX_I2C2_Init+0x74>)
 80012c2:	4a1c      	ldr	r2, [pc, #112]	; (8001334 <MX_I2C2_Init+0x78>)
 80012c4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80012c6:	4b1a      	ldr	r3, [pc, #104]	; (8001330 <MX_I2C2_Init+0x74>)
 80012c8:	f640 6214 	movw	r2, #3604	; 0xe14
 80012cc:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80012ce:	4b18      	ldr	r3, [pc, #96]	; (8001330 <MX_I2C2_Init+0x74>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012d4:	4b16      	ldr	r3, [pc, #88]	; (8001330 <MX_I2C2_Init+0x74>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012da:	4b15      	ldr	r3, [pc, #84]	; (8001330 <MX_I2C2_Init+0x74>)
 80012dc:	2200      	movs	r2, #0
 80012de:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80012e0:	4b13      	ldr	r3, [pc, #76]	; (8001330 <MX_I2C2_Init+0x74>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012e6:	4b12      	ldr	r3, [pc, #72]	; (8001330 <MX_I2C2_Init+0x74>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012ec:	4b10      	ldr	r3, [pc, #64]	; (8001330 <MX_I2C2_Init+0x74>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012f2:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <MX_I2C2_Init+0x74>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80012f8:	480d      	ldr	r0, [pc, #52]	; (8001330 <MX_I2C2_Init+0x74>)
 80012fa:	f004 fb35 	bl	8005968 <HAL_I2C_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001304:	f001 f802 	bl	800230c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001308:	2100      	movs	r1, #0
 800130a:	4809      	ldr	r0, [pc, #36]	; (8001330 <MX_I2C2_Init+0x74>)
 800130c:	f004 feae 	bl	800606c <HAL_I2CEx_ConfigAnalogFilter>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001316:	f000 fff9 	bl	800230c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800131a:	2100      	movs	r1, #0
 800131c:	4804      	ldr	r0, [pc, #16]	; (8001330 <MX_I2C2_Init+0x74>)
 800131e:	f004 fef0 	bl	8006102 <HAL_I2CEx_ConfigDigitalFilter>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001328:	f000 fff0 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000314 	.word	0x20000314
 8001334:	40005800 	.word	0x40005800

08001338 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800133c:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <MX_I2C3_Init+0x74>)
 800133e:	4a1c      	ldr	r2, [pc, #112]	; (80013b0 <MX_I2C3_Init+0x78>)
 8001340:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000E14;
 8001342:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <MX_I2C3_Init+0x74>)
 8001344:	f640 6214 	movw	r2, #3604	; 0xe14
 8001348:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800134a:	4b18      	ldr	r3, [pc, #96]	; (80013ac <MX_I2C3_Init+0x74>)
 800134c:	2200      	movs	r2, #0
 800134e:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001350:	4b16      	ldr	r3, [pc, #88]	; (80013ac <MX_I2C3_Init+0x74>)
 8001352:	2201      	movs	r2, #1
 8001354:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001356:	4b15      	ldr	r3, [pc, #84]	; (80013ac <MX_I2C3_Init+0x74>)
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800135c:	4b13      	ldr	r3, [pc, #76]	; (80013ac <MX_I2C3_Init+0x74>)
 800135e:	2200      	movs	r2, #0
 8001360:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001362:	4b12      	ldr	r3, [pc, #72]	; (80013ac <MX_I2C3_Init+0x74>)
 8001364:	2200      	movs	r2, #0
 8001366:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001368:	4b10      	ldr	r3, [pc, #64]	; (80013ac <MX_I2C3_Init+0x74>)
 800136a:	2200      	movs	r2, #0
 800136c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800136e:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <MX_I2C3_Init+0x74>)
 8001370:	2200      	movs	r2, #0
 8001372:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001374:	480d      	ldr	r0, [pc, #52]	; (80013ac <MX_I2C3_Init+0x74>)
 8001376:	f004 faf7 	bl	8005968 <HAL_I2C_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001380:	f000 ffc4 	bl	800230c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001384:	2100      	movs	r1, #0
 8001386:	4809      	ldr	r0, [pc, #36]	; (80013ac <MX_I2C3_Init+0x74>)
 8001388:	f004 fe70 	bl	800606c <HAL_I2CEx_ConfigAnalogFilter>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001392:	f000 ffbb 	bl	800230c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001396:	2100      	movs	r1, #0
 8001398:	4804      	ldr	r0, [pc, #16]	; (80013ac <MX_I2C3_Init+0x74>)
 800139a:	f004 feb2 	bl	8006102 <HAL_I2CEx_ConfigDigitalFilter>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80013a4:	f000 ffb2 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000360 	.word	0x20000360
 80013b0:	46002800 	.word	0x46002800

080013b4 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 80013b8:	4b11      	ldr	r3, [pc, #68]	; (8001400 <MX_OPAMP1_Init+0x4c>)
 80013ba:	4a12      	ldr	r2, [pc, #72]	; (8001404 <MX_OPAMP1_Init+0x50>)
 80013bc:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerSupplyRange = OPAMP_POWERSUPPLY_HIGH;
 80013be:	4b10      	ldr	r3, [pc, #64]	; (8001400 <MX_OPAMP1_Init+0x4c>)
 80013c0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80013c4:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 80013c6:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <MX_OPAMP1_Init+0x4c>)
 80013c8:	2208      	movs	r2, #8
 80013ca:	60da      	str	r2, [r3, #12]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80013cc:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <MX_OPAMP1_Init+0x4c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	615a      	str	r2, [r3, #20]
  hopamp1.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 80013d2:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <MX_OPAMP1_Init+0x4c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALPOWER_NORMALSPEED;
 80013d8:	4b09      	ldr	r3, [pc, #36]	; (8001400 <MX_OPAMP1_Init+0x4c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_4;
 80013de:	4b08      	ldr	r3, [pc, #32]	; (8001400 <MX_OPAMP1_Init+0x4c>)
 80013e0:	2210      	movs	r2, #16
 80013e2:	619a      	str	r2, [r3, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <MX_OPAMP1_Init+0x4c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	61da      	str	r2, [r3, #28]
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 80013ea:	4805      	ldr	r0, [pc, #20]	; (8001400 <MX_OPAMP1_Init+0x4c>)
 80013ec:	f004 fed6 	bl	800619c <HAL_OPAMP_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_OPAMP1_Init+0x46>
  {
    Error_Handler();
 80013f6:	f000 ff89 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200003ac 	.word	0x200003ac
 8001404:	46005000 	.word	0x46005000

08001408 <MX_OPAMP2_Init>:
  * @brief OPAMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP2_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 800140c:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <MX_OPAMP2_Init+0x40>)
 800140e:	4a0f      	ldr	r2, [pc, #60]	; (800144c <MX_OPAMP2_Init+0x44>)
 8001410:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerSupplyRange = OPAMP_POWERSUPPLY_HIGH;
 8001412:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <MX_OPAMP2_Init+0x40>)
 8001414:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001418:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_FOLLOWER_MODE;
 800141a:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <MX_OPAMP2_Init+0x40>)
 800141c:	220c      	movs	r2, #12
 800141e:	60da      	str	r2, [r3, #12]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001420:	4b09      	ldr	r3, [pc, #36]	; (8001448 <MX_OPAMP2_Init+0x40>)
 8001422:	2200      	movs	r2, #0
 8001424:	615a      	str	r2, [r3, #20]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMALPOWER_NORMALSPEED;
 8001426:	4b08      	ldr	r3, [pc, #32]	; (8001448 <MX_OPAMP2_Init+0x40>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <MX_OPAMP2_Init+0x40>)
 800142e:	2200      	movs	r2, #0
 8001430:	61da      	str	r2, [r3, #28]
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8001432:	4805      	ldr	r0, [pc, #20]	; (8001448 <MX_OPAMP2_Init+0x40>)
 8001434:	f004 feb2 	bl	800619c <HAL_OPAMP_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_OPAMP2_Init+0x3a>
  {
    Error_Handler();
 800143e:	f000 ff65 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	200003e0 	.word	0x200003e0
 800144c:	46005010 	.word	0x46005010

08001450 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b088      	sub	sp, #32
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001456:	f107 0310 	add.w	r3, r7, #16
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001464:	1d3b      	adds	r3, r7, #4
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800146e:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <MX_TIM1_Init+0xa0>)
 8001470:	4a20      	ldr	r2, [pc, #128]	; (80014f4 <MX_TIM1_Init+0xa4>)
 8001472:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000;
 8001474:	4b1e      	ldr	r3, [pc, #120]	; (80014f0 <MX_TIM1_Init+0xa0>)
 8001476:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800147a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800147c:	4b1c      	ldr	r3, [pc, #112]	; (80014f0 <MX_TIM1_Init+0xa0>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 32000;
 8001482:	4b1b      	ldr	r3, [pc, #108]	; (80014f0 <MX_TIM1_Init+0xa0>)
 8001484:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001488:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800148a:	4b19      	ldr	r3, [pc, #100]	; (80014f0 <MX_TIM1_Init+0xa0>)
 800148c:	2200      	movs	r2, #0
 800148e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001490:	4b17      	ldr	r3, [pc, #92]	; (80014f0 <MX_TIM1_Init+0xa0>)
 8001492:	2200      	movs	r2, #0
 8001494:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001496:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <MX_TIM1_Init+0xa0>)
 8001498:	2280      	movs	r2, #128	; 0x80
 800149a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800149c:	4814      	ldr	r0, [pc, #80]	; (80014f0 <MX_TIM1_Init+0xa0>)
 800149e:	f008 ff2b 	bl	800a2f8 <HAL_TIM_Base_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80014a8:	f000 ff30 	bl	800230c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014b2:	f107 0310 	add.w	r3, r7, #16
 80014b6:	4619      	mov	r1, r3
 80014b8:	480d      	ldr	r0, [pc, #52]	; (80014f0 <MX_TIM1_Init+0xa0>)
 80014ba:	f009 fa6f 	bl	800a99c <HAL_TIM_ConfigClockSource>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80014c4:	f000 ff22 	bl	800230c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c8:	2300      	movs	r3, #0
 80014ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d0:	2300      	movs	r3, #0
 80014d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	4619      	mov	r1, r3
 80014d8:	4805      	ldr	r0, [pc, #20]	; (80014f0 <MX_TIM1_Init+0xa0>)
 80014da:	f00a fa03 	bl	800b8e4 <HAL_TIMEx_MasterConfigSynchronization>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80014e4:	f000 ff12 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014e8:	bf00      	nop
 80014ea:	3720      	adds	r7, #32
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000414 	.word	0x20000414
 80014f4:	40012c00 	.word	0x40012c00

080014f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b090      	sub	sp, #64	; 0x40
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80014fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
 800150a:	60da      	str	r2, [r3, #12]
 800150c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800150e:	f107 0320 	add.w	r3, r7, #32
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
 8001528:	615a      	str	r2, [r3, #20]
 800152a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800152c:	4b2b      	ldr	r3, [pc, #172]	; (80015dc <MX_TIM2_Init+0xe4>)
 800152e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001532:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001534:	4b29      	ldr	r3, [pc, #164]	; (80015dc <MX_TIM2_Init+0xe4>)
 8001536:	2200      	movs	r2, #0
 8001538:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800153a:	4b28      	ldr	r3, [pc, #160]	; (80015dc <MX_TIM2_Init+0xe4>)
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000000;
 8001540:	4b26      	ldr	r3, [pc, #152]	; (80015dc <MX_TIM2_Init+0xe4>)
 8001542:	4a27      	ldr	r2, [pc, #156]	; (80015e0 <MX_TIM2_Init+0xe8>)
 8001544:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001546:	4b25      	ldr	r3, [pc, #148]	; (80015dc <MX_TIM2_Init+0xe4>)
 8001548:	2200      	movs	r2, #0
 800154a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800154c:	4b23      	ldr	r3, [pc, #140]	; (80015dc <MX_TIM2_Init+0xe4>)
 800154e:	2200      	movs	r2, #0
 8001550:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001552:	4822      	ldr	r0, [pc, #136]	; (80015dc <MX_TIM2_Init+0xe4>)
 8001554:	f008 fed0 	bl	800a2f8 <HAL_TIM_Base_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800155e:	f000 fed5 	bl	800230c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001562:	481e      	ldr	r0, [pc, #120]	; (80015dc <MX_TIM2_Init+0xe4>)
 8001564:	f008 ffc0 	bl	800a4e8 <HAL_TIM_OC_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800156e:	f000 fecd 	bl	800230c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001572:	2306      	movs	r3, #6
 8001574:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001576:	2300      	movs	r3, #0
 8001578:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800157a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800157e:	4619      	mov	r1, r3
 8001580:	4816      	ldr	r0, [pc, #88]	; (80015dc <MX_TIM2_Init+0xe4>)
 8001582:	f009 fb0d 	bl	800aba0 <HAL_TIM_SlaveConfigSynchro>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800158c:	f000 febe 	bl	800230c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001590:	2300      	movs	r3, #0
 8001592:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001594:	2300      	movs	r3, #0
 8001596:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001598:	f107 0320 	add.w	r3, r7, #32
 800159c:	4619      	mov	r1, r3
 800159e:	480f      	ldr	r0, [pc, #60]	; (80015dc <MX_TIM2_Init+0xe4>)
 80015a0:	f00a f9a0 	bl	800b8e4 <HAL_TIMEx_MasterConfigSynchronization>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80015aa:	f000 feaf 	bl	800230c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80015ae:	2300      	movs	r3, #0
 80015b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015ba:	2300      	movs	r3, #0
 80015bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	2200      	movs	r2, #0
 80015c2:	4619      	mov	r1, r3
 80015c4:	4805      	ldr	r0, [pc, #20]	; (80015dc <MX_TIM2_Init+0xe4>)
 80015c6:	f009 f96f 	bl	800a8a8 <HAL_TIM_OC_ConfigChannel>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80015d0:	f000 fe9c 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015d4:	bf00      	nop
 80015d6:	3740      	adds	r7, #64	; 0x40
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000460 	.word	0x20000460
 80015e0:	003d0900 	.word	0x003d0900

080015e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015e8:	4b22      	ldr	r3, [pc, #136]	; (8001674 <MX_USART1_UART_Init+0x90>)
 80015ea:	4a23      	ldr	r2, [pc, #140]	; (8001678 <MX_USART1_UART_Init+0x94>)
 80015ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015ee:	4b21      	ldr	r3, [pc, #132]	; (8001674 <MX_USART1_UART_Init+0x90>)
 80015f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015f6:	4b1f      	ldr	r3, [pc, #124]	; (8001674 <MX_USART1_UART_Init+0x90>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015fc:	4b1d      	ldr	r3, [pc, #116]	; (8001674 <MX_USART1_UART_Init+0x90>)
 80015fe:	2200      	movs	r2, #0
 8001600:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001602:	4b1c      	ldr	r3, [pc, #112]	; (8001674 <MX_USART1_UART_Init+0x90>)
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001608:	4b1a      	ldr	r3, [pc, #104]	; (8001674 <MX_USART1_UART_Init+0x90>)
 800160a:	220c      	movs	r2, #12
 800160c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800160e:	4b19      	ldr	r3, [pc, #100]	; (8001674 <MX_USART1_UART_Init+0x90>)
 8001610:	2200      	movs	r2, #0
 8001612:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001614:	4b17      	ldr	r3, [pc, #92]	; (8001674 <MX_USART1_UART_Init+0x90>)
 8001616:	2200      	movs	r2, #0
 8001618:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800161a:	4b16      	ldr	r3, [pc, #88]	; (8001674 <MX_USART1_UART_Init+0x90>)
 800161c:	2200      	movs	r2, #0
 800161e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001620:	4b14      	ldr	r3, [pc, #80]	; (8001674 <MX_USART1_UART_Init+0x90>)
 8001622:	2200      	movs	r2, #0
 8001624:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001626:	4b13      	ldr	r3, [pc, #76]	; (8001674 <MX_USART1_UART_Init+0x90>)
 8001628:	2200      	movs	r2, #0
 800162a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800162c:	4811      	ldr	r0, [pc, #68]	; (8001674 <MX_USART1_UART_Init+0x90>)
 800162e:	f00a fa61 	bl	800baf4 <HAL_UART_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001638:	f000 fe68 	bl	800230c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800163c:	2100      	movs	r1, #0
 800163e:	480d      	ldr	r0, [pc, #52]	; (8001674 <MX_USART1_UART_Init+0x90>)
 8001640:	f00b fb86 	bl	800cd50 <HAL_UARTEx_SetTxFifoThreshold>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800164a:	f000 fe5f 	bl	800230c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800164e:	2100      	movs	r1, #0
 8001650:	4808      	ldr	r0, [pc, #32]	; (8001674 <MX_USART1_UART_Init+0x90>)
 8001652:	f00b fbbb 	bl	800cdcc <HAL_UARTEx_SetRxFifoThreshold>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800165c:	f000 fe56 	bl	800230c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001660:	4804      	ldr	r0, [pc, #16]	; (8001674 <MX_USART1_UART_Init+0x90>)
 8001662:	f00b fb3c 	bl	800ccde <HAL_UARTEx_DisableFifoMode>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800166c:	f000 fe4e 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}
 8001674:	200004ac 	.word	0x200004ac
 8001678:	40013800 	.word	0x40013800

0800167c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08a      	sub	sp, #40	; 0x28
 8001680:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001682:	f107 0314 	add.w	r3, r7, #20
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]
 800168c:	609a      	str	r2, [r3, #8]
 800168e:	60da      	str	r2, [r3, #12]
 8001690:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001692:	4b6b      	ldr	r3, [pc, #428]	; (8001840 <MX_GPIO_Init+0x1c4>)
 8001694:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001698:	4a69      	ldr	r2, [pc, #420]	; (8001840 <MX_GPIO_Init+0x1c4>)
 800169a:	f043 0310 	orr.w	r3, r3, #16
 800169e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80016a2:	4b67      	ldr	r3, [pc, #412]	; (8001840 <MX_GPIO_Init+0x1c4>)
 80016a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016a8:	f003 0310 	and.w	r3, r3, #16
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b0:	4b63      	ldr	r3, [pc, #396]	; (8001840 <MX_GPIO_Init+0x1c4>)
 80016b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016b6:	4a62      	ldr	r2, [pc, #392]	; (8001840 <MX_GPIO_Init+0x1c4>)
 80016b8:	f043 0304 	orr.w	r3, r3, #4
 80016bc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80016c0:	4b5f      	ldr	r3, [pc, #380]	; (8001840 <MX_GPIO_Init+0x1c4>)
 80016c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016c6:	f003 0304 	and.w	r3, r3, #4
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ce:	4b5c      	ldr	r3, [pc, #368]	; (8001840 <MX_GPIO_Init+0x1c4>)
 80016d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016d4:	4a5a      	ldr	r2, [pc, #360]	; (8001840 <MX_GPIO_Init+0x1c4>)
 80016d6:	f043 0301 	orr.w	r3, r3, #1
 80016da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80016de:	4b58      	ldr	r3, [pc, #352]	; (8001840 <MX_GPIO_Init+0x1c4>)
 80016e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ec:	4b54      	ldr	r3, [pc, #336]	; (8001840 <MX_GPIO_Init+0x1c4>)
 80016ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016f2:	4a53      	ldr	r2, [pc, #332]	; (8001840 <MX_GPIO_Init+0x1c4>)
 80016f4:	f043 0302 	orr.w	r3, r3, #2
 80016f8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80016fc:	4b50      	ldr	r3, [pc, #320]	; (8001840 <MX_GPIO_Init+0x1c4>)
 80016fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800170a:	4b4d      	ldr	r3, [pc, #308]	; (8001840 <MX_GPIO_Init+0x1c4>)
 800170c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001710:	4a4b      	ldr	r2, [pc, #300]	; (8001840 <MX_GPIO_Init+0x1c4>)
 8001712:	f043 0308 	orr.w	r3, r3, #8
 8001716:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800171a:	4b49      	ldr	r3, [pc, #292]	; (8001840 <MX_GPIO_Init+0x1c4>)
 800171c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001720:	f003 0308 	and.w	r3, r3, #8
 8001724:	603b      	str	r3, [r7, #0]
 8001726:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, V02_Pin|EN_Pin|SYS_CONF_0_Pin|A2_MUX_Pin
 8001728:	2200      	movs	r2, #0
 800172a:	f240 31d7 	movw	r1, #983	; 0x3d7
 800172e:	4845      	ldr	r0, [pc, #276]	; (8001844 <MX_GPIO_Init+0x1c8>)
 8001730:	f004 f902 	bl	8005938 <HAL_GPIO_WritePin>
                          |A3_MUX_Pin|A4_MUX_Pin|V04_Pin|V01_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EAN_Pin|V05_Pin|V27_Pin|V28_Pin
 8001734:	2200      	movs	r2, #0
 8001736:	f643 71c1 	movw	r1, #16321	; 0x3fc1
 800173a:	4843      	ldr	r0, [pc, #268]	; (8001848 <MX_GPIO_Init+0x1cc>)
 800173c:	f004 f8fc 	bl	8005938 <HAL_GPIO_WritePin>
                          |V20_Pin|V21_Pin|V16_Pin|V17_Pin
                          |V18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DVS_Pin|V22_Pin|V13_Pin|V14_Pin
 8001740:	2200      	movs	r2, #0
 8001742:	f248 7104 	movw	r1, #34564	; 0x8704
 8001746:	4841      	ldr	r0, [pc, #260]	; (800184c <MX_GPIO_Init+0x1d0>)
 8001748:	f004 f8f6 	bl	8005938 <HAL_GPIO_WritePin>
                          |V15_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A0_MUX_Pin|A1_MUX_Pin|SYS_CONF_4_Pin|RST_Pin
 800174c:	2200      	movs	r2, #0
 800174e:	f249 412e 	movw	r1, #37934	; 0x942e
 8001752:	483f      	ldr	r0, [pc, #252]	; (8001850 <MX_GPIO_Init+0x1d4>)
 8001754:	f004 f8f0 	bl	8005938 <HAL_GPIO_WritePin>
                          |WAKE_UP_Pin|V11_Pin|V03_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SW_BTN_Pin|V30_Pin|V31_Pin|V24_Pin
 8001758:	2200      	movs	r2, #0
 800175a:	f64f 71bf 	movw	r1, #65471	; 0xffbf
 800175e:	483d      	ldr	r0, [pc, #244]	; (8001854 <MX_GPIO_Init+0x1d8>)
 8001760:	f004 f8ea 	bl	8005938 <HAL_GPIO_WritePin>
                          |V19_Pin|V08_Pin|V07_Pin|V10_Pin
                          |V09_Pin|V12_Pin|V06_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : V02_Pin EN_Pin SYS_CONF_0_Pin A2_MUX_Pin
                           A3_MUX_Pin A4_MUX_Pin V04_Pin V01_Pin */
  GPIO_InitStruct.Pin = V02_Pin|EN_Pin|SYS_CONF_0_Pin|A2_MUX_Pin
 8001764:	f240 33d7 	movw	r3, #983	; 0x3d7
 8001768:	617b      	str	r3, [r7, #20]
                          |A3_MUX_Pin|A4_MUX_Pin|V04_Pin|V01_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176a:	2301      	movs	r3, #1
 800176c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001772:	2300      	movs	r3, #0
 8001774:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001776:	f107 0314 	add.w	r3, r7, #20
 800177a:	4619      	mov	r1, r3
 800177c:	4831      	ldr	r0, [pc, #196]	; (8001844 <MX_GPIO_Init+0x1c8>)
 800177e:	f003 ff03 	bl	8005588 <HAL_GPIO_Init>

  /*Configure GPIO pins : EAN_Pin V05_Pin V27_Pin V28_Pin
                           V20_Pin V21_Pin V16_Pin V17_Pin
                           V18_Pin */
  GPIO_InitStruct.Pin = EAN_Pin|V05_Pin|V27_Pin|V28_Pin
 8001782:	f643 73c1 	movw	r3, #16321	; 0x3fc1
 8001786:	617b      	str	r3, [r7, #20]
                          |V20_Pin|V21_Pin|V16_Pin|V17_Pin
                          |V18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001788:	2301      	movs	r3, #1
 800178a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	2300      	movs	r3, #0
 8001792:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	4619      	mov	r1, r3
 800179a:	482b      	ldr	r0, [pc, #172]	; (8001848 <MX_GPIO_Init+0x1cc>)
 800179c:	f003 fef4 	bl	8005588 <HAL_GPIO_Init>

  /*Configure GPIO pins : DVS_Pin V22_Pin V13_Pin V14_Pin
                           V15_Pin */
  GPIO_InitStruct.Pin = DVS_Pin|V22_Pin|V13_Pin|V14_Pin
 80017a0:	f248 7304 	movw	r3, #34564	; 0x8704
 80017a4:	617b      	str	r3, [r7, #20]
                          |V15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a6:	2301      	movs	r3, #1
 80017a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ae:	2300      	movs	r3, #0
 80017b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b2:	f107 0314 	add.w	r3, r7, #20
 80017b6:	4619      	mov	r1, r3
 80017b8:	4824      	ldr	r0, [pc, #144]	; (800184c <MX_GPIO_Init+0x1d0>)
 80017ba:	f003 fee5 	bl	8005588 <HAL_GPIO_Init>

  /*Configure GPIO pins : A0_MUX_Pin A1_MUX_Pin SYS_CONF_4_Pin RST_Pin
                           WAKE_UP_Pin V11_Pin V03_Pin */
  GPIO_InitStruct.Pin = A0_MUX_Pin|A1_MUX_Pin|SYS_CONF_4_Pin|RST_Pin
 80017be:	f249 432e 	movw	r3, #37934	; 0x942e
 80017c2:	617b      	str	r3, [r7, #20]
                          |WAKE_UP_Pin|V11_Pin|V03_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c4:	2301      	movs	r3, #1
 80017c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017cc:	2300      	movs	r3, #0
 80017ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d0:	f107 0314 	add.w	r3, r7, #20
 80017d4:	4619      	mov	r1, r3
 80017d6:	481e      	ldr	r0, [pc, #120]	; (8001850 <MX_GPIO_Init+0x1d4>)
 80017d8:	f003 fed6 	bl	8005588 <HAL_GPIO_Init>

  /*Configure GPIO pins : STIND0_Pin STIND1_Pin */
  GPIO_InitStruct.Pin = STIND0_Pin|STIND1_Pin;
 80017dc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80017e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017ea:	f107 0314 	add.w	r3, r7, #20
 80017ee:	4619      	mov	r1, r3
 80017f0:	4814      	ldr	r0, [pc, #80]	; (8001844 <MX_GPIO_Init+0x1c8>)
 80017f2:	f003 fec9 	bl	8005588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE12 PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 80017f6:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80017fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fc:	2302      	movs	r3, #2
 80017fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001804:	2300      	movs	r3, #0
 8001806:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001808:	2305      	movs	r3, #5
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	4619      	mov	r1, r3
 8001812:	480c      	ldr	r0, [pc, #48]	; (8001844 <MX_GPIO_Init+0x1c8>)
 8001814:	f003 feb8 	bl	8005588 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_BTN_Pin V30_Pin V31_Pin V24_Pin
                           V23_Pin V29_Pin V26_Pin V25_Pin
                           V19_Pin V08_Pin V07_Pin V10_Pin
                           V09_Pin V12_Pin V06_Pin */
  GPIO_InitStruct.Pin = SW_BTN_Pin|V30_Pin|V31_Pin|V24_Pin
 8001818:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 800181c:	617b      	str	r3, [r7, #20]
                          |V23_Pin|V29_Pin|V26_Pin|V25_Pin
                          |V19_Pin|V08_Pin|V07_Pin|V10_Pin
                          |V09_Pin|V12_Pin|V06_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800181e:	2301      	movs	r3, #1
 8001820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001826:	2300      	movs	r3, #0
 8001828:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800182a:	f107 0314 	add.w	r3, r7, #20
 800182e:	4619      	mov	r1, r3
 8001830:	4808      	ldr	r0, [pc, #32]	; (8001854 <MX_GPIO_Init+0x1d8>)
 8001832:	f003 fea9 	bl	8005588 <HAL_GPIO_Init>

}
 8001836:	bf00      	nop
 8001838:	3728      	adds	r7, #40	; 0x28
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	46020c00 	.word	0x46020c00
 8001844:	42021000 	.word	0x42021000
 8001848:	42020800 	.word	0x42020800
 800184c:	42020000 	.word	0x42020000
 8001850:	42020400 	.word	0x42020400
 8001854:	42020c00 	.word	0x42020c00

08001858 <read_all_sensors>:
/*------------- CUSTOM MADE FUNCTIONS -----------------------------------------------------*/
/*-----------------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------------*/


void read_all_sensors(){
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0

  uint32_t old_timeAD, new_timeAD;
  for (int i=0; i<(NUMBER_OF_SENSORS+1); i++)
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	e025      	b.n	80018b0 <read_all_sensors+0x58>
  {

	  // configure mux pins

	  select_mux_pin(i);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	b29b      	uxth	r3, r3
 8001868:	4618      	mov	r0, r3
 800186a:	f000 f97b 	bl	8001b64 <select_mux_pin>


	  old_timeAD = HAL_GetTick();
 800186e:	f001 fa2f 	bl	8002cd0 <HAL_GetTick>
 8001872:	60b8      	str	r0, [r7, #8]

	  //warning Attention au timing


	  do {
	 	  new_timeAD = HAL_GetTick();
 8001874:	f001 fa2c 	bl	8002cd0 <HAL_GetTick>
 8001878:	6078      	str	r0, [r7, #4]
	  }	while ((new_timeAD-old_timeAD) < 10);
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b09      	cmp	r3, #9
 8001882:	d9f7      	bls.n	8001874 <read_all_sensors+0x1c>

	  HAL_ADC_Start(&hadc1); // start the ADC
 8001884:	480e      	ldr	r0, [pc, #56]	; (80018c0 <read_all_sensors+0x68>)
 8001886:	f002 f88b 	bl	80039a0 <HAL_ADC_Start>

	  HAL_ADC_PollForConversion(&hadc1, 1000);  // poll for conversion
 800188a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800188e:	480c      	ldr	r0, [pc, #48]	; (80018c0 <read_all_sensors+0x68>)
 8001890:	f002 f92e 	bl	8003af0 <HAL_ADC_PollForConversion>

	  value_adc[i] = HAL_ADC_GetValue(&hadc1);  // store adc value in value
 8001894:	480a      	ldr	r0, [pc, #40]	; (80018c0 <read_all_sensors+0x68>)
 8001896:	f002 fa11 	bl	8003cbc <HAL_ADC_GetValue>
 800189a:	4602      	mov	r2, r0
 800189c:	4909      	ldr	r1, [pc, #36]	; (80018c4 <read_all_sensors+0x6c>)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	  HAL_ADC_Stop(&hadc1);
 80018a4:	4806      	ldr	r0, [pc, #24]	; (80018c0 <read_all_sensors+0x68>)
 80018a6:	f002 f8ef 	bl	8003a88 <HAL_ADC_Stop>
  for (int i=0; i<(NUMBER_OF_SENSORS+1); i++)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	3301      	adds	r3, #1
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2b1f      	cmp	r3, #31
 80018b4:	ddd6      	ble.n	8001864 <read_all_sensors+0xc>
  }

}
 80018b6:	bf00      	nop
 80018b8:	bf00      	nop
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20000228 	.word	0x20000228
 80018c4:	2000053c 	.word	0x2000053c

080018c8 <create_pressure_map>:

void create_pressure_map(float* map)
{
 80018c8:	b590      	push	{r4, r7, lr}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
	static float analog_vol[NUMBER_OF_SENSORS];
	// calibration curves, slope & bias



	for(i=0; i<NUMBER_OF_SENSORS; i++){
 80018d0:	2300      	movs	r3, #0
 80018d2:	73fb      	strb	r3, [r7, #15]
 80018d4:	e02d      	b.n	8001932 <create_pressure_map+0x6a>
		analog_vol[i] = value_adc[Mes2Sensor[i+1]-1] * 3.3 / 4095.0;
 80018d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018da:	3301      	adds	r3, #1
 80018dc:	4a3e      	ldr	r2, [pc, #248]	; (80019d8 <create_pressure_map+0x110>)
 80018de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018e2:	3b01      	subs	r3, #1
 80018e4:	4a3d      	ldr	r2, [pc, #244]	; (80019dc <create_pressure_map+0x114>)
 80018e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fe0e 	bl	800050c <__aeabi_ui2d>
 80018f0:	a333      	add	r3, pc, #204	; (adr r3, 80019c0 <create_pressure_map+0xf8>)
 80018f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f6:	f7fe fe83 	bl	8000600 <__aeabi_dmul>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	4610      	mov	r0, r2
 8001900:	4619      	mov	r1, r3
 8001902:	a331      	add	r3, pc, #196	; (adr r3, 80019c8 <create_pressure_map+0x100>)
 8001904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001908:	f7fe ffa4 	bl	8000854 <__aeabi_ddiv>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8001914:	4610      	mov	r0, r2
 8001916:	4619      	mov	r1, r3
 8001918:	f7ff f884 	bl	8000a24 <__aeabi_d2f>
 800191c:	4602      	mov	r2, r0
 800191e:	4930      	ldr	r1, [pc, #192]	; (80019e0 <create_pressure_map+0x118>)
 8001920:	00a3      	lsls	r3, r4, #2
 8001922:	440b      	add	r3, r1
 8001924:	601a      	str	r2, [r3, #0]
	for(i=0; i<NUMBER_OF_SENSORS; i++){
 8001926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800192a:	b2db      	uxtb	r3, r3
 800192c:	3301      	adds	r3, #1
 800192e:	b2db      	uxtb	r3, r3
 8001930:	73fb      	strb	r3, [r7, #15]
 8001932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001936:	2b1e      	cmp	r3, #30
 8001938:	ddcd      	ble.n	80018d6 <create_pressure_map+0xe>
	}

	// calculate force according to calibration curves
	for(i=0; i<NUMBER_OF_SENSORS; i++){
 800193a:	2300      	movs	r3, #0
 800193c:	73fb      	strb	r3, [r7, #15]
 800193e:	e036      	b.n	80019ae <create_pressure_map+0xe6>
		map[i] = 0.1*(slope[i+1] * analog_vol[i] + bias[i+1]);
 8001940:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001944:	3301      	adds	r3, #1
 8001946:	4a27      	ldr	r2, [pc, #156]	; (80019e4 <create_pressure_map+0x11c>)
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	ed93 7a00 	vldr	s14, [r3]
 8001950:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001954:	4a22      	ldr	r2, [pc, #136]	; (80019e0 <create_pressure_map+0x118>)
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4413      	add	r3, r2
 800195a:	edd3 7a00 	vldr	s15, [r3]
 800195e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001962:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001966:	3301      	adds	r3, #1
 8001968:	4a1f      	ldr	r2, [pc, #124]	; (80019e8 <create_pressure_map+0x120>)
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4413      	add	r3, r2
 800196e:	edd3 7a00 	vldr	s15, [r3]
 8001972:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001976:	ee17 0a90 	vmov	r0, s15
 800197a:	f7fe fde9 	bl	8000550 <__aeabi_f2d>
 800197e:	a314      	add	r3, pc, #80	; (adr r3, 80019d0 <create_pressure_map+0x108>)
 8001980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001984:	f7fe fe3c 	bl	8000600 <__aeabi_dmul>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	4610      	mov	r0, r2
 800198e:	4619      	mov	r1, r3
 8001990:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	18d4      	adds	r4, r2, r3
 800199a:	f7ff f843 	bl	8000a24 <__aeabi_d2f>
 800199e:	4603      	mov	r3, r0
 80019a0:	6023      	str	r3, [r4, #0]
	for(i=0; i<NUMBER_OF_SENSORS; i++){
 80019a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	3301      	adds	r3, #1
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	73fb      	strb	r3, [r7, #15]
 80019ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b2:	2b1e      	cmp	r3, #30
 80019b4:	ddc4      	ble.n	8001940 <create_pressure_map+0x78>
		//map[i] = analog_vol[i];
	}
}
 80019b6:	bf00      	nop
 80019b8:	bf00      	nop
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd90      	pop	{r4, r7, pc}
 80019c0:	66666666 	.word	0x66666666
 80019c4:	400a6666 	.word	0x400a6666
 80019c8:	00000000 	.word	0x00000000
 80019cc:	40affe00 	.word	0x40affe00
 80019d0:	9999999a 	.word	0x9999999a
 80019d4:	3fb99999 	.word	0x3fb99999
 80019d8:	0800cfc8 	.word	0x0800cfc8
 80019dc:	2000053c 	.word	0x2000053c
 80019e0:	200007f4 	.word	0x200007f4
 80019e4:	20000180 	.word	0x20000180
 80019e8:	20000104 	.word	0x20000104

080019ec <send_to_uart>:
	HAL_UART_Transmit_IT(&huart4, (uint8_t*) tmp, 3);
	*/
//}

void send_to_uart(float *pres_map)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
    //uint8_t buffer[sizeof(float)*NUMBER_OF_SENSORS];
	uint8_t i;
	static float tmp[NUMBER_OF_SENSORS+2];
	tmp[0] = START_BIT;
 80019f4:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <send_to_uart+0x50>)
 80019f6:	4a12      	ldr	r2, [pc, #72]	; (8001a40 <send_to_uart+0x54>)
 80019f8:	601a      	str	r2, [r3, #0]
	for (i=0;i<NUMBER_OF_SENSORS;i++) tmp[i+1] = pres_map[i];
 80019fa:	2300      	movs	r3, #0
 80019fc:	73fb      	strb	r3, [r7, #15]
 80019fe:	e00d      	b.n	8001a1c <send_to_uart+0x30>
 8001a00:	7bfb      	ldrb	r3, [r7, #15]
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	441a      	add	r2, r3
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	6812      	ldr	r2, [r2, #0]
 8001a0e:	490b      	ldr	r1, [pc, #44]	; (8001a3c <send_to_uart+0x50>)
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	440b      	add	r3, r1
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	73fb      	strb	r3, [r7, #15]
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
 8001a1e:	2b1e      	cmp	r3, #30
 8001a20:	d9ee      	bls.n	8001a00 <send_to_uart+0x14>
	//for (i=0;i<5;i++) tmp[i+NUMBER_OF_SENSORS+1] = data_written_spi[i];
	tmp[NUMBER_OF_SENSORS+1] = STOP_BIT;
 8001a22:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <send_to_uart+0x50>)
 8001a24:	4a07      	ldr	r2, [pc, #28]	; (8001a44 <send_to_uart+0x58>)
 8001a26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    HAL_UART_Transmit_IT(&huart1, (uint8_t*) tmp, sizeof(float)*(NUMBER_OF_SENSORS+2));
 8001a2a:	2284      	movs	r2, #132	; 0x84
 8001a2c:	4903      	ldr	r1, [pc, #12]	; (8001a3c <send_to_uart+0x50>)
 8001a2e:	4806      	ldr	r0, [pc, #24]	; (8001a48 <send_to_uart+0x5c>)
 8001a30:	f00a f8b0 	bl	800bb94 <HAL_UART_Transmit_IT>
//	HAL_UART_Transmit_IT(&huart4, (uint8_t*) tmp, 10);
}
 8001a34:	bf00      	nop
 8001a36:	3710      	adds	r7, #16
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20000870 	.word	0x20000870
 8001a40:	4673fc00 	.word	0x4673fc00
 8001a44:	46755000 	.word	0x46755000
 8001a48:	200004ac 	.word	0x200004ac

08001a4c <read_uart>:

void read_uart(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
	static uint8_t uart_rx_state = 0; //machine d'état pour la réception des commandes
	static uint8_t num = 0; //number of the actuator to be set, cleared
	static char action = 0;

	char last_char;
	if (huart1.hdmarx!=NULL) {
 8001a52:	4b3c      	ldr	r3, [pc, #240]	; (8001b44 <read_uart+0xf8>)
 8001a54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d067      	beq.n	8001b2a <read_uart+0xde>
		uint16_t usart1_dma_ndtr;
		usart1_dma_ndtr = huart1.hdmarx->Instance->CBR1;
 8001a5a:	4b3a      	ldr	r3, [pc, #232]	; (8001b44 <read_uart+0xf8>)
 8001a5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a62:	80fb      	strh	r3, [r7, #6]
		sbuf_write += ((usart1_dma_ndtr_old - usart1_dma_ndtr) & UART_RX_IDX_MAX);
 8001a64:	4b38      	ldr	r3, [pc, #224]	; (8001b48 <read_uart+0xfc>)
 8001a66:	881a      	ldrh	r2, [r3, #0]
 8001a68:	88fb      	ldrh	r3, [r7, #6]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	4b35      	ldr	r3, [pc, #212]	; (8001b4c <read_uart+0x100>)
 8001a76:	881b      	ldrh	r3, [r3, #0]
 8001a78:	4413      	add	r3, r2
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	4b33      	ldr	r3, [pc, #204]	; (8001b4c <read_uart+0x100>)
 8001a7e:	801a      	strh	r2, [r3, #0]
		usart1_dma_ndtr_old = usart1_dma_ndtr;
 8001a80:	4a31      	ldr	r2, [pc, #196]	; (8001b48 <read_uart+0xfc>)
 8001a82:	88fb      	ldrh	r3, [r7, #6]
 8001a84:	8013      	strh	r3, [r2, #0]
	}
	while ((uint16_t)(sbuf_write - sbuf_read) > 0){
 8001a86:	e050      	b.n	8001b2a <read_uart+0xde>
		last_char = uart_rx_buf[sbuf_read & UART_RX_IDX_MAX];
 8001a88:	4b31      	ldr	r3, [pc, #196]	; (8001b50 <read_uart+0x104>)
 8001a8a:	881b      	ldrh	r3, [r3, #0]
 8001a8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a90:	4a30      	ldr	r2, [pc, #192]	; (8001b54 <read_uart+0x108>)
 8001a92:	5cd3      	ldrb	r3, [r2, r3]
 8001a94:	717b      	strb	r3, [r7, #5]
		sbuf_read++;
 8001a96:	4b2e      	ldr	r3, [pc, #184]	; (8001b50 <read_uart+0x104>)
 8001a98:	881b      	ldrh	r3, [r3, #0]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	4b2c      	ldr	r3, [pc, #176]	; (8001b50 <read_uart+0x104>)
 8001aa0:	801a      	strh	r2, [r3, #0]
		switch (uart_rx_state) {
 8001aa2:	4b2d      	ldr	r3, [pc, #180]	; (8001b58 <read_uart+0x10c>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d002      	beq.n	8001ab0 <read_uart+0x64>
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d013      	beq.n	8001ad6 <read_uart+0x8a>
 8001aae:	e03c      	b.n	8001b2a <read_uart+0xde>
			case 0:
				//synchronisation
				if ((last_char == 'S')||(last_char == 'C')) {
 8001ab0:	797b      	ldrb	r3, [r7, #5]
 8001ab2:	2b53      	cmp	r3, #83	; 0x53
 8001ab4:	d002      	beq.n	8001abc <read_uart+0x70>
 8001ab6:	797b      	ldrb	r3, [r7, #5]
 8001ab8:	2b43      	cmp	r3, #67	; 0x43
 8001aba:	d136      	bne.n	8001b2a <read_uart+0xde>
					uart_rx_state++;
 8001abc:	4b26      	ldr	r3, [pc, #152]	; (8001b58 <read_uart+0x10c>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	b2da      	uxtb	r2, r3
 8001ac4:	4b24      	ldr	r3, [pc, #144]	; (8001b58 <read_uart+0x10c>)
 8001ac6:	701a      	strb	r2, [r3, #0]
					num = 0;
 8001ac8:	4b24      	ldr	r3, [pc, #144]	; (8001b5c <read_uart+0x110>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	701a      	strb	r2, [r3, #0]
					action = last_char;
 8001ace:	4a24      	ldr	r2, [pc, #144]	; (8001b60 <read_uart+0x114>)
 8001ad0:	797b      	ldrb	r3, [r7, #5]
 8001ad2:	7013      	strb	r3, [r2, #0]
				}
				break;
 8001ad4:	e029      	b.n	8001b2a <read_uart+0xde>
			case 1:
				//lecture de la data
				if ((last_char == '\n')||(last_char == '\r')) {
 8001ad6:	797b      	ldrb	r3, [r7, #5]
 8001ad8:	2b0a      	cmp	r3, #10
 8001ada:	d002      	beq.n	8001ae2 <read_uart+0x96>
 8001adc:	797b      	ldrb	r3, [r7, #5]
 8001ade:	2b0d      	cmp	r3, #13
 8001ae0:	d10a      	bne.n	8001af8 <read_uart+0xac>
					switch (action) {
 8001ae2:	4b1f      	ldr	r3, [pc, #124]	; (8001b60 <read_uart+0x114>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b43      	cmp	r3, #67	; 0x43
 8001ae8:	d001      	beq.n	8001aee <read_uart+0xa2>
 8001aea:	2b53      	cmp	r3, #83	; 0x53
 8001aec:	e000      	b.n	8001af0 <read_uart+0xa4>
						case 'S':
							//set_valve(num);
							break;
						case 'C':
							//clear_valve(num);
							break;
 8001aee:	bf00      	nop
					}
					uart_rx_state = 0;
 8001af0:	4b19      	ldr	r3, [pc, #100]	; (8001b58 <read_uart+0x10c>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	701a      	strb	r2, [r3, #0]
 8001af6:	e017      	b.n	8001b28 <read_uart+0xdc>
				} else {
					//si on a un mauvais caractère, il faut revenir à l'état de sync
					if ((last_char < '0') || (last_char > '9')) {
 8001af8:	797b      	ldrb	r3, [r7, #5]
 8001afa:	2b2f      	cmp	r3, #47	; 0x2f
 8001afc:	d902      	bls.n	8001b04 <read_uart+0xb8>
 8001afe:	797b      	ldrb	r3, [r7, #5]
 8001b00:	2b39      	cmp	r3, #57	; 0x39
 8001b02:	d903      	bls.n	8001b0c <read_uart+0xc0>
						uart_rx_state = 0;
 8001b04:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <read_uart+0x10c>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	701a      	strb	r2, [r3, #0]
 8001b0a:	e00d      	b.n	8001b28 <read_uart+0xdc>
					} else {
						num = num * 10 + last_char - '0';
 8001b0c:	4b13      	ldr	r3, [pc, #76]	; (8001b5c <read_uart+0x110>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	461a      	mov	r2, r3
 8001b12:	0092      	lsls	r2, r2, #2
 8001b14:	4413      	add	r3, r2
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	797b      	ldrb	r3, [r7, #5]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	3b30      	subs	r3, #48	; 0x30
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	4b0d      	ldr	r3, [pc, #52]	; (8001b5c <read_uart+0x110>)
 8001b26:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 8001b28:	bf00      	nop
	while ((uint16_t)(sbuf_write - sbuf_read) > 0){
 8001b2a:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <read_uart+0x100>)
 8001b2c:	881a      	ldrh	r2, [r3, #0]
 8001b2e:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <read_uart+0x104>)
 8001b30:	881b      	ldrh	r3, [r3, #0]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d1a8      	bne.n	8001a88 <read_uart+0x3c>
		}
	}
}
 8001b36:	bf00      	nop
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	200004ac 	.word	0x200004ac
 8001b48:	200001fc 	.word	0x200001fc
 8001b4c:	200008f4 	.word	0x200008f4
 8001b50:	200008f6 	.word	0x200008f6
 8001b54:	200005bc 	.word	0x200005bc
 8001b58:	200008f8 	.word	0x200008f8
 8001b5c:	200008f9 	.word	0x200008f9
 8001b60:	200008fa 	.word	0x200008fa

08001b64 <select_mux_pin>:


void select_mux_pin(uint16_t pin)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	80fb      	strh	r3, [r7, #6]

	  for (int j=0; j<5; j++)
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	e01f      	b.n	8001bb4 <select_mux_pin+0x50>
	  {
		if (pin & (1<<j))
 8001b74:	88fa      	ldrh	r2, [r7, #6]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	fa42 f303 	asr.w	r3, r2, r3
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d00a      	beq.n	8001b9a <select_mux_pin+0x36>
		  HAL_GPIO_WritePin(GPIOE, select_pins_MUX[j], GPIO_PIN_SET);
 8001b84:	4a0f      	ldr	r2, [pc, #60]	; (8001bc4 <select_mux_pin+0x60>)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	2201      	movs	r2, #1
 8001b90:	4619      	mov	r1, r3
 8001b92:	480d      	ldr	r0, [pc, #52]	; (8001bc8 <select_mux_pin+0x64>)
 8001b94:	f003 fed0 	bl	8005938 <HAL_GPIO_WritePin>
 8001b98:	e009      	b.n	8001bae <select_mux_pin+0x4a>
		else
		  HAL_GPIO_WritePin(GPIOE, select_pins_MUX[j], GPIO_PIN_RESET);
 8001b9a:	4a0a      	ldr	r2, [pc, #40]	; (8001bc4 <select_mux_pin+0x60>)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4807      	ldr	r0, [pc, #28]	; (8001bc8 <select_mux_pin+0x64>)
 8001baa:	f003 fec5 	bl	8005938 <HAL_GPIO_WritePin>
	  for (int j=0; j<5; j++)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	dddc      	ble.n	8001b74 <select_mux_pin+0x10>
	  }

}
 8001bba:	bf00      	nop
 8001bbc:	bf00      	nop
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	0800cf74 	.word	0x0800cf74
 8001bc8:	42021000 	.word	0x42021000

08001bcc <configure_MAX77874_buck_conv>:


/*---------------- Configure MAX77874 Buck Converter --------------------------------------*/

void    configure_MAX77874_buck_conv()
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af02      	add	r7, sp, #8

	  uint8_t i2c_data[2];

	  HAL_GPIO_WritePin(GPIOA, DVS_Pin, GPIO_PIN_RESET); // Set Dynamic Voltage Selection DVS to LOW
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2104      	movs	r1, #4
 8001bd6:	4827      	ldr	r0, [pc, #156]	; (8001c74 <configure_MAX77874_buck_conv+0xa8>)
 8001bd8:	f003 feae 	bl	8005938 <HAL_GPIO_WritePin>

	  i2c_data[0] = 0x11;          // BUCK0CNFG1 address
 8001bdc:	2311      	movs	r3, #17
 8001bde:	713b      	strb	r3, [r7, #4]
	  i2c_data[1] = 0b11000010;    // 8bit data, 40mV/usec ramp rate
 8001be0:	23c2      	movs	r3, #194	; 0xc2
 8001be2:	717b      	strb	r3, [r7, #5]

	  HAL_I2C_Master_Transmit(&hi2c1, MAX77874_BUCK_CONV_WRITE_ADDRESS, i2c_data, 2, 100); // Enable warm startup ramp rate
 8001be4:	1d3a      	adds	r2, r7, #4
 8001be6:	2364      	movs	r3, #100	; 0x64
 8001be8:	9300      	str	r3, [sp, #0]
 8001bea:	2302      	movs	r3, #2
 8001bec:	21c2      	movs	r1, #194	; 0xc2
 8001bee:	4822      	ldr	r0, [pc, #136]	; (8001c78 <configure_MAX77874_buck_conv+0xac>)
 8001bf0:	f003 ff4a 	bl	8005a88 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Transmit(&hi2c2, MAX77874_BUCK_CONV_WRITE_ADDRESS, i2c_data, 2, 100); // Enable warm startup ramp rate
 8001bf4:	1d3a      	adds	r2, r7, #4
 8001bf6:	2364      	movs	r3, #100	; 0x64
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	21c2      	movs	r1, #194	; 0xc2
 8001bfe:	481f      	ldr	r0, [pc, #124]	; (8001c7c <configure_MAX77874_buck_conv+0xb0>)
 8001c00:	f003 ff42 	bl	8005a88 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Transmit(&hi2c3, MAX77874_BUCK_CONV_WRITE_ADDRESS, i2c_data, 2, 100); // Enable warm startup ramp rate
 8001c04:	1d3a      	adds	r2, r7, #4
 8001c06:	2364      	movs	r3, #100	; 0x64
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	21c2      	movs	r1, #194	; 0xc2
 8001c0e:	481c      	ldr	r0, [pc, #112]	; (8001c80 <configure_MAX77874_buck_conv+0xb4>)
 8001c10:	f003 ff3a 	bl	8005a88 <HAL_I2C_Master_Transmit>

	  HAL_Delay(500);
 8001c14:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c18:	f001 f866 	bl	8002ce8 <HAL_Delay>

	  i2c_data[0] = 0x21;          // I2C_SDO_VOUT address
 8001c1c:	2321      	movs	r3, #33	; 0x21
 8001c1e:	713b      	strb	r3, [r7, #4]
	  i2c_data[1] = 70;            // Vout = 0.25V + 5mV*i2c_data[1]
 8001c20:	2346      	movs	r3, #70	; 0x46
 8001c22:	717b      	strb	r3, [r7, #5]

	  HAL_I2C_Master_Transmit(&hi2c1, MAX77874_BUCK_CONV_WRITE_ADDRESS, i2c_data, 2, 100); // Select Output Voltage
 8001c24:	1d3a      	adds	r2, r7, #4
 8001c26:	2364      	movs	r3, #100	; 0x64
 8001c28:	9300      	str	r3, [sp, #0]
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	21c2      	movs	r1, #194	; 0xc2
 8001c2e:	4812      	ldr	r0, [pc, #72]	; (8001c78 <configure_MAX77874_buck_conv+0xac>)
 8001c30:	f003 ff2a 	bl	8005a88 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Transmit(&hi2c2, MAX77874_BUCK_CONV_WRITE_ADDRESS, i2c_data, 2, 100); // Select Output Voltage
 8001c34:	1d3a      	adds	r2, r7, #4
 8001c36:	2364      	movs	r3, #100	; 0x64
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	21c2      	movs	r1, #194	; 0xc2
 8001c3e:	480f      	ldr	r0, [pc, #60]	; (8001c7c <configure_MAX77874_buck_conv+0xb0>)
 8001c40:	f003 ff22 	bl	8005a88 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Transmit(&hi2c3, MAX77874_BUCK_CONV_WRITE_ADDRESS, i2c_data, 2, 100); // Select Output Voltage
 8001c44:	1d3a      	adds	r2, r7, #4
 8001c46:	2364      	movs	r3, #100	; 0x64
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	21c2      	movs	r1, #194	; 0xc2
 8001c4e:	480c      	ldr	r0, [pc, #48]	; (8001c80 <configure_MAX77874_buck_conv+0xb4>)
 8001c50:	f003 ff1a 	bl	8005a88 <HAL_I2C_Master_Transmit>

	  HAL_Delay(500);
 8001c54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c58:	f001 f846 	bl	8002ce8 <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOE, EN_Pin, GPIO_PIN_SET); // Enable converter. Set Pin EN to HIGH
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	2110      	movs	r1, #16
 8001c60:	4808      	ldr	r0, [pc, #32]	; (8001c84 <configure_MAX77874_buck_conv+0xb8>)
 8001c62:	f003 fe69 	bl	8005938 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 8001c66:	2001      	movs	r0, #1
 8001c68:	f001 f83e 	bl	8002ce8 <HAL_Delay>

}
 8001c6c:	bf00      	nop
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	42020000 	.word	0x42020000
 8001c78:	200002c8 	.word	0x200002c8
 8001c7c:	20000314 	.word	0x20000314
 8001c80:	20000360 	.word	0x20000360
 8001c84:	42021000 	.word	0x42021000

08001c88 <find_high_pressure_spots>:



void find_high_pressure_spots()
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0

	float temp = 0;
 8001c8e:	f04f 0300 	mov.w	r3, #0
 8001c92:	603b      	str	r3, [r7, #0]

	// find two highest pressure spots
	max_1 = average_pressure_map[0];
 8001c94:	4b3c      	ldr	r3, [pc, #240]	; (8001d88 <find_high_pressure_spots+0x100>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a3c      	ldr	r2, [pc, #240]	; (8001d8c <find_high_pressure_spots+0x104>)
 8001c9a:	6013      	str	r3, [r2, #0]
	max_2 = average_pressure_map[1];
 8001c9c:	4b3a      	ldr	r3, [pc, #232]	; (8001d88 <find_high_pressure_spots+0x100>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	4a3b      	ldr	r2, [pc, #236]	; (8001d90 <find_high_pressure_spots+0x108>)
 8001ca2:	6013      	str	r3, [r2, #0]

	index_max_1 = 0;
 8001ca4:	4b3b      	ldr	r3, [pc, #236]	; (8001d94 <find_high_pressure_spots+0x10c>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
	index_max_2 = 1;
 8001caa:	4b3b      	ldr	r3, [pc, #236]	; (8001d98 <find_high_pressure_spots+0x110>)
 8001cac:	2201      	movs	r2, #1
 8001cae:	601a      	str	r2, [r3, #0]

	if(max_1 < max_2){
 8001cb0:	4b36      	ldr	r3, [pc, #216]	; (8001d8c <find_high_pressure_spots+0x104>)
 8001cb2:	ed93 7a00 	vldr	s14, [r3]
 8001cb6:	4b36      	ldr	r3, [pc, #216]	; (8001d90 <find_high_pressure_spots+0x108>)
 8001cb8:	edd3 7a00 	vldr	s15, [r3]
 8001cbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc4:	d509      	bpl.n	8001cda <find_high_pressure_spots+0x52>
		temp = max_1;
 8001cc6:	4b31      	ldr	r3, [pc, #196]	; (8001d8c <find_high_pressure_spots+0x104>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	603b      	str	r3, [r7, #0]
		max_1 = max_2;
 8001ccc:	4b30      	ldr	r3, [pc, #192]	; (8001d90 <find_high_pressure_spots+0x108>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a2e      	ldr	r2, [pc, #184]	; (8001d8c <find_high_pressure_spots+0x104>)
 8001cd2:	6013      	str	r3, [r2, #0]
		max_2 = temp;
 8001cd4:	4a2e      	ldr	r2, [pc, #184]	; (8001d90 <find_high_pressure_spots+0x108>)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	6013      	str	r3, [r2, #0]
	}

	for(int i=2; i<NUMBER_OF_SENSORS; i++){
 8001cda:	2302      	movs	r3, #2
 8001cdc:	607b      	str	r3, [r7, #4]
 8001cde:	e049      	b.n	8001d74 <find_high_pressure_spots+0xec>
		if(average_pressure_map[i] > max_1){
 8001ce0:	4a29      	ldr	r2, [pc, #164]	; (8001d88 <find_high_pressure_spots+0x100>)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4413      	add	r3, r2
 8001ce8:	ed93 7a00 	vldr	s14, [r3]
 8001cec:	4b27      	ldr	r3, [pc, #156]	; (8001d8c <find_high_pressure_spots+0x104>)
 8001cee:	edd3 7a00 	vldr	s15, [r3]
 8001cf2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cfa:	dd12      	ble.n	8001d22 <find_high_pressure_spots+0x9a>
			max_2 = max_1;
 8001cfc:	4b23      	ldr	r3, [pc, #140]	; (8001d8c <find_high_pressure_spots+0x104>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a23      	ldr	r2, [pc, #140]	; (8001d90 <find_high_pressure_spots+0x108>)
 8001d02:	6013      	str	r3, [r2, #0]
			max_1 = average_pressure_map[i];
 8001d04:	4a20      	ldr	r2, [pc, #128]	; (8001d88 <find_high_pressure_spots+0x100>)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4413      	add	r3, r2
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a1f      	ldr	r2, [pc, #124]	; (8001d8c <find_high_pressure_spots+0x104>)
 8001d10:	6013      	str	r3, [r2, #0]
			index_max_2 = index_max_1;
 8001d12:	4b20      	ldr	r3, [pc, #128]	; (8001d94 <find_high_pressure_spots+0x10c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a20      	ldr	r2, [pc, #128]	; (8001d98 <find_high_pressure_spots+0x110>)
 8001d18:	6013      	str	r3, [r2, #0]
			index_max_1 = i;
 8001d1a:	4a1e      	ldr	r2, [pc, #120]	; (8001d94 <find_high_pressure_spots+0x10c>)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6013      	str	r3, [r2, #0]
 8001d20:	e025      	b.n	8001d6e <find_high_pressure_spots+0xe6>
		}
		else if(average_pressure_map[i]> max_2 && average_pressure_map[i] != max_1){
 8001d22:	4a19      	ldr	r2, [pc, #100]	; (8001d88 <find_high_pressure_spots+0x100>)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	ed93 7a00 	vldr	s14, [r3]
 8001d2e:	4b18      	ldr	r3, [pc, #96]	; (8001d90 <find_high_pressure_spots+0x108>)
 8001d30:	edd3 7a00 	vldr	s15, [r3]
 8001d34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d3c:	dd17      	ble.n	8001d6e <find_high_pressure_spots+0xe6>
 8001d3e:	4a12      	ldr	r2, [pc, #72]	; (8001d88 <find_high_pressure_spots+0x100>)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	ed93 7a00 	vldr	s14, [r3]
 8001d4a:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <find_high_pressure_spots+0x104>)
 8001d4c:	edd3 7a00 	vldr	s15, [r3]
 8001d50:	eeb4 7a67 	vcmp.f32	s14, s15
 8001d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d58:	d009      	beq.n	8001d6e <find_high_pressure_spots+0xe6>
			max_2 = average_pressure_map[i];
 8001d5a:	4a0b      	ldr	r2, [pc, #44]	; (8001d88 <find_high_pressure_spots+0x100>)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4413      	add	r3, r2
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a0a      	ldr	r2, [pc, #40]	; (8001d90 <find_high_pressure_spots+0x108>)
 8001d66:	6013      	str	r3, [r2, #0]
			index_max_2 = i;
 8001d68:	4a0b      	ldr	r2, [pc, #44]	; (8001d98 <find_high_pressure_spots+0x110>)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6013      	str	r3, [r2, #0]
	for(int i=2; i<NUMBER_OF_SENSORS; i++){
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	3301      	adds	r3, #1
 8001d72:	607b      	str	r3, [r7, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b1e      	cmp	r3, #30
 8001d78:	ddb2      	ble.n	8001ce0 <find_high_pressure_spots+0x58>
		}
	}

}
 8001d7a:	bf00      	nop
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	200006bc 	.word	0x200006bc
 8001d8c:	200007d4 	.word	0x200007d4
 8001d90:	200007d8 	.word	0x200007d8
 8001d94:	200007e0 	.word	0x200007e0
 8001d98:	200007e4 	.word	0x200007e4

08001d9c <control_valves>:

void control_valves(int m, int n){
 8001d9c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001da0:	b0a2      	sub	sp, #136	; 0x88
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	64f8      	str	r0, [r7, #76]	; 0x4c
 8001da6:	64b9      	str	r1, [r7, #72]	; 0x48

	int   flag           = 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	int   array_index[4] = {};
 8001dae:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001db2:	2300      	movs	r3, #0
 8001db4:	6013      	str	r3, [r2, #0]
 8001db6:	6053      	str	r3, [r2, #4]
 8001db8:	6093      	str	r3, [r2, #8]
 8001dba:	60d3      	str	r3, [r2, #12]
	float array[4];
	float a              = 0;
 8001dbc:	f04f 0300 	mov.w	r3, #0
 8001dc0:	677b      	str	r3, [r7, #116]	; 0x74
	int   b              = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	673b      	str	r3, [r7, #112]	; 0x70

    // Are there any modules already OFF??
	if(counter_modules_off == 0){ //NO, turn off the two highest PP modules
 8001dc6:	4b5e      	ldr	r3, [pc, #376]	; (8001f40 <control_valves+0x1a4>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d160      	bne.n	8001e90 <control_valves+0xf4>
		modules_state[m] = 0;
 8001dce:	4a5d      	ldr	r2, [pc, #372]	; (8001f44 <control_valves+0x1a8>)
 8001dd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dd2:	441a      	add	r2, r3
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	7013      	strb	r3, [r2, #0]
		modules_state[n] = 0;
 8001dd8:	4a5a      	ldr	r2, [pc, #360]	; (8001f44 <control_valves+0x1a8>)
 8001dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ddc:	441a      	add	r2, r3
 8001dde:	2300      	movs	r3, #0
 8001de0:	7013      	strb	r3, [r2, #0]

		// set modules state on 64bit UL to zero
		modules_state_uint &= ~(1ULL << m);
 8001de2:	f04f 0201 	mov.w	r2, #1
 8001de6:	f04f 0300 	mov.w	r3, #0
 8001dea:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8001dec:	f1a4 0120 	sub.w	r1, r4, #32
 8001df0:	f1c4 0020 	rsb	r0, r4, #32
 8001df4:	fa03 f904 	lsl.w	r9, r3, r4
 8001df8:	fa02 f101 	lsl.w	r1, r2, r1
 8001dfc:	ea49 0901 	orr.w	r9, r9, r1
 8001e00:	fa22 f000 	lsr.w	r0, r2, r0
 8001e04:	ea49 0900 	orr.w	r9, r9, r0
 8001e08:	fa02 f804 	lsl.w	r8, r2, r4
 8001e0c:	ea6f 0308 	mvn.w	r3, r8
 8001e10:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e12:	ea6f 0309 	mvn.w	r3, r9
 8001e16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e18:	4b4b      	ldr	r3, [pc, #300]	; (8001f48 <control_valves+0x1ac>)
 8001e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1e:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001e22:	4641      	mov	r1, r8
 8001e24:	4011      	ands	r1, r2
 8001e26:	6339      	str	r1, [r7, #48]	; 0x30
 8001e28:	4649      	mov	r1, r9
 8001e2a:	4019      	ands	r1, r3
 8001e2c:	6379      	str	r1, [r7, #52]	; 0x34
 8001e2e:	4b46      	ldr	r3, [pc, #280]	; (8001f48 <control_valves+0x1ac>)
 8001e30:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8001e34:	e9c3 1200 	strd	r1, r2, [r3]
		modules_state_uint &= ~(1ULL << n);
 8001e38:	f04f 0201 	mov.w	r2, #1
 8001e3c:	f04f 0300 	mov.w	r3, #0
 8001e40:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8001e42:	f1a4 0120 	sub.w	r1, r4, #32
 8001e46:	f1c4 0020 	rsb	r0, r4, #32
 8001e4a:	fa03 fb04 	lsl.w	fp, r3, r4
 8001e4e:	fa02 f101 	lsl.w	r1, r2, r1
 8001e52:	ea4b 0b01 	orr.w	fp, fp, r1
 8001e56:	fa22 f000 	lsr.w	r0, r2, r0
 8001e5a:	ea4b 0b00 	orr.w	fp, fp, r0
 8001e5e:	fa02 fa04 	lsl.w	sl, r2, r4
 8001e62:	ea6f 030a 	mvn.w	r3, sl
 8001e66:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e68:	ea6f 030b 	mvn.w	r3, fp
 8001e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e6e:	4b36      	ldr	r3, [pc, #216]	; (8001f48 <control_valves+0x1ac>)
 8001e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e74:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001e78:	4641      	mov	r1, r8
 8001e7a:	4011      	ands	r1, r2
 8001e7c:	6239      	str	r1, [r7, #32]
 8001e7e:	4649      	mov	r1, r9
 8001e80:	4019      	ands	r1, r3
 8001e82:	6279      	str	r1, [r7, #36]	; 0x24
 8001e84:	4b30      	ldr	r3, [pc, #192]	; (8001f48 <control_valves+0x1ac>)
 8001e86:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001e8a:	e9c3 1200 	strd	r1, r2, [r3]
 8001e8e:	e02c      	b.n	8001eea <control_valves+0x14e>
	}
	else if(counter_modules_off == 2){ // YES, find their indexes
 8001e90:	4b2b      	ldr	r3, [pc, #172]	; (8001f40 <control_valves+0x1a4>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d128      	bne.n	8001eea <control_valves+0x14e>
		for(int j; j<NUMBER_OF_SENSORS; j++){
 8001e98:	e023      	b.n	8001ee2 <control_valves+0x146>
			if(modules_state[j] == 0){
 8001e9a:	4a2a      	ldr	r2, [pc, #168]	; (8001f44 <control_valves+0x1a8>)
 8001e9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ea0:	4413      	add	r3, r2
 8001ea2:	f993 3000 	ldrsb.w	r3, [r3]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d116      	bne.n	8001ed8 <control_valves+0x13c>
				if(flag == 0){
 8001eaa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d107      	bne.n	8001ec2 <control_valves+0x126>
					flag = 1;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
					index_max_1_previous = j;
 8001eb8:	4a24      	ldr	r2, [pc, #144]	; (8001f4c <control_valves+0x1b0>)
 8001eba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ebe:	6013      	str	r3, [r2, #0]
 8001ec0:	e00a      	b.n	8001ed8 <control_valves+0x13c>

				}
				else if(flag == 1){
 8001ec2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d106      	bne.n	8001ed8 <control_valves+0x13c>
					flag = 2;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
					index_max_2_previous = j;
 8001ed0:	4a1f      	ldr	r2, [pc, #124]	; (8001f50 <control_valves+0x1b4>)
 8001ed2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ed6:	6013      	str	r3, [r2, #0]
		for(int j; j<NUMBER_OF_SENSORS; j++){
 8001ed8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001edc:	3301      	adds	r3, #1
 8001ede:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001ee2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ee6:	2b1e      	cmp	r3, #30
 8001ee8:	ddd7      	ble.n	8001e9a <control_valves+0xfe>
			}
		}
	}

	// array includes the two previous and two current high PP spots
	array[0] = previous_pressure_map[index_max_1_previous];
 8001eea:	4b18      	ldr	r3, [pc, #96]	; (8001f4c <control_valves+0x1b0>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a19      	ldr	r2, [pc, #100]	; (8001f54 <control_valves+0x1b8>)
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	653b      	str	r3, [r7, #80]	; 0x50
	array[1] = previous_pressure_map[index_max_2_previous];
 8001ef8:	4b15      	ldr	r3, [pc, #84]	; (8001f50 <control_valves+0x1b4>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a15      	ldr	r2, [pc, #84]	; (8001f54 <control_valves+0x1b8>)
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	657b      	str	r3, [r7, #84]	; 0x54
	array[2] = average_pressure_map[m];
 8001f06:	4a14      	ldr	r2, [pc, #80]	; (8001f58 <control_valves+0x1bc>)
 8001f08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4413      	add	r3, r2
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	65bb      	str	r3, [r7, #88]	; 0x58
	array[3] = average_pressure_map[n];
 8001f12:	4a11      	ldr	r2, [pc, #68]	; (8001f58 <control_valves+0x1bc>)
 8001f14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	65fb      	str	r3, [r7, #92]	; 0x5c

	array_index[0] = index_max_1_previous;
 8001f1e:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <control_valves+0x1b0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	663b      	str	r3, [r7, #96]	; 0x60
	array_index[1] = index_max_2_previous;
 8001f24:	4b0a      	ldr	r3, [pc, #40]	; (8001f50 <control_valves+0x1b4>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	667b      	str	r3, [r7, #100]	; 0x64
	array_index[2] = m;
 8001f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f2c:	66bb      	str	r3, [r7, #104]	; 0x68
	array_index[3] = n;
 8001f2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f30:	66fb      	str	r3, [r7, #108]	; 0x6c

	// descending sorting of array and changing place of array_index elements accordingly
	for(int i=0; i<4; i++){
 8001f32:	2300      	movs	r3, #0
 8001f34:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001f36:	e075      	b.n	8002024 <control_valves+0x288>
		for(int j=i+1; j<4; j++){
 8001f38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8001f3e:	e06b      	b.n	8002018 <control_valves+0x27c>
 8001f40:	200007f0 	.word	0x200007f0
 8001f44:	200007b4 	.word	0x200007b4
 8001f48:	20000000 	.word	0x20000000
 8001f4c:	200007e8 	.word	0x200007e8
 8001f50:	200007ec 	.word	0x200007ec
 8001f54:	20000738 	.word	0x20000738
 8001f58:	200006bc 	.word	0x200006bc
			if(array[i] < array[j]){
 8001f5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	3340      	adds	r3, #64	; 0x40
 8001f62:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001f66:	4413      	add	r3, r2
 8001f68:	3b38      	subs	r3, #56	; 0x38
 8001f6a:	ed93 7a00 	vldr	s14, [r3]
 8001f6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	3340      	adds	r3, #64	; 0x40
 8001f74:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001f78:	4413      	add	r3, r2
 8001f7a:	3b38      	subs	r3, #56	; 0x38
 8001f7c:	edd3 7a00 	vldr	s15, [r3]
 8001f80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f88:	d543      	bpl.n	8002012 <control_valves+0x276>
				a = array[i];
 8001f8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	3340      	adds	r3, #64	; 0x40
 8001f90:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001f94:	4413      	add	r3, r2
 8001f96:	3b38      	subs	r3, #56	; 0x38
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	677b      	str	r3, [r7, #116]	; 0x74
				array[i] = array[j];
 8001f9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	3340      	adds	r3, #64	; 0x40
 8001fa2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001fa6:	4413      	add	r3, r2
 8001fa8:	3b38      	subs	r3, #56	; 0x38
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	3340      	adds	r3, #64	; 0x40
 8001fb2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001fb6:	440b      	add	r3, r1
 8001fb8:	3b38      	subs	r3, #56	; 0x38
 8001fba:	601a      	str	r2, [r3, #0]
				array[j] = a;
 8001fbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	3340      	adds	r3, #64	; 0x40
 8001fc2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3b38      	subs	r3, #56	; 0x38
 8001fca:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001fcc:	601a      	str	r2, [r3, #0]

				b = array_index[i];
 8001fce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	3340      	adds	r3, #64	; 0x40
 8001fd4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001fd8:	4413      	add	r3, r2
 8001fda:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8001fde:	673b      	str	r3, [r7, #112]	; 0x70
				array_index[i] = array_index[j];
 8001fe0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	3340      	adds	r3, #64	; 0x40
 8001fe6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001fea:	4413      	add	r3, r2
 8001fec:	f853 2c28 	ldr.w	r2, [r3, #-40]
 8001ff0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	3340      	adds	r3, #64	; 0x40
 8001ff6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001ffa:	440b      	add	r3, r1
 8001ffc:	f843 2c28 	str.w	r2, [r3, #-40]
				array_index[j] = b;
 8002000:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	3340      	adds	r3, #64	; 0x40
 8002006:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800200a:	4413      	add	r3, r2
 800200c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800200e:	f843 2c28 	str.w	r2, [r3, #-40]
		for(int j=i+1; j<4; j++){
 8002012:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002014:	3301      	adds	r3, #1
 8002016:	67bb      	str	r3, [r7, #120]	; 0x78
 8002018:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800201a:	2b03      	cmp	r3, #3
 800201c:	dd9e      	ble.n	8001f5c <control_valves+0x1c0>
	for(int i=0; i<4; i++){
 800201e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002020:	3301      	adds	r3, #1
 8002022:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002024:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002026:	2b03      	cmp	r3, #3
 8002028:	dd86      	ble.n	8001f38 <control_valves+0x19c>
			}
		}
	}

	// set modules state on 64bit UL to one, close two lowest pressure modules
	modules_state_uint = 0xFFFFFFFFFF;
 800202a:	4938      	ldr	r1, [pc, #224]	; (800210c <control_valves+0x370>)
 800202c:	f04f 32ff 	mov.w	r2, #4294967295
 8002030:	f04f 03ff 	mov.w	r3, #255	; 0xff
 8002034:	e9c1 2300 	strd	r2, r3, [r1]

	// set modules state on 64bit UL to zero, open two high pressure modules
	modules_state_uint &= ~(1ULL << valve2SPIbit[array_index[0]]);
 8002038:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800203a:	4a35      	ldr	r2, [pc, #212]	; (8002110 <control_valves+0x374>)
 800203c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002040:	461c      	mov	r4, r3
 8002042:	f04f 0201 	mov.w	r2, #1
 8002046:	f04f 0300 	mov.w	r3, #0
 800204a:	f1a4 0120 	sub.w	r1, r4, #32
 800204e:	f1c4 0c20 	rsb	ip, r4, #32
 8002052:	fa03 f004 	lsl.w	r0, r3, r4
 8002056:	6478      	str	r0, [r7, #68]	; 0x44
 8002058:	fa02 f101 	lsl.w	r1, r2, r1
 800205c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800205e:	4308      	orrs	r0, r1
 8002060:	6478      	str	r0, [r7, #68]	; 0x44
 8002062:	fa22 fc0c 	lsr.w	ip, r2, ip
 8002066:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002068:	ea41 010c 	orr.w	r1, r1, ip
 800206c:	6479      	str	r1, [r7, #68]	; 0x44
 800206e:	fa02 f304 	lsl.w	r3, r2, r4
 8002072:	643b      	str	r3, [r7, #64]	; 0x40
 8002074:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8002078:	460b      	mov	r3, r1
 800207a:	43db      	mvns	r3, r3
 800207c:	61bb      	str	r3, [r7, #24]
 800207e:	4613      	mov	r3, r2
 8002080:	43db      	mvns	r3, r3
 8002082:	61fb      	str	r3, [r7, #28]
 8002084:	4b21      	ldr	r3, [pc, #132]	; (800210c <control_valves+0x370>)
 8002086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208a:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800208e:	4641      	mov	r1, r8
 8002090:	4011      	ands	r1, r2
 8002092:	6139      	str	r1, [r7, #16]
 8002094:	4649      	mov	r1, r9
 8002096:	4019      	ands	r1, r3
 8002098:	6179      	str	r1, [r7, #20]
 800209a:	4b1c      	ldr	r3, [pc, #112]	; (800210c <control_valves+0x370>)
 800209c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80020a0:	e9c3 1200 	strd	r1, r2, [r3]
	modules_state_uint &= ~(1ULL << valve2SPIbit[array_index[1]]);
 80020a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020a6:	4a1a      	ldr	r2, [pc, #104]	; (8002110 <control_valves+0x374>)
 80020a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020ac:	4619      	mov	r1, r3
 80020ae:	f04f 0201 	mov.w	r2, #1
 80020b2:	f04f 0300 	mov.w	r3, #0
 80020b6:	f1a1 0420 	sub.w	r4, r1, #32
 80020ba:	f1c1 0020 	rsb	r0, r1, #32
 80020be:	fa03 f601 	lsl.w	r6, r3, r1
 80020c2:	fa02 f404 	lsl.w	r4, r2, r4
 80020c6:	4326      	orrs	r6, r4
 80020c8:	fa22 f000 	lsr.w	r0, r2, r0
 80020cc:	4306      	orrs	r6, r0
 80020ce:	fa02 f501 	lsl.w	r5, r2, r1
 80020d2:	43eb      	mvns	r3, r5
 80020d4:	60bb      	str	r3, [r7, #8]
 80020d6:	43f3      	mvns	r3, r6
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	4b0c      	ldr	r3, [pc, #48]	; (800210c <control_valves+0x370>)
 80020dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80020e4:	4621      	mov	r1, r4
 80020e6:	4011      	ands	r1, r2
 80020e8:	6039      	str	r1, [r7, #0]
 80020ea:	4629      	mov	r1, r5
 80020ec:	4019      	ands	r1, r3
 80020ee:	6079      	str	r1, [r7, #4]
 80020f0:	4b06      	ldr	r3, [pc, #24]	; (800210c <control_valves+0x370>)
 80020f2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80020f6:	e9c3 1200 	strd	r1, r2, [r3]
    //data_written_spi[4] = (modules_state_uint & 0xff00000000ULL) >> 32;

	/*-------- CHOOSE MODULES STATE WITH THESE BYTES ------------------*/


    counter_modules_off = 2;
 80020fa:	4b06      	ldr	r3, [pc, #24]	; (8002114 <control_valves+0x378>)
 80020fc:	2202      	movs	r2, #2
 80020fe:	601a      	str	r2, [r3, #0]
}
 8002100:	bf00      	nop
 8002102:	3788      	adds	r7, #136	; 0x88
 8002104:	46bd      	mov	sp, r7
 8002106:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800210a:	4770      	bx	lr
 800210c:	20000000 	.word	0x20000000
 8002110:	0800cf88 	.word	0x0800cf88
 8002114:	200007f0 	.word	0x200007f0

08002118 <valves_autocontrol>:

void valves_autocontrol()
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
	for(int i=0; i<NUMBER_OF_SENSORS; i++){
 800211e:	2300      	movs	r3, #0
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	e016      	b.n	8002152 <valves_autocontrol+0x3a>
		average_pressure_map[i] = average_pressure_map[i]/counter_average;
 8002124:	4a27      	ldr	r2, [pc, #156]	; (80021c4 <valves_autocontrol+0xac>)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4413      	add	r3, r2
 800212c:	edd3 6a00 	vldr	s13, [r3]
 8002130:	4b25      	ldr	r3, [pc, #148]	; (80021c8 <valves_autocontrol+0xb0>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	ee07 3a90 	vmov	s15, r3
 8002138:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800213c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002140:	4a20      	ldr	r2, [pc, #128]	; (80021c4 <valves_autocontrol+0xac>)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<NUMBER_OF_SENSORS; i++){
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	3301      	adds	r3, #1
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2b1e      	cmp	r3, #30
 8002156:	dde5      	ble.n	8002124 <valves_autocontrol+0xc>
	}

	find_high_pressure_spots();
 8002158:	f7ff fd96 	bl	8001c88 <find_high_pressure_spots>

	control_valves(index_max_1, index_max_2);
 800215c:	4b1b      	ldr	r3, [pc, #108]	; (80021cc <valves_autocontrol+0xb4>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a1b      	ldr	r2, [pc, #108]	; (80021d0 <valves_autocontrol+0xb8>)
 8002162:	6812      	ldr	r2, [r2, #0]
 8002164:	4611      	mov	r1, r2
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff fe18 	bl	8001d9c <control_valves>

	for(int i=0; i<NUMBER_OF_SENSORS; i++){
 800216c:	2300      	movs	r3, #0
 800216e:	60bb      	str	r3, [r7, #8]
 8002170:	e00c      	b.n	800218c <valves_autocontrol+0x74>
		previous_pressure_map[i] = average_pressure_map[i];
 8002172:	4a14      	ldr	r2, [pc, #80]	; (80021c4 <valves_autocontrol+0xac>)
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	4915      	ldr	r1, [pc, #84]	; (80021d4 <valves_autocontrol+0xbc>)
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	440b      	add	r3, r1
 8002184:	601a      	str	r2, [r3, #0]
	for(int i=0; i<NUMBER_OF_SENSORS; i++){
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	3301      	adds	r3, #1
 800218a:	60bb      	str	r3, [r7, #8]
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	2b1e      	cmp	r3, #30
 8002190:	ddef      	ble.n	8002172 <valves_autocontrol+0x5a>
	}
	counter_average = 0;
 8002192:	4b0d      	ldr	r3, [pc, #52]	; (80021c8 <valves_autocontrol+0xb0>)
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]

	for(int i=0; i<NUMBER_OF_SENSORS; i++){
 8002198:	2300      	movs	r3, #0
 800219a:	607b      	str	r3, [r7, #4]
 800219c:	e009      	b.n	80021b2 <valves_autocontrol+0x9a>
		average_pressure_map[i] = 0.0;
 800219e:	4a09      	ldr	r2, [pc, #36]	; (80021c4 <valves_autocontrol+0xac>)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4413      	add	r3, r2
 80021a6:	f04f 0200 	mov.w	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
	for(int i=0; i<NUMBER_OF_SENSORS; i++){
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3301      	adds	r3, #1
 80021b0:	607b      	str	r3, [r7, #4]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b1e      	cmp	r3, #30
 80021b6:	ddf2      	ble.n	800219e <valves_autocontrol+0x86>
	}
}
 80021b8:	bf00      	nop
 80021ba:	bf00      	nop
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	200006bc 	.word	0x200006bc
 80021c8:	200007dc 	.word	0x200007dc
 80021cc:	200007e0 	.word	0x200007e0
 80021d0:	200007e4 	.word	0x200007e4
 80021d4:	20000738 	.word	0x20000738

080021d8 <configure_bluetooth>:

void    configure_bluetooth(){
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0

	  HAL_GPIO_WritePin(GPIOD, SW_BTN_Pin, GPIO_PIN_SET); // SW_BTN
 80021dc:	2201      	movs	r2, #1
 80021de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021e2:	4808      	ldr	r0, [pc, #32]	; (8002204 <configure_bluetooth+0x2c>)
 80021e4:	f003 fba8 	bl	8005938 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, WAKE_UP_Pin, GPIO_PIN_SET); // WAKE_UP pin
 80021e8:	2201      	movs	r2, #1
 80021ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021ee:	4806      	ldr	r0, [pc, #24]	; (8002208 <configure_bluetooth+0x30>)
 80021f0:	f003 fba2 	bl	8005938 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, RST_Pin, GPIO_PIN_SET); // RST pin
 80021f4:	2201      	movs	r2, #1
 80021f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021fa:	4803      	ldr	r0, [pc, #12]	; (8002208 <configure_bluetooth+0x30>)
 80021fc:	f003 fb9c 	bl	8005938 <HAL_GPIO_WritePin>

}
 8002200:	bf00      	nop
 8002202:	bd80      	pop	{r7, pc}
 8002204:	42020c00 	.word	0x42020c00
 8002208:	42020400 	.word	0x42020400

0800220c <select_ADC_channel>:

void    select_ADC_channel(uint32_t channel){
 800220c:	b580      	push	{r7, lr}
 800220e:	b08a      	sub	sp, #40	; 0x28
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
	  ADC_ChannelConfTypeDef sConfig = {0};
 8002214:	f107 0308 	add.w	r3, r7, #8
 8002218:	2220      	movs	r2, #32
 800221a:	2100      	movs	r1, #0
 800221c:	4618      	mov	r0, r3
 800221e:	f00a fe85 	bl	800cf2c <memset>
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = channel;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = 1;
 8002226:	2301      	movs	r3, #1
 8002228:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800222a:	f107 0308 	add.w	r3, r7, #8
 800222e:	4619      	mov	r1, r3
 8002230:	4805      	ldr	r0, [pc, #20]	; (8002248 <select_ADC_channel+0x3c>)
 8002232:	f001 fd51 	bl	8003cd8 <HAL_ADC_ConfigChannel>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <select_ADC_channel+0x34>
	  {
	    Error_Handler();
 800223c:	f000 f866 	bl	800230c <Error_Handler>
	  }
}
 8002240:	bf00      	nop
 8002242:	3728      	adds	r7, #40	; 0x28
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	20000228 	.word	0x20000228

0800224c <BM78_SetDeviceName>:

HAL_StatusTypeDef BM78_SetDeviceName() {
 800224c:	b580      	push	{r7, lr}
 800224e:	b08c      	sub	sp, #48	; 0x30
 8002250:	af02      	add	r7, sp, #8
    // Define buffer for I2C communication
    uint8_t i2cData[32]; // Adjust the buffer size as needed

    // Convert the command string to bytes
    strcpy((char*)i2cData, BM78_SetNameCmd);
 8002252:	4b0f      	ldr	r3, [pc, #60]	; (8002290 <BM78_SetDeviceName+0x44>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	1d3b      	adds	r3, r7, #4
 8002258:	4611      	mov	r1, r2
 800225a:	4618      	mov	r0, r3
 800225c:	f00a fe6e 	bl	800cf3c <strcpy>

    // Perform I2C write operation to send the command to BM78
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c1, BM78_I2C_ADDRESS, i2cData, strlen(BM78_SetNameCmd), HAL_MAX_DELAY);
 8002260:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <BM78_SetDeviceName+0x44>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f7fe f807 	bl	8000278 <strlen>
 800226a:	4603      	mov	r3, r0
 800226c:	b29b      	uxth	r3, r3
 800226e:	1d3a      	adds	r2, r7, #4
 8002270:	f04f 31ff 	mov.w	r1, #4294967295
 8002274:	9100      	str	r1, [sp, #0]
 8002276:	2128      	movs	r1, #40	; 0x28
 8002278:	4806      	ldr	r0, [pc, #24]	; (8002294 <BM78_SetDeviceName+0x48>)
 800227a:	f003 fc05 	bl	8005a88 <HAL_I2C_Master_Transmit>
 800227e:	4603      	mov	r3, r0
 8002280:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    return status;
 8002284:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002288:	4618      	mov	r0, r3
 800228a:	3728      	adds	r7, #40	; 0x28
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	20000008 	.word	0x20000008
 8002294:	200002c8 	.word	0x200002c8

08002298 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)	autocontrol_timeout = 1;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a13      	ldr	r2, [pc, #76]	; (80022f4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d103      	bne.n	80022b2 <HAL_TIM_PeriodElapsedCallback+0x1a>
 80022aa:	4b13      	ldr	r3, [pc, #76]	; (80022f8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80022ac:	2201      	movs	r2, #1
 80022ae:	701a      	strb	r2, [r3, #0]
		value_BAT = HAL_ADC_GetValue(&hadc1);  // store adc value in value
		HAL_ADC_Stop(&hadc1);

		select_ADC_channel(ADC_CHANNEL_2);
	}
}
 80022b0:	e01b      	b.n	80022ea <HAL_TIM_PeriodElapsedCallback+0x52>
	else if(htim->Instance == TIM2){
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ba:	d116      	bne.n	80022ea <HAL_TIM_PeriodElapsedCallback+0x52>
		select_ADC_channel(ADC_CHANNEL_3);
 80022bc:	480f      	ldr	r0, [pc, #60]	; (80022fc <HAL_TIM_PeriodElapsedCallback+0x64>)
 80022be:	f7ff ffa5 	bl	800220c <select_ADC_channel>
		HAL_ADC_Start(&hadc1); // start the ADC
 80022c2:	480f      	ldr	r0, [pc, #60]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80022c4:	f001 fb6c 	bl	80039a0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1000);  // poll for conversion
 80022c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80022cc:	480c      	ldr	r0, [pc, #48]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80022ce:	f001 fc0f 	bl	8003af0 <HAL_ADC_PollForConversion>
		value_BAT = HAL_ADC_GetValue(&hadc1);  // store adc value in value
 80022d2:	480b      	ldr	r0, [pc, #44]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80022d4:	f001 fcf2 	bl	8003cbc <HAL_ADC_GetValue>
 80022d8:	4603      	mov	r3, r0
 80022da:	4a0a      	ldr	r2, [pc, #40]	; (8002304 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80022dc:	6013      	str	r3, [r2, #0]
		HAL_ADC_Stop(&hadc1);
 80022de:	4808      	ldr	r0, [pc, #32]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80022e0:	f001 fbd2 	bl	8003a88 <HAL_ADC_Stop>
		select_ADC_channel(ADC_CHANNEL_2);
 80022e4:	4808      	ldr	r0, [pc, #32]	; (8002308 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80022e6:	f7ff ff91 	bl	800220c <select_ADC_channel>
}
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40012c00 	.word	0x40012c00
 80022f8:	2000063c 	.word	0x2000063c
 80022fc:	0c000008 	.word	0x0c000008
 8002300:	20000228 	.word	0x20000228
 8002304:	200005b8 	.word	0x200005b8
 8002308:	08000004 	.word	0x08000004

0800230c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002310:	b672      	cpsid	i
}
 8002312:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002314:	e7fe      	b.n	8002314 <Error_Handler+0x8>

08002316 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	af00      	add	r7, sp, #0
  /* USER CODE END MspInit 0 */

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
	  HAL_PWREx_EnableVddA();
 800231a:	f004 f8e7 	bl	80064ec <HAL_PWREx_EnableVddA>
	  HAL_PWREx_EnableVddIO2();
 800231e:	f004 f8d5 	bl	80064cc <HAL_PWREx_EnableVddIO2>
  /* USER CODE END MspInit 1 */
}
 8002322:	bf00      	nop
 8002324:	bd80      	pop	{r7, pc}
	...

08002328 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b0bc      	sub	sp, #240	; 0xf0
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002330:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	60da      	str	r2, [r3, #12]
 800233e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002340:	f107 0310 	add.w	r3, r7, #16
 8002344:	22c8      	movs	r2, #200	; 0xc8
 8002346:	2100      	movs	r1, #0
 8002348:	4618      	mov	r0, r3
 800234a:	f00a fdef 	bl	800cf2c <memset>
  if(hadc->Instance==ADC1)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a24      	ldr	r2, [pc, #144]	; (80023e4 <HAL_ADC_MspInit+0xbc>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d140      	bne.n	80023da <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8002358:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800235c:	f04f 0300 	mov.w	r3, #0
 8002360:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8002364:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002368:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800236c:	f107 0310 	add.w	r3, r7, #16
 8002370:	4618      	mov	r0, r3
 8002372:	f005 fb77 	bl	8007a64 <HAL_RCCEx_PeriphCLKConfig>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 800237c:	f7ff ffc6 	bl	800230c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002380:	4b19      	ldr	r3, [pc, #100]	; (80023e8 <HAL_ADC_MspInit+0xc0>)
 8002382:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002386:	4a18      	ldr	r2, [pc, #96]	; (80023e8 <HAL_ADC_MspInit+0xc0>)
 8002388:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800238c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002390:	4b15      	ldr	r3, [pc, #84]	; (80023e8 <HAL_ADC_MspInit+0xc0>)
 8002392:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002396:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800239e:	4b12      	ldr	r3, [pc, #72]	; (80023e8 <HAL_ADC_MspInit+0xc0>)
 80023a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023a4:	4a10      	ldr	r2, [pc, #64]	; (80023e8 <HAL_ADC_MspInit+0xc0>)
 80023a6:	f043 0304 	orr.w	r3, r3, #4
 80023aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80023ae:	4b0e      	ldr	r3, [pc, #56]	; (80023e8 <HAL_ADC_MspInit+0xc0>)
 80023b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	60bb      	str	r3, [r7, #8]
 80023ba:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = Vopamp1_Pin|VBAT_DIV_Pin|Vopamp2_Pin;
 80023bc:	230e      	movs	r3, #14
 80023be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023c2:	2303      	movs	r3, #3
 80023c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c8:	2300      	movs	r3, #0
 80023ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023ce:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80023d2:	4619      	mov	r1, r3
 80023d4:	4805      	ldr	r0, [pc, #20]	; (80023ec <HAL_ADC_MspInit+0xc4>)
 80023d6:	f003 f8d7 	bl	8005588 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80023da:	bf00      	nop
 80023dc:	37f0      	adds	r7, #240	; 0xf0
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	42028000 	.word	0x42028000
 80023e8:	46020c00 	.word	0x46020c00
 80023ec:	42020800 	.word	0x42020800

080023f0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b0bc      	sub	sp, #240	; 0xf0
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	60da      	str	r2, [r3, #12]
 8002406:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002408:	f107 0310 	add.w	r3, r7, #16
 800240c:	22c8      	movs	r2, #200	; 0xc8
 800240e:	2100      	movs	r1, #0
 8002410:	4618      	mov	r0, r3
 8002412:	f00a fd8b 	bl	800cf2c <memset>
  if(hdac->Instance==DAC1)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a25      	ldr	r2, [pc, #148]	; (80024b0 <HAL_DAC_MspInit+0xc0>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d143      	bne.n	80024a8 <HAL_DAC_MspInit+0xb8>

  /* USER CODE END DAC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC|RCC_PERIPHCLK_DAC1;
 8002420:	4a24      	ldr	r2, [pc, #144]	; (80024b4 <HAL_DAC_MspInit+0xc4>)
 8002422:	f04f 0300 	mov.w	r3, #0
 8002426:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 800242a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800242e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    PeriphClkInit.Dac1ClockSelection = RCC_DAC1CLKSOURCE_LSI;
 8002432:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002436:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800243a:	f107 0310 	add.w	r3, r7, #16
 800243e:	4618      	mov	r0, r3
 8002440:	f005 fb10 	bl	8007a64 <HAL_RCCEx_PeriphCLKConfig>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <HAL_DAC_MspInit+0x5e>
    {
      Error_Handler();
 800244a:	f7ff ff5f 	bl	800230c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800244e:	4b1a      	ldr	r3, [pc, #104]	; (80024b8 <HAL_DAC_MspInit+0xc8>)
 8002450:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002454:	4a18      	ldr	r2, [pc, #96]	; (80024b8 <HAL_DAC_MspInit+0xc8>)
 8002456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800245a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800245e:	4b16      	ldr	r3, [pc, #88]	; (80024b8 <HAL_DAC_MspInit+0xc8>)
 8002460:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800246c:	4b12      	ldr	r3, [pc, #72]	; (80024b8 <HAL_DAC_MspInit+0xc8>)
 800246e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002472:	4a11      	ldr	r2, [pc, #68]	; (80024b8 <HAL_DAC_MspInit+0xc8>)
 8002474:	f043 0301 	orr.w	r3, r3, #1
 8002478:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800247c:	4b0e      	ldr	r3, [pc, #56]	; (80024b8 <HAL_DAC_MspInit+0xc8>)
 800247e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	60bb      	str	r3, [r7, #8]
 8002488:	68bb      	ldr	r3, [r7, #8]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800248a:	2310      	movs	r3, #16
 800248c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002490:	2303      	movs	r3, #3
 8002492:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002496:	2300      	movs	r3, #0
 8002498:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800249c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80024a0:	4619      	mov	r1, r3
 80024a2:	4806      	ldr	r0, [pc, #24]	; (80024bc <HAL_DAC_MspInit+0xcc>)
 80024a4:	f003 f870 	bl	8005588 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80024a8:	bf00      	nop
 80024aa:	37f0      	adds	r7, #240	; 0xf0
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	46021800 	.word	0x46021800
 80024b4:	10008000 	.word	0x10008000
 80024b8:	46020c00 	.word	0x46020c00
 80024bc:	42020000 	.word	0x42020000

080024c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b0c2      	sub	sp, #264	; 0x108
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80024ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80024ce:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	60da      	str	r2, [r3, #12]
 80024de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024e4:	22c8      	movs	r2, #200	; 0xc8
 80024e6:	2100      	movs	r1, #0
 80024e8:	4618      	mov	r0, r3
 80024ea:	f00a fd1f 	bl	800cf2c <memset>
  if(hi2c->Instance==I2C1)
 80024ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80024f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a8a      	ldr	r2, [pc, #552]	; (8002724 <HAL_I2C_MspInit+0x264>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d147      	bne.n	8002590 <HAL_I2C_MspInit+0xd0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002500:	f04f 0240 	mov.w	r2, #64	; 0x40
 8002504:	f04f 0300 	mov.w	r3, #0
 8002508:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800250c:	2300      	movs	r3, #0
 800250e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002512:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002516:	4618      	mov	r0, r3
 8002518:	f005 faa4 	bl	8007a64 <HAL_RCCEx_PeriphCLKConfig>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 8002522:	f7ff fef3 	bl	800230c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002526:	4b80      	ldr	r3, [pc, #512]	; (8002728 <HAL_I2C_MspInit+0x268>)
 8002528:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800252c:	4a7e      	ldr	r2, [pc, #504]	; (8002728 <HAL_I2C_MspInit+0x268>)
 800252e:	f043 0302 	orr.w	r3, r3, #2
 8002532:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002536:	4b7c      	ldr	r3, [pc, #496]	; (8002728 <HAL_I2C_MspInit+0x268>)
 8002538:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	627b      	str	r3, [r7, #36]	; 0x24
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002544:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002548:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800254c:	2312      	movs	r3, #18
 800254e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002552:	2300      	movs	r3, #0
 8002554:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002558:	2300      	movs	r3, #0
 800255a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800255e:	2304      	movs	r3, #4
 8002560:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002564:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002568:	4619      	mov	r1, r3
 800256a:	4870      	ldr	r0, [pc, #448]	; (800272c <HAL_I2C_MspInit+0x26c>)
 800256c:	f003 f80c 	bl	8005588 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002570:	4b6d      	ldr	r3, [pc, #436]	; (8002728 <HAL_I2C_MspInit+0x268>)
 8002572:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002576:	4a6c      	ldr	r2, [pc, #432]	; (8002728 <HAL_I2C_MspInit+0x268>)
 8002578:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800257c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002580:	4b69      	ldr	r3, [pc, #420]	; (8002728 <HAL_I2C_MspInit+0x268>)
 8002582:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002586:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800258a:	623b      	str	r3, [r7, #32]
 800258c:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800258e:	e0c3      	b.n	8002718 <HAL_I2C_MspInit+0x258>
  else if(hi2c->Instance==I2C2)
 8002590:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002594:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a64      	ldr	r2, [pc, #400]	; (8002730 <HAL_I2C_MspInit+0x270>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d147      	bne.n	8002632 <HAL_I2C_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80025a2:	f04f 0280 	mov.w	r2, #128	; 0x80
 80025a6:	f04f 0300 	mov.w	r3, #0
 80025aa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80025ae:	2300      	movs	r3, #0
 80025b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025b8:	4618      	mov	r0, r3
 80025ba:	f005 fa53 	bl	8007a64 <HAL_RCCEx_PeriphCLKConfig>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <HAL_I2C_MspInit+0x108>
      Error_Handler();
 80025c4:	f7ff fea2 	bl	800230c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025c8:	4b57      	ldr	r3, [pc, #348]	; (8002728 <HAL_I2C_MspInit+0x268>)
 80025ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025ce:	4a56      	ldr	r2, [pc, #344]	; (8002728 <HAL_I2C_MspInit+0x268>)
 80025d0:	f043 0302 	orr.w	r3, r3, #2
 80025d4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80025d8:	4b53      	ldr	r3, [pc, #332]	; (8002728 <HAL_I2C_MspInit+0x268>)
 80025da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	61fb      	str	r3, [r7, #28]
 80025e4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80025e6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80025ea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025ee:	2312      	movs	r3, #18
 80025f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f4:	2300      	movs	r3, #0
 80025f6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fa:	2300      	movs	r3, #0
 80025fc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002600:	2304      	movs	r3, #4
 8002602:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002606:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800260a:	4619      	mov	r1, r3
 800260c:	4847      	ldr	r0, [pc, #284]	; (800272c <HAL_I2C_MspInit+0x26c>)
 800260e:	f002 ffbb 	bl	8005588 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002612:	4b45      	ldr	r3, [pc, #276]	; (8002728 <HAL_I2C_MspInit+0x268>)
 8002614:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002618:	4a43      	ldr	r2, [pc, #268]	; (8002728 <HAL_I2C_MspInit+0x268>)
 800261a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800261e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002622:	4b41      	ldr	r3, [pc, #260]	; (8002728 <HAL_I2C_MspInit+0x268>)
 8002624:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002628:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800262c:	61bb      	str	r3, [r7, #24]
 800262e:	69bb      	ldr	r3, [r7, #24]
}
 8002630:	e072      	b.n	8002718 <HAL_I2C_MspInit+0x258>
  else if(hi2c->Instance==I2C3)
 8002632:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002636:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a3d      	ldr	r2, [pc, #244]	; (8002734 <HAL_I2C_MspInit+0x274>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d169      	bne.n	8002718 <HAL_I2C_MspInit+0x258>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002644:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002648:	f04f 0300 	mov.w	r3, #0
 800264c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK3;
 8002650:	2300      	movs	r3, #0
 8002652:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002656:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800265a:	4618      	mov	r0, r3
 800265c:	f005 fa02 	bl	8007a64 <HAL_RCCEx_PeriphCLKConfig>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <HAL_I2C_MspInit+0x1aa>
      Error_Handler();
 8002666:	f7ff fe51 	bl	800230c <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800266a:	4b2f      	ldr	r3, [pc, #188]	; (8002728 <HAL_I2C_MspInit+0x268>)
 800266c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002670:	4a2d      	ldr	r2, [pc, #180]	; (8002728 <HAL_I2C_MspInit+0x268>)
 8002672:	f043 0301 	orr.w	r3, r3, #1
 8002676:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800267a:	4b2b      	ldr	r3, [pc, #172]	; (8002728 <HAL_I2C_MspInit+0x268>)
 800267c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	617b      	str	r3, [r7, #20]
 8002686:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002688:	4b27      	ldr	r3, [pc, #156]	; (8002728 <HAL_I2C_MspInit+0x268>)
 800268a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800268e:	4a26      	ldr	r2, [pc, #152]	; (8002728 <HAL_I2C_MspInit+0x268>)
 8002690:	f043 0302 	orr.w	r3, r3, #2
 8002694:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002698:	4b23      	ldr	r3, [pc, #140]	; (8002728 <HAL_I2C_MspInit+0x268>)
 800269a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	613b      	str	r3, [r7, #16]
 80026a4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80026a6:	2380      	movs	r3, #128	; 0x80
 80026a8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026ac:	2312      	movs	r3, #18
 80026ae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b2:	2300      	movs	r3, #0
 80026b4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b8:	2300      	movs	r3, #0
 80026ba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80026be:	2304      	movs	r3, #4
 80026c0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80026c8:	4619      	mov	r1, r3
 80026ca:	481b      	ldr	r0, [pc, #108]	; (8002738 <HAL_I2C_MspInit+0x278>)
 80026cc:	f002 ff5c 	bl	8005588 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80026d0:	2310      	movs	r3, #16
 80026d2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026d6:	2312      	movs	r3, #18
 80026d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026dc:	2300      	movs	r3, #0
 80026de:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e2:	2300      	movs	r3, #0
 80026e4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80026e8:	2304      	movs	r3, #4
 80026ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ee:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80026f2:	4619      	mov	r1, r3
 80026f4:	480d      	ldr	r0, [pc, #52]	; (800272c <HAL_I2C_MspInit+0x26c>)
 80026f6:	f002 ff47 	bl	8005588 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80026fa:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <HAL_I2C_MspInit+0x268>)
 80026fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002700:	4a09      	ldr	r2, [pc, #36]	; (8002728 <HAL_I2C_MspInit+0x268>)
 8002702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002706:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 800270a:	4b07      	ldr	r3, [pc, #28]	; (8002728 <HAL_I2C_MspInit+0x268>)
 800270c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	68fb      	ldr	r3, [r7, #12]
}
 8002718:	bf00      	nop
 800271a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40005400 	.word	0x40005400
 8002728:	46020c00 	.word	0x46020c00
 800272c:	42020400 	.word	0x42020400
 8002730:	40005800 	.word	0x40005800
 8002734:	46002800 	.word	0x46002800
 8002738:	42020000 	.word	0x42020000

0800273c <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b08c      	sub	sp, #48	; 0x30
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002744:	f107 031c 	add.w	r3, r7, #28
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	605a      	str	r2, [r3, #4]
 800274e:	609a      	str	r2, [r3, #8]
 8002750:	60da      	str	r2, [r3, #12]
 8002752:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a46      	ldr	r2, [pc, #280]	; (8002874 <HAL_OPAMP_MspInit+0x138>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d133      	bne.n	80027c6 <HAL_OPAMP_MspInit+0x8a>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_OPAMP_CLK_ENABLED++;
 800275e:	4b46      	ldr	r3, [pc, #280]	; (8002878 <HAL_OPAMP_MspInit+0x13c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	3301      	adds	r3, #1
 8002764:	4a44      	ldr	r2, [pc, #272]	; (8002878 <HAL_OPAMP_MspInit+0x13c>)
 8002766:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OPAMP_CLK_ENABLED==1){
 8002768:	4b43      	ldr	r3, [pc, #268]	; (8002878 <HAL_OPAMP_MspInit+0x13c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d10e      	bne.n	800278e <HAL_OPAMP_MspInit+0x52>
      __HAL_RCC_OPAMP_CLK_ENABLE();
 8002770:	4b42      	ldr	r3, [pc, #264]	; (800287c <HAL_OPAMP_MspInit+0x140>)
 8002772:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002776:	4a41      	ldr	r2, [pc, #260]	; (800287c <HAL_OPAMP_MspInit+0x140>)
 8002778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800277c:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8002780:	4b3e      	ldr	r3, [pc, #248]	; (800287c <HAL_OPAMP_MspInit+0x140>)
 8002782:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800278a:	61bb      	str	r3, [r7, #24]
 800278c:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800278e:	4b3b      	ldr	r3, [pc, #236]	; (800287c <HAL_OPAMP_MspInit+0x140>)
 8002790:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002794:	4a39      	ldr	r2, [pc, #228]	; (800287c <HAL_OPAMP_MspInit+0x140>)
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800279e:	4b37      	ldr	r3, [pc, #220]	; (800287c <HAL_OPAMP_MspInit+0x140>)
 80027a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	617b      	str	r3, [r7, #20]
 80027aa:	697b      	ldr	r3, [r7, #20]
    /**OPAMP1 GPIO Configuration
    PA0     ------> OPAMP1_VINP
    PA1     ------> OPAMP1_VINM
    PA3     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 80027ac:	230b      	movs	r3, #11
 80027ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027b0:	2303      	movs	r3, #3
 80027b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b4:	2300      	movs	r3, #0
 80027b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b8:	f107 031c 	add.w	r3, r7, #28
 80027bc:	4619      	mov	r1, r3
 80027be:	4830      	ldr	r0, [pc, #192]	; (8002880 <HAL_OPAMP_MspInit+0x144>)
 80027c0:	f002 fee2 	bl	8005588 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP2_MspInit 1 */

  /* USER CODE END OPAMP2_MspInit 1 */
  }

}
 80027c4:	e052      	b.n	800286c <HAL_OPAMP_MspInit+0x130>
  else if(hopamp->Instance==OPAMP2)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a2e      	ldr	r2, [pc, #184]	; (8002884 <HAL_OPAMP_MspInit+0x148>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d14d      	bne.n	800286c <HAL_OPAMP_MspInit+0x130>
    HAL_RCC_OPAMP_CLK_ENABLED++;
 80027d0:	4b29      	ldr	r3, [pc, #164]	; (8002878 <HAL_OPAMP_MspInit+0x13c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	3301      	adds	r3, #1
 80027d6:	4a28      	ldr	r2, [pc, #160]	; (8002878 <HAL_OPAMP_MspInit+0x13c>)
 80027d8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OPAMP_CLK_ENABLED==1){
 80027da:	4b27      	ldr	r3, [pc, #156]	; (8002878 <HAL_OPAMP_MspInit+0x13c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d10e      	bne.n	8002800 <HAL_OPAMP_MspInit+0xc4>
      __HAL_RCC_OPAMP_CLK_ENABLE();
 80027e2:	4b26      	ldr	r3, [pc, #152]	; (800287c <HAL_OPAMP_MspInit+0x140>)
 80027e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80027e8:	4a24      	ldr	r2, [pc, #144]	; (800287c <HAL_OPAMP_MspInit+0x140>)
 80027ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027ee:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 80027f2:	4b22      	ldr	r3, [pc, #136]	; (800287c <HAL_OPAMP_MspInit+0x140>)
 80027f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80027f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027fc:	613b      	str	r3, [r7, #16]
 80027fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002800:	4b1e      	ldr	r3, [pc, #120]	; (800287c <HAL_OPAMP_MspInit+0x140>)
 8002802:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002806:	4a1d      	ldr	r2, [pc, #116]	; (800287c <HAL_OPAMP_MspInit+0x140>)
 8002808:	f043 0301 	orr.w	r3, r3, #1
 800280c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002810:	4b1a      	ldr	r3, [pc, #104]	; (800287c <HAL_OPAMP_MspInit+0x140>)
 8002812:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800281e:	4b17      	ldr	r3, [pc, #92]	; (800287c <HAL_OPAMP_MspInit+0x140>)
 8002820:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002824:	4a15      	ldr	r2, [pc, #84]	; (800287c <HAL_OPAMP_MspInit+0x140>)
 8002826:	f043 0302 	orr.w	r3, r3, #2
 800282a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800282e:	4b13      	ldr	r3, [pc, #76]	; (800287c <HAL_OPAMP_MspInit+0x140>)
 8002830:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	60bb      	str	r3, [r7, #8]
 800283a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800283c:	2340      	movs	r3, #64	; 0x40
 800283e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002840:	2303      	movs	r3, #3
 8002842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002844:	2300      	movs	r3, #0
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002848:	f107 031c 	add.w	r3, r7, #28
 800284c:	4619      	mov	r1, r3
 800284e:	480c      	ldr	r0, [pc, #48]	; (8002880 <HAL_OPAMP_MspInit+0x144>)
 8002850:	f002 fe9a 	bl	8005588 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002854:	2301      	movs	r3, #1
 8002856:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002858:	2303      	movs	r3, #3
 800285a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285c:	2300      	movs	r3, #0
 800285e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002860:	f107 031c 	add.w	r3, r7, #28
 8002864:	4619      	mov	r1, r3
 8002866:	4808      	ldr	r0, [pc, #32]	; (8002888 <HAL_OPAMP_MspInit+0x14c>)
 8002868:	f002 fe8e 	bl	8005588 <HAL_GPIO_Init>
}
 800286c:	bf00      	nop
 800286e:	3730      	adds	r7, #48	; 0x30
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	46005000 	.word	0x46005000
 8002878:	200008fc 	.word	0x200008fc
 800287c:	46020c00 	.word	0x46020c00
 8002880:	42020000 	.word	0x42020000
 8002884:	46005010 	.word	0x46005010
 8002888:	42020400 	.word	0x42020400

0800288c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a29      	ldr	r2, [pc, #164]	; (8002940 <HAL_TIM_Base_MspInit+0xb4>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d12f      	bne.n	80028fe <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800289e:	4b29      	ldr	r3, [pc, #164]	; (8002944 <HAL_TIM_Base_MspInit+0xb8>)
 80028a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80028a4:	4a27      	ldr	r2, [pc, #156]	; (8002944 <HAL_TIM_Base_MspInit+0xb8>)
 80028a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028aa:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80028ae:	4b25      	ldr	r3, [pc, #148]	; (8002944 <HAL_TIM_Base_MspInit+0xb8>)
 80028b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80028b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80028bc:	2200      	movs	r2, #0
 80028be:	2100      	movs	r1, #0
 80028c0:	2029      	movs	r0, #41	; 0x29
 80028c2:	f002 fa7c 	bl	8004dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80028c6:	2029      	movs	r0, #41	; 0x29
 80028c8:	f002 fa93 	bl	8004df2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80028cc:	2200      	movs	r2, #0
 80028ce:	2100      	movs	r1, #0
 80028d0:	202a      	movs	r0, #42	; 0x2a
 80028d2:	f002 fa74 	bl	8004dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80028d6:	202a      	movs	r0, #42	; 0x2a
 80028d8:	f002 fa8b 	bl	8004df2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80028dc:	2200      	movs	r2, #0
 80028de:	2100      	movs	r1, #0
 80028e0:	202b      	movs	r0, #43	; 0x2b
 80028e2:	f002 fa6c 	bl	8004dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80028e6:	202b      	movs	r0, #43	; 0x2b
 80028e8:	f002 fa83 	bl	8004df2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80028ec:	2200      	movs	r2, #0
 80028ee:	2100      	movs	r1, #0
 80028f0:	202c      	movs	r0, #44	; 0x2c
 80028f2:	f002 fa64 	bl	8004dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80028f6:	202c      	movs	r0, #44	; 0x2c
 80028f8:	f002 fa7b 	bl	8004df2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80028fc:	e01b      	b.n	8002936 <HAL_TIM_Base_MspInit+0xaa>
  else if(htim_base->Instance==TIM2)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002906:	d116      	bne.n	8002936 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002908:	4b0e      	ldr	r3, [pc, #56]	; (8002944 <HAL_TIM_Base_MspInit+0xb8>)
 800290a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800290e:	4a0d      	ldr	r2, [pc, #52]	; (8002944 <HAL_TIM_Base_MspInit+0xb8>)
 8002910:	f043 0301 	orr.w	r3, r3, #1
 8002914:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002918:	4b0a      	ldr	r3, [pc, #40]	; (8002944 <HAL_TIM_Base_MspInit+0xb8>)
 800291a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	60bb      	str	r3, [r7, #8]
 8002924:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002926:	2200      	movs	r2, #0
 8002928:	2100      	movs	r1, #0
 800292a:	202d      	movs	r0, #45	; 0x2d
 800292c:	f002 fa47 	bl	8004dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002930:	202d      	movs	r0, #45	; 0x2d
 8002932:	f002 fa5e 	bl	8004df2 <HAL_NVIC_EnableIRQ>
}
 8002936:	bf00      	nop
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40012c00 	.word	0x40012c00
 8002944:	46020c00 	.word	0x46020c00

08002948 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b0be      	sub	sp, #248	; 0xf8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002950:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	605a      	str	r2, [r3, #4]
 800295a:	609a      	str	r2, [r3, #8]
 800295c:	60da      	str	r2, [r3, #12]
 800295e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002960:	f107 0318 	add.w	r3, r7, #24
 8002964:	22c8      	movs	r2, #200	; 0xc8
 8002966:	2100      	movs	r1, #0
 8002968:	4618      	mov	r0, r3
 800296a:	f00a fadf 	bl	800cf2c <memset>
  if(huart->Instance==USART1)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a38      	ldr	r2, [pc, #224]	; (8002a54 <HAL_UART_MspInit+0x10c>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d169      	bne.n	8002a4c <HAL_UART_MspInit+0x104>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002978:	f04f 0201 	mov.w	r2, #1
 800297c:	f04f 0300 	mov.w	r3, #0
 8002980:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002984:	2300      	movs	r3, #0
 8002986:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002988:	f107 0318 	add.w	r3, r7, #24
 800298c:	4618      	mov	r0, r3
 800298e:	f005 f869 	bl	8007a64 <HAL_RCCEx_PeriphCLKConfig>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8002998:	f7ff fcb8 	bl	800230c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800299c:	4b2e      	ldr	r3, [pc, #184]	; (8002a58 <HAL_UART_MspInit+0x110>)
 800299e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80029a2:	4a2d      	ldr	r2, [pc, #180]	; (8002a58 <HAL_UART_MspInit+0x110>)
 80029a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029a8:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80029ac:	4b2a      	ldr	r3, [pc, #168]	; (8002a58 <HAL_UART_MspInit+0x110>)
 80029ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80029b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029b6:	617b      	str	r3, [r7, #20]
 80029b8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ba:	4b27      	ldr	r3, [pc, #156]	; (8002a58 <HAL_UART_MspInit+0x110>)
 80029bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029c0:	4a25      	ldr	r2, [pc, #148]	; (8002a58 <HAL_UART_MspInit+0x110>)
 80029c2:	f043 0301 	orr.w	r3, r3, #1
 80029c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80029ca:	4b23      	ldr	r3, [pc, #140]	; (8002a58 <HAL_UART_MspInit+0x110>)
 80029cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	613b      	str	r3, [r7, #16]
 80029d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029d8:	4b1f      	ldr	r3, [pc, #124]	; (8002a58 <HAL_UART_MspInit+0x110>)
 80029da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029de:	4a1e      	ldr	r2, [pc, #120]	; (8002a58 <HAL_UART_MspInit+0x110>)
 80029e0:	f043 0302 	orr.w	r3, r3, #2
 80029e4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80029e8:	4b1b      	ldr	r3, [pc, #108]	; (8002a58 <HAL_UART_MspInit+0x110>)
 80029ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	68fb      	ldr	r3, [r7, #12]
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80029f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80029fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fe:	2302      	movs	r3, #2
 8002a00:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a10:	2307      	movs	r3, #7
 8002a12:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a16:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	480f      	ldr	r0, [pc, #60]	; (8002a5c <HAL_UART_MspInit+0x114>)
 8002a1e:	f002 fdb3 	bl	8005588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a22:	23c0      	movs	r3, #192	; 0xc0
 8002a24:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a34:	2300      	movs	r3, #0
 8002a36:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a3a:	2307      	movs	r3, #7
 8002a3c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a40:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002a44:	4619      	mov	r1, r3
 8002a46:	4806      	ldr	r0, [pc, #24]	; (8002a60 <HAL_UART_MspInit+0x118>)
 8002a48:	f002 fd9e 	bl	8005588 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002a4c:	bf00      	nop
 8002a4e:	37f8      	adds	r7, #248	; 0xf8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40013800 	.word	0x40013800
 8002a58:	46020c00 	.word	0x46020c00
 8002a5c:	42020000 	.word	0x42020000
 8002a60:	42020400 	.word	0x42020400

08002a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a68:	e7fe      	b.n	8002a68 <NMI_Handler+0x4>

08002a6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a6e:	e7fe      	b.n	8002a6e <HardFault_Handler+0x4>

08002a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a74:	e7fe      	b.n	8002a74 <MemManage_Handler+0x4>

08002a76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a76:	b480      	push	{r7}
 8002a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a7a:	e7fe      	b.n	8002a7a <BusFault_Handler+0x4>

08002a7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a80:	e7fe      	b.n	8002a80 <UsageFault_Handler+0x4>

08002a82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a82:	b480      	push	{r7}
 8002a84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a86:	bf00      	nop
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a94:	bf00      	nop
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002aa2:	bf00      	nop
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ab0:	f000 f8fa 	bl	8002ca8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ab4:	bf00      	nop
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 Break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002abc:	4802      	ldr	r0, [pc, #8]	; (8002ac8 <TIM1_BRK_IRQHandler+0x10>)
 8002abe:	f007 fd74 	bl	800a5aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8002ac2:	bf00      	nop
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	20000414 	.word	0x20000414

08002acc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ad0:	4802      	ldr	r0, [pc, #8]	; (8002adc <TIM1_UP_IRQHandler+0x10>)
 8002ad2:	f007 fd6a 	bl	800a5aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002ad6:	bf00      	nop
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	20000414 	.word	0x20000414

08002ae0 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 Trigger and Commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ae4:	4802      	ldr	r0, [pc, #8]	; (8002af0 <TIM1_TRG_COM_IRQHandler+0x10>)
 8002ae6:	f007 fd60 	bl	800a5aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002aea:	bf00      	nop
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	20000414 	.word	0x20000414

08002af4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 Capture Compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002af8:	4802      	ldr	r0, [pc, #8]	; (8002b04 <TIM1_CC_IRQHandler+0x10>)
 8002afa:	f007 fd56 	bl	800a5aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002afe:	bf00      	nop
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	20000414 	.word	0x20000414

08002b08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b0c:	4802      	ldr	r0, [pc, #8]	; (8002b18 <TIM2_IRQHandler+0x10>)
 8002b0e:	f007 fd4c 	bl	800a5aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b12:	bf00      	nop
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	20000460 	.word	0x20000460

08002b1c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002b20:	4b18      	ldr	r3, [pc, #96]	; (8002b84 <SystemInit+0x68>)
 8002b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b26:	4a17      	ldr	r2, [pc, #92]	; (8002b84 <SystemInit+0x68>)
 8002b28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8002b30:	4b15      	ldr	r3, [pc, #84]	; (8002b88 <SystemInit+0x6c>)
 8002b32:	2201      	movs	r2, #1
 8002b34:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002b36:	4b14      	ldr	r3, [pc, #80]	; (8002b88 <SystemInit+0x6c>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002b3c:	4b12      	ldr	r3, [pc, #72]	; (8002b88 <SystemInit+0x6c>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8002b42:	4b11      	ldr	r3, [pc, #68]	; (8002b88 <SystemInit+0x6c>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8002b48:	4b0f      	ldr	r3, [pc, #60]	; (8002b88 <SystemInit+0x6c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a0e      	ldr	r2, [pc, #56]	; (8002b88 <SystemInit+0x6c>)
 8002b4e:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002b52:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002b56:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8002b58:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <SystemInit+0x6c>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002b5e:	4b0a      	ldr	r3, [pc, #40]	; (8002b88 <SystemInit+0x6c>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a09      	ldr	r2, [pc, #36]	; (8002b88 <SystemInit+0x6c>)
 8002b64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b68:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002b6a:	4b07      	ldr	r3, [pc, #28]	; (8002b88 <SystemInit+0x6c>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b70:	4b04      	ldr	r3, [pc, #16]	; (8002b84 <SystemInit+0x68>)
 8002b72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b76:	609a      	str	r2, [r3, #8]
  #endif
}
 8002b78:	bf00      	nop
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	e000ed00 	.word	0xe000ed00
 8002b88:	46020c00 	.word	0x46020c00

08002b8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002b8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bc4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002b90:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002b92:	e003      	b.n	8002b9c <LoopCopyDataInit>

08002b94 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002b94:	4b0c      	ldr	r3, [pc, #48]	; (8002bc8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002b96:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002b98:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002b9a:	3104      	adds	r1, #4

08002b9c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002b9c:	480b      	ldr	r0, [pc, #44]	; (8002bcc <LoopForever+0xa>)
	ldr	r3, =_edata
 8002b9e:	4b0c      	ldr	r3, [pc, #48]	; (8002bd0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002ba0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002ba2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002ba4:	d3f6      	bcc.n	8002b94 <CopyDataInit>
	ldr	r2, =_sbss
 8002ba6:	4a0b      	ldr	r2, [pc, #44]	; (8002bd4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002ba8:	e002      	b.n	8002bb0 <LoopFillZerobss>

08002baa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002baa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002bac:	f842 3b04 	str.w	r3, [r2], #4

08002bb0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002bb0:	4b09      	ldr	r3, [pc, #36]	; (8002bd8 <LoopForever+0x16>)
	cmp	r2, r3
 8002bb2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002bb4:	d3f9      	bcc.n	8002baa <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002bb6:	f7ff ffb1 	bl	8002b1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bba:	f00a f993 	bl	800cee4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002bbe:	f7fe f911 	bl	8000de4 <main>

08002bc2 <LoopForever>:

LoopForever:
    b LoopForever
 8002bc2:	e7fe      	b.n	8002bc2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002bc4:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8002bc8:	0800d118 	.word	0x0800d118
	ldr	r0, =_sdata
 8002bcc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002bd0:	20000209 	.word	0x20000209
	ldr	r2, =_sbss
 8002bd4:	2000020c 	.word	0x2000020c
	ldr	r3, = _ebss
 8002bd8:	20000904 	.word	0x20000904

08002bdc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002bdc:	e7fe      	b.n	8002bdc <ADC1_IRQHandler>
	...

08002be0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002be4:	4b11      	ldr	r3, [pc, #68]	; (8002c2c <HAL_Init+0x4c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a10      	ldr	r2, [pc, #64]	; (8002c2c <HAL_Init+0x4c>)
 8002bea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bf0:	2003      	movs	r0, #3
 8002bf2:	f002 f8d9 	bl	8004da8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002bf6:	f004 fd51 	bl	800769c <HAL_RCC_GetSysClockFreq>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	4b0c      	ldr	r3, [pc, #48]	; (8002c30 <HAL_Init+0x50>)
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	f003 030f 	and.w	r3, r3, #15
 8002c04:	490b      	ldr	r1, [pc, #44]	; (8002c34 <HAL_Init+0x54>)
 8002c06:	5ccb      	ldrb	r3, [r1, r3]
 8002c08:	fa22 f303 	lsr.w	r3, r2, r3
 8002c0c:	4a0a      	ldr	r2, [pc, #40]	; (8002c38 <HAL_Init+0x58>)
 8002c0e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c10:	200f      	movs	r0, #15
 8002c12:	f000 f813 	bl	8002c3c <HAL_InitTick>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e002      	b.n	8002c26 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002c20:	f7ff fb79 	bl	8002316 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40022000 	.word	0x40022000
 8002c30:	46020c00 	.word	0x46020c00
 8002c34:	0800d008 	.word	0x0800d008
 8002c38:	20000200 	.word	0x20000200

08002c3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002c44:	4b15      	ldr	r3, [pc, #84]	; (8002c9c <HAL_InitTick+0x60>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e021      	b.n	8002c94 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002c50:	4b13      	ldr	r3, [pc, #76]	; (8002ca0 <HAL_InitTick+0x64>)
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	4b11      	ldr	r3, [pc, #68]	; (8002c9c <HAL_InitTick+0x60>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	4619      	mov	r1, r3
 8002c5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c66:	4618      	mov	r0, r3
 8002c68:	f002 f8d1 	bl	8004e0e <HAL_SYSTICK_Config>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e00e      	b.n	8002c94 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b0f      	cmp	r3, #15
 8002c7a:	d80a      	bhi.n	8002c92 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	f04f 30ff 	mov.w	r0, #4294967295
 8002c84:	f002 f89b 	bl	8004dbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c88:	4a06      	ldr	r2, [pc, #24]	; (8002ca4 <HAL_InitTick+0x68>)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	e000      	b.n	8002c94 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	20000208 	.word	0x20000208
 8002ca0:	20000200 	.word	0x20000200
 8002ca4:	20000204 	.word	0x20000204

08002ca8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002cac:	4b06      	ldr	r3, [pc, #24]	; (8002cc8 <HAL_IncTick+0x20>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	4b06      	ldr	r3, [pc, #24]	; (8002ccc <HAL_IncTick+0x24>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	4a04      	ldr	r2, [pc, #16]	; (8002ccc <HAL_IncTick+0x24>)
 8002cba:	6013      	str	r3, [r2, #0]
}
 8002cbc:	bf00      	nop
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	20000208 	.word	0x20000208
 8002ccc:	20000900 	.word	0x20000900

08002cd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  return uwTick;
 8002cd4:	4b03      	ldr	r3, [pc, #12]	; (8002ce4 <HAL_GetTick+0x14>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	20000900 	.word	0x20000900

08002ce8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cf0:	f7ff ffee 	bl	8002cd0 <HAL_GetTick>
 8002cf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d00:	d005      	beq.n	8002d0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d02:	4b0a      	ldr	r3, [pc, #40]	; (8002d2c <HAL_Delay+0x44>)
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	461a      	mov	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d0e:	bf00      	nop
 8002d10:	f7ff ffde 	bl	8002cd0 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d8f7      	bhi.n	8002d10 <HAL_Delay+0x28>
  {
  }
}
 8002d20:	bf00      	nop
 8002d22:	bf00      	nop
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	20000208 	.word	0x20000208

08002d30 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  return ((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 8002d34:	4b04      	ldr	r3, [pc, #16]	; (8002d48 <HAL_GetREVID+0x18>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	0c1b      	lsrs	r3, r3, #16
 8002d3a:	b29b      	uxth	r3, r3
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	e0044000 	.word	0xe0044000

08002d4c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	431a      	orrs	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	601a      	str	r2, [r3, #0]
}
 8002d66:	bf00      	nop
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
 8002d7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	431a      	orrs	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	601a      	str	r2, [r3, #0]
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b087      	sub	sp, #28
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
 8002dc0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	3360      	adds	r3, #96	; 0x60
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4413      	add	r3, r2
 8002dce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	f003 4178 	and.w	r1, r3, #4160749568	; 0xf8000000
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	430b      	orrs	r3, r1
 8002de4:	431a      	orrs	r2, r3
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 8002dea:	bf00      	nop
 8002dec:	371c      	adds	r7, #28
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr

08002df6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b087      	sub	sp, #28
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	60f8      	str	r0, [r7, #12]
 8002dfe:	60b9      	str	r1, [r7, #8]
 8002e00:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	3360      	adds	r3, #96	; 0x60
 8002e06:	461a      	mov	r2, r3
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	601a      	str	r2, [r3, #0]
}
 8002e20:	bf00      	nop
 8002e22:	371c      	adds	r7, #28
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b087      	sub	sp, #28
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	3360      	adds	r3, #96	; 0x60
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4413      	add	r3, r2
 8002e44:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	431a      	orrs	r2, r3
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	601a      	str	r2, [r3, #0]
}
 8002e56:	bf00      	nop
 8002e58:	371c      	adds	r7, #28
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
 8002e6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e70:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002e74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	2a00      	cmp	r2, #0
 8002e8c:	d002      	beq.n	8002e94 <LL_ADC_SetGainCompensation+0x32>
 8002e8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002e92:	e000      	b.n	8002e96 <LL_ADC_SetGainCompensation+0x34>
 8002e94:	2200      	movs	r2, #0
 8002e96:	431a      	orrs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	671a      	str	r2, [r3, #112]	; 0x70
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	695a      	ldr	r2, [r3, #20]
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	f003 0304 	and.w	r3, r3, #4
 8002ebe:	2107      	movs	r1, #7
 8002ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	401a      	ands	r2, r3
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	f003 0304 	and.w	r3, r3, #4
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002eda:	bf00      	nop
 8002edc:	3714      	adds	r7, #20
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b083      	sub	sp, #12
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002efa:	2301      	movs	r3, #1
 8002efc:	e000      	b.n	8002f00 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b089      	sub	sp, #36	; 0x24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4a2b      	ldr	r2, [pc, #172]	; (8002fc8 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d020      	beq.n	8002f62 <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	3330      	adds	r3, #48	; 0x30
 8002f24:	461a      	mov	r2, r3
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	0a1b      	lsrs	r3, r3, #8
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	f003 030c 	and.w	r3, r3, #12
 8002f30:	4413      	add	r3, r2
 8002f32:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f003 031f 	and.w	r3, r3, #31
 8002f3e:	211f      	movs	r1, #31
 8002f40:	fa01 f303 	lsl.w	r3, r1, r3
 8002f44:	43db      	mvns	r3, r3
 8002f46:	401a      	ands	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	0e9b      	lsrs	r3, r3, #26
 8002f4c:	f003 011f 	and.w	r1, r3, #31
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	f003 031f 	and.w	r3, r3, #31
 8002f56:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8002f60:	e02b      	b.n	8002fba <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	f003 031f 	and.w	r3, r3, #31
 8002f6c:	210f      	movs	r1, #15
 8002f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f72:	43db      	mvns	r3, r3
 8002f74:	401a      	ands	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d104      	bne.n	8002f8a <LL_ADC_REG_SetSequencerRanks+0x7e>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	0e9b      	lsrs	r3, r3, #26
 8002f84:	f003 031f 	and.w	r3, r3, #31
 8002f88:	e010      	b.n	8002fac <LL_ADC_REG_SetSequencerRanks+0xa0>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	fa93 f3a3 	rbit	r3, r3
 8002f94:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d101      	bne.n	8002fa4 <LL_ADC_REG_SetSequencerRanks+0x98>
  {
    return 32U;
 8002fa0:	2320      	movs	r3, #32
 8002fa2:	e003      	b.n	8002fac <LL_ADC_REG_SetSequencerRanks+0xa0>
  }
  return __builtin_clz(value);
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	fab3 f383 	clz	r3, r3
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	68b9      	ldr	r1, [r7, #8]
 8002fae:	f001 011f 	and.w	r1, r1, #31
 8002fb2:	408b      	lsls	r3, r1
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002fba:	bf00      	nop
 8002fbc:	3724      	adds	r7, #36	; 0x24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	46021000 	.word	0x46021000

08002fcc <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b087      	sub	sp, #28
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d107      	bne.n	8002ff0 <LL_ADC_REG_SetSequencerChAdd+0x24>
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	0e9b      	lsrs	r3, r3, #26
 8002fe4:	f003 031f 	and.w	r3, r3, #31
 8002fe8:	2201      	movs	r2, #1
 8002fea:	fa02 f303 	lsl.w	r3, r2, r3
 8002fee:	e015      	b.n	800301c <LL_ADC_REG_SetSequencerChAdd+0x50>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	fa93 f3a3 	rbit	r3, r3
 8002ffa:	60fb      	str	r3, [r7, #12]
  return result;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8003006:	2320      	movs	r3, #32
 8003008:	e003      	b.n	8003012 <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	fab3 f383 	clz	r3, r3
 8003010:	b2db      	uxtb	r3, r3
 8003012:	f003 031f 	and.w	r3, r3, #31
 8003016:	2201      	movs	r2, #1
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003020:	431a      	orrs	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003026:	bf00      	nop
 8003028:	371c      	adds	r7, #28
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr

08003032 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003032:	b480      	push	{r7}
 8003034:	b083      	sub	sp, #12
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
 800303a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	0e9b      	lsrs	r3, r3, #26
 8003044:	f003 031f 	and.w	r3, r3, #31
 8003048:	2101      	movs	r1, #1
 800304a:	fa01 f303 	lsl.w	r3, r1, r3
 800304e:	43db      	mvns	r3, r3
 8003050:	401a      	ands	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
	...

08003064 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003064:	b480      	push	{r7}
 8003066:	b08d      	sub	sp, #52	; 0x34
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	4a3c      	ldr	r2, [pc, #240]	; (8003164 <LL_ADC_SetChannelSamplingTime+0x100>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d042      	beq.n	80030fe <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d104      	bne.n	800308c <LL_ADC_SetChannelSamplingTime+0x28>
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	0e9b      	lsrs	r3, r3, #26
 8003086:	f003 021f 	and.w	r2, r3, #31
 800308a:	e011      	b.n	80030b0 <LL_ADC_SetChannelSamplingTime+0x4c>
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003090:	6a3b      	ldr	r3, [r7, #32]
 8003092:	fa93 f3a3 	rbit	r3, r3
 8003096:	61fb      	str	r3, [r7, #28]
  return result;
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 80030a2:	2320      	movs	r3, #32
 80030a4:	e003      	b.n	80030ae <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	fab3 f383 	clz	r3, r3
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	0e5b      	lsrs	r3, r3, #25
 80030b4:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 80030b8:	460b      	mov	r3, r1
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	440b      	add	r3, r1
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	1ad2      	subs	r2, r2, r3
 80030c2:	4613      	mov	r3, r2
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	4413      	add	r3, r2
 80030c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	3314      	adds	r3, #20
 80030ce:	461a      	mov	r2, r3
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	0e5b      	lsrs	r3, r3, #25
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	f003 0304 	and.w	r3, r3, #4
 80030da:	4413      	add	r3, r2
 80030dc:	62bb      	str	r3, [r7, #40]	; 0x28
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 80030de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	2107      	movs	r1, #7
 80030e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ea:	43db      	mvns	r3, r3
 80030ec:	401a      	ands	r2, r3
 80030ee:	6879      	ldr	r1, [r7, #4]
 80030f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f2:	fa01 f303 	lsl.w	r3, r1, r3
 80030f6:	431a      	orrs	r2, r3
 80030f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fa:	601a      	str	r2, [r3, #0]
               ADC4_SAMPLING_TIME_CH_MASK,
               ((1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel)) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)                  \
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 80030fc:	e02c      	b.n	8003158 <LL_ADC_SetChannelSamplingTime+0xf4>
    MODIFY_REG(ADCx->SMPR1,
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	b2da      	uxtb	r2, r3
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d108      	bne.n	8003120 <LL_ADC_SetChannelSamplingTime+0xbc>
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	0e9b      	lsrs	r3, r3, #26
 8003112:	f003 031f 	and.w	r3, r3, #31
 8003116:	2101      	movs	r1, #1
 8003118:	fa01 f303 	lsl.w	r3, r1, r3
 800311c:	021b      	lsls	r3, r3, #8
 800311e:	e014      	b.n	800314a <LL_ADC_SetChannelSamplingTime+0xe6>
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	fa93 f3a3 	rbit	r3, r3
 800312a:	613b      	str	r3, [r7, #16]
  return result;
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <LL_ADC_SetChannelSamplingTime+0xd6>
    return 32U;
 8003136:	2320      	movs	r3, #32
 8003138:	e003      	b.n	8003142 <LL_ADC_SetChannelSamplingTime+0xde>
  return __builtin_clz(value);
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	fab3 f383 	clz	r3, r3
 8003140:	b2db      	uxtb	r3, r3
 8003142:	4619      	mov	r1, r3
 8003144:	2301      	movs	r3, #1
 8003146:	408b      	lsls	r3, r1
 8003148:	021b      	lsls	r3, r3, #8
 800314a:	6879      	ldr	r1, [r7, #4]
 800314c:	400b      	ands	r3, r1
 800314e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003152:	431a      	orrs	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	615a      	str	r2, [r3, #20]
}
 8003158:	bf00      	nop
 800315a:	3734      	adds	r7, #52	; 0x34
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr
 8003164:	46021000 	.word	0x46021000

08003168 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003180:	43db      	mvns	r3, r3
 8003182:	401a      	ands	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f003 0318 	and.w	r3, r3, #24
 800318a:	4908      	ldr	r1, [pc, #32]	; (80031ac <LL_ADC_SetChannelSingleDiff+0x44>)
 800318c:	40d9      	lsrs	r1, r3
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	400b      	ands	r3, r1
 8003192:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003196:	431a      	orrs	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800319e:	bf00      	nop
 80031a0:	3714      	adds	r7, #20
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	000fffff 	.word	0x000fffff

080031b0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80031c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	6093      	str	r3, [r2, #8]
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031e8:	d101      	bne.n	80031ee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80031ea:	2301      	movs	r3, #1
 80031ec:	e000      	b.n	80031f0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800320c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003210:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	609a      	str	r2, [r3, #8]
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003234:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003238:	d101      	bne.n	800323e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800323a:	2301      	movs	r3, #1
 800323c:	e000      	b.n	8003240 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800325c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003260:	f043 0201 	orr.w	r2, r3, #1
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	609a      	str	r2, [r3, #8]
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADDIS);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003284:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003288:	f043 0202 	orr.w	r2, r3, #2
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	609a      	str	r2, [r3, #8]
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d101      	bne.n	80032b4 <LL_ADC_IsEnabled+0x18>
 80032b0:	2301      	movs	r3, #1
 80032b2:	e000      	b.n	80032b6 <LL_ADC_IsEnabled+0x1a>
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d101      	bne.n	80032da <LL_ADC_IsDisableOngoing+0x18>
 80032d6:	2301      	movs	r3, #1
 80032d8:	e000      	b.n	80032dc <LL_ADC_IsDisableOngoing+0x1a>
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80032fc:	f043 0204 	orr.w	r2, r3, #4
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	609a      	str	r2, [r3, #8]
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003320:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003324:	f043 0210 	orr.w	r2, r3, #16
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f003 0304 	and.w	r3, r3, #4
 8003348:	2b04      	cmp	r3, #4
 800334a:	d101      	bne.n	8003350 <LL_ADC_REG_IsConversionOngoing+0x18>
 800334c:	2301      	movs	r3, #1
 800334e:	e000      	b.n	8003352 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800335e:	b480      	push	{r7}
 8003360:	b083      	sub	sp, #12
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_JADSTP);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800336e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003372:	f043 0220 	orr.w	r2, r3, #32
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	609a      	str	r2, [r3, #8]
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr

08003386 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003386:	b480      	push	{r7}
 8003388:	b083      	sub	sp, #12
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 0308 	and.w	r3, r3, #8
 8003396:	2b08      	cmp	r3, #8
 8003398:	d101      	bne.n	800339e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800339a:	2301      	movs	r3, #1
 800339c:	e000      	b.n	80033a0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b08a      	sub	sp, #40	; 0x28
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033b4:	2300      	movs	r3, #0
 80033b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 80033ba:	2300      	movs	r3, #0
 80033bc:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 80033be:	2300      	movs	r3, #0
 80033c0:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d101      	bne.n	80033cc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e2e3      	b.n	8003994 <HAL_ADC_Init+0x5e8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d003      	beq.n	80033dc <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a92      	ldr	r2, [pc, #584]	; (8003624 <HAL_ADC_Init+0x278>)
 80033da:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d109      	bne.n	80033f8 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f7fe ff9f 	bl	8002328 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7ff fee9 	bl	80031d4 <LL_ADC_IsDeepPowerDownEnabled>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d004      	beq.n	8003412 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff fecf 	bl	80031b0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4618      	mov	r0, r3
 8003418:	f7ff ff04 	bl	8003224 <LL_ADC_IsInternalRegulatorEnabled>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d115      	bne.n	800344e <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4618      	mov	r0, r3
 8003428:	f7ff fee8 	bl	80031fc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800342c:	4b7e      	ldr	r3, [pc, #504]	; (8003628 <HAL_ADC_Init+0x27c>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	099b      	lsrs	r3, r3, #6
 8003432:	4a7e      	ldr	r2, [pc, #504]	; (800362c <HAL_ADC_Init+0x280>)
 8003434:	fba2 2303 	umull	r2, r3, r2, r3
 8003438:	099b      	lsrs	r3, r3, #6
 800343a:	3301      	adds	r3, #1
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003440:	e002      	b.n	8003448 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	3b01      	subs	r3, #1
 8003446:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1f9      	bne.n	8003442 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4618      	mov	r0, r3
 8003454:	f7ff fee6 	bl	8003224 <LL_ADC_IsInternalRegulatorEnabled>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10e      	bne.n	800347c <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003462:	f043 0210 	orr.w	r2, r3, #16
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800346e:	f043 0201 	orr.w	r2, r3, #1
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4618      	mov	r0, r3
 8003482:	f7ff ff59 	bl	8003338 <LL_ADC_REG_IsConversionOngoing>
 8003486:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800348c:	f003 0310 	and.w	r3, r3, #16
 8003490:	2b00      	cmp	r3, #0
 8003492:	f040 8274 	bne.w	800397e <HAL_ADC_Init+0x5d2>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	2b00      	cmp	r3, #0
 800349a:	f040 8270 	bne.w	800397e <HAL_ADC_Init+0x5d2>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034a2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80034a6:	f043 0202 	orr.w	r2, r3, #2
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7ff fef2 	bl	800329c <LL_ADC_IsEnabled>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d14e      	bne.n	800355c <HAL_ADC_Init+0x1b0>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a58      	ldr	r2, [pc, #352]	; (8003624 <HAL_ADC_Init+0x278>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d028      	beq.n	800351a <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a58      	ldr	r2, [pc, #352]	; (8003630 <HAL_ADC_Init+0x284>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d109      	bne.n	80034e6 <HAL_ADC_Init+0x13a>
 80034d2:	4857      	ldr	r0, [pc, #348]	; (8003630 <HAL_ADC_Init+0x284>)
 80034d4:	f7ff fee2 	bl	800329c <LL_ADC_IsEnabled>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	bf0c      	ite	eq
 80034de:	2301      	moveq	r3, #1
 80034e0:	2300      	movne	r3, #0
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	e008      	b.n	80034f8 <HAL_ADC_Init+0x14c>
 80034e6:	484f      	ldr	r0, [pc, #316]	; (8003624 <HAL_ADC_Init+0x278>)
 80034e8:	f7ff fed8 	bl	800329c <LL_ADC_IsEnabled>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	bf0c      	ite	eq
 80034f2:	2301      	moveq	r3, #1
 80034f4:	2300      	movne	r3, #0
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d02f      	beq.n	800355c <HAL_ADC_Init+0x1b0>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a4b      	ldr	r2, [pc, #300]	; (8003630 <HAL_ADC_Init+0x284>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d101      	bne.n	800350a <HAL_ADC_Init+0x15e>
 8003506:	4a4b      	ldr	r2, [pc, #300]	; (8003634 <HAL_ADC_Init+0x288>)
 8003508:	e000      	b.n	800350c <HAL_ADC_Init+0x160>
 800350a:	4a4b      	ldr	r2, [pc, #300]	; (8003638 <HAL_ADC_Init+0x28c>)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	4619      	mov	r1, r3
 8003512:	4610      	mov	r0, r2
 8003514:	f7ff fc1a 	bl	8002d4c <LL_ADC_SetCommonClock>
 8003518:	e020      	b.n	800355c <HAL_ADC_Init+0x1b0>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        MODIFY_REG(hadc->Instance->CFGR1,
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	f023 010c 	bic.w	r1, r3, #12
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800352c:	4293      	cmp	r3, r2
 800352e:	d005      	beq.n	800353c <HAL_ADC_Init+0x190>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	3b01      	subs	r3, #1
 8003536:	f003 030c 	and.w	r3, r3, #12
 800353a:	e000      	b.n	800353e <HAL_ADC_Init+0x192>
 800353c:	230c      	movs	r3, #12
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6812      	ldr	r2, [r2, #0]
 8003542:	430b      	orrs	r3, r1
 8003544:	60d3      	str	r3, [r2, #12]
                   ADC_CFGR1_RES,
                   __LL_ADC_RESOLUTION_ADC1_TO_ADC4(hadc->Init.Resolution));   /* Convert resolution for the ADC4 */

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8003546:	4b3c      	ldr	r3, [pc, #240]	; (8003638 <HAL_ADC_Init+0x28c>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003556:	4938      	ldr	r1, [pc, #224]	; (8003638 <HAL_ADC_Init+0x28c>)
 8003558:	4313      	orrs	r3, r2
 800355a:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a30      	ldr	r2, [pc, #192]	; (8003624 <HAL_ADC_Init+0x278>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d010      	beq.n	8003588 <HAL_ADC_Init+0x1dc>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800356c:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003572:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8003578:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003580:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8003582:	4313      	orrs	r3, r2
 8003584:	623b      	str	r3, [r7, #32]
 8003586:	e030      	b.n	80035ea <HAL_ADC_Init+0x23e>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	7f1b      	ldrb	r3, [r3, #28]
 800358c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003594:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003596:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800359c:	2a00      	cmp	r2, #0
 800359e:	d002      	beq.n	80035a6 <HAL_ADC_Init+0x1fa>
 80035a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80035a4:	e000      	b.n	80035a8 <HAL_ADC_Init+0x1fc>
 80035a6:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80035a8:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80035ae:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	da04      	bge.n	80035c2 <HAL_ADC_Init+0x216>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80035c0:	e001      	b.n	80035c6 <HAL_ADC_Init+0x21a>
 80035c2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 80035c6:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4918      	ldr	r1, [pc, #96]	; (8003630 <HAL_ADC_Init+0x284>)
 80035ce:	428b      	cmp	r3, r1
 80035d0:	d103      	bne.n	80035da <HAL_ADC_Init+0x22e>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035d8:	e003      	b.n	80035e2 <HAL_ADC_Init+0x236>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035e0:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80035e2:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035e4:	6a3a      	ldr	r2, [r7, #32]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d12f      	bne.n	8003654 <HAL_ADC_Init+0x2a8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a0a      	ldr	r2, [pc, #40]	; (8003624 <HAL_ADC_Init+0x278>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d007      	beq.n	800360e <HAL_ADC_Init+0x262>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003602:	3b01      	subs	r3, #1
 8003604:	045b      	lsls	r3, r3, #17
 8003606:	6a3a      	ldr	r2, [r7, #32]
 8003608:	4313      	orrs	r3, r2
 800360a:	623b      	str	r3, [r7, #32]
 800360c:	e022      	b.n	8003654 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003614:	2b00      	cmp	r3, #0
 8003616:	d111      	bne.n	800363c <HAL_ADC_Init+0x290>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003618:	6a3b      	ldr	r3, [r7, #32]
 800361a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800361e:	623b      	str	r3, [r7, #32]
 8003620:	e018      	b.n	8003654 <HAL_ADC_Init+0x2a8>
 8003622:	bf00      	nop
 8003624:	46021000 	.word	0x46021000
 8003628:	20000200 	.word	0x20000200
 800362c:	053e2d63 	.word	0x053e2d63
 8003630:	42028000 	.word	0x42028000
 8003634:	42028308 	.word	0x42028308
 8003638:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003640:	f043 0220 	orr.w	r2, r3, #32
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800364c:	f043 0201 	orr.w	r2, r3, #1
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a93      	ldr	r2, [pc, #588]	; (80038a8 <HAL_ADC_Init+0x4fc>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d018      	beq.n	8003690 <HAL_ADC_Init+0x2e4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003662:	2b00      	cmp	r3, #0
 8003664:	d009      	beq.n	800367a <HAL_ADC_Init+0x2ce>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800366a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003672:	4313      	orrs	r3, r2
 8003674:	6a3a      	ldr	r2, [r7, #32]
 8003676:	4313      	orrs	r3, r2
 8003678:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68da      	ldr	r2, [r3, #12]
 8003680:	4b8a      	ldr	r3, [pc, #552]	; (80038ac <HAL_ADC_Init+0x500>)
 8003682:	4013      	ands	r3, r2
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6812      	ldr	r2, [r2, #0]
 8003688:	6a39      	ldr	r1, [r7, #32]
 800368a:	430b      	orrs	r3, r1
 800368c:	60d3      	str	r3, [r2, #12]
 800368e:	e033      	b.n	80036f8 <HAL_ADC_Init+0x34c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003694:	2b00      	cmp	r3, #0
 8003696:	d009      	beq.n	80036ac <HAL_ADC_Init+0x300>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800369c:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a4:	4313      	orrs	r3, r2
 80036a6:	6a3a      	ldr	r2, [r7, #32]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	f423 33bf 	bic.w	r3, r3, #97792	; 0x17e00
 80036b6:	f423 73f9 	bic.w	r3, r3, #498	; 0x1f2
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	6812      	ldr	r2, [r2, #0]
 80036be:	6a39      	ldr	r1, [r7, #32]
 80036c0:	430b      	orrs	r3, r1
 80036c2:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN   |
                 ADC4_CFGR1_SCANDIR |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d008      	beq.n	80036de <HAL_ADC_Init+0x332>
      {
        SET_BIT(hadc->Instance->PW, hadc->Init.LowPowerAutoPowerOff);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a1a      	ldr	r2, [r3, #32]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	430a      	orrs	r2, r1
 80036dc:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d008      	beq.n	80036f8 <HAL_ADC_Init+0x34c>
      {
        SET_BIT(hadc->Instance->PW, hadc->Init.VrefProtection);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a6a      	ldr	r2, [pc, #424]	; (80038a8 <HAL_ADC_Init+0x4fc>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	f000 8093 	beq.w	800382a <HAL_ADC_Init+0x47e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4618      	mov	r0, r3
 800370a:	f7ff fe15 	bl	8003338 <LL_ADC_REG_IsConversionOngoing>
 800370e:	6138      	str	r0, [r7, #16]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4618      	mov	r0, r3
 8003716:	f7ff fe36 	bl	8003386 <LL_ADC_INJ_IsConversionOngoing>
 800371a:	60f8      	str	r0, [r7, #12]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d161      	bne.n	80037e6 <HAL_ADC_Init+0x43a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d15e      	bne.n	80037e6 <HAL_ADC_Init+0x43a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	7f1b      	ldrb	r3, [r3, #28]
 800372c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	495f      	ldr	r1, [pc, #380]	; (80038b0 <HAL_ADC_Init+0x504>)
 8003734:	428b      	cmp	r3, r1
 8003736:	d102      	bne.n	800373e <HAL_ADC_Init+0x392>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800373c:	e002      	b.n	8003744 <HAL_ADC_Init+0x398>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003742:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003744:	4313      	orrs	r3, r2
 8003746:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003752:	f023 0303 	bic.w	r3, r3, #3
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	6812      	ldr	r2, [r2, #0]
 800375a:	6a39      	ldr	r1, [r7, #32]
 800375c:	430b      	orrs	r3, r1
 800375e:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d007      	beq.n	8003778 <HAL_ADC_Init+0x3cc>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	4619      	mov	r1, r3
 8003772:	4610      	mov	r0, r2
 8003774:	f7ff fb75 	bl	8002e62 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800377e:	2b01      	cmp	r3, #1
 8003780:	d11e      	bne.n	80037c0 <HAL_ADC_Init+0x414>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003786:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	691a      	ldr	r2, [r3, #16]
 800378e:	4b49      	ldr	r3, [pc, #292]	; (80038b4 <HAL_ADC_Init+0x508>)
 8003790:	4013      	ands	r3, r2
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003796:	0411      	lsls	r1, r2, #16
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800379c:	4311      	orrs	r1, r2
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80037a2:	4311      	orrs	r1, r2
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80037a8:	4311      	orrs	r1, r2
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80037ae:	0892      	lsrs	r2, r2, #2
 80037b0:	430a      	orrs	r2, r1
 80037b2:	431a      	orrs	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f042 0201 	orr.w	r2, r2, #1
 80037bc:	611a      	str	r2, [r3, #16]
 80037be:	e007      	b.n	80037d0 <HAL_ADC_Init+0x424>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	691a      	ldr	r2, [r3, #16]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 0201 	bic.w	r2, r2, #1
 80037ce:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d10c      	bne.n	8003808 <HAL_ADC_Init+0x45c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f4:	f023 010f 	bic.w	r1, r3, #15
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fc:	1e5a      	subs	r2, r3, #1
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	430a      	orrs	r2, r1
 8003804:	631a      	str	r2, [r3, #48]	; 0x30
 8003806:	e007      	b.n	8003818 <HAL_ADC_Init+0x46c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 020f 	bic.w	r2, r2, #15
 8003816:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800381c:	f023 0303 	bic.w	r3, r3, #3
 8003820:	f043 0201 	orr.w	r2, r3, #1
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003828:	e0b2      	b.n	8003990 <HAL_ADC_Init+0x5e4>
      /*  - oversampling enable                                                 */
      /*  - oversampling ratio                                                  */
      /*  - oversampling shift                                                  */
      /*  - oversampling discontinuous mode (triggered mode)                    */
      /*  - trigger frequency mode                                              */
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                   hadc->Init.Oversampling.RightBitShift |
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8003832:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.TriggeredMode |
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                   hadc->Init.Oversampling.RightBitShift |
 8003838:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                   hadc->Init.Oversampling.TriggeredMode |
 800383e:	4313      	orrs	r3, r2
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8003840:	69fa      	ldr	r2, [r7, #28]
 8003842:	4313      	orrs	r3, r2
 8003844:	61fb      	str	r3, [r7, #28]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800384c:	2b01      	cmp	r3, #1
 800384e:	d103      	bne.n	8003858 <HAL_ADC_Init+0x4ac>
      {
        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	f043 0301 	orr.w	r3, r3, #1
 8003856:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	691a      	ldr	r2, [r3, #16]
 800385e:	4b16      	ldr	r3, [pc, #88]	; (80038b8 <HAL_ADC_Init+0x50c>)
 8003860:	4013      	ands	r3, r2
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6812      	ldr	r2, [r2, #0]
 8003866:	69f9      	ldr	r1, [r7, #28]
 8003868:	430b      	orrs	r3, r1
 800386a:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6818      	ldr	r0, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003874:	461a      	mov	r2, r3
 8003876:	2100      	movs	r1, #0
 8003878:	f7ff fb16 	bl	8002ea8 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6818      	ldr	r0, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003884:	461a      	mov	r2, r3
 8003886:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 800388a:	f7ff fb0d 	bl	8002ea8 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d112      	bne.n	80038bc <HAL_ADC_Init+0x510>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f062 020f 	orn	r2, r2, #15
 80038a4:	629a      	str	r2, [r3, #40]	; 0x28
 80038a6:	e044      	b.n	8003932 <HAL_ADC_Init+0x586>
 80038a8:	46021000 	.word	0x46021000
 80038ac:	fff0c013 	.word	0xfff0c013
 80038b0:	42028000 	.word	0x42028000
 80038b4:	fc00f81e 	.word	0xfc00f81e
 80038b8:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038c4:	d135      	bne.n	8003932 <HAL_ADC_Init+0x586>
      {
        /* Count number of ranks available in HAL ADC handle variable */
        uint32_t ADCGroupRegularSequencerRanksCount;

        /* Parse all ranks from 1 to 8 */
        for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL);                    \
 80038c6:	2300      	movs	r3, #0
 80038c8:	61bb      	str	r3, [r7, #24]
 80038ca:	e00d      	b.n	80038e8 <HAL_ADC_Init+0x53c>
             ADCGroupRegularSequencerRanksCount++)
        {
          /* Check each sequencer rank until value of end of sequence */
          if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	fa22 f303 	lsr.w	r3, r2, r3
 80038da:	f003 030f 	and.w	r3, r3, #15
 80038de:	2b0f      	cmp	r3, #15
 80038e0:	d006      	beq.n	80038f0 <HAL_ADC_Init+0x544>
             ADCGroupRegularSequencerRanksCount++)
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	3301      	adds	r3, #1
 80038e6:	61bb      	str	r3, [r7, #24]
        for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL);                    \
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	2b07      	cmp	r3, #7
 80038ec:	d9ee      	bls.n	80038cc <HAL_ADC_Init+0x520>
 80038ee:	e000      	b.n	80038f2 <HAL_ADC_Init+0x546>
              ADC_CHSELR_SQ1)
          {
            break;
 80038f0:	bf00      	nop
          }
        }

        if (ADCGroupRegularSequencerRanksCount == 1UL)
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d108      	bne.n	800390a <HAL_ADC_Init+0x55e>
        {
          /* Set ADC group regular sequencer:                                   */
          /* Set sequencer scan length by clearing ranks above rank 1           */
          /* and do not modify rank 1 value.                                    */
          SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f062 020f 	orn	r2, r2, #15
 8003906:	629a      	str	r2, [r3, #40]	; 0x28
 8003908:	e013      	b.n	8003932 <HAL_ADC_Init+0x586>
          /*          therefore after the first call of "HAL_ADC_Init()",        */
          /*          each rank corresponding to parameter "NbrOfConversion"    */
          /*          must be set using "HAL_ADC_ConfigChannel()".              */
          /*  - Set sequencer scan length by clearing ranks above maximum rank  */
          /*    and do not modify other ranks value.                            */
          MODIFY_REG(hadc->Instance->CHSELR,
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003914:	3b01      	subs	r3, #1
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	f003 031c 	and.w	r3, r3, #28
 800391c:	f06f 020f 	mvn.w	r2, #15
 8003920:	fa02 f103 	lsl.w	r1, r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	430a      	orrs	r2, r1
 8003930:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68da      	ldr	r2, [r3, #12]
 8003938:	4b18      	ldr	r3, [pc, #96]	; (800399c <HAL_ADC_Init+0x5f0>)
 800393a:	4013      	ands	r3, r2
 800393c:	6a3a      	ldr	r2, [r7, #32]
 800393e:	429a      	cmp	r2, r3
 8003940:	d10b      	bne.n	800395a <HAL_ADC_Init+0x5ae>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800394c:	f023 0303 	bic.w	r3, r3, #3
 8003950:	f043 0201 	orr.w	r2, r3, #1
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003958:	e01a      	b.n	8003990 <HAL_ADC_Init+0x5e4>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800395e:	f023 0312 	bic.w	r3, r3, #18
 8003962:	f043 0210 	orr.w	r2, r3, #16
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800396e:	f043 0201 	orr.w	r2, r3, #1
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800397c:	e008      	b.n	8003990 <HAL_ADC_Init+0x5e4>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003982:	f043 0210 	orr.w	r2, r3, #16
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 8003990:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003994:	4618      	mov	r0, r3
 8003996:	3728      	adds	r7, #40	; 0x28
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	833ffff3 	.word	0x833ffff3

080039a0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff fcc3 	bl	8003338 <LL_ADC_REG_IsConversionOngoing>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d15d      	bne.n	8003a74 <HAL_ADC_Start+0xd4>
  {
    __HAL_LOCK(hadc);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d101      	bne.n	80039c6 <HAL_ADC_Start+0x26>
 80039c2:	2302      	movs	r3, #2
 80039c4:	e059      	b.n	8003a7a <HAL_ADC_Start+0xda>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 ffac 	bl	800492c <ADC_Enable>
 80039d4:	4603      	mov	r3, r0
 80039d6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80039d8:	7bfb      	ldrb	r3, [r7, #15]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d145      	bne.n	8003a6a <HAL_ADC_Start+0xca>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039e6:	f023 0301 	bic.w	r3, r3, #1
 80039ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	679a      	str	r2, [r3, #120]	; 0x78
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a23      	ldr	r2, [pc, #140]	; (8003a84 <HAL_ADC_Start+0xe4>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d011      	beq.n	8003a20 <HAL_ADC_Start+0x80>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */
        /* Set ADC error code */
        /* Check if a conversion is on going on ADC group injected */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a08:	d106      	bne.n	8003a18 <HAL_ADC_Start+0x78>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a0e:	f023 0206 	bic.w	r2, r3, #6
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	67da      	str	r2, [r3, #124]	; 0x7c
 8003a16:	e006      	b.n	8003a26 <HAL_ADC_Start+0x86>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	67da      	str	r2, [r3, #124]	; 0x7c
 8003a1e:	e002      	b.n	8003a26 <HAL_ADC_Start+0x86>
      }
      else
      {
        /* Set ADC error code */
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	67da      	str	r2, [r3, #124]	; 0x7c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	221c      	movs	r2, #28
 8003a2c:	601a      	str	r2, [r3, #0]

      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */

      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a12      	ldr	r2, [pc, #72]	; (8003a84 <HAL_ADC_Start+0xe4>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d00e      	beq.n	8003a5e <HAL_ADC_Start+0xbe>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }

        }
#else
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_JAUTO) != 0UL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d007      	beq.n	8003a5e <HAL_ADC_Start+0xbe>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a52:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003a56:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	679a      	str	r2, [r3, #120]	; 0x78
        }
#endif /* ADC_MULTIMODE_SUPPORT */
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7ff fc40 	bl	80032e8 <LL_ADC_REG_StartConversion>
 8003a68:	e006      	b.n	8003a78 <HAL_ADC_Start+0xd8>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8003a72:	e001      	b.n	8003a78 <HAL_ADC_Start+0xd8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003a74:	2302      	movs	r3, #2
 8003a76:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8003a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	46021000 	.word	0x46021000

08003a88 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d101      	bne.n	8003a9e <HAL_ADC_Stop+0x16>
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	e023      	b.n	8003ae6 <HAL_ADC_Stop+0x5e>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003aa6:	2103      	movs	r1, #3
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 fe83 	bl	80047b4 <ADC_ConversionStop>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003ab2:	7bfb      	ldrb	r3, [r7, #15]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d111      	bne.n	8003adc <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 ffa3 	bl	8004a04 <ADC_Disable>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003ac2:	7bfb      	ldrb	r3, [r7, #15]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d109      	bne.n	8003adc <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003acc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003ad0:	f023 0301 	bic.w	r3, r3, #1
 8003ad4:	f043 0201 	orr.w	r2, r3, #1
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	679a      	str	r2, [r3, #120]	; 0x78
                        HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return tmp_hal_status;
 8003ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
	...

08003af0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	2b08      	cmp	r3, #8
 8003b00:	d102      	bne.n	8003b08 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8003b02:	2308      	movs	r3, #8
 8003b04:	617b      	str	r3, [r7, #20]
 8003b06:	e027      	b.n	8003b58 <HAL_ADC_PollForConversion+0x68>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */

    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a6a      	ldr	r2, [pc, #424]	; (8003cb8 <HAL_ADC_PollForConversion+0x1c8>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d011      	beq.n	8003b36 <HAL_ADC_PollForConversion+0x46>
          tmp_flag_end = (ADC_FLAG_EOC);
        }
      }
#else
      /* Check ADC DMA mode */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT_0) != 0UL)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d007      	beq.n	8003b30 <HAL_ADC_PollForConversion+0x40>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b24:	f043 0220 	orr.w	r2, r3, #32
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	679a      	str	r2, [r3, #120]	; 0x78
        return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e0be      	b.n	8003cae <HAL_ADC_PollForConversion+0x1be>
      }
      else
      {
        tmp_flag_end = (ADC_FLAG_EOC);
 8003b30:	2304      	movs	r3, #4
 8003b32:	617b      	str	r3, [r7, #20]
 8003b34:	e010      	b.n	8003b58 <HAL_ADC_PollForConversion+0x68>
      }
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      if ((hadc->Instance->CFGR1 & ADC4_CFGR1_DMAEN) != 0UL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d007      	beq.n	8003b54 <HAL_ADC_PollForConversion+0x64>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b48:	f043 0220 	orr.w	r2, r3, #32
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	679a      	str	r2, [r3, #120]	; 0x78
        return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e0ac      	b.n	8003cae <HAL_ADC_PollForConversion+0x1be>
      }
      else
      {
        tmp_flag_end = (ADC_FLAG_EOC);
 8003b54:	2304      	movs	r3, #4
 8003b56:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003b58:	f7ff f8ba 	bl	8002cd0 <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003b5e:	e021      	b.n	8003ba4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b66:	d01d      	beq.n	8003ba4 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003b68:	f7ff f8b2 	bl	8002cd0 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d302      	bcc.n	8003b7e <HAL_ADC_PollForConversion+0x8e>
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d112      	bne.n	8003ba4 <HAL_ADC_PollForConversion+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	4013      	ands	r3, r2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d10b      	bne.n	8003ba4 <HAL_ADC_PollForConversion+0xb4>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b90:	f043 0204 	orr.w	r2, r3, #4
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	679a      	str	r2, [r3, #120]	; 0x78

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e084      	b.n	8003cae <HAL_ADC_PollForConversion+0x1be>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	4013      	ands	r3, r2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d0d6      	beq.n	8003b60 <HAL_ADC_PollForConversion+0x70>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bb6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7ff f98f 	bl	8002ee6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d06e      	beq.n	8003cac <HAL_ADC_PollForConversion+0x1bc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d169      	bne.n	8003cac <HAL_ADC_PollForConversion+0x1bc>
     )
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a36      	ldr	r2, [pc, #216]	; (8003cb8 <HAL_ADC_PollForConversion+0x1c8>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d02e      	beq.n	8003c40 <HAL_ADC_PollForConversion+0x150>
    {
      /* Check whether end of sequence is reached */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0308 	and.w	r3, r3, #8
 8003bec:	2b08      	cmp	r3, #8
 8003bee:	d111      	bne.n	8003c14 <HAL_ADC_PollForConversion+0x124>
      {
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bf4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	679a      	str	r2, [r3, #120]	; 0x78

        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d105      	bne.n	8003c14 <HAL_ADC_PollForConversion+0x124>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c0c:	f043 0201 	orr.w	r2, r3, #1
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	679a      	str	r2, [r3, #120]	; 0x78
        tmp_adc_master = ADC_MASTER_REGISTER(hadc);
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
      }
#else
      /* Retrieve handle ADC CFGR register */
      tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */
      /* Clear polled flag */
      if (tmp_flag_end == ADC_FLAG_EOS)
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	2b08      	cmp	r3, #8
 8003c20:	d104      	bne.n	8003c2c <HAL_ADC_PollForConversion+0x13c>
      {
        __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2208      	movs	r2, #8
 8003c28:	601a      	str	r2, [r3, #0]
 8003c2a:	e03f      	b.n	8003cac <HAL_ADC_PollForConversion+0x1bc>
      else
      {
        /* Clear end of conversion EOC flag of regular group if low power feature */
        /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
        /* until data register is read using function HAL_ADC_GetValue().         */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_AUTDLY) == 0UL)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d13a      	bne.n	8003cac <HAL_ADC_PollForConversion+0x1bc>
        {
          __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	220c      	movs	r2, #12
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	e035      	b.n	8003cac <HAL_ADC_PollForConversion+0x1bc>
      }
    }
    else
    {
      /* Check whether end of sequence is reached */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0308 	and.w	r3, r3, #8
 8003c4a:	2b08      	cmp	r3, #8
 8003c4c:	d126      	bne.n	8003c9c <HAL_ADC_PollForConversion+0x1ac>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
        /* ADSTART==0 (no conversion on going)                                  */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7ff fb70 	bl	8003338 <LL_ADC_REG_IsConversionOngoing>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d112      	bne.n	8003c84 <HAL_ADC_PollForConversion+0x194>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in          */
          /* HAL_Start_IT(), but is not disabled here because can be used       */
          /* by overrun IRQ process below.                                      */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f022 020c 	bic.w	r2, r2, #12
 8003c6c:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c76:	f023 0301 	bic.w	r3, r3, #1
 8003c7a:	f043 0201 	orr.w	r2, r3, #1
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	679a      	str	r2, [r3, #120]	; 0x78
 8003c82:	e00b      	b.n	8003c9c <HAL_ADC_PollForConversion+0x1ac>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c88:	f043 0220 	orr.w	r2, r3, #32
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c94:	f043 0201 	orr.w	r2, r3, #1
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	67da      	str	r2, [r3, #124]	; 0x7c
      }

      /* Clear end of conversion flag of regular group if low power feature       */
      /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
      /* until data register is read using function HAL_ADC_GetValue().           */
      if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	7f1b      	ldrb	r3, [r3, #28]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d103      	bne.n	8003cac <HAL_ADC_PollForConversion+0x1bc>
      {
        /* Clear regular group conversion flag */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	220c      	movs	r2, #12
 8003caa:	601a      	str	r2, [r3, #0]
      }

    }
  }

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3718      	adds	r7, #24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	46021000 	.word	0x46021000

08003cbc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
	...

08003cd8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b0a4      	sub	sp, #144	; 0x90
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a94      	ldr	r2, [pc, #592]	; (8003f44 <HAL_ADC_ConfigChannel+0x26c>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d103      	bne.n	8003cfe <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d102      	bne.n	8003d0e <HAL_ADC_ConfigChannel+0x36>
 8003d08:	2302      	movs	r3, #2
 8003d0a:	f000 bd4b 	b.w	80047a4 <HAL_ADC_ConfigChannel+0xacc>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7ff fb0c 	bl	8003338 <LL_ADC_REG_IsConversionOngoing>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f040 852b 	bne.w	800477e <HAL_ADC_ConfigChannel+0xaa6>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a85      	ldr	r2, [pc, #532]	; (8003f44 <HAL_ADC_ConfigChannel+0x26c>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	f000 827f 	beq.w	8004232 <HAL_ADC_ConfigChannel+0x55a>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d108      	bne.n	8003d52 <HAL_ADC_ConfigChannel+0x7a>
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	0e9b      	lsrs	r3, r3, #26
 8003d46:	f003 031f 	and.w	r3, r3, #31
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d50:	e016      	b.n	8003d80 <HAL_ADC_ConfigChannel+0xa8>
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d5a:	fa93 f3a3 	rbit	r3, r3
 8003d5e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003d60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d62:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003d64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d101      	bne.n	8003d6e <HAL_ADC_ConfigChannel+0x96>
    return 32U;
 8003d6a:	2320      	movs	r3, #32
 8003d6c:	e003      	b.n	8003d76 <HAL_ADC_ConfigChannel+0x9e>
  return __builtin_clz(value);
 8003d6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d70:	fab3 f383 	clz	r3, r3
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	f003 031f 	and.w	r3, r3, #31
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	6812      	ldr	r2, [r2, #0]
 8003d84:	69d1      	ldr	r1, [r2, #28]
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	6812      	ldr	r2, [r2, #0]
 8003d8a:	430b      	orrs	r3, r1
 8003d8c:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6818      	ldr	r0, [r3, #0]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	6859      	ldr	r1, [r3, #4]
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	f7ff f8b6 	bl	8002f0c <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7ff fac7 	bl	8003338 <LL_ADC_REG_IsConversionOngoing>
 8003daa:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7ff fae7 	bl	8003386 <LL_ADC_INJ_IsConversionOngoing>
 8003db8:	67f8      	str	r0, [r7, #124]	; 0x7c
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003dba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f040 8087 	bne.w	8003ed2 <HAL_ADC_ConfigChannel+0x1fa>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003dc4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f040 8083 	bne.w	8003ed2 <HAL_ADC_ConfigChannel+0x1fa>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6818      	ldr	r0, [r3, #0]
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	6819      	ldr	r1, [r3, #0]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	461a      	mov	r2, r3
 8003dda:	f7ff f943 	bl	8003064 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	695a      	ldr	r2, [r3, #20]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	089b      	lsrs	r3, r3, #2
 8003dea:	f003 0303 	and.w	r3, r3, #3
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	67bb      	str	r3, [r7, #120]	; 0x78

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	d021      	beq.n	8003e42 <HAL_ADC_ConfigChannel+0x16a>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6818      	ldr	r0, [r3, #0]
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	6919      	ldr	r1, [r3, #16]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e0c:	f7fe ffd2 	bl	8002db4 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6818      	ldr	r0, [r3, #0]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	6919      	ldr	r1, [r3, #16]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	69db      	ldr	r3, [r3, #28]
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	f7fe ffea 	bl	8002df6 <LL_ADC_SetOffsetSign>
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,                  \
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6818      	ldr	r0, [r3, #0]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	6919      	ldr	r1, [r3, #16]
                                           (pConfig->OffsetSignedSaturation == ENABLE)             \
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	7e5b      	ldrb	r3, [r3, #25]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,                  \
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d102      	bne.n	8003e38 <HAL_ADC_ConfigChannel+0x160>
 8003e32:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003e36:	e000      	b.n	8003e3a <HAL_ADC_ConfigChannel+0x162>
 8003e38:	2300      	movs	r3, #0
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	f7fe fff6 	bl	8002e2c <LL_ADC_SetOffsetSignedSaturation>
 8003e40:	e047      	b.n	8003ed2 <HAL_ADC_ConfigChannel+0x1fa>
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
            If this is the case, offset OFRx is disabled since
            pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e48:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	06db      	lsls	r3, r3, #27
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d107      	bne.n	8003e66 <HAL_ADC_ConfigChannel+0x18e>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSAT);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003e64:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e6c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	06db      	lsls	r3, r3, #27
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d107      	bne.n	8003e8a <HAL_ADC_ConfigChannel+0x1b2>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSAT);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003e88:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e90:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	06db      	lsls	r3, r3, #27
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d107      	bne.n	8003eae <HAL_ADC_ConfigChannel+0x1d6>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSAT);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003eac:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eb4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	06db      	lsls	r3, r3, #27
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d107      	bne.n	8003ed2 <HAL_ADC_ConfigChannel+0x1fa>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSAT);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003ed0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7ff f9e0 	bl	800329c <LL_ADC_IsEnabled>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f040 845a 	bne.w	8004798 <HAL_ADC_ConfigChannel+0xac0>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6818      	ldr	r0, [r3, #0]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	6819      	ldr	r1, [r3, #0]
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	f7ff f939 	bl	8003168 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003efe:	f040 80d9 	bne.w	80040b4 <HAL_ADC_ConfigChannel+0x3dc>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10b      	bne.n	8003f26 <HAL_ADC_ConfigChannel+0x24e>
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	0e9b      	lsrs	r3, r3, #26
 8003f14:	3301      	adds	r3, #1
 8003f16:	f003 031f 	and.w	r3, r3, #31
 8003f1a:	2b09      	cmp	r3, #9
 8003f1c:	bf94      	ite	ls
 8003f1e:	2301      	movls	r3, #1
 8003f20:	2300      	movhi	r3, #0
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	e01c      	b.n	8003f60 <HAL_ADC_ConfigChannel+0x288>
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f2e:	fa93 f3a3 	rbit	r3, r3
 8003f32:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003f34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f36:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003f38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d104      	bne.n	8003f48 <HAL_ADC_ConfigChannel+0x270>
    return 32U;
 8003f3e:	2320      	movs	r3, #32
 8003f40:	e006      	b.n	8003f50 <HAL_ADC_ConfigChannel+0x278>
 8003f42:	bf00      	nop
 8003f44:	46021000 	.word	0x46021000
  return __builtin_clz(value);
 8003f48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f4a:	fab3 f383 	clz	r3, r3
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	3301      	adds	r3, #1
 8003f52:	f003 031f 	and.w	r3, r3, #31
 8003f56:	2b09      	cmp	r3, #9
 8003f58:	bf94      	ite	ls
 8003f5a:	2301      	movls	r3, #1
 8003f5c:	2300      	movhi	r3, #0
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d04d      	beq.n	8004000 <HAL_ADC_ConfigChannel+0x328>
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d107      	bne.n	8003f80 <HAL_ADC_ConfigChannel+0x2a8>
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	0e9b      	lsrs	r3, r3, #26
 8003f76:	3301      	adds	r3, #1
 8003f78:	069b      	lsls	r3, r3, #26
 8003f7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f7e:	e015      	b.n	8003fac <HAL_ADC_ConfigChannel+0x2d4>
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f88:	fa93 f3a3 	rbit	r3, r3
 8003f8c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003f8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f90:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003f92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <HAL_ADC_ConfigChannel+0x2c4>
    return 32U;
 8003f98:	2320      	movs	r3, #32
 8003f9a:	e003      	b.n	8003fa4 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8003f9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f9e:	fab3 f383 	clz	r3, r3
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	069b      	lsls	r3, r3, #26
 8003fa8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d109      	bne.n	8003fcc <HAL_ADC_ConfigChannel+0x2f4>
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	0e9b      	lsrs	r3, r3, #26
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	f003 031f 	and.w	r3, r3, #31
 8003fc4:	2101      	movs	r1, #1
 8003fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fca:	e017      	b.n	8003ffc <HAL_ADC_ConfigChannel+0x324>
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fd4:	fa93 f3a3 	rbit	r3, r3
 8003fd8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003fda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fdc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003fde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d101      	bne.n	8003fe8 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8003fe4:	2320      	movs	r3, #32
 8003fe6:	e003      	b.n	8003ff0 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8003fe8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fea:	fab3 f383 	clz	r3, r3
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	f003 031f 	and.w	r3, r3, #31
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	e04e      	b.n	800409e <HAL_ADC_ConfigChannel+0x3c6>
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d107      	bne.n	800401c <HAL_ADC_ConfigChannel+0x344>
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	0e9b      	lsrs	r3, r3, #26
 8004012:	3301      	adds	r3, #1
 8004014:	069b      	lsls	r3, r3, #26
 8004016:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800401a:	e015      	b.n	8004048 <HAL_ADC_ConfigChannel+0x370>
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004022:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004024:	fa93 f3a3 	rbit	r3, r3
 8004028:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800402a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800402c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800402e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004030:	2b00      	cmp	r3, #0
 8004032:	d101      	bne.n	8004038 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8004034:	2320      	movs	r3, #32
 8004036:	e003      	b.n	8004040 <HAL_ADC_ConfigChannel+0x368>
  return __builtin_clz(value);
 8004038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800403a:	fab3 f383 	clz	r3, r3
 800403e:	b2db      	uxtb	r3, r3
 8004040:	3301      	adds	r3, #1
 8004042:	069b      	lsls	r3, r3, #26
 8004044:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d109      	bne.n	8004068 <HAL_ADC_ConfigChannel+0x390>
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	0e9b      	lsrs	r3, r3, #26
 800405a:	3301      	adds	r3, #1
 800405c:	f003 031f 	and.w	r3, r3, #31
 8004060:	2101      	movs	r1, #1
 8004062:	fa01 f303 	lsl.w	r3, r1, r3
 8004066:	e017      	b.n	8004098 <HAL_ADC_ConfigChannel+0x3c0>
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004070:	fa93 f3a3 	rbit	r3, r3
 8004074:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004078:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800407a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800407c:	2b00      	cmp	r3, #0
 800407e:	d101      	bne.n	8004084 <HAL_ADC_ConfigChannel+0x3ac>
    return 32U;
 8004080:	2320      	movs	r3, #32
 8004082:	e003      	b.n	800408c <HAL_ADC_ConfigChannel+0x3b4>
  return __builtin_clz(value);
 8004084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004086:	fab3 f383 	clz	r3, r3
 800408a:	b2db      	uxtb	r3, r3
 800408c:	3301      	adds	r3, #1
 800408e:	f003 031f 	and.w	r3, r3, #31
 8004092:	2101      	movs	r1, #1
 8004094:	fa01 f303 	lsl.w	r3, r1, r3
 8004098:	4313      	orrs	r3, r2
 800409a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800409e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6818      	ldr	r0, [r3, #0]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	461a      	mov	r2, r3
 80040ac:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80040b0:	f7fe ffd8 	bl	8003064 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f280 836d 	bge.w	8004798 <HAL_ADC_ConfigChannel+0xac0>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a98      	ldr	r2, [pc, #608]	; (8004324 <HAL_ADC_ConfigChannel+0x64c>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d101      	bne.n	80040cc <HAL_ADC_ConfigChannel+0x3f4>
 80040c8:	4b97      	ldr	r3, [pc, #604]	; (8004328 <HAL_ADC_ConfigChannel+0x650>)
 80040ca:	e000      	b.n	80040ce <HAL_ADC_ConfigChannel+0x3f6>
 80040cc:	4b97      	ldr	r3, [pc, #604]	; (800432c <HAL_ADC_ConfigChannel+0x654>)
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7fe fe62 	bl	8002d98 <LL_ADC_GetCommonPathInternalCh>
 80040d4:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a91      	ldr	r2, [pc, #580]	; (8004324 <HAL_ADC_ConfigChannel+0x64c>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d109      	bne.n	80040f6 <HAL_ADC_ConfigChannel+0x41e>
 80040e2:	4890      	ldr	r0, [pc, #576]	; (8004324 <HAL_ADC_ConfigChannel+0x64c>)
 80040e4:	f7ff f8da 	bl	800329c <LL_ADC_IsEnabled>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	bf0c      	ite	eq
 80040ee:	2301      	moveq	r3, #1
 80040f0:	2300      	movne	r3, #0
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	e008      	b.n	8004108 <HAL_ADC_ConfigChannel+0x430>
 80040f6:	488e      	ldr	r0, [pc, #568]	; (8004330 <HAL_ADC_ConfigChannel+0x658>)
 80040f8:	f7ff f8d0 	bl	800329c <LL_ADC_IsEnabled>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	bf0c      	ite	eq
 8004102:	2301      	moveq	r3, #1
 8004104:	2300      	movne	r3, #0
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b00      	cmp	r3, #0
 800410a:	f000 8088 	beq.w	800421e <HAL_ADC_ConfigChannel+0x546>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a88      	ldr	r2, [pc, #544]	; (8004334 <HAL_ADC_ConfigChannel+0x65c>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d132      	bne.n	800417e <HAL_ADC_ConfigChannel+0x4a6>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004118:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800411c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d12c      	bne.n	800417e <HAL_ADC_ConfigChannel+0x4a6>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a7e      	ldr	r2, [pc, #504]	; (8004324 <HAL_ADC_ConfigChannel+0x64c>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d005      	beq.n	800413a <HAL_ADC_ConfigChannel+0x462>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a7f      	ldr	r2, [pc, #508]	; (8004330 <HAL_ADC_ConfigChannel+0x658>)
 8004134:	4293      	cmp	r3, r2
 8004136:	f040 832c 	bne.w	8004792 <HAL_ADC_ConfigChannel+0xaba>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a79      	ldr	r2, [pc, #484]	; (8004324 <HAL_ADC_ConfigChannel+0x64c>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d101      	bne.n	8004148 <HAL_ADC_ConfigChannel+0x470>
 8004144:	4a78      	ldr	r2, [pc, #480]	; (8004328 <HAL_ADC_ConfigChannel+0x650>)
 8004146:	e000      	b.n	800414a <HAL_ADC_ConfigChannel+0x472>
 8004148:	4a78      	ldr	r2, [pc, #480]	; (800432c <HAL_ADC_ConfigChannel+0x654>)
 800414a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800414e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004152:	4619      	mov	r1, r3
 8004154:	4610      	mov	r0, r2
 8004156:	f7fe fe0c 	bl	8002d72 <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800415a:	4b77      	ldr	r3, [pc, #476]	; (8004338 <HAL_ADC_ConfigChannel+0x660>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	099b      	lsrs	r3, r3, #6
 8004160:	4a76      	ldr	r2, [pc, #472]	; (800433c <HAL_ADC_ConfigChannel+0x664>)
 8004162:	fba2 2303 	umull	r2, r3, r2, r3
 8004166:	099b      	lsrs	r3, r3, #6
 8004168:	3301      	adds	r3, #1
 800416a:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 800416c:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 800416e:	e002      	b.n	8004176 <HAL_ADC_ConfigChannel+0x49e>
                {
                  wait_loop_index--;
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	3b01      	subs	r3, #1
 8004174:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1f9      	bne.n	8004170 <HAL_ADC_ConfigChannel+0x498>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800417c:	e309      	b.n	8004792 <HAL_ADC_ConfigChannel+0xaba>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a6f      	ldr	r2, [pc, #444]	; (8004340 <HAL_ADC_ConfigChannel+0x668>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d121      	bne.n	80041cc <HAL_ADC_ConfigChannel+0x4f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004188:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800418c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8004190:	2b00      	cmp	r3, #0
 8004192:	d11b      	bne.n	80041cc <HAL_ADC_ConfigChannel+0x4f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a62      	ldr	r2, [pc, #392]	; (8004324 <HAL_ADC_ConfigChannel+0x64c>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d005      	beq.n	80041aa <HAL_ADC_ConfigChannel+0x4d2>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a63      	ldr	r2, [pc, #396]	; (8004330 <HAL_ADC_ConfigChannel+0x658>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	f040 82f6 	bne.w	8004796 <HAL_ADC_ConfigChannel+0xabe>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a5d      	ldr	r2, [pc, #372]	; (8004324 <HAL_ADC_ConfigChannel+0x64c>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d101      	bne.n	80041b8 <HAL_ADC_ConfigChannel+0x4e0>
 80041b4:	4a5c      	ldr	r2, [pc, #368]	; (8004328 <HAL_ADC_ConfigChannel+0x650>)
 80041b6:	e000      	b.n	80041ba <HAL_ADC_ConfigChannel+0x4e2>
 80041b8:	4a5c      	ldr	r2, [pc, #368]	; (800432c <HAL_ADC_ConfigChannel+0x654>)
 80041ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041c2:	4619      	mov	r1, r3
 80041c4:	4610      	mov	r0, r2
 80041c6:	f7fe fdd4 	bl	8002d72 <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80041ca:	e2e4      	b.n	8004796 <HAL_ADC_ConfigChannel+0xabe>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a5c      	ldr	r2, [pc, #368]	; (8004344 <HAL_ADC_ConfigChannel+0x66c>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	f040 82e0 	bne.w	8004798 <HAL_ADC_ConfigChannel+0xac0>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80041d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f040 82d9 	bne.w	8004798 <HAL_ADC_ConfigChannel+0xac0>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a4e      	ldr	r2, [pc, #312]	; (8004324 <HAL_ADC_ConfigChannel+0x64c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d005      	beq.n	80041fc <HAL_ADC_ConfigChannel+0x524>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a4e      	ldr	r2, [pc, #312]	; (8004330 <HAL_ADC_ConfigChannel+0x658>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	f040 82ce 	bne.w	8004798 <HAL_ADC_ConfigChannel+0xac0>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a48      	ldr	r2, [pc, #288]	; (8004324 <HAL_ADC_ConfigChannel+0x64c>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d101      	bne.n	800420a <HAL_ADC_ConfigChannel+0x532>
 8004206:	4a48      	ldr	r2, [pc, #288]	; (8004328 <HAL_ADC_ConfigChannel+0x650>)
 8004208:	e000      	b.n	800420c <HAL_ADC_ConfigChannel+0x534>
 800420a:	4a48      	ldr	r2, [pc, #288]	; (800432c <HAL_ADC_ConfigChannel+0x654>)
 800420c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004210:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004214:	4619      	mov	r1, r3
 8004216:	4610      	mov	r0, r2
 8004218:	f7fe fdab 	bl	8002d72 <LL_ADC_SetCommonPathInternalCh>
 800421c:	e2bc      	b.n	8004798 <HAL_ADC_ConfigChannel+0xac0>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004222:	f043 0220 	orr.w	r2, r3, #32
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	679a      	str	r2, [r3, #120]	; 0x78

            tmp_hal_status = HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8004230:	e2b2      	b.n	8004798 <HAL_ADC_ConfigChannel+0xac0>
      }
    }
    else
    {
      /* Remap Internal Channels for Cut1 vs Cut2 (or 4M) */
      tmp_channel = pConfig->Channel;
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
#if !defined (ADC2)
      if (HAL_GetREVID() == REV_ID_A) /* STM32U5 silicon Rev.A */
 800423a:	f7fe fd79 	bl	8002d30 <HAL_GetREVID>
 800423e:	4603      	mov	r3, r0
 8004240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004244:	d130      	bne.n	80042a8 <HAL_ADC_ConfigChannel+0x5d0>
      {
        if (pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a3f      	ldr	r2, [pc, #252]	; (8004348 <HAL_ADC_ConfigChannel+0x670>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d103      	bne.n	8004258 <HAL_ADC_ConfigChannel+0x580>
        {
          tmp_channel = (LL_ADC_CHANNEL_22 | ADC_CHANNEL_ID_INTERNAL_CH);
 8004250:	4b3e      	ldr	r3, [pc, #248]	; (800434c <HAL_ADC_ConfigChannel+0x674>)
 8004252:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004256:	e027      	b.n	80042a8 <HAL_ADC_ConfigChannel+0x5d0>
        }
        else if (pConfig->Channel == ADC4_CHANNEL_VBAT)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a3c      	ldr	r2, [pc, #240]	; (8004350 <HAL_ADC_ConfigChannel+0x678>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d103      	bne.n	800426a <HAL_ADC_ConfigChannel+0x592>
        {
          tmp_channel = (LL_ADC_CHANNEL_23 | ADC_CHANNEL_ID_INTERNAL_CH);
 8004262:	4b3c      	ldr	r3, [pc, #240]	; (8004354 <HAL_ADC_ConfigChannel+0x67c>)
 8004264:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004268:	e01e      	b.n	80042a8 <HAL_ADC_ConfigChannel+0x5d0>
        }
        else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a3a      	ldr	r2, [pc, #232]	; (8004358 <HAL_ADC_ConfigChannel+0x680>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d103      	bne.n	800427c <HAL_ADC_ConfigChannel+0x5a4>
        {
          tmp_channel = (LL_ADC_CHANNEL_VREFINT | LL_ADC_CHANNEL_DIFFERENCIATION_VREFINT_VCORE);
 8004274:	4b39      	ldr	r3, [pc, #228]	; (800435c <HAL_ADC_ConfigChannel+0x684>)
 8004276:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800427a:	e015      	b.n	80042a8 <HAL_ADC_ConfigChannel+0x5d0>
        }
        else if (pConfig->Channel == ADC_CHANNEL_DAC1CH1_ADC4)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a37      	ldr	r2, [pc, #220]	; (8004360 <HAL_ADC_ConfigChannel+0x688>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d103      	bne.n	800428e <HAL_ADC_ConfigChannel+0x5b6>
        {
          tmp_channel = (LL_ADC_CHANNEL_20 | ADC_CHANNEL_ID_INTERNAL_CH);
 8004286:	4b37      	ldr	r3, [pc, #220]	; (8004364 <HAL_ADC_ConfigChannel+0x68c>)
 8004288:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800428c:	e00c      	b.n	80042a8 <HAL_ADC_ConfigChannel+0x5d0>
        }
        else if (pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a35      	ldr	r2, [pc, #212]	; (8004368 <HAL_ADC_ConfigChannel+0x690>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d103      	bne.n	80042a0 <HAL_ADC_ConfigChannel+0x5c8>
        {
          tmp_channel = (LL_ADC_CHANNEL_21 | ADC_CHANNEL_ID_INTERNAL_CH);
 8004298:	4b31      	ldr	r3, [pc, #196]	; (8004360 <HAL_ADC_ConfigChannel+0x688>)
 800429a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800429e:	e003      	b.n	80042a8 <HAL_ADC_ConfigChannel+0x5d0>
        }
        else
        {
          tmp_channel = pConfig->Channel;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	f000 81a3 	beq.w	80045f8 <HAL_ADC_ConfigChannel+0x920>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042ba:	d004      	beq.n	80042c6 <HAL_ADC_ConfigChannel+0x5ee>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80042c0:	4a2a      	ldr	r2, [pc, #168]	; (800436c <HAL_ADC_ConfigChannel+0x694>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d107      	bne.n	80042d6 <HAL_ADC_ConfigChannel+0x5fe>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7fe fe7c 	bl	8002fcc <LL_ADC_REG_SetSequencerChAdd>
 80042d4:	e0c2      	b.n	800445c <HAL_ADC_ConfigChannel+0x784>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f003 031f 	and.w	r3, r3, #31
 80042e4:	210f      	movs	r1, #15
 80042e6:	fa01 f303 	lsl.w	r3, r1, r3
 80042ea:	43db      	mvns	r3, r3
 80042ec:	401a      	ands	r2, r3
 80042ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042f2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d105      	bne.n	8004306 <HAL_ADC_ConfigChannel+0x62e>
 80042fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042fe:	0e9b      	lsrs	r3, r3, #26
 8004300:	f003 031f 	and.w	r3, r3, #31
 8004304:	e038      	b.n	8004378 <HAL_ADC_ConfigChannel+0x6a0>
 8004306:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800430a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800430c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430e:	fa93 f3a3 	rbit	r3, r3
 8004312:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004316:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800431a:	2b00      	cmp	r3, #0
 800431c:	d128      	bne.n	8004370 <HAL_ADC_ConfigChannel+0x698>
    return 32U;
 800431e:	2320      	movs	r3, #32
 8004320:	e02a      	b.n	8004378 <HAL_ADC_ConfigChannel+0x6a0>
 8004322:	bf00      	nop
 8004324:	42028000 	.word	0x42028000
 8004328:	42028308 	.word	0x42028308
 800432c:	46021308 	.word	0x46021308
 8004330:	46021000 	.word	0x46021000
 8004334:	ce080000 	.word	0xce080000
 8004338:	20000200 	.word	0x20000200
 800433c:	053e2d63 	.word	0x053e2d63
 8004340:	ca040000 	.word	0xca040000
 8004344:	80000001 	.word	0x80000001
 8004348:	b6002000 	.word	0xb6002000
 800434c:	da400000 	.word	0xda400000
 8004350:	ba004000 	.word	0xba004000
 8004354:	de800000 	.word	0xde800000
 8004358:	b2001000 	.word	0xb2001000
 800435c:	81000001 	.word	0x81000001
 8004360:	d6200000 	.word	0xd6200000
 8004364:	d2100000 	.word	0xd2100000
 8004368:	d7200000 	.word	0xd7200000
 800436c:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8004370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004372:	fab3 f383 	clz	r3, r3
 8004376:	b2db      	uxtb	r3, r3
 8004378:	6839      	ldr	r1, [r7, #0]
 800437a:	6849      	ldr	r1, [r1, #4]
 800437c:	f001 011f 	and.w	r1, r1, #31
 8004380:	408b      	lsls	r3, r1
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	089b      	lsrs	r3, r3, #2
 8004390:	1c5a      	adds	r2, r3, #1
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004396:	429a      	cmp	r2, r3
 8004398:	d860      	bhi.n	800445c <HAL_ADC_ConfigChannel+0x784>
          {
#if !defined (ADC2)
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 800439a:	f7fe fcc9 	bl	8002d30 <HAL_GetREVID>
 800439e:	4603      	mov	r3, r0
 80043a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043a4:	d851      	bhi.n	800444a <HAL_ADC_ConfigChannel+0x772>
            {
              if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) >= 20UL)
 80043a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043aa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10a      	bne.n	80043c8 <HAL_ADC_ConfigChannel+0x6f0>
 80043b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043b6:	0e9b      	lsrs	r3, r3, #26
 80043b8:	f003 031f 	and.w	r3, r3, #31
 80043bc:	2b13      	cmp	r3, #19
 80043be:	bf8c      	ite	hi
 80043c0:	2301      	movhi	r3, #1
 80043c2:	2300      	movls	r3, #0
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	e016      	b.n	80043f6 <HAL_ADC_ConfigChannel+0x71e>
 80043c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	fa93 f3a3 	rbit	r3, r3
 80043d4:	61bb      	str	r3, [r7, #24]
  return result;
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80043da:	6a3b      	ldr	r3, [r7, #32]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d101      	bne.n	80043e4 <HAL_ADC_ConfigChannel+0x70c>
    return 32U;
 80043e0:	2320      	movs	r3, #32
 80043e2:	e003      	b.n	80043ec <HAL_ADC_ConfigChannel+0x714>
  return __builtin_clz(value);
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	fab3 f383 	clz	r3, r3
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b13      	cmp	r3, #19
 80043ee:	bf8c      	ite	hi
 80043f0:	2301      	movhi	r3, #1
 80043f2:	2300      	movls	r3, #0
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d027      	beq.n	800444a <HAL_ADC_ConfigChannel+0x772>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
 80043fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043fe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d109      	bne.n	800441a <HAL_ADC_ConfigChannel+0x742>
 8004406:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800440a:	0e9b      	lsrs	r3, r3, #26
 800440c:	f003 031f 	and.w	r3, r3, #31
 8004410:	3b09      	subs	r3, #9
 8004412:	2201      	movs	r2, #1
 8004414:	fa02 f303 	lsl.w	r3, r2, r3
 8004418:	e015      	b.n	8004446 <HAL_ADC_ConfigChannel+0x76e>
 800441a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800441e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	fa93 f3a3 	rbit	r3, r3
 8004426:	60fb      	str	r3, [r7, #12]
  return result;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <HAL_ADC_ConfigChannel+0x75e>
    return 32U;
 8004432:	2320      	movs	r3, #32
 8004434:	e003      	b.n	800443e <HAL_ADC_ConfigChannel+0x766>
  return __builtin_clz(value);
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	fab3 f383 	clz	r3, r3
 800443c:	b2db      	uxtb	r3, r3
 800443e:	3b09      	subs	r3, #9
 8004440:	2201      	movs	r2, #1
 8004442:	fa02 f303 	lsl.w	r3, r2, r3
 8004446:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6818      	ldr	r0, [r3, #0]
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004456:	4619      	mov	r1, r3
 8004458:	f7fe fd58 	bl	8002f0c <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6818      	ldr	r0, [r3, #0]
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	461a      	mov	r2, r3
 8004466:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800446a:	f7fe fdfb 	bl	8003064 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	f280 8190 	bge.w	8004798 <HAL_ADC_ConfigChannel+0xac0>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a97      	ldr	r2, [pc, #604]	; (80046dc <HAL_ADC_ConfigChannel+0xa04>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d101      	bne.n	8004486 <HAL_ADC_ConfigChannel+0x7ae>
 8004482:	4b97      	ldr	r3, [pc, #604]	; (80046e0 <HAL_ADC_ConfigChannel+0xa08>)
 8004484:	e000      	b.n	8004488 <HAL_ADC_ConfigChannel+0x7b0>
 8004486:	4b97      	ldr	r3, [pc, #604]	; (80046e4 <HAL_ADC_ConfigChannel+0xa0c>)
 8004488:	4618      	mov	r0, r3
 800448a:	f7fe fc85 	bl	8002d98 <LL_ADC_GetCommonPathInternalCh>
 800448e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a94      	ldr	r2, [pc, #592]	; (80046e8 <HAL_ADC_ConfigChannel+0xa10>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d126      	bne.n	80044ea <HAL_ADC_ConfigChannel+0x812>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800449c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d120      	bne.n	80044ea <HAL_ADC_ConfigChannel+0x812>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a8b      	ldr	r2, [pc, #556]	; (80046dc <HAL_ADC_ConfigChannel+0xa04>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d101      	bne.n	80044b6 <HAL_ADC_ConfigChannel+0x7de>
 80044b2:	4a8b      	ldr	r2, [pc, #556]	; (80046e0 <HAL_ADC_ConfigChannel+0xa08>)
 80044b4:	e000      	b.n	80044b8 <HAL_ADC_ConfigChannel+0x7e0>
 80044b6:	4a8b      	ldr	r2, [pc, #556]	; (80046e4 <HAL_ADC_ConfigChannel+0xa0c>)
 80044b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80044c0:	4619      	mov	r1, r3
 80044c2:	4610      	mov	r0, r2
 80044c4:	f7fe fc55 	bl	8002d72 <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80044c8:	4b88      	ldr	r3, [pc, #544]	; (80046ec <HAL_ADC_ConfigChannel+0xa14>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	099b      	lsrs	r3, r3, #6
 80044ce:	4a88      	ldr	r2, [pc, #544]	; (80046f0 <HAL_ADC_ConfigChannel+0xa18>)
 80044d0:	fba2 2303 	umull	r2, r3, r2, r3
 80044d4:	099b      	lsrs	r3, r3, #6
 80044d6:	005b      	lsls	r3, r3, #1
 80044d8:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 80044da:	e002      	b.n	80044e2 <HAL_ADC_ConfigChannel+0x80a>
            {
              wait_loop_index--;
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	3b01      	subs	r3, #1
 80044e0:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1f9      	bne.n	80044dc <HAL_ADC_ConfigChannel+0x804>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 80044e8:	e067      	b.n	80045ba <HAL_ADC_ConfigChannel+0x8e2>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a81      	ldr	r2, [pc, #516]	; (80046f4 <HAL_ADC_ConfigChannel+0xa1c>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d116      	bne.n	8004522 <HAL_ADC_ConfigChannel+0x84a>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80044f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d110      	bne.n	8004522 <HAL_ADC_ConfigChannel+0x84a>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a75      	ldr	r2, [pc, #468]	; (80046dc <HAL_ADC_ConfigChannel+0xa04>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d101      	bne.n	800450e <HAL_ADC_ConfigChannel+0x836>
 800450a:	4a75      	ldr	r2, [pc, #468]	; (80046e0 <HAL_ADC_ConfigChannel+0xa08>)
 800450c:	e000      	b.n	8004510 <HAL_ADC_ConfigChannel+0x838>
 800450e:	4a75      	ldr	r2, [pc, #468]	; (80046e4 <HAL_ADC_ConfigChannel+0xa0c>)
 8004510:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004514:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004518:	4619      	mov	r1, r3
 800451a:	4610      	mov	r0, r2
 800451c:	f7fe fc29 	bl	8002d72 <LL_ADC_SetCommonPathInternalCh>
 8004520:	e04b      	b.n	80045ba <HAL_ADC_ConfigChannel+0x8e2>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a74      	ldr	r2, [pc, #464]	; (80046f8 <HAL_ADC_ConfigChannel+0xa20>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d116      	bne.n	800455a <HAL_ADC_ConfigChannel+0x882>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800452c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004530:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d110      	bne.n	800455a <HAL_ADC_ConfigChannel+0x882>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a67      	ldr	r2, [pc, #412]	; (80046dc <HAL_ADC_ConfigChannel+0xa04>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d101      	bne.n	8004546 <HAL_ADC_ConfigChannel+0x86e>
 8004542:	4a67      	ldr	r2, [pc, #412]	; (80046e0 <HAL_ADC_ConfigChannel+0xa08>)
 8004544:	e000      	b.n	8004548 <HAL_ADC_ConfigChannel+0x870>
 8004546:	4a67      	ldr	r2, [pc, #412]	; (80046e4 <HAL_ADC_ConfigChannel+0xa0c>)
 8004548:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800454c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004550:	4619      	mov	r1, r3
 8004552:	4610      	mov	r0, r2
 8004554:	f7fe fc0d 	bl	8002d72 <LL_ADC_SetCommonPathInternalCh>
 8004558:	e02f      	b.n	80045ba <HAL_ADC_ConfigChannel+0x8e2>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a67      	ldr	r2, [pc, #412]	; (80046fc <HAL_ADC_ConfigChannel+0xa24>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d12a      	bne.n	80045ba <HAL_ADC_ConfigChannel+0x8e2>
                   && ((tmp_config_internal_channel  & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004564:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004568:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d124      	bne.n	80045ba <HAL_ADC_ConfigChannel+0x8e2>
          {
#if !defined (ADC2)
            if (ADC_VCORE_INSTANCE(hadc))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a62      	ldr	r2, [pc, #392]	; (8004700 <HAL_ADC_ConfigChannel+0xa28>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d11f      	bne.n	80045ba <HAL_ADC_ConfigChannel+0x8e2>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a57      	ldr	r2, [pc, #348]	; (80046dc <HAL_ADC_ConfigChannel+0xa04>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d101      	bne.n	8004588 <HAL_ADC_ConfigChannel+0x8b0>
 8004584:	4a56      	ldr	r2, [pc, #344]	; (80046e0 <HAL_ADC_ConfigChannel+0xa08>)
 8004586:	e000      	b.n	800458a <HAL_ADC_ConfigChannel+0x8b2>
 8004588:	4a56      	ldr	r2, [pc, #344]	; (80046e4 <HAL_ADC_ConfigChannel+0xa0c>)
 800458a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800458e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004592:	4619      	mov	r1, r3
 8004594:	4610      	mov	r0, r2
 8004596:	f7fe fbec 	bl	8002d72 <LL_ADC_SetCommonPathInternalCh>
                                             LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
              if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 800459a:	f7fe fbc9 	bl	8002d30 <HAL_GetREVID>
 800459e:	4603      	mov	r3, r0
 80045a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045a4:	d809      	bhi.n	80045ba <HAL_ADC_ConfigChannel+0x8e2>
              {
                SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f042 0201 	orr.w	r2, r2, #1
 80045b6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            /* nothing to do */
          }
          /* If STM32U5 silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 80045ba:	f7fe fbb9 	bl	8002d30 <HAL_GetREVID>
 80045be:	4603      	mov	r3, r0
 80045c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045c4:	f040 80e8 	bne.w	8004798 <HAL_ADC_ConfigChannel+0xac0>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a4d      	ldr	r2, [pc, #308]	; (8004704 <HAL_ADC_ConfigChannel+0xa2c>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	f040 80e2 	bne.w	8004798 <HAL_ADC_ConfigChannel+0xac0>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80045d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f040 80db 	bne.w	8004798 <HAL_ADC_ConfigChannel+0xac0>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f042 0201 	orr.w	r2, r2, #1
 80045f2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 80045f6:	e0cf      	b.n	8004798 <HAL_ADC_ConfigChannel+0xac0>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004600:	d004      	beq.n	800460c <HAL_ADC_ConfigChannel+0x934>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004606:	4a40      	ldr	r2, [pc, #256]	; (8004708 <HAL_ADC_ConfigChannel+0xa30>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d106      	bne.n	800461a <HAL_ADC_ConfigChannel+0x942>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8004614:	4618      	mov	r0, r3
 8004616:	f7fe fd0c 	bl	8003032 <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	f280 80ba 	bge.w	8004798 <HAL_ADC_ConfigChannel+0xac0>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a2c      	ldr	r2, [pc, #176]	; (80046dc <HAL_ADC_ConfigChannel+0xa04>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d101      	bne.n	8004632 <HAL_ADC_ConfigChannel+0x95a>
 800462e:	4b2c      	ldr	r3, [pc, #176]	; (80046e0 <HAL_ADC_ConfigChannel+0xa08>)
 8004630:	e000      	b.n	8004634 <HAL_ADC_ConfigChannel+0x95c>
 8004632:	4b2c      	ldr	r3, [pc, #176]	; (80046e4 <HAL_ADC_ConfigChannel+0xa0c>)
 8004634:	4618      	mov	r0, r3
 8004636:	f7fe fbaf 	bl	8002d98 <LL_ADC_GetCommonPathInternalCh>
 800463a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a32      	ldr	r2, [pc, #200]	; (800470c <HAL_ADC_ConfigChannel+0xa34>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d110      	bne.n	800466a <HAL_ADC_ConfigChannel+0x992>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a23      	ldr	r2, [pc, #140]	; (80046dc <HAL_ADC_ConfigChannel+0xa04>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d101      	bne.n	8004656 <HAL_ADC_ConfigChannel+0x97e>
 8004652:	4a23      	ldr	r2, [pc, #140]	; (80046e0 <HAL_ADC_ConfigChannel+0xa08>)
 8004654:	e000      	b.n	8004658 <HAL_ADC_ConfigChannel+0x980>
 8004656:	4a23      	ldr	r2, [pc, #140]	; (80046e4 <HAL_ADC_ConfigChannel+0xa0c>)
 8004658:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800465c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004660:	4619      	mov	r1, r3
 8004662:	4610      	mov	r0, r2
 8004664:	f7fe fb85 	bl	8002d72 <LL_ADC_SetCommonPathInternalCh>
 8004668:	e06d      	b.n	8004746 <HAL_ADC_ConfigChannel+0xa6e>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a28      	ldr	r2, [pc, #160]	; (8004710 <HAL_ADC_ConfigChannel+0xa38>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d110      	bne.n	8004696 <HAL_ADC_ConfigChannel+0x9be>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a18      	ldr	r2, [pc, #96]	; (80046dc <HAL_ADC_ConfigChannel+0xa04>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d101      	bne.n	8004682 <HAL_ADC_ConfigChannel+0x9aa>
 800467e:	4a18      	ldr	r2, [pc, #96]	; (80046e0 <HAL_ADC_ConfigChannel+0xa08>)
 8004680:	e000      	b.n	8004684 <HAL_ADC_ConfigChannel+0x9ac>
 8004682:	4a18      	ldr	r2, [pc, #96]	; (80046e4 <HAL_ADC_ConfigChannel+0xa0c>)
 8004684:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004688:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800468c:	4619      	mov	r1, r3
 800468e:	4610      	mov	r0, r2
 8004690:	f7fe fb6f 	bl	8002d72 <LL_ADC_SetCommonPathInternalCh>
 8004694:	e057      	b.n	8004746 <HAL_ADC_ConfigChannel+0xa6e>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a17      	ldr	r2, [pc, #92]	; (80046f8 <HAL_ADC_ConfigChannel+0xa20>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d110      	bne.n	80046c2 <HAL_ADC_ConfigChannel+0x9ea>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a0d      	ldr	r2, [pc, #52]	; (80046dc <HAL_ADC_ConfigChannel+0xa04>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d101      	bne.n	80046ae <HAL_ADC_ConfigChannel+0x9d6>
 80046aa:	4a0d      	ldr	r2, [pc, #52]	; (80046e0 <HAL_ADC_ConfigChannel+0xa08>)
 80046ac:	e000      	b.n	80046b0 <HAL_ADC_ConfigChannel+0x9d8>
 80046ae:	4a0d      	ldr	r2, [pc, #52]	; (80046e4 <HAL_ADC_ConfigChannel+0xa0c>)
 80046b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046b4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80046b8:	4619      	mov	r1, r3
 80046ba:	4610      	mov	r0, r2
 80046bc:	f7fe fb59 	bl	8002d72 <LL_ADC_SetCommonPathInternalCh>
 80046c0:	e041      	b.n	8004746 <HAL_ADC_ConfigChannel+0xa6e>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a0d      	ldr	r2, [pc, #52]	; (80046fc <HAL_ADC_ConfigChannel+0xa24>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d13c      	bne.n	8004746 <HAL_ADC_ConfigChannel+0xa6e>
          {
#if !defined (ADC2)
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a02      	ldr	r2, [pc, #8]	; (80046dc <HAL_ADC_ConfigChannel+0xa04>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d11e      	bne.n	8004714 <HAL_ADC_ConfigChannel+0xa3c>
 80046d6:	4a02      	ldr	r2, [pc, #8]	; (80046e0 <HAL_ADC_ConfigChannel+0xa08>)
 80046d8:	e01d      	b.n	8004716 <HAL_ADC_ConfigChannel+0xa3e>
 80046da:	bf00      	nop
 80046dc:	42028000 	.word	0x42028000
 80046e0:	42028308 	.word	0x42028308
 80046e4:	46021308 	.word	0x46021308
 80046e8:	b6002000 	.word	0xb6002000
 80046ec:	20000200 	.word	0x20000200
 80046f0:	053e2d63 	.word	0x053e2d63
 80046f4:	ba004000 	.word	0xba004000
 80046f8:	80000001 	.word	0x80000001
 80046fc:	b2001000 	.word	0xb2001000
 8004700:	46021000 	.word	0x46021000
 8004704:	d7200000 	.word	0xd7200000
 8004708:	80000010 	.word	0x80000010
 800470c:	ce080000 	.word	0xce080000
 8004710:	ca040000 	.word	0xca040000
 8004714:	4a25      	ldr	r2, [pc, #148]	; (80047ac <HAL_ADC_ConfigChannel+0xad4>)
 8004716:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800471a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800471e:	4619      	mov	r1, r3
 8004720:	4610      	mov	r0, r2
 8004722:	f7fe fb26 	bl	8002d72 <LL_ADC_SetCommonPathInternalCh>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8004726:	f7fe fb03 	bl	8002d30 <HAL_GetREVID>
 800472a:	4603      	mov	r3, r0
 800472c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004730:	d809      	bhi.n	8004746 <HAL_ADC_ConfigChannel+0xa6e>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f042 0201 	orr.w	r2, r2, #1
 8004742:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            /* nothing to do */
          }
          /* If STM32U5 2M silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 8004746:	f7fe faf3 	bl	8002d30 <HAL_GetREVID>
 800474a:	4603      	mov	r3, r0
 800474c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004750:	d122      	bne.n	8004798 <HAL_ADC_ConfigChannel+0xac0>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a16      	ldr	r2, [pc, #88]	; (80047b0 <HAL_ADC_ConfigChannel+0xad8>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d11d      	bne.n	8004798 <HAL_ADC_ConfigChannel+0xac0>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800475c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004760:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d117      	bne.n	8004798 <HAL_ADC_ConfigChannel+0xac0>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f042 0201 	orr.w	r2, r2, #1
 8004778:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 800477c:	e00c      	b.n	8004798 <HAL_ADC_ConfigChannel+0xac0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004782:	f043 0220 	orr.w	r2, r3, #32
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	679a      	str	r2, [r3, #120]	; 0x78
    tmp_hal_status = HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8004790:	e002      	b.n	8004798 <HAL_ADC_ConfigChannel+0xac0>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004792:	bf00      	nop
 8004794:	e000      	b.n	8004798 <HAL_ADC_ConfigChannel+0xac0>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004796:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return tmp_hal_status;
 80047a0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3790      	adds	r7, #144	; 0x90
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	46021308 	.word	0x46021308
 80047b0:	d7200000 	.word	0xd7200000

080047b4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b088      	sub	sp, #32
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t conversion_timeout_cpu_cycles = 0UL;
 80047be:	2300      	movs	r3, #0
 80047c0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7fe fdb4 	bl	8003338 <LL_ADC_REG_IsConversionOngoing>
 80047d0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7fe fdd5 	bl	8003386 <LL_ADC_INJ_IsConversionOngoing>
 80047dc:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL) || (tmp_adc_is_conversion_on_going_injected != 0UL))
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d103      	bne.n	80047ec <ADC_ConversionStop+0x38>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f000 8099 	beq.w	800491e <ADC_ConversionStop+0x16a>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR1 & ADC_CFGR1_JAUTO) != 0UL)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d02b      	beq.n	8004852 <ADC_ConversionStop+0x9e>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004800:	2b01      	cmp	r3, #1
 8004802:	d126      	bne.n	8004852 <ADC_ConversionStop+0x9e>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	7f1b      	ldrb	r3, [r3, #28]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d122      	bne.n	8004852 <ADC_ConversionStop+0x9e>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800480c:	2301      	movs	r3, #1
 800480e:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004810:	e014      	b.n	800483c <ADC_ConversionStop+0x88>
      {
        if (conversion_timeout_cpu_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	4a44      	ldr	r2, [pc, #272]	; (8004928 <ADC_ConversionStop+0x174>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d90d      	bls.n	8004836 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800481e:	f043 0210 	orr.w	r2, r3, #16
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800482a:	f043 0201 	orr.w	r2, r3, #1
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e074      	b.n	8004920 <ADC_ConversionStop+0x16c>
        }
        conversion_timeout_cpu_cycles++;
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	3301      	adds	r3, #1
 800483a:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004846:	2b40      	cmp	r3, #64	; 0x40
 8004848:	d1e3      	bne.n	8004812 <ADC_ConversionStop+0x5e>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2240      	movs	r2, #64	; 0x40
 8004850:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	2b02      	cmp	r3, #2
 8004856:	d014      	beq.n	8004882 <ADC_ConversionStop+0xce>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4618      	mov	r0, r3
 800485e:	f7fe fd6b 	bl	8003338 <LL_ADC_REG_IsConversionOngoing>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00c      	beq.n	8004882 <ADC_ConversionStop+0xce>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4618      	mov	r0, r3
 800486e:	f7fe fd28 	bl	80032c2 <LL_ADC_IsDisableOngoing>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d104      	bne.n	8004882 <ADC_ConversionStop+0xce>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4618      	mov	r0, r3
 800487e:	f7fe fd47 	bl	8003310 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d014      	beq.n	80048b2 <ADC_ConversionStop+0xfe>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4618      	mov	r0, r3
 800488e:	f7fe fd7a 	bl	8003386 <LL_ADC_INJ_IsConversionOngoing>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00c      	beq.n	80048b2 <ADC_ConversionStop+0xfe>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4618      	mov	r0, r3
 800489e:	f7fe fd10 	bl	80032c2 <LL_ADC_IsDisableOngoing>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d104      	bne.n	80048b2 <ADC_ConversionStop+0xfe>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4618      	mov	r0, r3
 80048ae:	f7fe fd56 	bl	800335e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d005      	beq.n	80048c4 <ADC_ConversionStop+0x110>
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	2b03      	cmp	r3, #3
 80048bc:	d105      	bne.n	80048ca <ADC_ConversionStop+0x116>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_adc_cr_adstart_jadstart = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80048be:	230c      	movs	r3, #12
 80048c0:	617b      	str	r3, [r7, #20]
        break;
 80048c2:	e005      	b.n	80048d0 <ADC_ConversionStop+0x11c>
      case ADC_INJECTED_GROUP:
        tmp_adc_cr_adstart_jadstart = ADC_CR_JADSTART;
 80048c4:	2308      	movs	r3, #8
 80048c6:	617b      	str	r3, [r7, #20]
        break;
 80048c8:	e002      	b.n	80048d0 <ADC_ConversionStop+0x11c>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_adc_cr_adstart_jadstart = ADC_CR_ADSTART;
 80048ca:	2304      	movs	r3, #4
 80048cc:	617b      	str	r3, [r7, #20]
        break;
 80048ce:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80048d0:	f7fe f9fe 	bl	8002cd0 <HAL_GetTick>
 80048d4:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_adc_cr_adstart_jadstart) != 0UL)
 80048d6:	e01b      	b.n	8004910 <ADC_ConversionStop+0x15c>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80048d8:	f7fe f9fa 	bl	8002cd0 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b05      	cmp	r3, #5
 80048e4:	d914      	bls.n	8004910 <ADC_ConversionStop+0x15c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_adc_cr_adstart_jadstart) != 0UL)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	689a      	ldr	r2, [r3, #8]
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	4013      	ands	r3, r2
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00d      	beq.n	8004910 <ADC_ConversionStop+0x15c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048f8:	f043 0210 	orr.w	r2, r3, #16
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004904:	f043 0201 	orr.w	r2, r3, #1
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e007      	b.n	8004920 <ADC_ConversionStop+0x16c>
    while ((hadc->Instance->CR & tmp_adc_cr_adstart_jadstart) != 0UL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689a      	ldr	r2, [r3, #8]
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	4013      	ands	r3, r2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1dc      	bne.n	80048d8 <ADC_ConversionStop+0x124>
        }
      }
    }
  }

  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3720      	adds	r7, #32
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	000cdbff 	.word	0x000cdbff

0800492c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4618      	mov	r0, r3
 800493a:	f7fe fcaf 	bl	800329c <LL_ADC_IsEnabled>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d156      	bne.n	80049f2 <ADC_Enable+0xc6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	689a      	ldr	r2, [r3, #8]
 800494a:	4b2c      	ldr	r3, [pc, #176]	; (80049fc <ADC_Enable+0xd0>)
 800494c:	4013      	ands	r3, r2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00d      	beq.n	800496e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004956:	f043 0210 	orr.w	r2, r3, #16
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004962:	f043 0201 	orr.w	r2, r3, #1
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e042      	b.n	80049f4 <ADC_Enable+0xc8>
    }

    LL_ADC_Enable(hadc->Instance);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4618      	mov	r0, r3
 8004974:	f7fe fc6a 	bl	800324c <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a1b      	ldr	r3, [r3, #32]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d004      	beq.n	800498a <ADC_Enable+0x5e>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a1e      	ldr	r2, [pc, #120]	; (8004a00 <ADC_Enable+0xd4>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d033      	beq.n	80049f2 <ADC_Enable+0xc6>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800498a:	f7fe f9a1 	bl	8002cd0 <HAL_GetTick>
 800498e:	60f8      	str	r0, [r7, #12]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004990:	e028      	b.n	80049e4 <ADC_Enable+0xb8>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4618      	mov	r0, r3
 8004998:	f7fe fc80 	bl	800329c <LL_ADC_IsEnabled>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d104      	bne.n	80049ac <ADC_Enable+0x80>
          {
            LL_ADC_Enable(hadc->Instance);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7fe fc50 	bl	800324c <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80049ac:	f7fe f990 	bl	8002cd0 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d914      	bls.n	80049e4 <ADC_Enable+0xb8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0301 	and.w	r3, r3, #1
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d00d      	beq.n	80049e4 <ADC_Enable+0xb8>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049cc:	f043 0210 	orr.w	r2, r3, #16
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	679a      	str	r2, [r3, #120]	; 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049d8:	f043 0201 	orr.w	r2, r3, #1
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	67da      	str	r2, [r3, #124]	; 0x7c

              return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e007      	b.n	80049f4 <ADC_Enable+0xc8>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d1cf      	bne.n	8004992 <ADC_Enable+0x66>
        }
      }
    }
  }

  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3710      	adds	r7, #16
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	8000003f 	.word	0x8000003f
 8004a00:	46021000 	.word	0x46021000

08004a04 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7fe fc56 	bl	80032c2 <LL_ADC_IsDisableOngoing>
 8004a16:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7fe fc3d 	bl	800329c <LL_ADC_IsEnabled>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d047      	beq.n	8004ab8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d144      	bne.n	8004ab8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f003 030d 	and.w	r3, r3, #13
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d10c      	bne.n	8004a56 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4618      	mov	r0, r3
 8004a42:	f7fe fc17 	bl	8003274 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2203      	movs	r2, #3
 8004a4c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004a4e:	f7fe f93f 	bl	8002cd0 <HAL_GetTick>
 8004a52:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004a54:	e029      	b.n	8004aaa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a5a:	f043 0210 	orr.w	r2, r3, #16
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	679a      	str	r2, [r3, #120]	; 0x78
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a66:	f043 0201 	orr.w	r2, r3, #1
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	67da      	str	r2, [r3, #124]	; 0x7c
      return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e023      	b.n	8004aba <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004a72:	f7fe f92d 	bl	8002cd0 <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d914      	bls.n	8004aaa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00d      	beq.n	8004aaa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a92:	f043 0210 	orr.w	r2, r3, #16
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a9e:	f043 0201 	orr.w	r2, r3, #1
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e007      	b.n	8004aba <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1dc      	bne.n	8004a72 <ADC_Disable+0x6e>
        }
      }
    }
  }

  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
	...

08004ac4 <LL_ADC_StartCalibration>:
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a0f      	ldr	r2, [pc, #60]	; (8004b10 <LL_ADC_StartCalibration+0x4c>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d00c      	beq.n	8004af0 <LL_ADC_StartCalibration+0x2c>
    MODIFY_REG(ADCx->CR,
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	689a      	ldr	r2, [r3, #8]
 8004ada:	4b0e      	ldr	r3, [pc, #56]	; (8004b14 <LL_ADC_StartCalibration+0x50>)
 8004adc:	4013      	ands	r3, r2
 8004ade:	683a      	ldr	r2, [r7, #0]
 8004ae0:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	609a      	str	r2, [r3, #8]
}
 8004aee:	e009      	b.n	8004b04 <LL_ADC_StartCalibration+0x40>
    MODIFY_REG(ADCx->CR,  ADC_CR_BITS_PROPERTY_RS,    ADC_CR_ADCAL);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004af8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004afc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	609a      	str	r2, [r3, #8]
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr
 8004b10:	46021000 	.word	0x46021000
 8004b14:	7ffeffc0 	.word	0x7ffeffc0

08004b18 <LL_ADC_IsCalibrationOnGoing>:
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b2c:	d101      	bne.n	8004b32 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e000      	b.n	8004b34 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b086      	sub	sp, #24
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  __HAL_LOCK(hadc);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d101      	bne.n	8004b5e <HAL_ADCEx_Calibration_Start+0x1e>
 8004b5a:	2302      	movs	r3, #2
 8004b5c:	e04d      	b.n	8004bfa <HAL_ADCEx_Calibration_Start+0xba>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f7ff ff4c 	bl	8004a04 <ADC_Disable>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004b70:	7dfb      	ldrb	r3, [r7, #23]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d136      	bne.n	8004be4 <HAL_ADCEx_Calibration_Start+0xa4>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY, HAL_ADC_STATE_BUSY_INTERNAL);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b7a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004b7e:	f023 0302 	bic.w	r3, r3, #2
 8004b82:	f043 0202 	orr.w	r2, r3, #2
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	679a      	str	r2, [r3, #120]	; 0x78

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68b9      	ldr	r1, [r7, #8]
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7ff ff97 	bl	8004ac4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004b96:	e014      	b.n	8004bc2 <HAL_ADCEx_Calibration_Start+0x82>
    {
      wait_loop_index++;
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	4a18      	ldr	r2, [pc, #96]	; (8004c04 <HAL_ADCEx_Calibration_Start+0xc4>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d90d      	bls.n	8004bc2 <HAL_ADCEx_Calibration_Start+0x82>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004baa:	f023 0312 	bic.w	r3, r3, #18
 8004bae:	f043 0210 	orr.w	r2, r3, #16
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(hadc);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e01b      	b.n	8004bfa <HAL_ADCEx_Calibration_Start+0xba>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7ff ffa6 	bl	8004b18 <LL_ADC_IsCalibrationOnGoing>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d1e2      	bne.n	8004b98 <HAL_ADCEx_Calibration_Start+0x58>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bd6:	f023 0303 	bic.w	r3, r3, #3
 8004bda:	f043 0201 	orr.w	r2, r3, #1
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	679a      	str	r2, [r3, #120]	; 0x78
 8004be2:	e005      	b.n	8004bf0 <HAL_ADCEx_Calibration_Start+0xb0>
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004be8:	f043 0210 	orr.w	r2, r3, #16
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	679a      	str	r2, [r3, #120]	; 0x78

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return tmp_hal_status;
 8004bf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3718      	adds	r7, #24
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	555a95ff 	.word	0x555a95ff

08004c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f003 0307 	and.w	r3, r3, #7
 8004c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c18:	4b0c      	ldr	r3, [pc, #48]	; (8004c4c <__NVIC_SetPriorityGrouping+0x44>)
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c1e:	68ba      	ldr	r2, [r7, #8]
 8004c20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c24:	4013      	ands	r3, r2
 8004c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c3a:	4a04      	ldr	r2, [pc, #16]	; (8004c4c <__NVIC_SetPriorityGrouping+0x44>)
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	60d3      	str	r3, [r2, #12]
}
 8004c40:	bf00      	nop
 8004c42:	3714      	adds	r7, #20
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr
 8004c4c:	e000ed00 	.word	0xe000ed00

08004c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c50:	b480      	push	{r7}
 8004c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c54:	4b04      	ldr	r3, [pc, #16]	; (8004c68 <__NVIC_GetPriorityGrouping+0x18>)
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	0a1b      	lsrs	r3, r3, #8
 8004c5a:	f003 0307 	and.w	r3, r3, #7
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr
 8004c68:	e000ed00 	.word	0xe000ed00

08004c6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	4603      	mov	r3, r0
 8004c74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	db0b      	blt.n	8004c96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c7e:	79fb      	ldrb	r3, [r7, #7]
 8004c80:	f003 021f 	and.w	r2, r3, #31
 8004c84:	4907      	ldr	r1, [pc, #28]	; (8004ca4 <__NVIC_EnableIRQ+0x38>)
 8004c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c8a:	095b      	lsrs	r3, r3, #5
 8004c8c:	2001      	movs	r0, #1
 8004c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8004c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c96:	bf00      	nop
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	e000e100 	.word	0xe000e100

08004ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	4603      	mov	r3, r0
 8004cb0:	6039      	str	r1, [r7, #0]
 8004cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	db0a      	blt.n	8004cd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	b2da      	uxtb	r2, r3
 8004cc0:	490c      	ldr	r1, [pc, #48]	; (8004cf4 <__NVIC_SetPriority+0x4c>)
 8004cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cc6:	0112      	lsls	r2, r2, #4
 8004cc8:	b2d2      	uxtb	r2, r2
 8004cca:	440b      	add	r3, r1
 8004ccc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004cd0:	e00a      	b.n	8004ce8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	b2da      	uxtb	r2, r3
 8004cd6:	4908      	ldr	r1, [pc, #32]	; (8004cf8 <__NVIC_SetPriority+0x50>)
 8004cd8:	79fb      	ldrb	r3, [r7, #7]
 8004cda:	f003 030f 	and.w	r3, r3, #15
 8004cde:	3b04      	subs	r3, #4
 8004ce0:	0112      	lsls	r2, r2, #4
 8004ce2:	b2d2      	uxtb	r2, r2
 8004ce4:	440b      	add	r3, r1
 8004ce6:	761a      	strb	r2, [r3, #24]
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr
 8004cf4:	e000e100 	.word	0xe000e100
 8004cf8:	e000ed00 	.word	0xe000ed00

08004cfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b089      	sub	sp, #36	; 0x24
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f003 0307 	and.w	r3, r3, #7
 8004d0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	f1c3 0307 	rsb	r3, r3, #7
 8004d16:	2b04      	cmp	r3, #4
 8004d18:	bf28      	it	cs
 8004d1a:	2304      	movcs	r3, #4
 8004d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	3304      	adds	r3, #4
 8004d22:	2b06      	cmp	r3, #6
 8004d24:	d902      	bls.n	8004d2c <NVIC_EncodePriority+0x30>
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	3b03      	subs	r3, #3
 8004d2a:	e000      	b.n	8004d2e <NVIC_EncodePriority+0x32>
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d30:	f04f 32ff 	mov.w	r2, #4294967295
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3a:	43da      	mvns	r2, r3
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	401a      	ands	r2, r3
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d44:	f04f 31ff 	mov.w	r1, #4294967295
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d4e:	43d9      	mvns	r1, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d54:	4313      	orrs	r3, r2
         );
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3724      	adds	r7, #36	; 0x24
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
	...

08004d64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d74:	d301      	bcc.n	8004d7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d76:	2301      	movs	r3, #1
 8004d78:	e00f      	b.n	8004d9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d7a:	4a0a      	ldr	r2, [pc, #40]	; (8004da4 <SysTick_Config+0x40>)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d82:	210f      	movs	r1, #15
 8004d84:	f04f 30ff 	mov.w	r0, #4294967295
 8004d88:	f7ff ff8e 	bl	8004ca8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d8c:	4b05      	ldr	r3, [pc, #20]	; (8004da4 <SysTick_Config+0x40>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d92:	4b04      	ldr	r3, [pc, #16]	; (8004da4 <SysTick_Config+0x40>)
 8004d94:	2207      	movs	r2, #7
 8004d96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	e000e010 	.word	0xe000e010

08004da8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f7ff ff29 	bl	8004c08 <__NVIC_SetPriorityGrouping>
}
 8004db6:	bf00      	nop
 8004db8:	3708      	adds	r7, #8
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b086      	sub	sp, #24
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	60b9      	str	r1, [r7, #8]
 8004dc8:	607a      	str	r2, [r7, #4]
 8004dca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004dcc:	f7ff ff40 	bl	8004c50 <__NVIC_GetPriorityGrouping>
 8004dd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	68b9      	ldr	r1, [r7, #8]
 8004dd6:	6978      	ldr	r0, [r7, #20]
 8004dd8:	f7ff ff90 	bl	8004cfc <NVIC_EncodePriority>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004de2:	4611      	mov	r1, r2
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7ff ff5f 	bl	8004ca8 <__NVIC_SetPriority>
}
 8004dea:	bf00      	nop
 8004dec:	3718      	adds	r7, #24
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b082      	sub	sp, #8
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	4603      	mov	r3, r0
 8004dfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e00:	4618      	mov	r0, r3
 8004e02:	f7ff ff33 	bl	8004c6c <__NVIC_EnableIRQ>
}
 8004e06:	bf00      	nop
 8004e08:	3708      	adds	r7, #8
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}

08004e0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e0e:	b580      	push	{r7, lr}
 8004e10:	b082      	sub	sp, #8
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7ff ffa4 	bl	8004d64 <SysTick_Config>
 8004e1c:	4603      	mov	r3, r0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b082      	sub	sp, #8
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d101      	bne.n	8004e38 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e014      	b.n	8004e62 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	791b      	ldrb	r3, [r3, #4]
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d105      	bne.n	8004e4e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f7fd fad1 	bl	80023f0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2202      	movs	r2, #2
 8004e52:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3708      	adds	r7, #8
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b082      	sub	sp, #8
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
 8004e72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	795b      	ldrb	r3, [r3, #5]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d101      	bne.n	8004e80 <HAL_DAC_Start+0x16>
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	e043      	b.n	8004f08 <HAL_DAC_Start+0x9e>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2202      	movs	r2, #2
 8004e8a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	6819      	ldr	r1, [r3, #0]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	f003 0310 	and.w	r3, r3, #16
 8004e98:	2201      	movs	r2, #1
 8004e9a:	409a      	lsls	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8004ea4:	2001      	movs	r0, #1
 8004ea6:	f7fd ff1f 	bl	8002ce8 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d10f      	bne.n	8004ed0 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d11d      	bne.n	8004efa <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f042 0201 	orr.w	r2, r2, #1
 8004ecc:	605a      	str	r2, [r3, #4]
 8004ece:	e014      	b.n	8004efa <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	f003 0310 	and.w	r3, r3, #16
 8004ee0:	2102      	movs	r1, #2
 8004ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d107      	bne.n	8004efa <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f042 0202 	orr.w	r2, r2, #2
 8004ef8:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3708      	adds	r7, #8
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b087      	sub	sp, #28
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
 8004f1c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d105      	bne.n	8004f40 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4413      	add	r3, r2
 8004f3a:	3308      	adds	r3, #8
 8004f3c:	617b      	str	r3, [r7, #20]
 8004f3e:	e004      	b.n	8004f4a <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004f40:	697a      	ldr	r2, [r7, #20]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4413      	add	r3, r2
 8004f46:	3314      	adds	r3, #20
 8004f48:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	371c      	adds	r7, #28
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b08a      	sub	sp, #40	; 0x28
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	795b      	ldrb	r3, [r3, #5]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d101      	bne.n	8004f78 <HAL_DAC_ConfigChannel+0x18>
 8004f74:	2302      	movs	r3, #2
 8004f76:	e185      	b.n	8005284 <HAL_DAC_ConfigChannel+0x324>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2202      	movs	r2, #2
 8004f82:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	2b04      	cmp	r3, #4
 8004f8a:	f040 8081 	bne.w	8005090 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004f8e:	f7fd fe9f 	bl	8002cd0 <HAL_GetTick>
 8004f92:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d140      	bne.n	800501c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004f9a:	e018      	b.n	8004fce <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004f9c:	f7fd fe98 	bl	8002cd0 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d911      	bls.n	8004fce <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00a      	beq.n	8004fce <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	f043 0208 	orr.w	r2, r3, #8
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2203      	movs	r2, #3
 8004fc8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e15a      	b.n	8005284 <HAL_DAC_ConfigChannel+0x324>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d1df      	bne.n	8004f9c <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 8004fdc:	2001      	movs	r0, #1
 8004fde:	f7fd fe83 	bl	8002ce8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004fea:	641a      	str	r2, [r3, #64]	; 0x40
 8004fec:	e023      	b.n	8005036 <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004fee:	f7fd fe6f 	bl	8002cd0 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d90f      	bls.n	800501c <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005002:	2b00      	cmp	r3, #0
 8005004:	da0a      	bge.n	800501c <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	f043 0208 	orr.w	r2, r3, #8
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2203      	movs	r2, #3
 8005016:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e133      	b.n	8005284 <HAL_DAC_ConfigChannel+0x324>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005022:	2b00      	cmp	r3, #0
 8005024:	dbe3      	blt.n	8004fee <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 8005026:	2001      	movs	r0, #1
 8005028:	f7fd fe5e 	bl	8002ce8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005034:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f003 0310 	and.w	r3, r3, #16
 8005042:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005046:	fa01 f303 	lsl.w	r3, r1, r3
 800504a:	43db      	mvns	r3, r3
 800504c:	ea02 0103 	and.w	r1, r2, r3
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f003 0310 	and.w	r3, r3, #16
 800505a:	409a      	lsls	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	430a      	orrs	r2, r1
 8005062:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f003 0310 	and.w	r3, r3, #16
 8005070:	21ff      	movs	r1, #255	; 0xff
 8005072:	fa01 f303 	lsl.w	r3, r1, r3
 8005076:	43db      	mvns	r3, r3
 8005078:	ea02 0103 	and.w	r1, r2, r3
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f003 0310 	and.w	r3, r3, #16
 8005086:	409a      	lsls	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	430a      	orrs	r2, r1
 800508e:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  /* Autonomous mode configuration */
  MODIFY_REG(hdac->Instance->AUTOCR, DAC_AUTOCR_AUTOMODE, sConfig->DAC_AutonomousMode);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005096:	f423 0180 	bic.w	r1, r3, #4194304	; 0x400000
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	685a      	ldr	r2, [r3, #4]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	430a      	orrs	r2, r1
 80050a4:	655a      	str	r2, [r3, #84]	; 0x54

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	69db      	ldr	r3, [r3, #28]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d11d      	bne.n	80050ea <HAL_DAC_ConfigChannel+0x18a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f003 0310 	and.w	r3, r3, #16
 80050bc:	221f      	movs	r2, #31
 80050be:	fa02 f303 	lsl.w	r3, r2, r3
 80050c2:	43db      	mvns	r3, r3
 80050c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050c6:	4013      	ands	r3, r2
 80050c8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f003 0310 	and.w	r3, r3, #16
 80050d6:	69ba      	ldr	r2, [r7, #24]
 80050d8:	fa02 f303 	lsl.w	r3, r2, r3
 80050dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050de:	4313      	orrs	r3, r2
 80050e0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050e8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f003 0310 	and.w	r3, r3, #16
 80050f8:	2207      	movs	r2, #7
 80050fa:	fa02 f303 	lsl.w	r3, r2, r3
 80050fe:	43db      	mvns	r3, r3
 8005100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005102:	4013      	ands	r3, r2
 8005104:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	2b01      	cmp	r3, #1
 800510c:	d102      	bne.n	8005114 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = 0x00000000UL;
 800510e:	2300      	movs	r3, #0
 8005110:	623b      	str	r3, [r7, #32]
 8005112:	e00f      	b.n	8005134 <HAL_DAC_ConfigChannel+0x1d4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	2b02      	cmp	r3, #2
 800511a:	d102      	bne.n	8005122 <HAL_DAC_ConfigChannel+0x1c2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800511c:	2301      	movs	r3, #1
 800511e:	623b      	str	r3, [r7, #32]
 8005120:	e008      	b.n	8005134 <HAL_DAC_ConfigChannel+0x1d4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d102      	bne.n	8005130 <HAL_DAC_ConfigChannel+0x1d0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800512a:	2301      	movs	r3, #1
 800512c:	623b      	str	r3, [r7, #32]
 800512e:	e001      	b.n	8005134 <HAL_DAC_ConfigChannel+0x1d4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005130:	2300      	movs	r3, #0
 8005132:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	68da      	ldr	r2, [r3, #12]
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	695b      	ldr	r3, [r3, #20]
 800513c:	4313      	orrs	r3, r2
 800513e:	6a3a      	ldr	r2, [r7, #32]
 8005140:	4313      	orrs	r3, r2
 8005142:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f003 0310 	and.w	r3, r3, #16
 800514a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800514e:	fa02 f303 	lsl.w	r3, r2, r3
 8005152:	43db      	mvns	r3, r3
 8005154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005156:	4013      	ands	r3, r2
 8005158:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	7a1b      	ldrb	r3, [r3, #8]
 800515e:	2b01      	cmp	r3, #1
 8005160:	d102      	bne.n	8005168 <HAL_DAC_ConfigChannel+0x208>
 8005162:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005166:	e000      	b.n	800516a <HAL_DAC_ConfigChannel+0x20a>
 8005168:	2300      	movs	r3, #0
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	4313      	orrs	r3, r2
 800516e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f003 0310 	and.w	r3, r3, #16
 8005176:	f44f 7200 	mov.w	r2, #512	; 0x200
 800517a:	fa02 f303 	lsl.w	r3, r2, r3
 800517e:	43db      	mvns	r3, r3
 8005180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005182:	4013      	ands	r3, r2
 8005184:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	7a5b      	ldrb	r3, [r3, #9]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d102      	bne.n	8005194 <HAL_DAC_ConfigChannel+0x234>
 800518e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005192:	e000      	b.n	8005196 <HAL_DAC_ConfigChannel+0x236>
 8005194:	2300      	movs	r3, #0
 8005196:	69ba      	ldr	r2, [r7, #24]
 8005198:	4313      	orrs	r3, r2
 800519a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800519c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80051a2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d114      	bne.n	80051d6 <HAL_DAC_ConfigChannel+0x276>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80051ac:	f002 fb7e 	bl	80078ac <HAL_RCC_GetHCLKFreq>
 80051b0:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	4a35      	ldr	r2, [pc, #212]	; (800528c <HAL_DAC_ConfigChannel+0x32c>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d904      	bls.n	80051c4 <HAL_DAC_ConfigChannel+0x264>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80051ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051c0:	627b      	str	r3, [r7, #36]	; 0x24
 80051c2:	e00f      	b.n	80051e4 <HAL_DAC_ConfigChannel+0x284>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	4a32      	ldr	r2, [pc, #200]	; (8005290 <HAL_DAC_ConfigChannel+0x330>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d90a      	bls.n	80051e2 <HAL_DAC_ConfigChannel+0x282>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80051cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051d2:	627b      	str	r3, [r7, #36]	; 0x24
 80051d4:	e006      	b.n	80051e4 <HAL_DAC_ConfigChannel+0x284>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051dc:	4313      	orrs	r3, r2
 80051de:	627b      	str	r3, [r7, #36]	; 0x24
 80051e0:	e000      	b.n	80051e4 <HAL_DAC_ConfigChannel+0x284>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80051e2:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f003 0310 	and.w	r3, r3, #16
 80051ea:	69ba      	ldr	r2, [r7, #24]
 80051ec:	fa02 f303 	lsl.w	r3, r2, r3
 80051f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051f2:	4313      	orrs	r3, r2
 80051f4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	6819      	ldr	r1, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f003 0310 	and.w	r3, r3, #16
 800520a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800520e:	fa02 f303 	lsl.w	r3, r2, r3
 8005212:	43da      	mvns	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	400a      	ands	r2, r1
 800521a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f003 0310 	and.w	r3, r3, #16
 800522a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800522e:	fa02 f303 	lsl.w	r3, r2, r3
 8005232:	43db      	mvns	r3, r3
 8005234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005236:	4013      	ands	r3, r2
 8005238:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f003 0310 	and.w	r3, r3, #16
 8005246:	69ba      	ldr	r2, [r7, #24]
 8005248:	fa02 f303 	lsl.w	r3, r2, r3
 800524c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800524e:	4313      	orrs	r3, r2
 8005250:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005258:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	6819      	ldr	r1, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f003 0310 	and.w	r3, r3, #16
 8005266:	22c0      	movs	r2, #192	; 0xc0
 8005268:	fa02 f303 	lsl.w	r3, r2, r3
 800526c:	43da      	mvns	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	400a      	ands	r2, r1
 8005274:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2201      	movs	r2, #1
 800527a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3728      	adds	r7, #40	; 0x28
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	09896800 	.word	0x09896800
 8005290:	04c4b400 	.word	0x04c4b400

08005294 <HAL_DACEx_SetConfigAutonomousMode>:
  *        the configuration information for the specified DAC.
  * @param sConfig pointer to Autonomous mode structure parameters.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_SetConfigAutonomousMode(DAC_HandleTypeDef *hdac, DAC_AutonomousModeConfTypeDef *sConfig)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  assert_param(IS_DAC_AUTONOMOUS(sConfig->AutonomousModeState));

  if (hdac->State == HAL_DAC_STATE_READY)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	791b      	ldrb	r3, [r3, #4]
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d11e      	bne.n	80052e6 <HAL_DACEx_SetConfigAutonomousMode+0x52>
  {
    /* Process Locked */
    __HAL_LOCK(hdac);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	795b      	ldrb	r3, [r3, #5]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d101      	bne.n	80052b4 <HAL_DACEx_SetConfigAutonomousMode+0x20>
 80052b0:	2302      	movs	r3, #2
 80052b2:	e019      	b.n	80052e8 <HAL_DACEx_SetConfigAutonomousMode+0x54>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	715a      	strb	r2, [r3, #5]

    hdac->State = HAL_DAC_STATE_BUSY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2202      	movs	r2, #2
 80052be:	711a      	strb	r2, [r3, #4]

    /* NOTE: The set/reset of the bit automode in the AUTOCR
             register is for both dac_channel1 and dac_channel2 */

    /* Update the AUTOCR register */
    MODIFY_REG(hdac->Instance->AUTOCR, DAC_AUTOCR_AUTOMODE, sConfig->AutonomousModeState);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c6:	f423 0180 	bic.w	r1, r3, #4194304	; 0x400000
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Update the DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	711a      	strb	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdac);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	715a      	strb	r2, [r3, #5]

    return HAL_OK;
 80052e2:	2300      	movs	r3, #0
 80052e4:	e000      	b.n	80052e8 <HAL_DACEx_SetConfigAutonomousMode+0x54>
  }
  else
  {
    return HAL_BUSY;
 80052e6:	2302      	movs	r3, #2
  }
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
 8005300:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d101      	bne.n	800530c <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e04f      	b.n	80053ac <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005312:	2b01      	cmp	r3, #1
 8005314:	d101      	bne.n	800531a <HAL_DMA_Start_IT+0x26>
 8005316:	2302      	movs	r3, #2
 8005318:	e048      	b.n	80053ac <HAL_DMA_Start_IT+0xb8>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b01      	cmp	r3, #1
 800532c:	d136      	bne.n	800539c <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2202      	movs	r2, #2
 8005332:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	68b9      	ldr	r1, [r7, #8]
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f000 f836 	bl	80053b4 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	695a      	ldr	r2, [r3, #20]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 8005356:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800535c:	2b00      	cmp	r3, #0
 800535e:	d007      	beq.n	8005370 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	695a      	ldr	r2, [r3, #20]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800536e:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005374:	2b00      	cmp	r3, #0
 8005376:	d007      	beq.n	8005388 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	695a      	ldr	r2, [r3, #20]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005386:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	695a      	ldr	r2, [r3, #20]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f042 0201 	orr.w	r2, r2, #1
 8005396:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8005398:	2300      	movs	r3, #0
 800539a:	e007      	b.n	80053ac <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2240      	movs	r2, #64	; 0x40
 80053a0:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
 80053c0:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053c8:	0c1b      	lsrs	r3, r3, #16
 80053ca:	041b      	lsls	r3, r3, #16
 80053cc:	683a      	ldr	r2, [r7, #0]
 80053ce:	b291      	uxth	r1, r2
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	6812      	ldr	r2, [r2, #0]
 80053d4:	430b      	orrs	r3, r1
 80053d6:	6493      	str	r3, [r2, #72]	; 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80053e0:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68ba      	ldr	r2, [r7, #8]
 80053e8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80053f2:	bf00      	nop
 80053f4:	3714      	adds	r7, #20
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b086      	sub	sp, #24
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d003      	beq.n	8005414 <HAL_DMAEx_List_Start_IT+0x16>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005410:	2b00      	cmp	r3, #0
 8005412:	d101      	bne.n	8005418 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e082      	b.n	800551e <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800541e:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	695b      	ldr	r3, [r3, #20]
 8005426:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800542a:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 800542c:	7dfb      	ldrb	r3, [r7, #23]
 800542e:	2b01      	cmp	r3, #1
 8005430:	d005      	beq.n	800543e <HAL_DMAEx_List_Start_IT+0x40>
 8005432:	7dfb      	ldrb	r3, [r7, #23]
 8005434:	2b02      	cmp	r3, #2
 8005436:	d16a      	bne.n	800550e <HAL_DMAEx_List_Start_IT+0x110>
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d067      	beq.n	800550e <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b01      	cmp	r3, #1
 8005448:	d157      	bne.n	80054fa <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005450:	2b01      	cmp	r3, #1
 8005452:	d101      	bne.n	8005458 <HAL_DMAEx_List_Start_IT+0x5a>
 8005454:	2302      	movs	r3, #2
 8005456:	e062      	b.n	800551e <HAL_DMAEx_List_Start_IT+0x120>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2202      	movs	r2, #2
 8005464:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800546c:	2202      	movs	r2, #2
 800546e:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	659a      	str	r2, [r3, #88]	; 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800547a:	2200      	movs	r2, #0
 800547c:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	695a      	ldr	r2, [r3, #20]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 800548c:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005492:	2b00      	cmp	r3, #0
 8005494:	d007      	beq.n	80054a6 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	695a      	ldr	r2, [r3, #20]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054a4:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d007      	beq.n	80054be <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	695a      	ldr	r2, [r3, #20]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054bc:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f107 010c 	add.w	r1, r7, #12
 80054c8:	2200      	movs	r2, #0
 80054ca:	4618      	mov	r0, r3
 80054cc:	f000 f82c 	bl	8005528 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4619      	mov	r1, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	0c0b      	lsrs	r3, r1, #16
 80054de:	041b      	lsls	r3, r3, #16
 80054e0:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	461a      	mov	r2, r3
 80054ea:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80054ee:	4013      	ands	r3, r2
 80054f0:	68f9      	ldr	r1, [r7, #12]
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	6812      	ldr	r2, [r2, #0]
 80054f6:	430b      	orrs	r3, r1
 80054f8:	67d3      	str	r3, [r2, #124]	; 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	695a      	ldr	r2, [r3, #20]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f042 0201 	orr.w	r2, r2, #1
 8005508:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 800550a:	2300      	movs	r3, #0
 800550c:	e007      	b.n	800551e <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2240      	movs	r2, #64	; 0x40
 8005512:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
}
 800551e:	4618      	mov	r0, r3
 8005520:	3718      	adds	r7, #24
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
	...

08005528 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	f003 0302 	and.w	r3, r3, #2
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00c      	beq.n	800555a <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d002      	beq.n	800554c <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	4a0d      	ldr	r2, [pc, #52]	; (8005580 <DMA_List_GetCLLRNodeInfo+0x58>)
 800554a:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00f      	beq.n	8005572 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2207      	movs	r2, #7
 8005556:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8005558:	e00b      	b.n	8005572 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d002      	beq.n	8005566 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	4a08      	ldr	r2, [pc, #32]	; (8005584 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8005564:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d002      	beq.n	8005572 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2205      	movs	r2, #5
 8005570:	601a      	str	r2, [r3, #0]
}
 8005572:	bf00      	nop
 8005574:	3714      	adds	r7, #20
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	fe010000 	.word	0xfe010000
 8005584:	f8010000 	.word	0xf8010000

08005588 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8005588:	b480      	push	{r7}
 800558a:	b089      	sub	sp, #36	; 0x24
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8005592:	2300      	movs	r3, #0
 8005594:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800559a:	e1ba      	b.n	8005912 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	2101      	movs	r1, #1
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	fa01 f303 	lsl.w	r3, r1, r3
 80055a8:	4013      	ands	r3, r2
 80055aa:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f000 81aa 	beq.w	800590c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a55      	ldr	r2, [pc, #340]	; (8005710 <HAL_GPIO_Init+0x188>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d15d      	bne.n	800567c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80055c6:	2201      	movs	r2, #1
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	fa02 f303 	lsl.w	r3, r2, r3
 80055ce:	43db      	mvns	r3, r3
 80055d0:	69fa      	ldr	r2, [r7, #28]
 80055d2:	4013      	ands	r3, r2
 80055d4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f003 0201 	and.w	r2, r3, #1
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	fa02 f303 	lsl.w	r3, r2, r3
 80055e4:	69fa      	ldr	r2, [r7, #28]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	69fa      	ldr	r2, [r7, #28]
 80055ee:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80055f0:	4a48      	ldr	r2, [pc, #288]	; (8005714 <HAL_GPIO_Init+0x18c>)
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80055f8:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80055fa:	4a46      	ldr	r2, [pc, #280]	; (8005714 <HAL_GPIO_Init+0x18c>)
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	00db      	lsls	r3, r3, #3
 8005600:	4413      	add	r3, r2
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	08da      	lsrs	r2, r3, #3
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	3208      	adds	r2, #8
 800560e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005612:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	f003 0307 	and.w	r3, r3, #7
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	220f      	movs	r2, #15
 800561e:	fa02 f303 	lsl.w	r3, r2, r3
 8005622:	43db      	mvns	r3, r3
 8005624:	69fa      	ldr	r2, [r7, #28]
 8005626:	4013      	ands	r3, r2
 8005628:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	f003 0307 	and.w	r3, r3, #7
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	220b      	movs	r2, #11
 8005634:	fa02 f303 	lsl.w	r3, r2, r3
 8005638:	69fa      	ldr	r2, [r7, #28]
 800563a:	4313      	orrs	r3, r2
 800563c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	08da      	lsrs	r2, r3, #3
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	3208      	adds	r2, #8
 8005646:	69f9      	ldr	r1, [r7, #28]
 8005648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	005b      	lsls	r3, r3, #1
 8005656:	2203      	movs	r2, #3
 8005658:	fa02 f303 	lsl.w	r3, r2, r3
 800565c:	43db      	mvns	r3, r3
 800565e:	69fa      	ldr	r2, [r7, #28]
 8005660:	4013      	ands	r3, r2
 8005662:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	005b      	lsls	r3, r3, #1
 8005668:	2202      	movs	r2, #2
 800566a:	fa02 f303 	lsl.w	r3, r2, r3
 800566e:	69fa      	ldr	r2, [r7, #28]
 8005670:	4313      	orrs	r3, r2
 8005672:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	69fa      	ldr	r2, [r7, #28]
 8005678:	601a      	str	r2, [r3, #0]
 800567a:	e067      	b.n	800574c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	2b02      	cmp	r3, #2
 8005682:	d003      	beq.n	800568c <HAL_GPIO_Init+0x104>
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	2b12      	cmp	r3, #18
 800568a:	d145      	bne.n	8005718 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	08da      	lsrs	r2, r3, #3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	3208      	adds	r2, #8
 8005694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005698:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	f003 0307 	and.w	r3, r3, #7
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	220f      	movs	r2, #15
 80056a4:	fa02 f303 	lsl.w	r3, r2, r3
 80056a8:	43db      	mvns	r3, r3
 80056aa:	69fa      	ldr	r2, [r7, #28]
 80056ac:	4013      	ands	r3, r2
 80056ae:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	f003 020f 	and.w	r2, r3, #15
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	f003 0307 	and.w	r3, r3, #7
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	fa02 f303 	lsl.w	r3, r2, r3
 80056c4:	69fa      	ldr	r2, [r7, #28]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	08da      	lsrs	r2, r3, #3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	3208      	adds	r2, #8
 80056d2:	69f9      	ldr	r1, [r7, #28]
 80056d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	005b      	lsls	r3, r3, #1
 80056e2:	2203      	movs	r2, #3
 80056e4:	fa02 f303 	lsl.w	r3, r2, r3
 80056e8:	43db      	mvns	r3, r3
 80056ea:	69fa      	ldr	r2, [r7, #28]
 80056ec:	4013      	ands	r3, r2
 80056ee:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f003 0203 	and.w	r2, r3, #3
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	005b      	lsls	r3, r3, #1
 80056fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005700:	69fa      	ldr	r2, [r7, #28]
 8005702:	4313      	orrs	r3, r2
 8005704:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	69fa      	ldr	r2, [r7, #28]
 800570a:	601a      	str	r2, [r3, #0]
 800570c:	e01e      	b.n	800574c <HAL_GPIO_Init+0x1c4>
 800570e:	bf00      	nop
 8005710:	46020000 	.word	0x46020000
 8005714:	0800d060 	.word	0x0800d060
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	005b      	lsls	r3, r3, #1
 8005722:	2203      	movs	r2, #3
 8005724:	fa02 f303 	lsl.w	r3, r2, r3
 8005728:	43db      	mvns	r3, r3
 800572a:	69fa      	ldr	r2, [r7, #28]
 800572c:	4013      	ands	r3, r2
 800572e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f003 0203 	and.w	r2, r3, #3
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	005b      	lsls	r3, r3, #1
 800573c:	fa02 f303 	lsl.w	r3, r2, r3
 8005740:	69fa      	ldr	r2, [r7, #28]
 8005742:	4313      	orrs	r3, r2
 8005744:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	69fa      	ldr	r2, [r7, #28]
 800574a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	2b01      	cmp	r3, #1
 8005752:	d00b      	beq.n	800576c <HAL_GPIO_Init+0x1e4>
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	2b02      	cmp	r3, #2
 800575a:	d007      	beq.n	800576c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005760:	2b11      	cmp	r3, #17
 8005762:	d003      	beq.n	800576c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	2b12      	cmp	r3, #18
 800576a:	d130      	bne.n	80057ce <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	005b      	lsls	r3, r3, #1
 8005776:	2203      	movs	r2, #3
 8005778:	fa02 f303 	lsl.w	r3, r2, r3
 800577c:	43db      	mvns	r3, r3
 800577e:	69fa      	ldr	r2, [r7, #28]
 8005780:	4013      	ands	r3, r2
 8005782:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	68da      	ldr	r2, [r3, #12]
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	005b      	lsls	r3, r3, #1
 800578c:	fa02 f303 	lsl.w	r3, r2, r3
 8005790:	69fa      	ldr	r2, [r7, #28]
 8005792:	4313      	orrs	r3, r2
 8005794:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	69fa      	ldr	r2, [r7, #28]
 800579a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80057a2:	2201      	movs	r2, #1
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	fa02 f303 	lsl.w	r3, r2, r3
 80057aa:	43db      	mvns	r3, r3
 80057ac:	69fa      	ldr	r2, [r7, #28]
 80057ae:	4013      	ands	r3, r2
 80057b0:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	091b      	lsrs	r3, r3, #4
 80057b8:	f003 0201 	and.w	r2, r3, #1
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	fa02 f303 	lsl.w	r3, r2, r3
 80057c2:	69fa      	ldr	r2, [r7, #28]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	69fa      	ldr	r2, [r7, #28]
 80057cc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	2b03      	cmp	r3, #3
 80057d4:	d017      	beq.n	8005806 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	005b      	lsls	r3, r3, #1
 80057e0:	2203      	movs	r2, #3
 80057e2:	fa02 f303 	lsl.w	r3, r2, r3
 80057e6:	43db      	mvns	r3, r3
 80057e8:	69fa      	ldr	r2, [r7, #28]
 80057ea:	4013      	ands	r3, r2
 80057ec:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	689a      	ldr	r2, [r3, #8]
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	005b      	lsls	r3, r3, #1
 80057f6:	fa02 f303 	lsl.w	r3, r2, r3
 80057fa:	69fa      	ldr	r2, [r7, #28]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	69fa      	ldr	r2, [r7, #28]
 8005804:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d07c      	beq.n	800590c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8005812:	4a47      	ldr	r2, [pc, #284]	; (8005930 <HAL_GPIO_Init+0x3a8>)
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	089b      	lsrs	r3, r3, #2
 8005818:	3318      	adds	r3, #24
 800581a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800581e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	f003 0303 	and.w	r3, r3, #3
 8005826:	00db      	lsls	r3, r3, #3
 8005828:	220f      	movs	r2, #15
 800582a:	fa02 f303 	lsl.w	r3, r2, r3
 800582e:	43db      	mvns	r3, r3
 8005830:	69fa      	ldr	r2, [r7, #28]
 8005832:	4013      	ands	r3, r2
 8005834:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	0a9a      	lsrs	r2, r3, #10
 800583a:	4b3e      	ldr	r3, [pc, #248]	; (8005934 <HAL_GPIO_Init+0x3ac>)
 800583c:	4013      	ands	r3, r2
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	f002 0203 	and.w	r2, r2, #3
 8005844:	00d2      	lsls	r2, r2, #3
 8005846:	4093      	lsls	r3, r2
 8005848:	69fa      	ldr	r2, [r7, #28]
 800584a:	4313      	orrs	r3, r2
 800584c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800584e:	4938      	ldr	r1, [pc, #224]	; (8005930 <HAL_GPIO_Init+0x3a8>)
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	089b      	lsrs	r3, r3, #2
 8005854:	3318      	adds	r3, #24
 8005856:	69fa      	ldr	r2, [r7, #28]
 8005858:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800585c:	4b34      	ldr	r3, [pc, #208]	; (8005930 <HAL_GPIO_Init+0x3a8>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	43db      	mvns	r3, r3
 8005866:	69fa      	ldr	r2, [r7, #28]
 8005868:	4013      	ands	r3, r2
 800586a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d003      	beq.n	8005880 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8005878:	69fa      	ldr	r2, [r7, #28]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	4313      	orrs	r3, r2
 800587e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8005880:	4a2b      	ldr	r2, [pc, #172]	; (8005930 <HAL_GPIO_Init+0x3a8>)
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8005886:	4b2a      	ldr	r3, [pc, #168]	; (8005930 <HAL_GPIO_Init+0x3a8>)
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	43db      	mvns	r3, r3
 8005890:	69fa      	ldr	r2, [r7, #28]
 8005892:	4013      	ands	r3, r2
 8005894:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80058a2:	69fa      	ldr	r2, [r7, #28]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80058aa:	4a21      	ldr	r2, [pc, #132]	; (8005930 <HAL_GPIO_Init+0x3a8>)
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80058b0:	4b1f      	ldr	r3, [pc, #124]	; (8005930 <HAL_GPIO_Init+0x3a8>)
 80058b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058b6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	43db      	mvns	r3, r3
 80058bc:	69fa      	ldr	r2, [r7, #28]
 80058be:	4013      	ands	r3, r2
 80058c0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d003      	beq.n	80058d6 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80058ce:	69fa      	ldr	r2, [r7, #28]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80058d6:	4a16      	ldr	r2, [pc, #88]	; (8005930 <HAL_GPIO_Init+0x3a8>)
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 80058de:	4b14      	ldr	r3, [pc, #80]	; (8005930 <HAL_GPIO_Init+0x3a8>)
 80058e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058e4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	43db      	mvns	r3, r3
 80058ea:	69fa      	ldr	r2, [r7, #28]
 80058ec:	4013      	ands	r3, r2
 80058ee:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d003      	beq.n	8005904 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80058fc:	69fa      	ldr	r2, [r7, #28]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	4313      	orrs	r3, r2
 8005902:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8005904:	4a0a      	ldr	r2, [pc, #40]	; (8005930 <HAL_GPIO_Init+0x3a8>)
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	3301      	adds	r3, #1
 8005910:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	fa22 f303 	lsr.w	r3, r2, r3
 800591c:	2b00      	cmp	r3, #0
 800591e:	f47f ae3d 	bne.w	800559c <HAL_GPIO_Init+0x14>
  }
}
 8005922:	bf00      	nop
 8005924:	bf00      	nop
 8005926:	3724      	adds	r7, #36	; 0x24
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr
 8005930:	46022000 	.word	0x46022000
 8005934:	002f7f7f 	.word	0x002f7f7f

08005938 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	460b      	mov	r3, r1
 8005942:	807b      	strh	r3, [r7, #2]
 8005944:	4613      	mov	r3, r2
 8005946:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005948:	787b      	ldrb	r3, [r7, #1]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d003      	beq.n	8005956 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800594e:	887a      	ldrh	r2, [r7, #2]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8005954:	e002      	b.n	800595c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8005956:	887a      	ldrh	r2, [r7, #2]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d101      	bne.n	800597a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e081      	b.n	8005a7e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005980:	b2db      	uxtb	r3, r3
 8005982:	2b00      	cmp	r3, #0
 8005984:	d106      	bne.n	8005994 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f7fc fd96 	bl	80024c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2224      	movs	r2, #36	; 0x24
 8005998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f022 0201 	bic.w	r2, r2, #1
 80059aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685a      	ldr	r2, [r3, #4]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80059b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	689a      	ldr	r2, [r3, #8]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80059c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d107      	bne.n	80059e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	689a      	ldr	r2, [r3, #8]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059de:	609a      	str	r2, [r3, #8]
 80059e0:	e006      	b.n	80059f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	689a      	ldr	r2, [r3, #8]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80059ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d104      	bne.n	8005a02 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	6812      	ldr	r2, [r2, #0]
 8005a0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005a10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68da      	ldr	r2, [r3, #12]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	691a      	ldr	r2, [r3, #16]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	430a      	orrs	r2, r1
 8005a3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	69d9      	ldr	r1, [r3, #28]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a1a      	ldr	r2, [r3, #32]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	430a      	orrs	r2, r1
 8005a4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f042 0201 	orr.w	r2, r2, #1
 8005a5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2220      	movs	r2, #32
 8005a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3708      	adds	r7, #8
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
	...

08005a88 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b088      	sub	sp, #32
 8005a8c:	af02      	add	r7, sp, #8
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	607a      	str	r2, [r7, #4]
 8005a92:	461a      	mov	r2, r3
 8005a94:	460b      	mov	r3, r1
 8005a96:	817b      	strh	r3, [r7, #10]
 8005a98:	4613      	mov	r3, r2
 8005a9a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	2b20      	cmp	r3, #32
 8005aa6:	f040 80da 	bne.w	8005c5e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d101      	bne.n	8005ab8 <HAL_I2C_Master_Transmit+0x30>
 8005ab4:	2302      	movs	r3, #2
 8005ab6:	e0d3      	b.n	8005c60 <HAL_I2C_Master_Transmit+0x1d8>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005ac0:	f7fd f906 	bl	8002cd0 <HAL_GetTick>
 8005ac4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	9300      	str	r3, [sp, #0]
 8005aca:	2319      	movs	r3, #25
 8005acc:	2201      	movs	r2, #1
 8005ace:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005ad2:	68f8      	ldr	r0, [r7, #12]
 8005ad4:	f000 f8f0 	bl	8005cb8 <I2C_WaitOnFlagUntilTimeout>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d001      	beq.n	8005ae2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e0be      	b.n	8005c60 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2221      	movs	r2, #33	; 0x21
 8005ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2210      	movs	r2, #16
 8005aee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	893a      	ldrh	r2, [r7, #8]
 8005b02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	2bff      	cmp	r3, #255	; 0xff
 8005b12:	d90e      	bls.n	8005b32 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	22ff      	movs	r2, #255	; 0xff
 8005b18:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b1e:	b2da      	uxtb	r2, r3
 8005b20:	8979      	ldrh	r1, [r7, #10]
 8005b22:	4b51      	ldr	r3, [pc, #324]	; (8005c68 <HAL_I2C_Master_Transmit+0x1e0>)
 8005b24:	9300      	str	r3, [sp, #0]
 8005b26:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f000 fa6c 	bl	8006008 <I2C_TransferConfig>
 8005b30:	e06c      	b.n	8005c0c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b40:	b2da      	uxtb	r2, r3
 8005b42:	8979      	ldrh	r1, [r7, #10]
 8005b44:	4b48      	ldr	r3, [pc, #288]	; (8005c68 <HAL_I2C_Master_Transmit+0x1e0>)
 8005b46:	9300      	str	r3, [sp, #0]
 8005b48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f000 fa5b 	bl	8006008 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005b52:	e05b      	b.n	8005c0c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	6a39      	ldr	r1, [r7, #32]
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	f000 f8ed 	bl	8005d38 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d001      	beq.n	8005b68 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e07b      	b.n	8005c60 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6c:	781a      	ldrb	r2, [r3, #0]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b78:	1c5a      	adds	r2, r3, #1
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	3b01      	subs	r3, #1
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b90:	3b01      	subs	r3, #1
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d034      	beq.n	8005c0c <HAL_I2C_Master_Transmit+0x184>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d130      	bne.n	8005c0c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	9300      	str	r3, [sp, #0]
 8005bae:	6a3b      	ldr	r3, [r7, #32]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	2180      	movs	r1, #128	; 0x80
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f000 f87f 	bl	8005cb8 <I2C_WaitOnFlagUntilTimeout>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d001      	beq.n	8005bc4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e04d      	b.n	8005c60 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	2bff      	cmp	r3, #255	; 0xff
 8005bcc:	d90e      	bls.n	8005bec <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	22ff      	movs	r2, #255	; 0xff
 8005bd2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bd8:	b2da      	uxtb	r2, r3
 8005bda:	8979      	ldrh	r1, [r7, #10]
 8005bdc:	2300      	movs	r3, #0
 8005bde:	9300      	str	r3, [sp, #0]
 8005be0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005be4:	68f8      	ldr	r0, [r7, #12]
 8005be6:	f000 fa0f 	bl	8006008 <I2C_TransferConfig>
 8005bea:	e00f      	b.n	8005c0c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bfa:	b2da      	uxtb	r2, r3
 8005bfc:	8979      	ldrh	r1, [r7, #10]
 8005bfe:	2300      	movs	r3, #0
 8005c00:	9300      	str	r3, [sp, #0]
 8005c02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c06:	68f8      	ldr	r0, [r7, #12]
 8005c08:	f000 f9fe 	bl	8006008 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d19e      	bne.n	8005b54 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c16:	697a      	ldr	r2, [r7, #20]
 8005c18:	6a39      	ldr	r1, [r7, #32]
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f000 f8cc 	bl	8005db8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d001      	beq.n	8005c2a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e01a      	b.n	8005c60 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2220      	movs	r2, #32
 8005c30:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	6859      	ldr	r1, [r3, #4]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	4b0b      	ldr	r3, [pc, #44]	; (8005c6c <HAL_I2C_Master_Transmit+0x1e4>)
 8005c3e:	400b      	ands	r3, r1
 8005c40:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2220      	movs	r2, #32
 8005c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	e000      	b.n	8005c60 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005c5e:	2302      	movs	r3, #2
  }
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3718      	adds	r7, #24
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	80002000 	.word	0x80002000
 8005c6c:	fe00e800 	.word	0xfe00e800

08005c70 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	f003 0302 	and.w	r3, r3, #2
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d103      	bne.n	8005c8e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	f003 0301 	and.w	r3, r3, #1
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d007      	beq.n	8005cac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	699a      	ldr	r2, [r3, #24]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f042 0201 	orr.w	r2, r2, #1
 8005caa:	619a      	str	r2, [r3, #24]
  }
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	603b      	str	r3, [r7, #0]
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cc8:	e022      	b.n	8005d10 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd0:	d01e      	beq.n	8005d10 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cd2:	f7fc fffd 	bl	8002cd0 <HAL_GetTick>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	683a      	ldr	r2, [r7, #0]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d302      	bcc.n	8005ce8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d113      	bne.n	8005d10 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cec:	f043 0220 	orr.w	r2, r3, #32
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2220      	movs	r2, #32
 8005cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e00f      	b.n	8005d30 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	699a      	ldr	r2, [r3, #24]
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	4013      	ands	r3, r2
 8005d1a:	68ba      	ldr	r2, [r7, #8]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	bf0c      	ite	eq
 8005d20:	2301      	moveq	r3, #1
 8005d22:	2300      	movne	r3, #0
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	461a      	mov	r2, r3
 8005d28:	79fb      	ldrb	r3, [r7, #7]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d0cd      	beq.n	8005cca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d44:	e02c      	b.n	8005da0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	68b9      	ldr	r1, [r7, #8]
 8005d4a:	68f8      	ldr	r0, [r7, #12]
 8005d4c:	f000 f870 	bl	8005e30 <I2C_IsErrorOccurred>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d001      	beq.n	8005d5a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e02a      	b.n	8005db0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d60:	d01e      	beq.n	8005da0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d62:	f7fc ffb5 	bl	8002cd0 <HAL_GetTick>
 8005d66:	4602      	mov	r2, r0
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	1ad3      	subs	r3, r2, r3
 8005d6c:	68ba      	ldr	r2, [r7, #8]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d302      	bcc.n	8005d78 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d113      	bne.n	8005da0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d7c:	f043 0220 	orr.w	r2, r3, #32
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2220      	movs	r2, #32
 8005d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e007      	b.n	8005db0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	f003 0302 	and.w	r3, r3, #2
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d1cb      	bne.n	8005d46 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3710      	adds	r7, #16
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005dc4:	e028      	b.n	8005e18 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	68b9      	ldr	r1, [r7, #8]
 8005dca:	68f8      	ldr	r0, [r7, #12]
 8005dcc:	f000 f830 	bl	8005e30 <I2C_IsErrorOccurred>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d001      	beq.n	8005dda <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e026      	b.n	8005e28 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dda:	f7fc ff79 	bl	8002cd0 <HAL_GetTick>
 8005dde:	4602      	mov	r2, r0
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	68ba      	ldr	r2, [r7, #8]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d302      	bcc.n	8005df0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d113      	bne.n	8005e18 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005df4:	f043 0220 	orr.w	r2, r3, #32
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2220      	movs	r2, #32
 8005e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e007      	b.n	8005e28 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	f003 0320 	and.w	r3, r3, #32
 8005e22:	2b20      	cmp	r3, #32
 8005e24:	d1cf      	bne.n	8005dc6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3710      	adds	r7, #16
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b08a      	sub	sp, #40	; 0x28
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	f003 0310 	and.w	r3, r3, #16
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d075      	beq.n	8005f48 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2210      	movs	r2, #16
 8005e62:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005e64:	e056      	b.n	8005f14 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e6c:	d052      	beq.n	8005f14 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005e6e:	f7fc ff2f 	bl	8002cd0 <HAL_GetTick>
 8005e72:	4602      	mov	r2, r0
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	68ba      	ldr	r2, [r7, #8]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d302      	bcc.n	8005e84 <I2C_IsErrorOccurred+0x54>
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d147      	bne.n	8005f14 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e8e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e96:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ea2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ea6:	d12e      	bne.n	8005f06 <I2C_IsErrorOccurred+0xd6>
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005eae:	d02a      	beq.n	8005f06 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005eb0:	7cfb      	ldrb	r3, [r7, #19]
 8005eb2:	2b20      	cmp	r3, #32
 8005eb4:	d027      	beq.n	8005f06 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	685a      	ldr	r2, [r3, #4]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ec4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005ec6:	f7fc ff03 	bl	8002cd0 <HAL_GetTick>
 8005eca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ecc:	e01b      	b.n	8005f06 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005ece:	f7fc feff 	bl	8002cd0 <HAL_GetTick>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	2b19      	cmp	r3, #25
 8005eda:	d914      	bls.n	8005f06 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ee0:	f043 0220 	orr.w	r2, r3, #32
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2220      	movs	r2, #32
 8005eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	f003 0320 	and.w	r3, r3, #32
 8005f10:	2b20      	cmp	r3, #32
 8005f12:	d1dc      	bne.n	8005ece <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	699b      	ldr	r3, [r3, #24]
 8005f1a:	f003 0320 	and.w	r3, r3, #32
 8005f1e:	2b20      	cmp	r3, #32
 8005f20:	d003      	beq.n	8005f2a <I2C_IsErrorOccurred+0xfa>
 8005f22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d09d      	beq.n	8005e66 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005f2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d103      	bne.n	8005f3a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2220      	movs	r2, #32
 8005f38:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005f3a:	6a3b      	ldr	r3, [r7, #32]
 8005f3c:	f043 0304 	orr.w	r3, r3, #4
 8005f40:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00b      	beq.n	8005f72 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005f5a:	6a3b      	ldr	r3, [r7, #32]
 8005f5c:	f043 0301 	orr.w	r3, r3, #1
 8005f60:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f6a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d00b      	beq.n	8005f94 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005f7c:	6a3b      	ldr	r3, [r7, #32]
 8005f7e:	f043 0308 	orr.w	r3, r3, #8
 8005f82:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005f8c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d00b      	beq.n	8005fb6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005f9e:	6a3b      	ldr	r3, [r7, #32]
 8005fa0:	f043 0302 	orr.w	r3, r3, #2
 8005fa4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005fb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d01c      	beq.n	8005ff8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f7ff fe56 	bl	8005c70 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	6859      	ldr	r1, [r3, #4]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	4b0d      	ldr	r3, [pc, #52]	; (8006004 <I2C_IsErrorOccurred+0x1d4>)
 8005fd0:	400b      	ands	r3, r1
 8005fd2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fd8:	6a3b      	ldr	r3, [r7, #32]
 8005fda:	431a      	orrs	r2, r3
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2220      	movs	r2, #32
 8005fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005ff8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3728      	adds	r7, #40	; 0x28
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	fe00e800 	.word	0xfe00e800

08006008 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006008:	b480      	push	{r7}
 800600a:	b087      	sub	sp, #28
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	607b      	str	r3, [r7, #4]
 8006012:	460b      	mov	r3, r1
 8006014:	817b      	strh	r3, [r7, #10]
 8006016:	4613      	mov	r3, r2
 8006018:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800601a:	897b      	ldrh	r3, [r7, #10]
 800601c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006020:	7a7b      	ldrb	r3, [r7, #9]
 8006022:	041b      	lsls	r3, r3, #16
 8006024:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006028:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800602e:	6a3b      	ldr	r3, [r7, #32]
 8006030:	4313      	orrs	r3, r2
 8006032:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006036:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	685a      	ldr	r2, [r3, #4]
 800603e:	6a3b      	ldr	r3, [r7, #32]
 8006040:	0d5b      	lsrs	r3, r3, #21
 8006042:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006046:	4b08      	ldr	r3, [pc, #32]	; (8006068 <I2C_TransferConfig+0x60>)
 8006048:	430b      	orrs	r3, r1
 800604a:	43db      	mvns	r3, r3
 800604c:	ea02 0103 	and.w	r1, r2, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	697a      	ldr	r2, [r7, #20]
 8006056:	430a      	orrs	r2, r1
 8006058:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800605a:	bf00      	nop
 800605c:	371c      	adds	r7, #28
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	03ff63ff 	.word	0x03ff63ff

0800606c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800607c:	b2db      	uxtb	r3, r3
 800607e:	2b20      	cmp	r3, #32
 8006080:	d138      	bne.n	80060f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006088:	2b01      	cmp	r3, #1
 800608a:	d101      	bne.n	8006090 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800608c:	2302      	movs	r3, #2
 800608e:	e032      	b.n	80060f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2224      	movs	r2, #36	; 0x24
 800609c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f022 0201 	bic.w	r2, r2, #1
 80060ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80060be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6819      	ldr	r1, [r3, #0]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	683a      	ldr	r2, [r7, #0]
 80060cc:	430a      	orrs	r2, r1
 80060ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f042 0201 	orr.w	r2, r2, #1
 80060de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2220      	movs	r2, #32
 80060e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80060f0:	2300      	movs	r3, #0
 80060f2:	e000      	b.n	80060f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80060f4:	2302      	movs	r3, #2
  }
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006102:	b480      	push	{r7}
 8006104:	b085      	sub	sp, #20
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
 800610a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006112:	b2db      	uxtb	r3, r3
 8006114:	2b20      	cmp	r3, #32
 8006116:	d139      	bne.n	800618c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800611e:	2b01      	cmp	r3, #1
 8006120:	d101      	bne.n	8006126 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006122:	2302      	movs	r3, #2
 8006124:	e033      	b.n	800618e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2201      	movs	r2, #1
 800612a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2224      	movs	r2, #36	; 0x24
 8006132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f022 0201 	bic.w	r2, r2, #1
 8006144:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006154:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	021b      	lsls	r3, r3, #8
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	4313      	orrs	r3, r2
 800615e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f042 0201 	orr.w	r2, r2, #1
 8006176:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2220      	movs	r2, #32
 800617c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006188:	2300      	movs	r3, #0
 800618a:	e000      	b.n	800618e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800618c:	2302      	movs	r3, #2
  }
}
 800618e:	4618      	mov	r0, r3
 8006190:	3714      	adds	r7, #20
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr
	...

0800619c <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp: OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061a4:	2300      	movs	r3, #0
 80061a6:	73fb      	strb	r3, [r7, #15]
  uint32_t updateotrlpotr;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d101      	bne.n	80061b2 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e0ca      	b.n	8006348 <HAL_OPAMP_Init+0x1ac>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	2b05      	cmp	r3, #5
 80061bc:	d101      	bne.n	80061c2 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e0c2      	b.n	8006348 <HAL_OPAMP_Init+0x1ac>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d101      	bne.n	80061d2 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e0ba      	b.n	8006348 <HAL_OPAMP_Init+0x1ac>
    {
      assert_param(IS_OPAMP_PGA_GAIN(hopamp->Init.PgaGain));
    }

    assert_param(IS_OPAMP_TRIMMING(hopamp->Init.UserTrimming));
    if ((hopamp->Init.UserTrimming) == OPAMP_TRIMMING_USER)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	69db      	ldr	r3, [r3, #28]
 80061d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061da:	d109      	bne.n	80061f0 <HAL_OPAMP_Init+0x54>
    {
      if ((hopamp->Init.PowerMode == OPAMP_POWERMODE_NORMALPOWER_NORMALSPEED) || \
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d004      	beq.n	80061ee <HAL_OPAMP_Init+0x52>
          (hopamp->Init.PowerMode == OPAMP_POWERMODE_NORMALPOWER_HIGHSPEED))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	689b      	ldr	r3, [r3, #8]
      if ((hopamp->Init.PowerMode == OPAMP_POWERMODE_NORMALPOWER_NORMALSPEED) || \
 80061e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061ec:	e000      	b.n	80061f0 <HAL_OPAMP_Init+0x54>
      {
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
 80061ee:	bf00      	nop
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValuePLowPower));
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueNLowPower));
      }
    }

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d103      	bne.n	8006204 <HAL_OPAMP_Init+0x68>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f7fc fa99 	bl	800273c <HAL_OPAMP_MspInit>
#endif /* USE_HAL_OPAMP_REGISTER_CALLBACKS */

    /* Set operating mode */
    CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006218:	601a      	str	r2, [r3, #0]

    if (hopamp->Init.Mode == OPAMP_PGA_MODE)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	2b08      	cmp	r3, #8
 8006220:	d119      	bne.n	8006256 <HAL_OPAMP_Init+0xba>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_PGA, \
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	4b49      	ldr	r3, [pc, #292]	; (8006350 <HAL_OPAMP_Init+0x1b4>)
 800622a:	4013      	ands	r3, r2
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	6891      	ldr	r1, [r2, #8]
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	68d2      	ldr	r2, [r2, #12]
 8006234:	4311      	orrs	r1, r2
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	6992      	ldr	r2, [r2, #24]
 800623a:	4311      	orrs	r1, r2
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	6912      	ldr	r2, [r2, #16]
 8006240:	4311      	orrs	r1, r2
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	6952      	ldr	r2, [r2, #20]
 8006246:	4311      	orrs	r1, r2
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	69d2      	ldr	r2, [r2, #28]
 800624c:	4311      	orrs	r1, r2
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	6812      	ldr	r2, [r2, #0]
 8006252:	430b      	orrs	r3, r1
 8006254:	6013      	str	r3, [r2, #0]
                 hopamp->Init.InvertingInput    | \
                 hopamp->Init.NonInvertingInput | \
                 hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	2b0c      	cmp	r3, #12
 800625c:	d113      	bne.n	8006286 <HAL_OPAMP_Init+0xea>
    {
      /* In Follower mode InvertingInput is Not Applicable  */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_FOLLOWER, \
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	4b3b      	ldr	r3, [pc, #236]	; (8006354 <HAL_OPAMP_Init+0x1b8>)
 8006266:	4013      	ands	r3, r2
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	6891      	ldr	r1, [r2, #8]
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	68d2      	ldr	r2, [r2, #12]
 8006270:	4311      	orrs	r1, r2
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	6952      	ldr	r2, [r2, #20]
 8006276:	4311      	orrs	r1, r2
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	69d2      	ldr	r2, [r2, #28]
 800627c:	4311      	orrs	r1, r2
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	6812      	ldr	r2, [r2, #0]
 8006282:	430b      	orrs	r3, r1
 8006284:	6013      	str	r3, [r2, #0]
                 hopamp->Init.Mode | \
                 hopamp->Init.NonInvertingInput | \
                 hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_STANDALONE_MODE)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d116      	bne.n	80062bc <HAL_OPAMP_Init+0x120>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_STANDALONE, \
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	4b30      	ldr	r3, [pc, #192]	; (8006358 <HAL_OPAMP_Init+0x1bc>)
 8006296:	4013      	ands	r3, r2
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	6891      	ldr	r1, [r2, #8]
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	68d2      	ldr	r2, [r2, #12]
 80062a0:	4311      	orrs	r1, r2
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	6912      	ldr	r2, [r2, #16]
 80062a6:	4311      	orrs	r1, r2
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	6952      	ldr	r2, [r2, #20]
 80062ac:	4311      	orrs	r1, r2
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	69d2      	ldr	r2, [r2, #28]
 80062b2:	4311      	orrs	r1, r2
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	6812      	ldr	r2, [r2, #0]
 80062b8:	430b      	orrs	r3, r1
 80062ba:	6013      	str	r3, [r2, #0]
                 hopamp->Init.InvertingInput    | \
                 hopamp->Init.NonInvertingInput | \
                 hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.UserTrimming == OPAMP_TRIMMING_USER)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	69db      	ldr	r3, [r3, #28]
 80062c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062c4:	d12f      	bne.n	8006326 <HAL_OPAMP_Init+0x18a>
    {
      /* Set power mode and associated calibration parameters */
      if ((hopamp->Init.PowerMode != OPAMP_POWERMODE_LOWPOWER_NORMALSPEED) && \
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d018      	beq.n	8006300 <HAL_OPAMP_Init+0x164>
          (hopamp->Init.PowerMode != OPAMP_POWERMODE_LOWPOWER_HIGHSPEED))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	689b      	ldr	r3, [r3, #8]
      if ((hopamp->Init.PowerMode != OPAMP_POWERMODE_LOWPOWER_NORMALSPEED) && \
 80062d2:	4a22      	ldr	r2, [pc, #136]	; (800635c <HAL_OPAMP_Init+0x1c0>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d013      	beq.n	8006300 <HAL_OPAMP_Init+0x164>
      {
        /* OPAMP_POWERMODE_NORMALPOWER_HIGHSPEED or OPAMP_POWERMODE_NORMALPOWER_NORMALSPEED */
        /* Set calibration mode (factory or user) and values for            */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* normal mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a1b      	ldr	r3, [r3, #32]
 80062dc:	021a      	lsls	r2, r3, #8
                          | (hopamp->Init.TrimmingValueN));
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 80062e2:	4313      	orrs	r3, r2
 80062e4:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->OTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80062f0:	f023 031f 	bic.w	r3, r3, #31
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	6812      	ldr	r2, [r2, #0]
 80062f8:	68b9      	ldr	r1, [r7, #8]
 80062fa:	430b      	orrs	r3, r1
 80062fc:	6053      	str	r3, [r2, #4]
 80062fe:	e012      	b.n	8006326 <HAL_OPAMP_Init+0x18a>
      else
      {
        /* OPAMP_POWERMODE_LOWPOWER_HIGHSPEED or OPAMP_POWERMODE_LOWPOWER_NORMALSPEED */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* low power mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006304:	021a      	lsls	r2, r3, #8
                          | (hopamp->Init.TrimmingValueNLowPower));
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 800630a:	4313      	orrs	r3, r2
 800630c:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->LPOTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8006318:	f023 031f 	bic.w	r3, r3, #31
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	6812      	ldr	r2, [r2, #0]
 8006320:	68b9      	ldr	r1, [r7, #8]
 8006322:	430b      	orrs	r3, r1
 8006324:	6093      	str	r3, [r2, #8]
    }

    /* Set the power supply range to high for performance purpose    */
    /* The OPAMP_CSR_OPARANGE is common configuration for all OPAMPs */
    /* bit OPAMP_CSR_OPARANGE applies for both OPAMPs                */
    MODIFY_REG(OPAMP1->CSR, OPAMP_CSR_OPARANGE, OPAMP_CSR_OPARANGE);
 8006326:	4b0e      	ldr	r3, [pc, #56]	; (8006360 <HAL_OPAMP_Init+0x1c4>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a0d      	ldr	r2, [pc, #52]	; (8006360 <HAL_OPAMP_Init+0x1c4>)
 800632c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006330:	6013      	str	r3, [r2, #0]

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006338:	b2db      	uxtb	r3, r3
 800633a:	2b00      	cmp	r3, #0
 800633c:	d103      	bne.n	8006346 <HAL_OPAMP_Init+0x1aa>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2201      	movs	r2, #1
 8006342:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    }
    /* else: remain in READY or BUSY state (no update) */
    return status;
 8006346:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006348:	4618      	mov	r0, r3
 800634a:	3710      	adds	r7, #16
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	bfffb8c1 	.word	0xbfffb8c1
 8006354:	bfffbbf1 	.word	0xbfffbbf1
 8006358:	bfffb8f1 	.word	0xbfffb8f1
 800635c:	40000002 	.word	0x40000002
 8006360:	46005000 	.word	0x46005000

08006364 <HAL_OPAMP_Start>:
  * @param  hopamp: OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800636c:	2300      	movs	r3, #0
 800636e:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d102      	bne.n	800637c <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	73fb      	strb	r3, [r7, #15]
 800637a:	e01d      	b.n	80063b8 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006382:	b2db      	uxtb	r3, r3
 8006384:	2b05      	cmp	r3, #5
 8006386:	d102      	bne.n	800638e <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	73fb      	strb	r3, [r7, #15]
 800638c:	e014      	b.n	80063b8 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006394:	b2db      	uxtb	r3, r3
 8006396:	2b01      	cmp	r3, #1
 8006398:	d10c      	bne.n	80063b4 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAEN);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f042 0201 	orr.w	r2, r2, #1
 80063a8:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2204      	movs	r2, #4
 80063ae:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80063b2:	e001      	b.n	80063b8 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	73fb      	strb	r3, [r7, #15]
    }

  }
  return status;
 80063b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3714      	adds	r7, #20
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
	...

080063c8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80063d0:	4b34      	ldr	r3, [pc, #208]	; (80064a4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80063d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80063d8:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80063da:	68ba      	ldr	r2, [r7, #8]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d101      	bne.n	80063e6 <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 80063e2:	2300      	movs	r3, #0
 80063e4:	e057      	b.n	8006496 <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063ec:	d90a      	bls.n	8006404 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80063ee:	4b2d      	ldr	r3, [pc, #180]	; (80064a4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	4a2a      	ldr	r2, [pc, #168]	; (80064a4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80063fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006400:	60d3      	str	r3, [r2, #12]
 8006402:	e007      	b.n	8006414 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8006404:	4b27      	ldr	r3, [pc, #156]	; (80064a4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800640c:	4925      	ldr	r1, [pc, #148]	; (80064a4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4313      	orrs	r3, r2
 8006412:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8006414:	4b24      	ldr	r3, [pc, #144]	; (80064a8 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a24      	ldr	r2, [pc, #144]	; (80064ac <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800641a:	fba2 2303 	umull	r2, r3, r2, r3
 800641e:	099b      	lsrs	r3, r3, #6
 8006420:	2232      	movs	r2, #50	; 0x32
 8006422:	fb02 f303 	mul.w	r3, r2, r3
 8006426:	4a21      	ldr	r2, [pc, #132]	; (80064ac <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8006428:	fba2 2303 	umull	r2, r3, r2, r3
 800642c:	099b      	lsrs	r3, r3, #6
 800642e:	3301      	adds	r3, #1
 8006430:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8006432:	e002      	b.n	800643a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	3b01      	subs	r3, #1
 8006438:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800643a:	4b1a      	ldr	r3, [pc, #104]	; (80064a4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006442:	2b00      	cmp	r3, #0
 8006444:	d102      	bne.n	800644c <HAL_PWREx_ControlVoltageScaling+0x84>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d1f3      	bne.n	8006434 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d01b      	beq.n	800648a <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8006452:	4b15      	ldr	r3, [pc, #84]	; (80064a8 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a15      	ldr	r2, [pc, #84]	; (80064ac <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8006458:	fba2 2303 	umull	r2, r3, r2, r3
 800645c:	099b      	lsrs	r3, r3, #6
 800645e:	2232      	movs	r2, #50	; 0x32
 8006460:	fb02 f303 	mul.w	r3, r2, r3
 8006464:	4a11      	ldr	r2, [pc, #68]	; (80064ac <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8006466:	fba2 2303 	umull	r2, r3, r2, r3
 800646a:	099b      	lsrs	r3, r3, #6
 800646c:	3301      	adds	r3, #1
 800646e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8006470:	e002      	b.n	8006478 <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	3b01      	subs	r3, #1
 8006476:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8006478:	4b0a      	ldr	r3, [pc, #40]	; (80064a4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800647a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800647c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d102      	bne.n	800648a <HAL_PWREx_ControlVoltageScaling+0xc2>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1f3      	bne.n	8006472 <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d101      	bne.n	8006494 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 8006490:	2303      	movs	r3, #3
 8006492:	e000      	b.n	8006496 <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3714      	adds	r7, #20
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	46020800 	.word	0x46020800
 80064a8:	20000200 	.word	0x20000200
 80064ac:	10624dd3 	.word	0x10624dd3

080064b0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80064b0:	b480      	push	{r7}
 80064b2:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80064b4:	4b04      	ldr	r3, [pc, #16]	; (80064c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80064b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80064bc:	4618      	mov	r0, r3
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr
 80064c6:	bf00      	nop
 80064c8:	46020800 	.word	0x46020800

080064cc <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80064cc:	b480      	push	{r7}
 80064ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 80064d0:	4b05      	ldr	r3, [pc, #20]	; (80064e8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	4a04      	ldr	r2, [pc, #16]	; (80064e8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80064d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80064da:	6113      	str	r3, [r2, #16]
}
 80064dc:	bf00      	nop
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr
 80064e6:	bf00      	nop
 80064e8:	46020800 	.word	0x46020800

080064ec <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 80064ec:	b480      	push	{r7}
 80064ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 80064f0:	4b05      	ldr	r3, [pc, #20]	; (8006508 <HAL_PWREx_EnableVddA+0x1c>)
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	4a04      	ldr	r2, [pc, #16]	; (8006508 <HAL_PWREx_EnableVddA+0x1c>)
 80064f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064fa:	6113      	str	r3, [r2, #16]
}
 80064fc:	bf00      	nop
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	46020800 	.word	0x46020800

0800650c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b08e      	sub	sp, #56	; 0x38
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8006514:	2300      	movs	r3, #0
 8006516:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d102      	bne.n	8006526 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	f000 bec3 	b.w	80072ac <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006526:	4b9c      	ldr	r3, [pc, #624]	; (8006798 <HAL_RCC_OscConfig+0x28c>)
 8006528:	69db      	ldr	r3, [r3, #28]
 800652a:	f003 030c 	and.w	r3, r3, #12
 800652e:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006530:	4b99      	ldr	r3, [pc, #612]	; (8006798 <HAL_RCC_OscConfig+0x28c>)
 8006532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006534:	f003 0303 	and.w	r3, r3, #3
 8006538:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0310 	and.w	r3, r3, #16
 8006542:	2b00      	cmp	r3, #0
 8006544:	f000 8172 	beq.w	800682c <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654a:	2b00      	cmp	r3, #0
 800654c:	d007      	beq.n	800655e <HAL_RCC_OscConfig+0x52>
 800654e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006550:	2b0c      	cmp	r3, #12
 8006552:	f040 80e4 	bne.w	800671e <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006558:	2b01      	cmp	r3, #1
 800655a:	f040 80e0 	bne.w	800671e <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800655e:	4b8e      	ldr	r3, [pc, #568]	; (8006798 <HAL_RCC_OscConfig+0x28c>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 0304 	and.w	r3, r3, #4
 8006566:	2b00      	cmp	r3, #0
 8006568:	d006      	beq.n	8006578 <HAL_RCC_OscConfig+0x6c>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	69db      	ldr	r3, [r3, #28]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d102      	bne.n	8006578 <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	f000 be9a 	b.w	80072ac <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800657c:	4b86      	ldr	r3, [pc, #536]	; (8006798 <HAL_RCC_OscConfig+0x28c>)
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006584:	2b00      	cmp	r3, #0
 8006586:	d004      	beq.n	8006592 <HAL_RCC_OscConfig+0x86>
 8006588:	4b83      	ldr	r3, [pc, #524]	; (8006798 <HAL_RCC_OscConfig+0x28c>)
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006590:	e005      	b.n	800659e <HAL_RCC_OscConfig+0x92>
 8006592:	4b81      	ldr	r3, [pc, #516]	; (8006798 <HAL_RCC_OscConfig+0x28c>)
 8006594:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006598:	041b      	lsls	r3, r3, #16
 800659a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800659e:	4293      	cmp	r3, r2
 80065a0:	d255      	bcs.n	800664e <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80065a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d10a      	bne.n	80065be <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ac:	4618      	mov	r0, r3
 80065ae:	f001 f9d3 	bl	8007958 <RCC_SetFlashLatencyFromMSIRange>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d002      	beq.n	80065be <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	f000 be77 	b.w	80072ac <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80065be:	4b76      	ldr	r3, [pc, #472]	; (8006798 <HAL_RCC_OscConfig+0x28c>)
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	4a75      	ldr	r2, [pc, #468]	; (8006798 <HAL_RCC_OscConfig+0x28c>)
 80065c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80065c8:	6093      	str	r3, [r2, #8]
 80065ca:	4b73      	ldr	r3, [pc, #460]	; (8006798 <HAL_RCC_OscConfig+0x28c>)
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d6:	4970      	ldr	r1, [pc, #448]	; (8006798 <HAL_RCC_OscConfig+0x28c>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80065e4:	d309      	bcc.n	80065fa <HAL_RCC_OscConfig+0xee>
 80065e6:	4b6c      	ldr	r3, [pc, #432]	; (8006798 <HAL_RCC_OscConfig+0x28c>)
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	f023 021f 	bic.w	r2, r3, #31
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6a1b      	ldr	r3, [r3, #32]
 80065f2:	4969      	ldr	r1, [pc, #420]	; (8006798 <HAL_RCC_OscConfig+0x28c>)
 80065f4:	4313      	orrs	r3, r2
 80065f6:	60cb      	str	r3, [r1, #12]
 80065f8:	e07e      	b.n	80066f8 <HAL_RCC_OscConfig+0x1ec>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fe:	2b00      	cmp	r3, #0
 8006600:	da0a      	bge.n	8006618 <HAL_RCC_OscConfig+0x10c>
 8006602:	4b65      	ldr	r3, [pc, #404]	; (8006798 <HAL_RCC_OscConfig+0x28c>)
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	015b      	lsls	r3, r3, #5
 8006610:	4961      	ldr	r1, [pc, #388]	; (8006798 <HAL_RCC_OscConfig+0x28c>)
 8006612:	4313      	orrs	r3, r2
 8006614:	60cb      	str	r3, [r1, #12]
 8006616:	e06f      	b.n	80066f8 <HAL_RCC_OscConfig+0x1ec>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006620:	d30a      	bcc.n	8006638 <HAL_RCC_OscConfig+0x12c>
 8006622:	4b5d      	ldr	r3, [pc, #372]	; (8006798 <HAL_RCC_OscConfig+0x28c>)
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a1b      	ldr	r3, [r3, #32]
 800662e:	029b      	lsls	r3, r3, #10
 8006630:	4959      	ldr	r1, [pc, #356]	; (8006798 <HAL_RCC_OscConfig+0x28c>)
 8006632:	4313      	orrs	r3, r2
 8006634:	60cb      	str	r3, [r1, #12]
 8006636:	e05f      	b.n	80066f8 <HAL_RCC_OscConfig+0x1ec>
 8006638:	4b57      	ldr	r3, [pc, #348]	; (8006798 <HAL_RCC_OscConfig+0x28c>)
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a1b      	ldr	r3, [r3, #32]
 8006644:	03db      	lsls	r3, r3, #15
 8006646:	4954      	ldr	r1, [pc, #336]	; (8006798 <HAL_RCC_OscConfig+0x28c>)
 8006648:	4313      	orrs	r3, r2
 800664a:	60cb      	str	r3, [r1, #12]
 800664c:	e054      	b.n	80066f8 <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800664e:	4b52      	ldr	r3, [pc, #328]	; (8006798 <HAL_RCC_OscConfig+0x28c>)
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	4a51      	ldr	r2, [pc, #324]	; (8006798 <HAL_RCC_OscConfig+0x28c>)
 8006654:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006658:	6093      	str	r3, [r2, #8]
 800665a:	4b4f      	ldr	r3, [pc, #316]	; (8006798 <HAL_RCC_OscConfig+0x28c>)
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006666:	494c      	ldr	r1, [pc, #304]	; (8006798 <HAL_RCC_OscConfig+0x28c>)
 8006668:	4313      	orrs	r3, r2
 800666a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006670:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8006674:	d309      	bcc.n	800668a <HAL_RCC_OscConfig+0x17e>
 8006676:	4b48      	ldr	r3, [pc, #288]	; (8006798 <HAL_RCC_OscConfig+0x28c>)
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	f023 021f 	bic.w	r2, r3, #31
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	4945      	ldr	r1, [pc, #276]	; (8006798 <HAL_RCC_OscConfig+0x28c>)
 8006684:	4313      	orrs	r3, r2
 8006686:	60cb      	str	r3, [r1, #12]
 8006688:	e028      	b.n	80066dc <HAL_RCC_OscConfig+0x1d0>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668e:	2b00      	cmp	r3, #0
 8006690:	da0a      	bge.n	80066a8 <HAL_RCC_OscConfig+0x19c>
 8006692:	4b41      	ldr	r3, [pc, #260]	; (8006798 <HAL_RCC_OscConfig+0x28c>)
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	015b      	lsls	r3, r3, #5
 80066a0:	493d      	ldr	r1, [pc, #244]	; (8006798 <HAL_RCC_OscConfig+0x28c>)
 80066a2:	4313      	orrs	r3, r2
 80066a4:	60cb      	str	r3, [r1, #12]
 80066a6:	e019      	b.n	80066dc <HAL_RCC_OscConfig+0x1d0>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066b0:	d30a      	bcc.n	80066c8 <HAL_RCC_OscConfig+0x1bc>
 80066b2:	4b39      	ldr	r3, [pc, #228]	; (8006798 <HAL_RCC_OscConfig+0x28c>)
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a1b      	ldr	r3, [r3, #32]
 80066be:	029b      	lsls	r3, r3, #10
 80066c0:	4935      	ldr	r1, [pc, #212]	; (8006798 <HAL_RCC_OscConfig+0x28c>)
 80066c2:	4313      	orrs	r3, r2
 80066c4:	60cb      	str	r3, [r1, #12]
 80066c6:	e009      	b.n	80066dc <HAL_RCC_OscConfig+0x1d0>
 80066c8:	4b33      	ldr	r3, [pc, #204]	; (8006798 <HAL_RCC_OscConfig+0x28c>)
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a1b      	ldr	r3, [r3, #32]
 80066d4:	03db      	lsls	r3, r3, #15
 80066d6:	4930      	ldr	r1, [pc, #192]	; (8006798 <HAL_RCC_OscConfig+0x28c>)
 80066d8:	4313      	orrs	r3, r2
 80066da:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80066dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d10a      	bne.n	80066f8 <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e6:	4618      	mov	r0, r3
 80066e8:	f001 f936 	bl	8007958 <RCC_SetFlashLatencyFromMSIRange>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d002      	beq.n	80066f8 <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	f000 bdda 	b.w	80072ac <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80066f8:	f001 f8d8 	bl	80078ac <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80066fc:	4b27      	ldr	r3, [pc, #156]	; (800679c <HAL_RCC_OscConfig+0x290>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4618      	mov	r0, r3
 8006702:	f7fc fa9b 	bl	8002c3c <HAL_InitTick>
 8006706:	4603      	mov	r3, r0
 8006708:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 800670c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006710:	2b00      	cmp	r3, #0
 8006712:	f000 808a 	beq.w	800682a <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 8006716:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800671a:	f000 bdc7 	b.w	80072ac <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	69db      	ldr	r3, [r3, #28]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d066      	beq.n	80067f4 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8006726:	4b1c      	ldr	r3, [pc, #112]	; (8006798 <HAL_RCC_OscConfig+0x28c>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a1b      	ldr	r2, [pc, #108]	; (8006798 <HAL_RCC_OscConfig+0x28c>)
 800672c:	f043 0301 	orr.w	r3, r3, #1
 8006730:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006732:	f7fc facd 	bl	8002cd0 <HAL_GetTick>
 8006736:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006738:	e009      	b.n	800674e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800673a:	f7fc fac9 	bl	8002cd0 <HAL_GetTick>
 800673e:	4602      	mov	r2, r0
 8006740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006742:	1ad3      	subs	r3, r2, r3
 8006744:	2b02      	cmp	r3, #2
 8006746:	d902      	bls.n	800674e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8006748:	2303      	movs	r3, #3
 800674a:	f000 bdaf 	b.w	80072ac <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800674e:	4b12      	ldr	r3, [pc, #72]	; (8006798 <HAL_RCC_OscConfig+0x28c>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 0304 	and.w	r3, r3, #4
 8006756:	2b00      	cmp	r3, #0
 8006758:	d0ef      	beq.n	800673a <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800675a:	4b0f      	ldr	r3, [pc, #60]	; (8006798 <HAL_RCC_OscConfig+0x28c>)
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	4a0e      	ldr	r2, [pc, #56]	; (8006798 <HAL_RCC_OscConfig+0x28c>)
 8006760:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006764:	6093      	str	r3, [r2, #8]
 8006766:	4b0c      	ldr	r3, [pc, #48]	; (8006798 <HAL_RCC_OscConfig+0x28c>)
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006772:	4909      	ldr	r1, [pc, #36]	; (8006798 <HAL_RCC_OscConfig+0x28c>)
 8006774:	4313      	orrs	r3, r2
 8006776:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8006780:	d30e      	bcc.n	80067a0 <HAL_RCC_OscConfig+0x294>
 8006782:	4b05      	ldr	r3, [pc, #20]	; (8006798 <HAL_RCC_OscConfig+0x28c>)
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	f023 021f 	bic.w	r2, r3, #31
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a1b      	ldr	r3, [r3, #32]
 800678e:	4902      	ldr	r1, [pc, #8]	; (8006798 <HAL_RCC_OscConfig+0x28c>)
 8006790:	4313      	orrs	r3, r2
 8006792:	60cb      	str	r3, [r1, #12]
 8006794:	e04a      	b.n	800682c <HAL_RCC_OscConfig+0x320>
 8006796:	bf00      	nop
 8006798:	46020c00 	.word	0x46020c00
 800679c:	20000204 	.word	0x20000204
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	da0a      	bge.n	80067be <HAL_RCC_OscConfig+0x2b2>
 80067a8:	4b9b      	ldr	r3, [pc, #620]	; (8006a18 <HAL_RCC_OscConfig+0x50c>)
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a1b      	ldr	r3, [r3, #32]
 80067b4:	015b      	lsls	r3, r3, #5
 80067b6:	4998      	ldr	r1, [pc, #608]	; (8006a18 <HAL_RCC_OscConfig+0x50c>)
 80067b8:	4313      	orrs	r3, r2
 80067ba:	60cb      	str	r3, [r1, #12]
 80067bc:	e036      	b.n	800682c <HAL_RCC_OscConfig+0x320>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067c6:	d30a      	bcc.n	80067de <HAL_RCC_OscConfig+0x2d2>
 80067c8:	4b93      	ldr	r3, [pc, #588]	; (8006a18 <HAL_RCC_OscConfig+0x50c>)
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a1b      	ldr	r3, [r3, #32]
 80067d4:	029b      	lsls	r3, r3, #10
 80067d6:	4990      	ldr	r1, [pc, #576]	; (8006a18 <HAL_RCC_OscConfig+0x50c>)
 80067d8:	4313      	orrs	r3, r2
 80067da:	60cb      	str	r3, [r1, #12]
 80067dc:	e026      	b.n	800682c <HAL_RCC_OscConfig+0x320>
 80067de:	4b8e      	ldr	r3, [pc, #568]	; (8006a18 <HAL_RCC_OscConfig+0x50c>)
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a1b      	ldr	r3, [r3, #32]
 80067ea:	03db      	lsls	r3, r3, #15
 80067ec:	498a      	ldr	r1, [pc, #552]	; (8006a18 <HAL_RCC_OscConfig+0x50c>)
 80067ee:	4313      	orrs	r3, r2
 80067f0:	60cb      	str	r3, [r1, #12]
 80067f2:	e01b      	b.n	800682c <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80067f4:	4b88      	ldr	r3, [pc, #544]	; (8006a18 <HAL_RCC_OscConfig+0x50c>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a87      	ldr	r2, [pc, #540]	; (8006a18 <HAL_RCC_OscConfig+0x50c>)
 80067fa:	f023 0301 	bic.w	r3, r3, #1
 80067fe:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006800:	f7fc fa66 	bl	8002cd0 <HAL_GetTick>
 8006804:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8006806:	e009      	b.n	800681c <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006808:	f7fc fa62 	bl	8002cd0 <HAL_GetTick>
 800680c:	4602      	mov	r2, r0
 800680e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	2b02      	cmp	r3, #2
 8006814:	d902      	bls.n	800681c <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	f000 bd48 	b.w	80072ac <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800681c:	4b7e      	ldr	r3, [pc, #504]	; (8006a18 <HAL_RCC_OscConfig+0x50c>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0304 	and.w	r3, r3, #4
 8006824:	2b00      	cmp	r3, #0
 8006826:	d1ef      	bne.n	8006808 <HAL_RCC_OscConfig+0x2fc>
 8006828:	e000      	b.n	800682c <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800682a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 0301 	and.w	r3, r3, #1
 8006834:	2b00      	cmp	r3, #0
 8006836:	f000 8094 	beq.w	8006962 <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800683a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683c:	2b08      	cmp	r3, #8
 800683e:	d005      	beq.n	800684c <HAL_RCC_OscConfig+0x340>
 8006840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006842:	2b0c      	cmp	r3, #12
 8006844:	d110      	bne.n	8006868 <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006848:	2b03      	cmp	r3, #3
 800684a:	d10d      	bne.n	8006868 <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800684c:	4b72      	ldr	r3, [pc, #456]	; (8006a18 <HAL_RCC_OscConfig+0x50c>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006854:	2b00      	cmp	r3, #0
 8006856:	f000 8083 	beq.w	8006960 <HAL_RCC_OscConfig+0x454>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d17e      	bne.n	8006960 <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	f000 bd22 	b.w	80072ac <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006870:	d106      	bne.n	8006880 <HAL_RCC_OscConfig+0x374>
 8006872:	4b69      	ldr	r3, [pc, #420]	; (8006a18 <HAL_RCC_OscConfig+0x50c>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a68      	ldr	r2, [pc, #416]	; (8006a18 <HAL_RCC_OscConfig+0x50c>)
 8006878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800687c:	6013      	str	r3, [r2, #0]
 800687e:	e041      	b.n	8006904 <HAL_RCC_OscConfig+0x3f8>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006888:	d112      	bne.n	80068b0 <HAL_RCC_OscConfig+0x3a4>
 800688a:	4b63      	ldr	r3, [pc, #396]	; (8006a18 <HAL_RCC_OscConfig+0x50c>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a62      	ldr	r2, [pc, #392]	; (8006a18 <HAL_RCC_OscConfig+0x50c>)
 8006890:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006894:	6013      	str	r3, [r2, #0]
 8006896:	4b60      	ldr	r3, [pc, #384]	; (8006a18 <HAL_RCC_OscConfig+0x50c>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a5f      	ldr	r2, [pc, #380]	; (8006a18 <HAL_RCC_OscConfig+0x50c>)
 800689c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80068a0:	6013      	str	r3, [r2, #0]
 80068a2:	4b5d      	ldr	r3, [pc, #372]	; (8006a18 <HAL_RCC_OscConfig+0x50c>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a5c      	ldr	r2, [pc, #368]	; (8006a18 <HAL_RCC_OscConfig+0x50c>)
 80068a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068ac:	6013      	str	r3, [r2, #0]
 80068ae:	e029      	b.n	8006904 <HAL_RCC_OscConfig+0x3f8>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80068b8:	d112      	bne.n	80068e0 <HAL_RCC_OscConfig+0x3d4>
 80068ba:	4b57      	ldr	r3, [pc, #348]	; (8006a18 <HAL_RCC_OscConfig+0x50c>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a56      	ldr	r2, [pc, #344]	; (8006a18 <HAL_RCC_OscConfig+0x50c>)
 80068c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80068c4:	6013      	str	r3, [r2, #0]
 80068c6:	4b54      	ldr	r3, [pc, #336]	; (8006a18 <HAL_RCC_OscConfig+0x50c>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a53      	ldr	r2, [pc, #332]	; (8006a18 <HAL_RCC_OscConfig+0x50c>)
 80068cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068d0:	6013      	str	r3, [r2, #0]
 80068d2:	4b51      	ldr	r3, [pc, #324]	; (8006a18 <HAL_RCC_OscConfig+0x50c>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a50      	ldr	r2, [pc, #320]	; (8006a18 <HAL_RCC_OscConfig+0x50c>)
 80068d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068dc:	6013      	str	r3, [r2, #0]
 80068de:	e011      	b.n	8006904 <HAL_RCC_OscConfig+0x3f8>
 80068e0:	4b4d      	ldr	r3, [pc, #308]	; (8006a18 <HAL_RCC_OscConfig+0x50c>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a4c      	ldr	r2, [pc, #304]	; (8006a18 <HAL_RCC_OscConfig+0x50c>)
 80068e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068ea:	6013      	str	r3, [r2, #0]
 80068ec:	4b4a      	ldr	r3, [pc, #296]	; (8006a18 <HAL_RCC_OscConfig+0x50c>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a49      	ldr	r2, [pc, #292]	; (8006a18 <HAL_RCC_OscConfig+0x50c>)
 80068f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068f6:	6013      	str	r3, [r2, #0]
 80068f8:	4b47      	ldr	r3, [pc, #284]	; (8006a18 <HAL_RCC_OscConfig+0x50c>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a46      	ldr	r2, [pc, #280]	; (8006a18 <HAL_RCC_OscConfig+0x50c>)
 80068fe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006902:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d014      	beq.n	8006936 <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 800690c:	f7fc f9e0 	bl	8002cd0 <HAL_GetTick>
 8006910:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006912:	e009      	b.n	8006928 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006914:	f7fc f9dc 	bl	8002cd0 <HAL_GetTick>
 8006918:	4602      	mov	r2, r0
 800691a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	2b64      	cmp	r3, #100	; 0x64
 8006920:	d902      	bls.n	8006928 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006922:	2303      	movs	r3, #3
 8006924:	f000 bcc2 	b.w	80072ac <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006928:	4b3b      	ldr	r3, [pc, #236]	; (8006a18 <HAL_RCC_OscConfig+0x50c>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d0ef      	beq.n	8006914 <HAL_RCC_OscConfig+0x408>
 8006934:	e015      	b.n	8006962 <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8006936:	f7fc f9cb 	bl	8002cd0 <HAL_GetTick>
 800693a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800693c:	e009      	b.n	8006952 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800693e:	f7fc f9c7 	bl	8002cd0 <HAL_GetTick>
 8006942:	4602      	mov	r2, r0
 8006944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	2b64      	cmp	r3, #100	; 0x64
 800694a:	d902      	bls.n	8006952 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800694c:	2303      	movs	r3, #3
 800694e:	f000 bcad 	b.w	80072ac <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006952:	4b31      	ldr	r3, [pc, #196]	; (8006a18 <HAL_RCC_OscConfig+0x50c>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1ef      	bne.n	800693e <HAL_RCC_OscConfig+0x432>
 800695e:	e000      	b.n	8006962 <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006960:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 0302 	and.w	r3, r3, #2
 800696a:	2b00      	cmp	r3, #0
 800696c:	d066      	beq.n	8006a3c <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800696e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006970:	2b04      	cmp	r3, #4
 8006972:	d005      	beq.n	8006980 <HAL_RCC_OscConfig+0x474>
 8006974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006976:	2b0c      	cmp	r3, #12
 8006978:	d11a      	bne.n	80069b0 <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800697a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800697c:	2b02      	cmp	r3, #2
 800697e:	d117      	bne.n	80069b0 <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006980:	4b25      	ldr	r3, [pc, #148]	; (8006a18 <HAL_RCC_OscConfig+0x50c>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006988:	2b00      	cmp	r3, #0
 800698a:	d006      	beq.n	800699a <HAL_RCC_OscConfig+0x48e>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d102      	bne.n	800699a <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	f000 bc89 	b.w	80072ac <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800699a:	4b1f      	ldr	r3, [pc, #124]	; (8006a18 <HAL_RCC_OscConfig+0x50c>)
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	041b      	lsls	r3, r3, #16
 80069a8:	491b      	ldr	r1, [pc, #108]	; (8006a18 <HAL_RCC_OscConfig+0x50c>)
 80069aa:	4313      	orrs	r3, r2
 80069ac:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069ae:	e045      	b.n	8006a3c <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d024      	beq.n	8006a02 <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80069b8:	4b17      	ldr	r3, [pc, #92]	; (8006a18 <HAL_RCC_OscConfig+0x50c>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a16      	ldr	r2, [pc, #88]	; (8006a18 <HAL_RCC_OscConfig+0x50c>)
 80069be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069c2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80069c4:	f7fc f984 	bl	8002cd0 <HAL_GetTick>
 80069c8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80069ca:	e009      	b.n	80069e0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069cc:	f7fc f980 	bl	8002cd0 <HAL_GetTick>
 80069d0:	4602      	mov	r2, r0
 80069d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d902      	bls.n	80069e0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	f000 bc66 	b.w	80072ac <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80069e0:	4b0d      	ldr	r3, [pc, #52]	; (8006a18 <HAL_RCC_OscConfig+0x50c>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d0ef      	beq.n	80069cc <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80069ec:	4b0a      	ldr	r3, [pc, #40]	; (8006a18 <HAL_RCC_OscConfig+0x50c>)
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	691b      	ldr	r3, [r3, #16]
 80069f8:	041b      	lsls	r3, r3, #16
 80069fa:	4907      	ldr	r1, [pc, #28]	; (8006a18 <HAL_RCC_OscConfig+0x50c>)
 80069fc:	4313      	orrs	r3, r2
 80069fe:	610b      	str	r3, [r1, #16]
 8006a00:	e01c      	b.n	8006a3c <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8006a02:	4b05      	ldr	r3, [pc, #20]	; (8006a18 <HAL_RCC_OscConfig+0x50c>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a04      	ldr	r2, [pc, #16]	; (8006a18 <HAL_RCC_OscConfig+0x50c>)
 8006a08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a0c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006a0e:	f7fc f95f 	bl	8002cd0 <HAL_GetTick>
 8006a12:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006a14:	e00c      	b.n	8006a30 <HAL_RCC_OscConfig+0x524>
 8006a16:	bf00      	nop
 8006a18:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a1c:	f7fc f958 	bl	8002cd0 <HAL_GetTick>
 8006a20:	4602      	mov	r2, r0
 8006a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d902      	bls.n	8006a30 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	f000 bc3e 	b.w	80072ac <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006a30:	4baf      	ldr	r3, [pc, #700]	; (8006cf0 <HAL_RCC_OscConfig+0x7e4>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d1ef      	bne.n	8006a1c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0308 	and.w	r3, r3, #8
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f000 80c7 	beq.w	8006bd8 <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a50:	4ba7      	ldr	r3, [pc, #668]	; (8006cf0 <HAL_RCC_OscConfig+0x7e4>)
 8006a52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a56:	f003 0304 	and.w	r3, r3, #4
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d111      	bne.n	8006a82 <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a5e:	4ba4      	ldr	r3, [pc, #656]	; (8006cf0 <HAL_RCC_OscConfig+0x7e4>)
 8006a60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a64:	4aa2      	ldr	r2, [pc, #648]	; (8006cf0 <HAL_RCC_OscConfig+0x7e4>)
 8006a66:	f043 0304 	orr.w	r3, r3, #4
 8006a6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006a6e:	4ba0      	ldr	r3, [pc, #640]	; (8006cf0 <HAL_RCC_OscConfig+0x7e4>)
 8006a70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a74:	f003 0304 	and.w	r3, r3, #4
 8006a78:	617b      	str	r3, [r7, #20]
 8006a7a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006a82:	4b9c      	ldr	r3, [pc, #624]	; (8006cf4 <HAL_RCC_OscConfig+0x7e8>)
 8006a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a86:	f003 0301 	and.w	r3, r3, #1
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d118      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006a8e:	4b99      	ldr	r3, [pc, #612]	; (8006cf4 <HAL_RCC_OscConfig+0x7e8>)
 8006a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a92:	4a98      	ldr	r2, [pc, #608]	; (8006cf4 <HAL_RCC_OscConfig+0x7e8>)
 8006a94:	f043 0301 	orr.w	r3, r3, #1
 8006a98:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a9a:	f7fc f919 	bl	8002cd0 <HAL_GetTick>
 8006a9e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006aa0:	e008      	b.n	8006ab4 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006aa2:	f7fc f915 	bl	8002cd0 <HAL_GetTick>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aaa:	1ad3      	subs	r3, r2, r3
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d901      	bls.n	8006ab4 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e3fb      	b.n	80072ac <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006ab4:	4b8f      	ldr	r3, [pc, #572]	; (8006cf4 <HAL_RCC_OscConfig+0x7e8>)
 8006ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab8:	f003 0301 	and.w	r3, r3, #1
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d0f0      	beq.n	8006aa2 <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	695b      	ldr	r3, [r3, #20]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d05f      	beq.n	8006b88 <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8006ac8:	4b89      	ldr	r3, [pc, #548]	; (8006cf0 <HAL_RCC_OscConfig+0x7e4>)
 8006aca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ace:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	699a      	ldr	r2, [r3, #24]
 8006ad4:	6a3b      	ldr	r3, [r7, #32]
 8006ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d037      	beq.n	8006b4e <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8006ade:	6a3b      	ldr	r3, [r7, #32]
 8006ae0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d006      	beq.n	8006af6 <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8006ae8:	6a3b      	ldr	r3, [r7, #32]
 8006aea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d101      	bne.n	8006af6 <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e3da      	b.n	80072ac <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8006af6:	6a3b      	ldr	r3, [r7, #32]
 8006af8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d01b      	beq.n	8006b38 <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 8006b00:	4b7b      	ldr	r3, [pc, #492]	; (8006cf0 <HAL_RCC_OscConfig+0x7e4>)
 8006b02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b06:	4a7a      	ldr	r2, [pc, #488]	; (8006cf0 <HAL_RCC_OscConfig+0x7e4>)
 8006b08:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8006b0c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8006b10:	f7fc f8de 	bl	8002cd0 <HAL_GetTick>
 8006b14:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006b16:	e008      	b.n	8006b2a <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b18:	f7fc f8da 	bl	8002cd0 <HAL_GetTick>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b20:	1ad3      	subs	r3, r2, r3
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	d901      	bls.n	8006b2a <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e3c0      	b.n	80072ac <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006b2a:	4b71      	ldr	r3, [pc, #452]	; (8006cf0 <HAL_RCC_OscConfig+0x7e4>)
 8006b2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d1ef      	bne.n	8006b18 <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8006b38:	4b6d      	ldr	r3, [pc, #436]	; (8006cf0 <HAL_RCC_OscConfig+0x7e4>)
 8006b3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b3e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	496a      	ldr	r1, [pc, #424]	; (8006cf0 <HAL_RCC_OscConfig+0x7e4>)
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8006b4e:	4b68      	ldr	r3, [pc, #416]	; (8006cf0 <HAL_RCC_OscConfig+0x7e4>)
 8006b50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b54:	4a66      	ldr	r2, [pc, #408]	; (8006cf0 <HAL_RCC_OscConfig+0x7e4>)
 8006b56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006b5a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8006b5e:	f7fc f8b7 	bl	8002cd0 <HAL_GetTick>
 8006b62:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006b64:	e008      	b.n	8006b78 <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b66:	f7fc f8b3 	bl	8002cd0 <HAL_GetTick>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b6e:	1ad3      	subs	r3, r2, r3
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d901      	bls.n	8006b78 <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 8006b74:	2303      	movs	r3, #3
 8006b76:	e399      	b.n	80072ac <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006b78:	4b5d      	ldr	r3, [pc, #372]	; (8006cf0 <HAL_RCC_OscConfig+0x7e4>)
 8006b7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d0ef      	beq.n	8006b66 <HAL_RCC_OscConfig+0x65a>
 8006b86:	e01b      	b.n	8006bc0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8006b88:	4b59      	ldr	r3, [pc, #356]	; (8006cf0 <HAL_RCC_OscConfig+0x7e4>)
 8006b8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b8e:	4a58      	ldr	r2, [pc, #352]	; (8006cf0 <HAL_RCC_OscConfig+0x7e4>)
 8006b90:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8006b94:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8006b98:	f7fc f89a 	bl	8002cd0 <HAL_GetTick>
 8006b9c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006b9e:	e008      	b.n	8006bb2 <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ba0:	f7fc f896 	bl	8002cd0 <HAL_GetTick>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba8:	1ad3      	subs	r3, r2, r3
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d901      	bls.n	8006bb2 <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	e37c      	b.n	80072ac <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006bb2:	4b4f      	ldr	r3, [pc, #316]	; (8006cf0 <HAL_RCC_OscConfig+0x7e4>)
 8006bb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006bb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d1ef      	bne.n	8006ba0 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006bc0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d107      	bne.n	8006bd8 <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bc8:	4b49      	ldr	r3, [pc, #292]	; (8006cf0 <HAL_RCC_OscConfig+0x7e4>)
 8006bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bce:	4a48      	ldr	r2, [pc, #288]	; (8006cf0 <HAL_RCC_OscConfig+0x7e4>)
 8006bd0:	f023 0304 	bic.w	r3, r3, #4
 8006bd4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 0304 	and.w	r3, r3, #4
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	f000 8112 	beq.w	8006e0a <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 8006be6:	2300      	movs	r3, #0
 8006be8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bec:	4b40      	ldr	r3, [pc, #256]	; (8006cf0 <HAL_RCC_OscConfig+0x7e4>)
 8006bee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bf2:	f003 0304 	and.w	r3, r3, #4
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d111      	bne.n	8006c1e <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bfa:	4b3d      	ldr	r3, [pc, #244]	; (8006cf0 <HAL_RCC_OscConfig+0x7e4>)
 8006bfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c00:	4a3b      	ldr	r2, [pc, #236]	; (8006cf0 <HAL_RCC_OscConfig+0x7e4>)
 8006c02:	f043 0304 	orr.w	r3, r3, #4
 8006c06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006c0a:	4b39      	ldr	r3, [pc, #228]	; (8006cf0 <HAL_RCC_OscConfig+0x7e4>)
 8006c0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c10:	f003 0304 	and.w	r3, r3, #4
 8006c14:	613b      	str	r3, [r7, #16]
 8006c16:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006c1e:	4b35      	ldr	r3, [pc, #212]	; (8006cf4 <HAL_RCC_OscConfig+0x7e8>)
 8006c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c22:	f003 0301 	and.w	r3, r3, #1
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d118      	bne.n	8006c5c <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006c2a:	4b32      	ldr	r3, [pc, #200]	; (8006cf4 <HAL_RCC_OscConfig+0x7e8>)
 8006c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c2e:	4a31      	ldr	r2, [pc, #196]	; (8006cf4 <HAL_RCC_OscConfig+0x7e8>)
 8006c30:	f043 0301 	orr.w	r3, r3, #1
 8006c34:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c36:	f7fc f84b 	bl	8002cd0 <HAL_GetTick>
 8006c3a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006c3c:	e008      	b.n	8006c50 <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c3e:	f7fc f847 	bl	8002cd0 <HAL_GetTick>
 8006c42:	4602      	mov	r2, r0
 8006c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c46:	1ad3      	subs	r3, r2, r3
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	d901      	bls.n	8006c50 <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 8006c4c:	2303      	movs	r3, #3
 8006c4e:	e32d      	b.n	80072ac <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006c50:	4b28      	ldr	r3, [pc, #160]	; (8006cf4 <HAL_RCC_OscConfig+0x7e8>)
 8006c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c54:	f003 0301 	and.w	r3, r3, #1
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d0f0      	beq.n	8006c3e <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	f003 0301 	and.w	r3, r3, #1
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d01f      	beq.n	8006ca8 <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	f003 0304 	and.w	r3, r3, #4
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d010      	beq.n	8006c96 <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006c74:	4b1e      	ldr	r3, [pc, #120]	; (8006cf0 <HAL_RCC_OscConfig+0x7e4>)
 8006c76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c7a:	4a1d      	ldr	r2, [pc, #116]	; (8006cf0 <HAL_RCC_OscConfig+0x7e4>)
 8006c7c:	f043 0304 	orr.w	r3, r3, #4
 8006c80:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006c84:	4b1a      	ldr	r3, [pc, #104]	; (8006cf0 <HAL_RCC_OscConfig+0x7e4>)
 8006c86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c8a:	4a19      	ldr	r2, [pc, #100]	; (8006cf0 <HAL_RCC_OscConfig+0x7e4>)
 8006c8c:	f043 0301 	orr.w	r3, r3, #1
 8006c90:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006c94:	e018      	b.n	8006cc8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006c96:	4b16      	ldr	r3, [pc, #88]	; (8006cf0 <HAL_RCC_OscConfig+0x7e4>)
 8006c98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c9c:	4a14      	ldr	r2, [pc, #80]	; (8006cf0 <HAL_RCC_OscConfig+0x7e4>)
 8006c9e:	f043 0301 	orr.w	r3, r3, #1
 8006ca2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006ca6:	e00f      	b.n	8006cc8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006ca8:	4b11      	ldr	r3, [pc, #68]	; (8006cf0 <HAL_RCC_OscConfig+0x7e4>)
 8006caa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006cae:	4a10      	ldr	r2, [pc, #64]	; (8006cf0 <HAL_RCC_OscConfig+0x7e4>)
 8006cb0:	f023 0301 	bic.w	r3, r3, #1
 8006cb4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006cb8:	4b0d      	ldr	r3, [pc, #52]	; (8006cf0 <HAL_RCC_OscConfig+0x7e4>)
 8006cba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006cbe:	4a0c      	ldr	r2, [pc, #48]	; (8006cf0 <HAL_RCC_OscConfig+0x7e4>)
 8006cc0:	f023 0304 	bic.w	r3, r3, #4
 8006cc4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d058      	beq.n	8006d82 <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 8006cd0:	f7fb fffe 	bl	8002cd0 <HAL_GetTick>
 8006cd4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006cd6:	e00f      	b.n	8006cf8 <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cd8:	f7fb fffa 	bl	8002cd0 <HAL_GetTick>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d906      	bls.n	8006cf8 <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 8006cea:	2303      	movs	r3, #3
 8006cec:	e2de      	b.n	80072ac <HAL_RCC_OscConfig+0xda0>
 8006cee:	bf00      	nop
 8006cf0:	46020c00 	.word	0x46020c00
 8006cf4:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006cf8:	4b9c      	ldr	r3, [pc, #624]	; (8006f6c <HAL_RCC_OscConfig+0xa60>)
 8006cfa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006cfe:	f003 0302 	and.w	r3, r3, #2
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d0e8      	beq.n	8006cd8 <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d01b      	beq.n	8006d4a <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006d12:	4b96      	ldr	r3, [pc, #600]	; (8006f6c <HAL_RCC_OscConfig+0xa60>)
 8006d14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d18:	4a94      	ldr	r2, [pc, #592]	; (8006f6c <HAL_RCC_OscConfig+0xa60>)
 8006d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d1e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006d22:	e00a      	b.n	8006d3a <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d24:	f7fb ffd4 	bl	8002cd0 <HAL_GetTick>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d901      	bls.n	8006d3a <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 8006d36:	2303      	movs	r3, #3
 8006d38:	e2b8      	b.n	80072ac <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006d3a:	4b8c      	ldr	r3, [pc, #560]	; (8006f6c <HAL_RCC_OscConfig+0xa60>)
 8006d3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d0ed      	beq.n	8006d24 <HAL_RCC_OscConfig+0x818>
 8006d48:	e053      	b.n	8006df2 <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006d4a:	4b88      	ldr	r3, [pc, #544]	; (8006f6c <HAL_RCC_OscConfig+0xa60>)
 8006d4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d50:	4a86      	ldr	r2, [pc, #536]	; (8006f6c <HAL_RCC_OscConfig+0xa60>)
 8006d52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d56:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006d5a:	e00a      	b.n	8006d72 <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d5c:	f7fb ffb8 	bl	8002cd0 <HAL_GetTick>
 8006d60:	4602      	mov	r2, r0
 8006d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d901      	bls.n	8006d72 <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	e29c      	b.n	80072ac <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006d72:	4b7e      	ldr	r3, [pc, #504]	; (8006f6c <HAL_RCC_OscConfig+0xa60>)
 8006d74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d1ed      	bne.n	8006d5c <HAL_RCC_OscConfig+0x850>
 8006d80:	e037      	b.n	8006df2 <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8006d82:	f7fb ffa5 	bl	8002cd0 <HAL_GetTick>
 8006d86:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d88:	e00a      	b.n	8006da0 <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d8a:	f7fb ffa1 	bl	8002cd0 <HAL_GetTick>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d901      	bls.n	8006da0 <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e285      	b.n	80072ac <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006da0:	4b72      	ldr	r3, [pc, #456]	; (8006f6c <HAL_RCC_OscConfig+0xa60>)
 8006da2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006da6:	f003 0302 	and.w	r3, r3, #2
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d1ed      	bne.n	8006d8a <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8006dae:	4b6f      	ldr	r3, [pc, #444]	; (8006f6c <HAL_RCC_OscConfig+0xa60>)
 8006db0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d01a      	beq.n	8006df2 <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006dbc:	4b6b      	ldr	r3, [pc, #428]	; (8006f6c <HAL_RCC_OscConfig+0xa60>)
 8006dbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006dc2:	4a6a      	ldr	r2, [pc, #424]	; (8006f6c <HAL_RCC_OscConfig+0xa60>)
 8006dc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dc8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006dcc:	e00a      	b.n	8006de4 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dce:	f7fb ff7f 	bl	8002cd0 <HAL_GetTick>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd6:	1ad3      	subs	r3, r2, r3
 8006dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d901      	bls.n	8006de4 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 8006de0:	2303      	movs	r3, #3
 8006de2:	e263      	b.n	80072ac <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006de4:	4b61      	ldr	r3, [pc, #388]	; (8006f6c <HAL_RCC_OscConfig+0xa60>)
 8006de6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006dea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d1ed      	bne.n	8006dce <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006df2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d107      	bne.n	8006e0a <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006dfa:	4b5c      	ldr	r3, [pc, #368]	; (8006f6c <HAL_RCC_OscConfig+0xa60>)
 8006dfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e00:	4a5a      	ldr	r2, [pc, #360]	; (8006f6c <HAL_RCC_OscConfig+0xa60>)
 8006e02:	f023 0304 	bic.w	r3, r3, #4
 8006e06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 0320 	and.w	r3, r3, #32
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d036      	beq.n	8006e84 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d019      	beq.n	8006e52 <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8006e1e:	4b53      	ldr	r3, [pc, #332]	; (8006f6c <HAL_RCC_OscConfig+0xa60>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a52      	ldr	r2, [pc, #328]	; (8006f6c <HAL_RCC_OscConfig+0xa60>)
 8006e24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006e28:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006e2a:	f7fb ff51 	bl	8002cd0 <HAL_GetTick>
 8006e2e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006e30:	e008      	b.n	8006e44 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006e32:	f7fb ff4d 	bl	8002cd0 <HAL_GetTick>
 8006e36:	4602      	mov	r2, r0
 8006e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e3a:	1ad3      	subs	r3, r2, r3
 8006e3c:	2b02      	cmp	r3, #2
 8006e3e:	d901      	bls.n	8006e44 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 8006e40:	2303      	movs	r3, #3
 8006e42:	e233      	b.n	80072ac <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006e44:	4b49      	ldr	r3, [pc, #292]	; (8006f6c <HAL_RCC_OscConfig+0xa60>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d0f0      	beq.n	8006e32 <HAL_RCC_OscConfig+0x926>
 8006e50:	e018      	b.n	8006e84 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8006e52:	4b46      	ldr	r3, [pc, #280]	; (8006f6c <HAL_RCC_OscConfig+0xa60>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a45      	ldr	r2, [pc, #276]	; (8006f6c <HAL_RCC_OscConfig+0xa60>)
 8006e58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e5c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006e5e:	f7fb ff37 	bl	8002cd0 <HAL_GetTick>
 8006e62:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006e64:	e008      	b.n	8006e78 <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006e66:	f7fb ff33 	bl	8002cd0 <HAL_GetTick>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d901      	bls.n	8006e78 <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 8006e74:	2303      	movs	r3, #3
 8006e76:	e219      	b.n	80072ac <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006e78:	4b3c      	ldr	r3, [pc, #240]	; (8006f6c <HAL_RCC_OscConfig+0xa60>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d1f0      	bne.n	8006e66 <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d036      	beq.n	8006efe <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d019      	beq.n	8006ecc <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8006e98:	4b34      	ldr	r3, [pc, #208]	; (8006f6c <HAL_RCC_OscConfig+0xa60>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a33      	ldr	r2, [pc, #204]	; (8006f6c <HAL_RCC_OscConfig+0xa60>)
 8006e9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ea2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006ea4:	f7fb ff14 	bl	8002cd0 <HAL_GetTick>
 8006ea8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8006eaa:	e008      	b.n	8006ebe <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006eac:	f7fb ff10 	bl	8002cd0 <HAL_GetTick>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb4:	1ad3      	subs	r3, r2, r3
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	d901      	bls.n	8006ebe <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	e1f6      	b.n	80072ac <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8006ebe:	4b2b      	ldr	r3, [pc, #172]	; (8006f6c <HAL_RCC_OscConfig+0xa60>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d0f0      	beq.n	8006eac <HAL_RCC_OscConfig+0x9a0>
 8006eca:	e018      	b.n	8006efe <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8006ecc:	4b27      	ldr	r3, [pc, #156]	; (8006f6c <HAL_RCC_OscConfig+0xa60>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a26      	ldr	r2, [pc, #152]	; (8006f6c <HAL_RCC_OscConfig+0xa60>)
 8006ed2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ed6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006ed8:	f7fb fefa 	bl	8002cd0 <HAL_GetTick>
 8006edc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8006ede:	e008      	b.n	8006ef2 <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006ee0:	f7fb fef6 	bl	8002cd0 <HAL_GetTick>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee8:	1ad3      	subs	r3, r2, r3
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d901      	bls.n	8006ef2 <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	e1dc      	b.n	80072ac <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8006ef2:	4b1e      	ldr	r3, [pc, #120]	; (8006f6c <HAL_RCC_OscConfig+0xa60>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d1f0      	bne.n	8006ee0 <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d07f      	beq.n	800700a <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d062      	beq.n	8006fd8 <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8006f12:	4b16      	ldr	r3, [pc, #88]	; (8006f6c <HAL_RCC_OscConfig+0xa60>)
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	4a15      	ldr	r2, [pc, #84]	; (8006f6c <HAL_RCC_OscConfig+0xa60>)
 8006f18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006f1c:	6093      	str	r3, [r2, #8]
 8006f1e:	4b13      	ldr	r3, [pc, #76]	; (8006f6c <HAL_RCC_OscConfig+0xa60>)
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f2a:	4910      	ldr	r1, [pc, #64]	; (8006f6c <HAL_RCC_OscConfig+0xa60>)
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f34:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8006f38:	d309      	bcc.n	8006f4e <HAL_RCC_OscConfig+0xa42>
 8006f3a:	4b0c      	ldr	r3, [pc, #48]	; (8006f6c <HAL_RCC_OscConfig+0xa60>)
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	f023 021f 	bic.w	r2, r3, #31
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a1b      	ldr	r3, [r3, #32]
 8006f46:	4909      	ldr	r1, [pc, #36]	; (8006f6c <HAL_RCC_OscConfig+0xa60>)
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	60cb      	str	r3, [r1, #12]
 8006f4c:	e02a      	b.n	8006fa4 <HAL_RCC_OscConfig+0xa98>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	da0c      	bge.n	8006f70 <HAL_RCC_OscConfig+0xa64>
 8006f56:	4b05      	ldr	r3, [pc, #20]	; (8006f6c <HAL_RCC_OscConfig+0xa60>)
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a1b      	ldr	r3, [r3, #32]
 8006f62:	015b      	lsls	r3, r3, #5
 8006f64:	4901      	ldr	r1, [pc, #4]	; (8006f6c <HAL_RCC_OscConfig+0xa60>)
 8006f66:	4313      	orrs	r3, r2
 8006f68:	60cb      	str	r3, [r1, #12]
 8006f6a:	e01b      	b.n	8006fa4 <HAL_RCC_OscConfig+0xa98>
 8006f6c:	46020c00 	.word	0x46020c00
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f78:	d30a      	bcc.n	8006f90 <HAL_RCC_OscConfig+0xa84>
 8006f7a:	4ba5      	ldr	r3, [pc, #660]	; (8007210 <HAL_RCC_OscConfig+0xd04>)
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a1b      	ldr	r3, [r3, #32]
 8006f86:	029b      	lsls	r3, r3, #10
 8006f88:	49a1      	ldr	r1, [pc, #644]	; (8007210 <HAL_RCC_OscConfig+0xd04>)
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	60cb      	str	r3, [r1, #12]
 8006f8e:	e009      	b.n	8006fa4 <HAL_RCC_OscConfig+0xa98>
 8006f90:	4b9f      	ldr	r3, [pc, #636]	; (8007210 <HAL_RCC_OscConfig+0xd04>)
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6a1b      	ldr	r3, [r3, #32]
 8006f9c:	03db      	lsls	r3, r3, #15
 8006f9e:	499c      	ldr	r1, [pc, #624]	; (8007210 <HAL_RCC_OscConfig+0xd04>)
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8006fa4:	4b9a      	ldr	r3, [pc, #616]	; (8007210 <HAL_RCC_OscConfig+0xd04>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a99      	ldr	r2, [pc, #612]	; (8007210 <HAL_RCC_OscConfig+0xd04>)
 8006faa:	f043 0310 	orr.w	r3, r3, #16
 8006fae:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006fb0:	f7fb fe8e 	bl	8002cd0 <HAL_GetTick>
 8006fb4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8006fb6:	e008      	b.n	8006fca <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8006fb8:	f7fb fe8a 	bl	8002cd0 <HAL_GetTick>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	d901      	bls.n	8006fca <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 8006fc6:	2303      	movs	r3, #3
 8006fc8:	e170      	b.n	80072ac <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8006fca:	4b91      	ldr	r3, [pc, #580]	; (8007210 <HAL_RCC_OscConfig+0xd04>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 0320 	and.w	r3, r3, #32
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d0f0      	beq.n	8006fb8 <HAL_RCC_OscConfig+0xaac>
 8006fd6:	e018      	b.n	800700a <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8006fd8:	4b8d      	ldr	r3, [pc, #564]	; (8007210 <HAL_RCC_OscConfig+0xd04>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a8c      	ldr	r2, [pc, #560]	; (8007210 <HAL_RCC_OscConfig+0xd04>)
 8006fde:	f023 0310 	bic.w	r3, r3, #16
 8006fe2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006fe4:	f7fb fe74 	bl	8002cd0 <HAL_GetTick>
 8006fe8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8006fea:	e008      	b.n	8006ffe <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8006fec:	f7fb fe70 	bl	8002cd0 <HAL_GetTick>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d901      	bls.n	8006ffe <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e156      	b.n	80072ac <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8006ffe:	4b84      	ldr	r3, [pc, #528]	; (8007210 <HAL_RCC_OscConfig+0xd04>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 0320 	and.w	r3, r3, #32
 8007006:	2b00      	cmp	r3, #0
 8007008:	d1f0      	bne.n	8006fec <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800700e:	2b00      	cmp	r3, #0
 8007010:	f000 814b 	beq.w	80072aa <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 8007014:	2300      	movs	r3, #0
 8007016:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800701a:	4b7d      	ldr	r3, [pc, #500]	; (8007210 <HAL_RCC_OscConfig+0xd04>)
 800701c:	69db      	ldr	r3, [r3, #28]
 800701e:	f003 030c 	and.w	r3, r3, #12
 8007022:	2b0c      	cmp	r3, #12
 8007024:	f000 80fa 	beq.w	800721c <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800702c:	2b02      	cmp	r3, #2
 800702e:	f040 80cc 	bne.w	80071ca <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8007032:	4b77      	ldr	r3, [pc, #476]	; (8007210 <HAL_RCC_OscConfig+0xd04>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a76      	ldr	r2, [pc, #472]	; (8007210 <HAL_RCC_OscConfig+0xd04>)
 8007038:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800703c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800703e:	f7fb fe47 	bl	8002cd0 <HAL_GetTick>
 8007042:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007044:	e008      	b.n	8007058 <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007046:	f7fb fe43 	bl	8002cd0 <HAL_GetTick>
 800704a:	4602      	mov	r2, r0
 800704c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704e:	1ad3      	subs	r3, r2, r3
 8007050:	2b02      	cmp	r3, #2
 8007052:	d901      	bls.n	8007058 <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 8007054:	2303      	movs	r3, #3
 8007056:	e129      	b.n	80072ac <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007058:	4b6d      	ldr	r3, [pc, #436]	; (8007210 <HAL_RCC_OscConfig+0xd04>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007060:	2b00      	cmp	r3, #0
 8007062:	d1f0      	bne.n	8007046 <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007064:	4b6a      	ldr	r3, [pc, #424]	; (8007210 <HAL_RCC_OscConfig+0xd04>)
 8007066:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800706a:	f003 0304 	and.w	r3, r3, #4
 800706e:	2b00      	cmp	r3, #0
 8007070:	d111      	bne.n	8007096 <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8007072:	4b67      	ldr	r3, [pc, #412]	; (8007210 <HAL_RCC_OscConfig+0xd04>)
 8007074:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007078:	4a65      	ldr	r2, [pc, #404]	; (8007210 <HAL_RCC_OscConfig+0xd04>)
 800707a:	f043 0304 	orr.w	r3, r3, #4
 800707e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8007082:	4b63      	ldr	r3, [pc, #396]	; (8007210 <HAL_RCC_OscConfig+0xd04>)
 8007084:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007088:	f003 0304 	and.w	r3, r3, #4
 800708c:	60fb      	str	r3, [r7, #12]
 800708e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8007090:	2301      	movs	r3, #1
 8007092:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8007096:	4b5f      	ldr	r3, [pc, #380]	; (8007214 <HAL_RCC_OscConfig+0xd08>)
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800709e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80070a2:	d102      	bne.n	80070aa <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 80070a4:	2301      	movs	r3, #1
 80070a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80070aa:	4b5a      	ldr	r3, [pc, #360]	; (8007214 <HAL_RCC_OscConfig+0xd08>)
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	4a59      	ldr	r2, [pc, #356]	; (8007214 <HAL_RCC_OscConfig+0xd08>)
 80070b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070b4:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80070b6:	4b56      	ldr	r3, [pc, #344]	; (8007210 <HAL_RCC_OscConfig+0xd04>)
 80070b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070be:	f023 0303 	bic.w	r3, r3, #3
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80070ca:	3a01      	subs	r2, #1
 80070cc:	0212      	lsls	r2, r2, #8
 80070ce:	4311      	orrs	r1, r2
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80070d4:	430a      	orrs	r2, r1
 80070d6:	494e      	ldr	r1, [pc, #312]	; (8007210 <HAL_RCC_OscConfig+0xd04>)
 80070d8:	4313      	orrs	r3, r2
 80070da:	628b      	str	r3, [r1, #40]	; 0x28
 80070dc:	4b4c      	ldr	r3, [pc, #304]	; (8007210 <HAL_RCC_OscConfig+0xd04>)
 80070de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070e0:	4b4d      	ldr	r3, [pc, #308]	; (8007218 <HAL_RCC_OscConfig+0xd0c>)
 80070e2:	4013      	ands	r3, r2
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80070e8:	3a01      	subs	r2, #1
 80070ea:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80070f2:	3a01      	subs	r2, #1
 80070f4:	0252      	lsls	r2, r2, #9
 80070f6:	b292      	uxth	r2, r2
 80070f8:	4311      	orrs	r1, r2
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80070fe:	3a01      	subs	r2, #1
 8007100:	0412      	lsls	r2, r2, #16
 8007102:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007106:	4311      	orrs	r1, r2
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800710c:	3a01      	subs	r2, #1
 800710e:	0612      	lsls	r2, r2, #24
 8007110:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007114:	430a      	orrs	r2, r1
 8007116:	493e      	ldr	r1, [pc, #248]	; (8007210 <HAL_RCC_OscConfig+0xd04>)
 8007118:	4313      	orrs	r3, r2
 800711a:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 800711c:	4b3c      	ldr	r3, [pc, #240]	; (8007210 <HAL_RCC_OscConfig+0xd04>)
 800711e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007120:	4a3b      	ldr	r2, [pc, #236]	; (8007210 <HAL_RCC_OscConfig+0xd04>)
 8007122:	f023 0310 	bic.w	r3, r3, #16
 8007126:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8007128:	4b39      	ldr	r3, [pc, #228]	; (8007210 <HAL_RCC_OscConfig+0xd04>)
 800712a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800712c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007130:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007138:	00d2      	lsls	r2, r2, #3
 800713a:	4935      	ldr	r1, [pc, #212]	; (8007210 <HAL_RCC_OscConfig+0xd04>)
 800713c:	4313      	orrs	r3, r2
 800713e:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007140:	4b33      	ldr	r3, [pc, #204]	; (8007210 <HAL_RCC_OscConfig+0xd04>)
 8007142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007144:	4a32      	ldr	r2, [pc, #200]	; (8007210 <HAL_RCC_OscConfig+0xd04>)
 8007146:	f043 0310 	orr.w	r3, r3, #16
 800714a:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800714c:	4b30      	ldr	r3, [pc, #192]	; (8007210 <HAL_RCC_OscConfig+0xd04>)
 800714e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007150:	f023 020c 	bic.w	r2, r3, #12
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007158:	492d      	ldr	r1, [pc, #180]	; (8007210 <HAL_RCC_OscConfig+0xd04>)
 800715a:	4313      	orrs	r3, r2
 800715c:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 800715e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007162:	2b01      	cmp	r3, #1
 8007164:	d105      	bne.n	8007172 <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8007166:	4b2b      	ldr	r3, [pc, #172]	; (8007214 <HAL_RCC_OscConfig+0xd08>)
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	4a2a      	ldr	r2, [pc, #168]	; (8007214 <HAL_RCC_OscConfig+0xd08>)
 800716c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007170:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8007172:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8007176:	2b01      	cmp	r3, #1
 8007178:	d107      	bne.n	800718a <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800717a:	4b25      	ldr	r3, [pc, #148]	; (8007210 <HAL_RCC_OscConfig+0xd04>)
 800717c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007180:	4a23      	ldr	r2, [pc, #140]	; (8007210 <HAL_RCC_OscConfig+0xd04>)
 8007182:	f023 0304 	bic.w	r3, r3, #4
 8007186:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800718a:	4b21      	ldr	r3, [pc, #132]	; (8007210 <HAL_RCC_OscConfig+0xd04>)
 800718c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800718e:	4a20      	ldr	r2, [pc, #128]	; (8007210 <HAL_RCC_OscConfig+0xd04>)
 8007190:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007194:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8007196:	4b1e      	ldr	r3, [pc, #120]	; (8007210 <HAL_RCC_OscConfig+0xd04>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a1d      	ldr	r2, [pc, #116]	; (8007210 <HAL_RCC_OscConfig+0xd04>)
 800719c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80071a0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80071a2:	f7fb fd95 	bl	8002cd0 <HAL_GetTick>
 80071a6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80071a8:	e008      	b.n	80071bc <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071aa:	f7fb fd91 	bl	8002cd0 <HAL_GetTick>
 80071ae:	4602      	mov	r2, r0
 80071b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b2:	1ad3      	subs	r3, r2, r3
 80071b4:	2b02      	cmp	r3, #2
 80071b6:	d901      	bls.n	80071bc <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 80071b8:	2303      	movs	r3, #3
 80071ba:	e077      	b.n	80072ac <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80071bc:	4b14      	ldr	r3, [pc, #80]	; (8007210 <HAL_RCC_OscConfig+0xd04>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d0f0      	beq.n	80071aa <HAL_RCC_OscConfig+0xc9e>
 80071c8:	e06f      	b.n	80072aa <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80071ca:	4b11      	ldr	r3, [pc, #68]	; (8007210 <HAL_RCC_OscConfig+0xd04>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a10      	ldr	r2, [pc, #64]	; (8007210 <HAL_RCC_OscConfig+0xd04>)
 80071d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071d4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80071d6:	f7fb fd7b 	bl	8002cd0 <HAL_GetTick>
 80071da:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80071dc:	e008      	b.n	80071f0 <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071de:	f7fb fd77 	bl	8002cd0 <HAL_GetTick>
 80071e2:	4602      	mov	r2, r0
 80071e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e6:	1ad3      	subs	r3, r2, r3
 80071e8:	2b02      	cmp	r3, #2
 80071ea:	d901      	bls.n	80071f0 <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 80071ec:	2303      	movs	r3, #3
 80071ee:	e05d      	b.n	80072ac <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80071f0:	4b07      	ldr	r3, [pc, #28]	; (8007210 <HAL_RCC_OscConfig+0xd04>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d1f0      	bne.n	80071de <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80071fc:	4b04      	ldr	r3, [pc, #16]	; (8007210 <HAL_RCC_OscConfig+0xd04>)
 80071fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007200:	4a03      	ldr	r2, [pc, #12]	; (8007210 <HAL_RCC_OscConfig+0xd04>)
 8007202:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8007206:	f023 0303 	bic.w	r3, r3, #3
 800720a:	6293      	str	r3, [r2, #40]	; 0x28
 800720c:	e04d      	b.n	80072aa <HAL_RCC_OscConfig+0xd9e>
 800720e:	bf00      	nop
 8007210:	46020c00 	.word	0x46020c00
 8007214:	46020800 	.word	0x46020800
 8007218:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800721c:	4b25      	ldr	r3, [pc, #148]	; (80072b4 <HAL_RCC_OscConfig+0xda8>)
 800721e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007220:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007222:	4b24      	ldr	r3, [pc, #144]	; (80072b4 <HAL_RCC_OscConfig+0xda8>)
 8007224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007226:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800722c:	2b01      	cmp	r3, #1
 800722e:	d03a      	beq.n	80072a6 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8007230:	69fb      	ldr	r3, [r7, #28]
 8007232:	f003 0203 	and.w	r2, r3, #3
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800723a:	429a      	cmp	r2, r3
 800723c:	d133      	bne.n	80072a6 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800723e:	69fb      	ldr	r3, [r7, #28]
 8007240:	0a1b      	lsrs	r3, r3, #8
 8007242:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800724a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800724c:	429a      	cmp	r2, r3
 800724e:	d12a      	bne.n	80072a6 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	0b1b      	lsrs	r3, r3, #12
 8007254:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800725c:	429a      	cmp	r2, r3
 800725e:	d122      	bne.n	80072a6 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800726a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800726c:	429a      	cmp	r2, r3
 800726e:	d11a      	bne.n	80072a6 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	0a5b      	lsrs	r3, r3, #9
 8007274:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800727c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800727e:	429a      	cmp	r2, r3
 8007280:	d111      	bne.n	80072a6 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8007282:	69bb      	ldr	r3, [r7, #24]
 8007284:	0c1b      	lsrs	r3, r3, #16
 8007286:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800728e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007290:	429a      	cmp	r2, r3
 8007292:	d108      	bne.n	80072a6 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	0e1b      	lsrs	r3, r3, #24
 8007298:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072a0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d001      	beq.n	80072aa <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	e000      	b.n	80072ac <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3738      	adds	r7, #56	; 0x38
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	46020c00 	.word	0x46020c00

080072b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b086      	sub	sp, #24
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d101      	bne.n	80072cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	e1d9      	b.n	8007680 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80072cc:	4b9b      	ldr	r3, [pc, #620]	; (800753c <HAL_RCC_ClockConfig+0x284>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f003 030f 	and.w	r3, r3, #15
 80072d4:	683a      	ldr	r2, [r7, #0]
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d910      	bls.n	80072fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072da:	4b98      	ldr	r3, [pc, #608]	; (800753c <HAL_RCC_ClockConfig+0x284>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f023 020f 	bic.w	r2, r3, #15
 80072e2:	4996      	ldr	r1, [pc, #600]	; (800753c <HAL_RCC_ClockConfig+0x284>)
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072ea:	4b94      	ldr	r3, [pc, #592]	; (800753c <HAL_RCC_ClockConfig+0x284>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 030f 	and.w	r3, r3, #15
 80072f2:	683a      	ldr	r2, [r7, #0]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d001      	beq.n	80072fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	e1c1      	b.n	8007680 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 0310 	and.w	r3, r3, #16
 8007304:	2b00      	cmp	r3, #0
 8007306:	d010      	beq.n	800732a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	695a      	ldr	r2, [r3, #20]
 800730c:	4b8c      	ldr	r3, [pc, #560]	; (8007540 <HAL_RCC_ClockConfig+0x288>)
 800730e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007310:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007314:	429a      	cmp	r2, r3
 8007316:	d908      	bls.n	800732a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8007318:	4b89      	ldr	r3, [pc, #548]	; (8007540 <HAL_RCC_ClockConfig+0x288>)
 800731a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	695b      	ldr	r3, [r3, #20]
 8007324:	4986      	ldr	r1, [pc, #536]	; (8007540 <HAL_RCC_ClockConfig+0x288>)
 8007326:	4313      	orrs	r3, r2
 8007328:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 0308 	and.w	r3, r3, #8
 8007332:	2b00      	cmp	r3, #0
 8007334:	d012      	beq.n	800735c <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	691a      	ldr	r2, [r3, #16]
 800733a:	4b81      	ldr	r3, [pc, #516]	; (8007540 <HAL_RCC_ClockConfig+0x288>)
 800733c:	6a1b      	ldr	r3, [r3, #32]
 800733e:	091b      	lsrs	r3, r3, #4
 8007340:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007344:	429a      	cmp	r2, r3
 8007346:	d909      	bls.n	800735c <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8007348:	4b7d      	ldr	r3, [pc, #500]	; (8007540 <HAL_RCC_ClockConfig+0x288>)
 800734a:	6a1b      	ldr	r3, [r3, #32]
 800734c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	011b      	lsls	r3, r3, #4
 8007356:	497a      	ldr	r1, [pc, #488]	; (8007540 <HAL_RCC_ClockConfig+0x288>)
 8007358:	4313      	orrs	r3, r2
 800735a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 0304 	and.w	r3, r3, #4
 8007364:	2b00      	cmp	r3, #0
 8007366:	d010      	beq.n	800738a <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	68da      	ldr	r2, [r3, #12]
 800736c:	4b74      	ldr	r3, [pc, #464]	; (8007540 <HAL_RCC_ClockConfig+0x288>)
 800736e:	6a1b      	ldr	r3, [r3, #32]
 8007370:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007374:	429a      	cmp	r2, r3
 8007376:	d908      	bls.n	800738a <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8007378:	4b71      	ldr	r3, [pc, #452]	; (8007540 <HAL_RCC_ClockConfig+0x288>)
 800737a:	6a1b      	ldr	r3, [r3, #32]
 800737c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	496e      	ldr	r1, [pc, #440]	; (8007540 <HAL_RCC_ClockConfig+0x288>)
 8007386:	4313      	orrs	r3, r2
 8007388:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 0302 	and.w	r3, r3, #2
 8007392:	2b00      	cmp	r3, #0
 8007394:	d010      	beq.n	80073b8 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	689a      	ldr	r2, [r3, #8]
 800739a:	4b69      	ldr	r3, [pc, #420]	; (8007540 <HAL_RCC_ClockConfig+0x288>)
 800739c:	6a1b      	ldr	r3, [r3, #32]
 800739e:	f003 030f 	and.w	r3, r3, #15
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d908      	bls.n	80073b8 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80073a6:	4b66      	ldr	r3, [pc, #408]	; (8007540 <HAL_RCC_ClockConfig+0x288>)
 80073a8:	6a1b      	ldr	r3, [r3, #32]
 80073aa:	f023 020f 	bic.w	r2, r3, #15
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	4963      	ldr	r1, [pc, #396]	; (8007540 <HAL_RCC_ClockConfig+0x288>)
 80073b4:	4313      	orrs	r3, r2
 80073b6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f003 0301 	and.w	r3, r3, #1
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	f000 80d2 	beq.w	800756a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80073c6:	2300      	movs	r3, #0
 80073c8:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	2b03      	cmp	r3, #3
 80073d0:	d143      	bne.n	800745a <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80073d2:	4b5b      	ldr	r3, [pc, #364]	; (8007540 <HAL_RCC_ClockConfig+0x288>)
 80073d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073d8:	f003 0304 	and.w	r3, r3, #4
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d110      	bne.n	8007402 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80073e0:	4b57      	ldr	r3, [pc, #348]	; (8007540 <HAL_RCC_ClockConfig+0x288>)
 80073e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073e6:	4a56      	ldr	r2, [pc, #344]	; (8007540 <HAL_RCC_ClockConfig+0x288>)
 80073e8:	f043 0304 	orr.w	r3, r3, #4
 80073ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80073f0:	4b53      	ldr	r3, [pc, #332]	; (8007540 <HAL_RCC_ClockConfig+0x288>)
 80073f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073f6:	f003 0304 	and.w	r3, r3, #4
 80073fa:	60bb      	str	r3, [r7, #8]
 80073fc:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80073fe:	2301      	movs	r3, #1
 8007400:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8007402:	f7fb fc65 	bl	8002cd0 <HAL_GetTick>
 8007406:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8007408:	4b4e      	ldr	r3, [pc, #312]	; (8007544 <HAL_RCC_ClockConfig+0x28c>)
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007410:	2b00      	cmp	r3, #0
 8007412:	d00f      	beq.n	8007434 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8007414:	e008      	b.n	8007428 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8007416:	f7fb fc5b 	bl	8002cd0 <HAL_GetTick>
 800741a:	4602      	mov	r2, r0
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	1ad3      	subs	r3, r2, r3
 8007420:	2b02      	cmp	r3, #2
 8007422:	d901      	bls.n	8007428 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8007424:	2303      	movs	r3, #3
 8007426:	e12b      	b.n	8007680 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8007428:	4b46      	ldr	r3, [pc, #280]	; (8007544 <HAL_RCC_ClockConfig+0x28c>)
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007430:	2b00      	cmp	r3, #0
 8007432:	d0f0      	beq.n	8007416 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8007434:	7dfb      	ldrb	r3, [r7, #23]
 8007436:	2b01      	cmp	r3, #1
 8007438:	d107      	bne.n	800744a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800743a:	4b41      	ldr	r3, [pc, #260]	; (8007540 <HAL_RCC_ClockConfig+0x288>)
 800743c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007440:	4a3f      	ldr	r2, [pc, #252]	; (8007540 <HAL_RCC_ClockConfig+0x288>)
 8007442:	f023 0304 	bic.w	r3, r3, #4
 8007446:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800744a:	4b3d      	ldr	r3, [pc, #244]	; (8007540 <HAL_RCC_ClockConfig+0x288>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007452:	2b00      	cmp	r3, #0
 8007454:	d121      	bne.n	800749a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e112      	b.n	8007680 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	2b02      	cmp	r3, #2
 8007460:	d107      	bne.n	8007472 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007462:	4b37      	ldr	r3, [pc, #220]	; (8007540 <HAL_RCC_ClockConfig+0x288>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800746a:	2b00      	cmp	r3, #0
 800746c:	d115      	bne.n	800749a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e106      	b.n	8007680 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d107      	bne.n	800748a <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800747a:	4b31      	ldr	r3, [pc, #196]	; (8007540 <HAL_RCC_ClockConfig+0x288>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 0304 	and.w	r3, r3, #4
 8007482:	2b00      	cmp	r3, #0
 8007484:	d109      	bne.n	800749a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	e0fa      	b.n	8007680 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800748a:	4b2d      	ldr	r3, [pc, #180]	; (8007540 <HAL_RCC_ClockConfig+0x288>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007492:	2b00      	cmp	r3, #0
 8007494:	d101      	bne.n	800749a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	e0f2      	b.n	8007680 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800749a:	4b29      	ldr	r3, [pc, #164]	; (8007540 <HAL_RCC_ClockConfig+0x288>)
 800749c:	69db      	ldr	r3, [r3, #28]
 800749e:	f023 0203 	bic.w	r2, r3, #3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	4926      	ldr	r1, [pc, #152]	; (8007540 <HAL_RCC_ClockConfig+0x288>)
 80074a8:	4313      	orrs	r3, r2
 80074aa:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80074ac:	f7fb fc10 	bl	8002cd0 <HAL_GetTick>
 80074b0:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	2b03      	cmp	r3, #3
 80074b8:	d112      	bne.n	80074e0 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80074ba:	e00a      	b.n	80074d2 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074bc:	f7fb fc08 	bl	8002cd0 <HAL_GetTick>
 80074c0:	4602      	mov	r2, r0
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	1ad3      	subs	r3, r2, r3
 80074c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d901      	bls.n	80074d2 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80074ce:	2303      	movs	r3, #3
 80074d0:	e0d6      	b.n	8007680 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80074d2:	4b1b      	ldr	r3, [pc, #108]	; (8007540 <HAL_RCC_ClockConfig+0x288>)
 80074d4:	69db      	ldr	r3, [r3, #28]
 80074d6:	f003 030c 	and.w	r3, r3, #12
 80074da:	2b0c      	cmp	r3, #12
 80074dc:	d1ee      	bne.n	80074bc <HAL_RCC_ClockConfig+0x204>
 80074de:	e044      	b.n	800756a <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	2b02      	cmp	r3, #2
 80074e6:	d112      	bne.n	800750e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80074e8:	e00a      	b.n	8007500 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074ea:	f7fb fbf1 	bl	8002cd0 <HAL_GetTick>
 80074ee:	4602      	mov	r2, r0
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	1ad3      	subs	r3, r2, r3
 80074f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d901      	bls.n	8007500 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80074fc:	2303      	movs	r3, #3
 80074fe:	e0bf      	b.n	8007680 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007500:	4b0f      	ldr	r3, [pc, #60]	; (8007540 <HAL_RCC_ClockConfig+0x288>)
 8007502:	69db      	ldr	r3, [r3, #28]
 8007504:	f003 030c 	and.w	r3, r3, #12
 8007508:	2b08      	cmp	r3, #8
 800750a:	d1ee      	bne.n	80074ea <HAL_RCC_ClockConfig+0x232>
 800750c:	e02d      	b.n	800756a <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d123      	bne.n	800755e <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8007516:	e00a      	b.n	800752e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007518:	f7fb fbda 	bl	8002cd0 <HAL_GetTick>
 800751c:	4602      	mov	r2, r0
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	f241 3288 	movw	r2, #5000	; 0x1388
 8007526:	4293      	cmp	r3, r2
 8007528:	d901      	bls.n	800752e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800752a:	2303      	movs	r3, #3
 800752c:	e0a8      	b.n	8007680 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800752e:	4b04      	ldr	r3, [pc, #16]	; (8007540 <HAL_RCC_ClockConfig+0x288>)
 8007530:	69db      	ldr	r3, [r3, #28]
 8007532:	f003 030c 	and.w	r3, r3, #12
 8007536:	2b00      	cmp	r3, #0
 8007538:	d1ee      	bne.n	8007518 <HAL_RCC_ClockConfig+0x260>
 800753a:	e016      	b.n	800756a <HAL_RCC_ClockConfig+0x2b2>
 800753c:	40022000 	.word	0x40022000
 8007540:	46020c00 	.word	0x46020c00
 8007544:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007548:	f7fb fbc2 	bl	8002cd0 <HAL_GetTick>
 800754c:	4602      	mov	r2, r0
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	1ad3      	subs	r3, r2, r3
 8007552:	f241 3288 	movw	r2, #5000	; 0x1388
 8007556:	4293      	cmp	r3, r2
 8007558:	d901      	bls.n	800755e <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800755a:	2303      	movs	r3, #3
 800755c:	e090      	b.n	8007680 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800755e:	4b4a      	ldr	r3, [pc, #296]	; (8007688 <HAL_RCC_ClockConfig+0x3d0>)
 8007560:	69db      	ldr	r3, [r3, #28]
 8007562:	f003 030c 	and.w	r3, r3, #12
 8007566:	2b04      	cmp	r3, #4
 8007568:	d1ee      	bne.n	8007548 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f003 0302 	and.w	r3, r3, #2
 8007572:	2b00      	cmp	r3, #0
 8007574:	d010      	beq.n	8007598 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	689a      	ldr	r2, [r3, #8]
 800757a:	4b43      	ldr	r3, [pc, #268]	; (8007688 <HAL_RCC_ClockConfig+0x3d0>)
 800757c:	6a1b      	ldr	r3, [r3, #32]
 800757e:	f003 030f 	and.w	r3, r3, #15
 8007582:	429a      	cmp	r2, r3
 8007584:	d208      	bcs.n	8007598 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8007586:	4b40      	ldr	r3, [pc, #256]	; (8007688 <HAL_RCC_ClockConfig+0x3d0>)
 8007588:	6a1b      	ldr	r3, [r3, #32]
 800758a:	f023 020f 	bic.w	r2, r3, #15
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	493d      	ldr	r1, [pc, #244]	; (8007688 <HAL_RCC_ClockConfig+0x3d0>)
 8007594:	4313      	orrs	r3, r2
 8007596:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007598:	4b3c      	ldr	r3, [pc, #240]	; (800768c <HAL_RCC_ClockConfig+0x3d4>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 030f 	and.w	r3, r3, #15
 80075a0:	683a      	ldr	r2, [r7, #0]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d210      	bcs.n	80075c8 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075a6:	4b39      	ldr	r3, [pc, #228]	; (800768c <HAL_RCC_ClockConfig+0x3d4>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f023 020f 	bic.w	r2, r3, #15
 80075ae:	4937      	ldr	r1, [pc, #220]	; (800768c <HAL_RCC_ClockConfig+0x3d4>)
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075b6:	4b35      	ldr	r3, [pc, #212]	; (800768c <HAL_RCC_ClockConfig+0x3d4>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f003 030f 	and.w	r3, r3, #15
 80075be:	683a      	ldr	r2, [r7, #0]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d001      	beq.n	80075c8 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	e05b      	b.n	8007680 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f003 0304 	and.w	r3, r3, #4
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d010      	beq.n	80075f6 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	68da      	ldr	r2, [r3, #12]
 80075d8:	4b2b      	ldr	r3, [pc, #172]	; (8007688 <HAL_RCC_ClockConfig+0x3d0>)
 80075da:	6a1b      	ldr	r3, [r3, #32]
 80075dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d208      	bcs.n	80075f6 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80075e4:	4b28      	ldr	r3, [pc, #160]	; (8007688 <HAL_RCC_ClockConfig+0x3d0>)
 80075e6:	6a1b      	ldr	r3, [r3, #32]
 80075e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	4925      	ldr	r1, [pc, #148]	; (8007688 <HAL_RCC_ClockConfig+0x3d0>)
 80075f2:	4313      	orrs	r3, r2
 80075f4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f003 0308 	and.w	r3, r3, #8
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d012      	beq.n	8007628 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	691a      	ldr	r2, [r3, #16]
 8007606:	4b20      	ldr	r3, [pc, #128]	; (8007688 <HAL_RCC_ClockConfig+0x3d0>)
 8007608:	6a1b      	ldr	r3, [r3, #32]
 800760a:	091b      	lsrs	r3, r3, #4
 800760c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007610:	429a      	cmp	r2, r3
 8007612:	d209      	bcs.n	8007628 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8007614:	4b1c      	ldr	r3, [pc, #112]	; (8007688 <HAL_RCC_ClockConfig+0x3d0>)
 8007616:	6a1b      	ldr	r3, [r3, #32]
 8007618:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	691b      	ldr	r3, [r3, #16]
 8007620:	011b      	lsls	r3, r3, #4
 8007622:	4919      	ldr	r1, [pc, #100]	; (8007688 <HAL_RCC_ClockConfig+0x3d0>)
 8007624:	4313      	orrs	r3, r2
 8007626:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 0310 	and.w	r3, r3, #16
 8007630:	2b00      	cmp	r3, #0
 8007632:	d010      	beq.n	8007656 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	695a      	ldr	r2, [r3, #20]
 8007638:	4b13      	ldr	r3, [pc, #76]	; (8007688 <HAL_RCC_ClockConfig+0x3d0>)
 800763a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007640:	429a      	cmp	r2, r3
 8007642:	d208      	bcs.n	8007656 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8007644:	4b10      	ldr	r3, [pc, #64]	; (8007688 <HAL_RCC_ClockConfig+0x3d0>)
 8007646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007648:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	695b      	ldr	r3, [r3, #20]
 8007650:	490d      	ldr	r1, [pc, #52]	; (8007688 <HAL_RCC_ClockConfig+0x3d0>)
 8007652:	4313      	orrs	r3, r2
 8007654:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8007656:	f000 f821 	bl	800769c <HAL_RCC_GetSysClockFreq>
 800765a:	4602      	mov	r2, r0
 800765c:	4b0a      	ldr	r3, [pc, #40]	; (8007688 <HAL_RCC_ClockConfig+0x3d0>)
 800765e:	6a1b      	ldr	r3, [r3, #32]
 8007660:	f003 030f 	and.w	r3, r3, #15
 8007664:	490a      	ldr	r1, [pc, #40]	; (8007690 <HAL_RCC_ClockConfig+0x3d8>)
 8007666:	5ccb      	ldrb	r3, [r1, r3]
 8007668:	fa22 f303 	lsr.w	r3, r2, r3
 800766c:	4a09      	ldr	r2, [pc, #36]	; (8007694 <HAL_RCC_ClockConfig+0x3dc>)
 800766e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007670:	4b09      	ldr	r3, [pc, #36]	; (8007698 <HAL_RCC_ClockConfig+0x3e0>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4618      	mov	r0, r3
 8007676:	f7fb fae1 	bl	8002c3c <HAL_InitTick>
 800767a:	4603      	mov	r3, r0
 800767c:	73fb      	strb	r3, [r7, #15]

  return status;
 800767e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007680:	4618      	mov	r0, r3
 8007682:	3718      	adds	r7, #24
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}
 8007688:	46020c00 	.word	0x46020c00
 800768c:	40022000 	.word	0x40022000
 8007690:	0800d008 	.word	0x0800d008
 8007694:	20000200 	.word	0x20000200
 8007698:	20000204 	.word	0x20000204

0800769c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800769c:	b480      	push	{r7}
 800769e:	b08b      	sub	sp, #44	; 0x2c
 80076a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80076a2:	2300      	movs	r3, #0
 80076a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80076a6:	2300      	movs	r3, #0
 80076a8:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80076aa:	4b7b      	ldr	r3, [pc, #492]	; (8007898 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80076ac:	69db      	ldr	r3, [r3, #28]
 80076ae:	f003 030c 	and.w	r3, r3, #12
 80076b2:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80076b4:	4b78      	ldr	r3, [pc, #480]	; (8007898 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80076b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076b8:	f003 0303 	and.w	r3, r3, #3
 80076bc:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d005      	beq.n	80076d0 <HAL_RCC_GetSysClockFreq+0x34>
 80076c4:	69bb      	ldr	r3, [r7, #24]
 80076c6:	2b0c      	cmp	r3, #12
 80076c8:	d121      	bne.n	800770e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d11e      	bne.n	800770e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80076d0:	4b71      	ldr	r3, [pc, #452]	; (8007898 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d107      	bne.n	80076ec <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80076dc:	4b6e      	ldr	r3, [pc, #440]	; (8007898 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80076de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80076e2:	0b1b      	lsrs	r3, r3, #12
 80076e4:	f003 030f 	and.w	r3, r3, #15
 80076e8:	627b      	str	r3, [r7, #36]	; 0x24
 80076ea:	e005      	b.n	80076f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80076ec:	4b6a      	ldr	r3, [pc, #424]	; (8007898 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	0f1b      	lsrs	r3, r3, #28
 80076f2:	f003 030f 	and.w	r3, r3, #15
 80076f6:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80076f8:	4a68      	ldr	r2, [pc, #416]	; (800789c <HAL_RCC_GetSysClockFreq+0x200>)
 80076fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007700:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d110      	bne.n	800772a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800770c:	e00d      	b.n	800772a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800770e:	4b62      	ldr	r3, [pc, #392]	; (8007898 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007710:	69db      	ldr	r3, [r3, #28]
 8007712:	f003 030c 	and.w	r3, r3, #12
 8007716:	2b04      	cmp	r3, #4
 8007718:	d102      	bne.n	8007720 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800771a:	4b61      	ldr	r3, [pc, #388]	; (80078a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800771c:	623b      	str	r3, [r7, #32]
 800771e:	e004      	b.n	800772a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007720:	69bb      	ldr	r3, [r7, #24]
 8007722:	2b08      	cmp	r3, #8
 8007724:	d101      	bne.n	800772a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007726:	4b5e      	ldr	r3, [pc, #376]	; (80078a0 <HAL_RCC_GetSysClockFreq+0x204>)
 8007728:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	2b0c      	cmp	r3, #12
 800772e:	f040 80ac 	bne.w	800788a <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007732:	4b59      	ldr	r3, [pc, #356]	; (8007898 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007736:	f003 0303 	and.w	r3, r3, #3
 800773a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800773c:	4b56      	ldr	r3, [pc, #344]	; (8007898 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800773e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007740:	0a1b      	lsrs	r3, r3, #8
 8007742:	f003 030f 	and.w	r3, r3, #15
 8007746:	3301      	adds	r3, #1
 8007748:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800774a:	4b53      	ldr	r3, [pc, #332]	; (8007898 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800774c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800774e:	091b      	lsrs	r3, r3, #4
 8007750:	f003 0301 	and.w	r3, r3, #1
 8007754:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8007756:	4b50      	ldr	r3, [pc, #320]	; (8007898 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800775a:	08db      	lsrs	r3, r3, #3
 800775c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007760:	68ba      	ldr	r2, [r7, #8]
 8007762:	fb02 f303 	mul.w	r3, r2, r3
 8007766:	ee07 3a90 	vmov	s15, r3
 800776a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800776e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2b00      	cmp	r3, #0
 8007776:	f000 8086 	beq.w	8007886 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	2b02      	cmp	r3, #2
 800777e:	d003      	beq.n	8007788 <HAL_RCC_GetSysClockFreq+0xec>
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	2b03      	cmp	r3, #3
 8007784:	d022      	beq.n	80077cc <HAL_RCC_GetSysClockFreq+0x130>
 8007786:	e043      	b.n	8007810 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	ee07 3a90 	vmov	s15, r3
 800778e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007792:	eddf 6a44 	vldr	s13, [pc, #272]	; 80078a4 <HAL_RCC_GetSysClockFreq+0x208>
 8007796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800779a:	4b3f      	ldr	r3, [pc, #252]	; (8007898 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800779c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800779e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077a2:	ee07 3a90 	vmov	s15, r3
 80077a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80077aa:	ed97 6a01 	vldr	s12, [r7, #4]
 80077ae:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80078a8 <HAL_RCC_GetSysClockFreq+0x20c>
 80077b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80077b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80077ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077be:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80077c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077c6:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80077ca:	e046      	b.n	800785a <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	ee07 3a90 	vmov	s15, r3
 80077d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077d6:	eddf 6a33 	vldr	s13, [pc, #204]	; 80078a4 <HAL_RCC_GetSysClockFreq+0x208>
 80077da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077de:	4b2e      	ldr	r3, [pc, #184]	; (8007898 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80077e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077e6:	ee07 3a90 	vmov	s15, r3
 80077ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80077ee:	ed97 6a01 	vldr	s12, [r7, #4]
 80077f2:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80078a8 <HAL_RCC_GetSysClockFreq+0x20c>
 80077f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80077fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80077fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007802:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800780a:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800780e:	e024      	b.n	800785a <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007812:	ee07 3a90 	vmov	s15, r3
 8007816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	ee07 3a90 	vmov	s15, r3
 8007820:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007824:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007828:	4b1b      	ldr	r3, [pc, #108]	; (8007898 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800782a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800782c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007830:	ee07 3a90 	vmov	s15, r3
 8007834:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007838:	ed97 6a01 	vldr	s12, [r7, #4]
 800783c:	eddf 5a1a 	vldr	s11, [pc, #104]	; 80078a8 <HAL_RCC_GetSysClockFreq+0x20c>
 8007840:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007844:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007848:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800784c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007850:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007854:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8007858:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800785a:	4b0f      	ldr	r3, [pc, #60]	; (8007898 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800785c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800785e:	0e1b      	lsrs	r3, r3, #24
 8007860:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007864:	3301      	adds	r3, #1
 8007866:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	ee07 3a90 	vmov	s15, r3
 800786e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007872:	edd7 6a07 	vldr	s13, [r7, #28]
 8007876:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800787a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800787e:	ee17 3a90 	vmov	r3, s15
 8007882:	623b      	str	r3, [r7, #32]
 8007884:	e001      	b.n	800788a <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8007886:	2300      	movs	r3, #0
 8007888:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 800788a:	6a3b      	ldr	r3, [r7, #32]
}
 800788c:	4618      	mov	r0, r3
 800788e:	372c      	adds	r7, #44	; 0x2c
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr
 8007898:	46020c00 	.word	0x46020c00
 800789c:	0800d020 	.word	0x0800d020
 80078a0:	00f42400 	.word	0x00f42400
 80078a4:	4b742400 	.word	0x4b742400
 80078a8:	46000000 	.word	0x46000000

080078ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80078b0:	f7ff fef4 	bl	800769c <HAL_RCC_GetSysClockFreq>
 80078b4:	4602      	mov	r2, r0
 80078b6:	4b07      	ldr	r3, [pc, #28]	; (80078d4 <HAL_RCC_GetHCLKFreq+0x28>)
 80078b8:	6a1b      	ldr	r3, [r3, #32]
 80078ba:	f003 030f 	and.w	r3, r3, #15
 80078be:	4906      	ldr	r1, [pc, #24]	; (80078d8 <HAL_RCC_GetHCLKFreq+0x2c>)
 80078c0:	5ccb      	ldrb	r3, [r1, r3]
 80078c2:	fa22 f303 	lsr.w	r3, r2, r3
 80078c6:	4a05      	ldr	r2, [pc, #20]	; (80078dc <HAL_RCC_GetHCLKFreq+0x30>)
 80078c8:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80078ca:	4b04      	ldr	r3, [pc, #16]	; (80078dc <HAL_RCC_GetHCLKFreq+0x30>)
 80078cc:	681b      	ldr	r3, [r3, #0]
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop
 80078d4:	46020c00 	.word	0x46020c00
 80078d8:	0800d008 	.word	0x0800d008
 80078dc:	20000200 	.word	0x20000200

080078e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80078e4:	f7ff ffe2 	bl	80078ac <HAL_RCC_GetHCLKFreq>
 80078e8:	4602      	mov	r2, r0
 80078ea:	4b05      	ldr	r3, [pc, #20]	; (8007900 <HAL_RCC_GetPCLK1Freq+0x20>)
 80078ec:	6a1b      	ldr	r3, [r3, #32]
 80078ee:	091b      	lsrs	r3, r3, #4
 80078f0:	f003 0307 	and.w	r3, r3, #7
 80078f4:	4903      	ldr	r1, [pc, #12]	; (8007904 <HAL_RCC_GetPCLK1Freq+0x24>)
 80078f6:	5ccb      	ldrb	r3, [r1, r3]
 80078f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	46020c00 	.word	0x46020c00
 8007904:	0800d018 	.word	0x0800d018

08007908 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800790c:	f7ff ffce 	bl	80078ac <HAL_RCC_GetHCLKFreq>
 8007910:	4602      	mov	r2, r0
 8007912:	4b05      	ldr	r3, [pc, #20]	; (8007928 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007914:	6a1b      	ldr	r3, [r3, #32]
 8007916:	0a1b      	lsrs	r3, r3, #8
 8007918:	f003 0307 	and.w	r3, r3, #7
 800791c:	4903      	ldr	r1, [pc, #12]	; (800792c <HAL_RCC_GetPCLK2Freq+0x24>)
 800791e:	5ccb      	ldrb	r3, [r1, r3]
 8007920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007924:	4618      	mov	r0, r3
 8007926:	bd80      	pop	{r7, pc}
 8007928:	46020c00 	.word	0x46020c00
 800792c:	0800d018 	.word	0x0800d018

08007930 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8007934:	f7ff ffba 	bl	80078ac <HAL_RCC_GetHCLKFreq>
 8007938:	4602      	mov	r2, r0
 800793a:	4b05      	ldr	r3, [pc, #20]	; (8007950 <HAL_RCC_GetPCLK3Freq+0x20>)
 800793c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793e:	091b      	lsrs	r3, r3, #4
 8007940:	f003 0307 	and.w	r3, r3, #7
 8007944:	4903      	ldr	r1, [pc, #12]	; (8007954 <HAL_RCC_GetPCLK3Freq+0x24>)
 8007946:	5ccb      	ldrb	r3, [r1, r3]
 8007948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800794c:	4618      	mov	r0, r3
 800794e:	bd80      	pop	{r7, pc}
 8007950:	46020c00 	.word	0x46020c00
 8007954:	0800d018 	.word	0x0800d018

08007958 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b086      	sub	sp, #24
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007960:	4b3e      	ldr	r3, [pc, #248]	; (8007a5c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007962:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007966:	f003 0304 	and.w	r3, r3, #4
 800796a:	2b00      	cmp	r3, #0
 800796c:	d003      	beq.n	8007976 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800796e:	f7fe fd9f 	bl	80064b0 <HAL_PWREx_GetVoltageRange>
 8007972:	6178      	str	r0, [r7, #20]
 8007974:	e019      	b.n	80079aa <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007976:	4b39      	ldr	r3, [pc, #228]	; (8007a5c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007978:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800797c:	4a37      	ldr	r2, [pc, #220]	; (8007a5c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800797e:	f043 0304 	orr.w	r3, r3, #4
 8007982:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8007986:	4b35      	ldr	r3, [pc, #212]	; (8007a5c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007988:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800798c:	f003 0304 	and.w	r3, r3, #4
 8007990:	60fb      	str	r3, [r7, #12]
 8007992:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007994:	f7fe fd8c 	bl	80064b0 <HAL_PWREx_GetVoltageRange>
 8007998:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800799a:	4b30      	ldr	r3, [pc, #192]	; (8007a5c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800799c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80079a0:	4a2e      	ldr	r2, [pc, #184]	; (8007a5c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80079a2:	f023 0304 	bic.w	r3, r3, #4
 80079a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80079b0:	d003      	beq.n	80079ba <RCC_SetFlashLatencyFromMSIRange+0x62>
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079b8:	d109      	bne.n	80079ce <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079c0:	d202      	bcs.n	80079c8 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80079c2:	2301      	movs	r3, #1
 80079c4:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80079c6:	e033      	b.n	8007a30 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80079c8:	2300      	movs	r3, #0
 80079ca:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80079cc:	e030      	b.n	8007a30 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079d4:	d208      	bcs.n	80079e8 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079dc:	d102      	bne.n	80079e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80079de:	2303      	movs	r3, #3
 80079e0:	613b      	str	r3, [r7, #16]
 80079e2:	e025      	b.n	8007a30 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80079e4:	2301      	movs	r3, #1
 80079e6:	e035      	b.n	8007a54 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079ee:	d90f      	bls.n	8007a10 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d109      	bne.n	8007a0a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80079fc:	d902      	bls.n	8007a04 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80079fe:	2300      	movs	r3, #0
 8007a00:	613b      	str	r3, [r7, #16]
 8007a02:	e015      	b.n	8007a30 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8007a04:	2301      	movs	r3, #1
 8007a06:	613b      	str	r3, [r7, #16]
 8007a08:	e012      	b.n	8007a30 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	613b      	str	r3, [r7, #16]
 8007a0e:	e00f      	b.n	8007a30 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a16:	d109      	bne.n	8007a2c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a1e:	d102      	bne.n	8007a26 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8007a20:	2301      	movs	r3, #1
 8007a22:	613b      	str	r3, [r7, #16]
 8007a24:	e004      	b.n	8007a30 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8007a26:	2302      	movs	r3, #2
 8007a28:	613b      	str	r3, [r7, #16]
 8007a2a:	e001      	b.n	8007a30 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007a30:	4b0b      	ldr	r3, [pc, #44]	; (8007a60 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f023 020f 	bic.w	r2, r3, #15
 8007a38:	4909      	ldr	r1, [pc, #36]	; (8007a60 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8007a40:	4b07      	ldr	r3, [pc, #28]	; (8007a60 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f003 030f 	and.w	r3, r3, #15
 8007a48:	693a      	ldr	r2, [r7, #16]
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d001      	beq.n	8007a52 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e000      	b.n	8007a54 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8007a52:	2300      	movs	r3, #0
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3718      	adds	r7, #24
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}
 8007a5c:	46020c00 	.word	0x46020c00
 8007a60:	40022000 	.word	0x40022000

08007a64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8007a64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a68:	b0ba      	sub	sp, #232	; 0xe8
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007a70:	2300      	movs	r3, #0
 8007a72:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007a76:	2300      	movs	r3, #0
 8007a78:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007a7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a84:	f002 0401 	and.w	r4, r2, #1
 8007a88:	2500      	movs	r5, #0
 8007a8a:	ea54 0305 	orrs.w	r3, r4, r5
 8007a8e:	d00b      	beq.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8007a90:	4bcb      	ldr	r3, [pc, #812]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007a92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007a96:	f023 0103 	bic.w	r1, r3, #3
 8007a9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aa0:	4ac7      	ldr	r2, [pc, #796]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007aa2:	430b      	orrs	r3, r1
 8007aa4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007aa8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab0:	f002 0802 	and.w	r8, r2, #2
 8007ab4:	f04f 0900 	mov.w	r9, #0
 8007ab8:	ea58 0309 	orrs.w	r3, r8, r9
 8007abc:	d00b      	beq.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8007abe:	4bc0      	ldr	r3, [pc, #768]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007ac4:	f023 010c 	bic.w	r1, r3, #12
 8007ac8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ace:	4abc      	ldr	r2, [pc, #752]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007ad0:	430b      	orrs	r3, r1
 8007ad2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007ad6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ade:	f002 0a04 	and.w	sl, r2, #4
 8007ae2:	f04f 0b00 	mov.w	fp, #0
 8007ae6:	ea5a 030b 	orrs.w	r3, sl, fp
 8007aea:	d00b      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8007aec:	4bb4      	ldr	r3, [pc, #720]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007af2:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8007af6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007afc:	4ab0      	ldr	r2, [pc, #704]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007afe:	430b      	orrs	r3, r1
 8007b00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007b04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0c:	f002 0308 	and.w	r3, r2, #8
 8007b10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007b14:	2300      	movs	r3, #0
 8007b16:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007b1a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007b1e:	460b      	mov	r3, r1
 8007b20:	4313      	orrs	r3, r2
 8007b22:	d00b      	beq.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8007b24:	4ba6      	ldr	r3, [pc, #664]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007b2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007b2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b34:	4aa2      	ldr	r2, [pc, #648]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007b36:	430b      	orrs	r3, r1
 8007b38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007b3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b44:	f002 0310 	and.w	r3, r2, #16
 8007b48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b52:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007b56:	460b      	mov	r3, r1
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	d00b      	beq.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8007b5c:	4b98      	ldr	r3, [pc, #608]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007b62:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007b66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b6c:	4a94      	ldr	r2, [pc, #592]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007b6e:	430b      	orrs	r3, r1
 8007b70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007b74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7c:	f002 0320 	and.w	r3, r2, #32
 8007b80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b84:	2300      	movs	r3, #0
 8007b86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007b8a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8007b8e:	460b      	mov	r3, r1
 8007b90:	4313      	orrs	r3, r2
 8007b92:	d00b      	beq.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8007b94:	4b8a      	ldr	r3, [pc, #552]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007b96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007b9a:	f023 0107 	bic.w	r1, r3, #7
 8007b9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ba2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ba4:	4a86      	ldr	r2, [pc, #536]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007ba6:	430b      	orrs	r3, r1
 8007ba8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007bac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb4:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8007bb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007bc2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8007bc6:	460b      	mov	r3, r1
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	d00b      	beq.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8007bcc:	4b7c      	ldr	r3, [pc, #496]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007bd2:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8007bd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007bda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bdc:	4a78      	ldr	r2, [pc, #480]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007bde:	430b      	orrs	r3, r1
 8007be0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007be4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bec:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8007bf0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007bfa:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007bfe:	460b      	mov	r3, r1
 8007c00:	4313      	orrs	r3, r2
 8007c02:	d00b      	beq.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8007c04:	4b6e      	ldr	r3, [pc, #440]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007c0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c14:	4a6a      	ldr	r2, [pc, #424]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007c16:	430b      	orrs	r3, r1
 8007c18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007c1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c24:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8007c28:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007c32:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007c36:	460b      	mov	r3, r1
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	d00b      	beq.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8007c3c:	4b60      	ldr	r3, [pc, #384]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007c3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007c42:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007c46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c4c:	4a5c      	ldr	r2, [pc, #368]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007c4e:	430b      	orrs	r3, r1
 8007c50:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c5c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007c60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007c64:	2300      	movs	r3, #0
 8007c66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007c6a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8007c6e:	460b      	mov	r3, r1
 8007c70:	4313      	orrs	r3, r2
 8007c72:	d00b      	beq.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8007c74:	4b52      	ldr	r3, [pc, #328]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c7a:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8007c7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c84:	4a4e      	ldr	r2, [pc, #312]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007c86:	430b      	orrs	r3, r1
 8007c88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007c8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c94:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8007c98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007ca2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	d00b      	beq.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8007cac:	4b44      	ldr	r3, [pc, #272]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007cae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007cb2:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8007cb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007cba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cbc:	4a40      	ldr	r2, [pc, #256]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007cbe:	430b      	orrs	r3, r1
 8007cc0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007cc4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ccc:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8007cd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007cda:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8007cde:	460b      	mov	r3, r1
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	d00b      	beq.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8007ce4:	4b36      	ldr	r3, [pc, #216]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007cea:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8007cee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007cf2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cf4:	4a32      	ldr	r2, [pc, #200]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007cf6:	430b      	orrs	r3, r1
 8007cf8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8007cfc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d04:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8007d08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007d12:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8007d16:	460b      	mov	r3, r1
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	d00c      	beq.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8007d1c:	4b28      	ldr	r3, [pc, #160]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007d22:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007d26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d2e:	4a24      	ldr	r2, [pc, #144]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d30:	430b      	orrs	r3, r1
 8007d32:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007d36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8007d42:	67bb      	str	r3, [r7, #120]	; 0x78
 8007d44:	2300      	movs	r3, #0
 8007d46:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007d48:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	d04f      	beq.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8007d52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d5a:	2b80      	cmp	r3, #128	; 0x80
 8007d5c:	d02d      	beq.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x356>
 8007d5e:	2b80      	cmp	r3, #128	; 0x80
 8007d60:	d827      	bhi.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007d62:	2b60      	cmp	r3, #96	; 0x60
 8007d64:	d02e      	beq.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007d66:	2b60      	cmp	r3, #96	; 0x60
 8007d68:	d823      	bhi.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007d6a:	2b40      	cmp	r3, #64	; 0x40
 8007d6c:	d006      	beq.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x318>
 8007d6e:	2b40      	cmp	r3, #64	; 0x40
 8007d70:	d81f      	bhi.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d009      	beq.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x326>
 8007d76:	2b20      	cmp	r3, #32
 8007d78:	d011      	beq.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8007d7a:	e01a      	b.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007d7c:	4b10      	ldr	r3, [pc, #64]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d80:	4a0f      	ldr	r2, [pc, #60]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d86:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007d88:	e01d      	b.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007d8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d8e:	3308      	adds	r3, #8
 8007d90:	4618      	mov	r0, r3
 8007d92:	f002 f981 	bl	800a098 <RCCEx_PLL2_Config>
 8007d96:	4603      	mov	r3, r0
 8007d98:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007d9c:	e013      	b.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007d9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007da2:	332c      	adds	r3, #44	; 0x2c
 8007da4:	4618      	mov	r0, r3
 8007da6:	f002 fa0f 	bl	800a1c8 <RCCEx_PLL3_Config>
 8007daa:	4603      	mov	r3, r0
 8007dac:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007db0:	e009      	b.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8007db8:	e005      	b.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8007dba:	bf00      	nop
 8007dbc:	e003      	b.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8007dbe:	bf00      	nop
 8007dc0:	46020c00 	.word	0x46020c00
        break;
 8007dc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dc6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d10d      	bne.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8007dce:	4bb6      	ldr	r3, [pc, #728]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007dd0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007dd4:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8007dd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007de0:	4ab1      	ldr	r2, [pc, #708]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007de2:	430b      	orrs	r3, r1
 8007de4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8007de8:	e003      	b.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dea:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007dee:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007df2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfa:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007dfe:	673b      	str	r3, [r7, #112]	; 0x70
 8007e00:	2300      	movs	r3, #0
 8007e02:	677b      	str	r3, [r7, #116]	; 0x74
 8007e04:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007e08:	460b      	mov	r3, r1
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	d053      	beq.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8007e0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e1a:	d033      	beq.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8007e1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e20:	d82c      	bhi.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x418>
 8007e22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e26:	d02f      	beq.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8007e28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e2c:	d826      	bhi.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x418>
 8007e2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e32:	d008      	beq.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8007e34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e38:	d820      	bhi.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x418>
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d00a      	beq.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8007e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e42:	d011      	beq.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8007e44:	e01a      	b.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007e46:	4b98      	ldr	r3, [pc, #608]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e4a:	4a97      	ldr	r2, [pc, #604]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e50:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007e52:	e01a      	b.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007e54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e58:	3308      	adds	r3, #8
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f002 f91c 	bl	800a098 <RCCEx_PLL2_Config>
 8007e60:	4603      	mov	r3, r0
 8007e62:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007e66:	e010      	b.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007e68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e6c:	332c      	adds	r3, #44	; 0x2c
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f002 f9aa 	bl	800a1c8 <RCCEx_PLL3_Config>
 8007e74:	4603      	mov	r3, r0
 8007e76:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007e7a:	e006      	b.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8007e82:	e002      	b.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8007e84:	bf00      	nop
 8007e86:	e000      	b.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8007e88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e8a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d10d      	bne.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8007e92:	4b85      	ldr	r3, [pc, #532]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007e94:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007e98:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8007e9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ea0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ea4:	4a80      	ldr	r2, [pc, #512]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007ea6:	430b      	orrs	r3, r1
 8007ea8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8007eac:	e003      	b.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eae:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007eb2:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8007eb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ebe:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8007ec2:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ec8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007ecc:	460b      	mov	r3, r1
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	d046      	beq.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8007ed2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ed6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007eda:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007ede:	d028      	beq.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8007ee0:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007ee4:	d821      	bhi.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8007ee6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007eea:	d022      	beq.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8007eec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ef0:	d81b      	bhi.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8007ef2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007ef6:	d01c      	beq.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8007ef8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007efc:	d815      	bhi.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8007efe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f02:	d008      	beq.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8007f04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f08:	d80f      	bhi.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d011      	beq.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8007f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f12:	d00e      	beq.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8007f14:	e009      	b.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007f16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f1a:	3308      	adds	r3, #8
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f002 f8bb 	bl	800a098 <RCCEx_PLL2_Config>
 8007f22:	4603      	mov	r3, r0
 8007f24:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8007f28:	e004      	b.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8007f30:	e000      	b.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8007f32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f34:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d10d      	bne.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8007f3c:	4b5a      	ldr	r3, [pc, #360]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007f3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007f42:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007f46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f4a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007f4e:	4a56      	ldr	r2, [pc, #344]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007f50:	430b      	orrs	r3, r1
 8007f52:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007f56:	e003      	b.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f58:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007f5c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8007f60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f68:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007f6c:	663b      	str	r3, [r7, #96]	; 0x60
 8007f6e:	2300      	movs	r3, #0
 8007f70:	667b      	str	r3, [r7, #100]	; 0x64
 8007f72:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007f76:	460b      	mov	r3, r1
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	d03f      	beq.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8007f7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f84:	2b04      	cmp	r3, #4
 8007f86:	d81e      	bhi.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x562>
 8007f88:	a201      	add	r2, pc, #4	; (adr r2, 8007f90 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8007f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f8e:	bf00      	nop
 8007f90:	08007fcf 	.word	0x08007fcf
 8007f94:	08007fa5 	.word	0x08007fa5
 8007f98:	08007fb3 	.word	0x08007fb3
 8007f9c:	08007fcf 	.word	0x08007fcf
 8007fa0:	08007fcf 	.word	0x08007fcf
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007fa4:	4b40      	ldr	r3, [pc, #256]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa8:	4a3f      	ldr	r2, [pc, #252]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007faa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fae:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8007fb0:	e00e      	b.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007fb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007fb6:	332c      	adds	r3, #44	; 0x2c
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f002 f905 	bl	800a1c8 <RCCEx_PLL3_Config>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8007fc4:	e004      	b.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8007fcc:	e000      	b.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8007fce:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007fd0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d10d      	bne.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8007fd8:	4b33      	ldr	r3, [pc, #204]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007fda:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007fde:	f023 0107 	bic.w	r1, r3, #7
 8007fe2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fea:	4a2f      	ldr	r2, [pc, #188]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007fec:	430b      	orrs	r3, r1
 8007fee:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8007ff2:	e003      	b.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ff4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007ff8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8007ffc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008004:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8008008:	65bb      	str	r3, [r7, #88]	; 0x58
 800800a:	2300      	movs	r3, #0
 800800c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800800e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8008012:	460b      	mov	r3, r1
 8008014:	4313      	orrs	r3, r2
 8008016:	d04d      	beq.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8008018:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800801c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008020:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008024:	d028      	beq.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8008026:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800802a:	d821      	bhi.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800802c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008030:	d024      	beq.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x618>
 8008032:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008036:	d81b      	bhi.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8008038:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800803c:	d00e      	beq.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 800803e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008042:	d815      	bhi.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8008044:	2b00      	cmp	r3, #0
 8008046:	d01b      	beq.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8008048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800804c:	d110      	bne.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800804e:	4b16      	ldr	r3, [pc, #88]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8008050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008052:	4a15      	ldr	r2, [pc, #84]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8008054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008058:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800805a:	e012      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800805c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008060:	332c      	adds	r3, #44	; 0x2c
 8008062:	4618      	mov	r0, r3
 8008064:	f002 f8b0 	bl	800a1c8 <RCCEx_PLL3_Config>
 8008068:	4603      	mov	r3, r0
 800806a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800806e:	e008      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8008076:	e004      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8008078:	bf00      	nop
 800807a:	e002      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800807c:	bf00      	nop
 800807e:	e000      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8008080:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008082:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8008086:	2b00      	cmp	r3, #0
 8008088:	d110      	bne.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800808a:	4b07      	ldr	r3, [pc, #28]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800808c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008090:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8008094:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008098:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800809c:	4a02      	ldr	r2, [pc, #8]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800809e:	430b      	orrs	r3, r1
 80080a0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80080a4:	e006      	b.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x650>
 80080a6:	bf00      	nop
 80080a8:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080ac:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80080b0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80080b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80080b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080bc:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80080c0:	653b      	str	r3, [r7, #80]	; 0x50
 80080c2:	2300      	movs	r3, #0
 80080c4:	657b      	str	r3, [r7, #84]	; 0x54
 80080c6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80080ca:	460b      	mov	r3, r1
 80080cc:	4313      	orrs	r3, r2
 80080ce:	f000 80b5 	beq.w	800823c <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80080d2:	2300      	movs	r3, #0
 80080d4:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80080d8:	4b9d      	ldr	r3, [pc, #628]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80080da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80080de:	f003 0304 	and.w	r3, r3, #4
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d113      	bne.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80080e6:	4b9a      	ldr	r3, [pc, #616]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80080e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80080ec:	4a98      	ldr	r2, [pc, #608]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80080ee:	f043 0304 	orr.w	r3, r3, #4
 80080f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80080f6:	4b96      	ldr	r3, [pc, #600]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80080f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80080fc:	f003 0304 	and.w	r3, r3, #4
 8008100:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008104:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 8008108:	2301      	movs	r3, #1
 800810a:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800810e:	4b91      	ldr	r3, [pc, #580]	; (8008354 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8008110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008112:	4a90      	ldr	r2, [pc, #576]	; (8008354 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8008114:	f043 0301 	orr.w	r3, r3, #1
 8008118:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800811a:	f7fa fdd9 	bl	8002cd0 <HAL_GetTick>
 800811e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008122:	e00b      	b.n	800813c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008124:	f7fa fdd4 	bl	8002cd0 <HAL_GetTick>
 8008128:	4602      	mov	r2, r0
 800812a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800812e:	1ad3      	subs	r3, r2, r3
 8008130:	2b02      	cmp	r3, #2
 8008132:	d903      	bls.n	800813c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8008134:	2303      	movs	r3, #3
 8008136:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800813a:	e005      	b.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800813c:	4b85      	ldr	r3, [pc, #532]	; (8008354 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800813e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008140:	f003 0301 	and.w	r3, r3, #1
 8008144:	2b00      	cmp	r3, #0
 8008146:	d0ed      	beq.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8008148:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800814c:	2b00      	cmp	r3, #0
 800814e:	d165      	bne.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008150:	4b7f      	ldr	r3, [pc, #508]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8008152:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008156:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800815a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800815e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008162:	2b00      	cmp	r3, #0
 8008164:	d023      	beq.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8008166:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800816a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800816e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008172:	4293      	cmp	r3, r2
 8008174:	d01b      	beq.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008176:	4b76      	ldr	r3, [pc, #472]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8008178:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800817c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008180:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008184:	4b72      	ldr	r3, [pc, #456]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8008186:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800818a:	4a71      	ldr	r2, [pc, #452]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800818c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008190:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008194:	4b6e      	ldr	r3, [pc, #440]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8008196:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800819a:	4a6d      	ldr	r2, [pc, #436]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800819c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081a0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80081a4:	4a6a      	ldr	r2, [pc, #424]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80081a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80081ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081b2:	f003 0301 	and.w	r3, r3, #1
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d019      	beq.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081ba:	f7fa fd89 	bl	8002cd0 <HAL_GetTick>
 80081be:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80081c2:	e00d      	b.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081c4:	f7fa fd84 	bl	8002cd0 <HAL_GetTick>
 80081c8:	4602      	mov	r2, r0
 80081ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081ce:	1ad2      	subs	r2, r2, r3
 80081d0:	f241 3388 	movw	r3, #5000	; 0x1388
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d903      	bls.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 80081d8:	2303      	movs	r3, #3
 80081da:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 80081de:	e006      	b.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80081e0:	4b5b      	ldr	r3, [pc, #364]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80081e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80081e6:	f003 0302 	and.w	r3, r3, #2
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d0ea      	beq.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 80081ee:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d10d      	bne.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80081f6:	4b56      	ldr	r3, [pc, #344]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80081f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80081fc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008200:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008204:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008208:	4a51      	ldr	r2, [pc, #324]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800820a:	430b      	orrs	r3, r1
 800820c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8008210:	e008      	b.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008212:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8008216:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 800821a:	e003      	b.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800821c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8008220:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008224:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8008228:	2b01      	cmp	r3, #1
 800822a:	d107      	bne.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800822c:	4b48      	ldr	r3, [pc, #288]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800822e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008232:	4a47      	ldr	r2, [pc, #284]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8008234:	f023 0304 	bic.w	r3, r3, #4
 8008238:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800823c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008244:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8008248:	64bb      	str	r3, [r7, #72]	; 0x48
 800824a:	2300      	movs	r3, #0
 800824c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800824e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8008252:	460b      	mov	r3, r1
 8008254:	4313      	orrs	r3, r2
 8008256:	d042      	beq.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8008258:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800825c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008260:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008264:	d022      	beq.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x848>
 8008266:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800826a:	d81b      	bhi.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x840>
 800826c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008270:	d011      	beq.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0x832>
 8008272:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008276:	d815      	bhi.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8008278:	2b00      	cmp	r3, #0
 800827a:	d019      	beq.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 800827c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008280:	d110      	bne.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008282:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008286:	3308      	adds	r3, #8
 8008288:	4618      	mov	r0, r3
 800828a:	f001 ff05 	bl	800a098 <RCCEx_PLL2_Config>
 800828e:	4603      	mov	r3, r0
 8008290:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8008294:	e00d      	b.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008296:	4b2e      	ldr	r3, [pc, #184]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8008298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800829a:	4a2d      	ldr	r2, [pc, #180]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800829c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082a0:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80082a2:	e006      	b.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80082a4:	2301      	movs	r3, #1
 80082a6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80082aa:	e002      	b.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 80082ac:	bf00      	nop
 80082ae:	e000      	b.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 80082b0:	bf00      	nop
    }
    if (ret == HAL_OK)
 80082b2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d10d      	bne.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80082ba:	4b25      	ldr	r3, [pc, #148]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80082bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80082c0:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80082c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80082c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80082cc:	4a20      	ldr	r2, [pc, #128]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80082ce:	430b      	orrs	r3, r1
 80082d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80082d4:	e003      	b.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082d6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80082da:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80082de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80082e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e6:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80082ea:	643b      	str	r3, [r7, #64]	; 0x40
 80082ec:	2300      	movs	r3, #0
 80082ee:	647b      	str	r3, [r7, #68]	; 0x44
 80082f0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80082f4:	460b      	mov	r3, r1
 80082f6:	4313      	orrs	r3, r2
 80082f8:	d032      	beq.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80082fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80082fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008302:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008306:	d00b      	beq.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8008308:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800830c:	d804      	bhi.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 800830e:	2b00      	cmp	r3, #0
 8008310:	d008      	beq.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8008312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008316:	d007      	beq.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8008318:	2301      	movs	r3, #1
 800831a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800831e:	e004      	b.n	800832a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8008320:	bf00      	nop
 8008322:	e002      	b.n	800832a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8008324:	bf00      	nop
 8008326:	e000      	b.n	800832a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8008328:	bf00      	nop
    }
    if (ret == HAL_OK)
 800832a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800832e:	2b00      	cmp	r3, #0
 8008330:	d112      	bne.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8008332:	4b07      	ldr	r3, [pc, #28]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8008334:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008338:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800833c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008340:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008344:	4a02      	ldr	r2, [pc, #8]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8008346:	430b      	orrs	r3, r1
 8008348:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800834c:	e008      	b.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 800834e:	bf00      	nop
 8008350:	46020c00 	.word	0x46020c00
 8008354:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008358:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800835c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8008360:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008368:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800836c:	63bb      	str	r3, [r7, #56]	; 0x38
 800836e:	2300      	movs	r3, #0
 8008370:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008372:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8008376:	460b      	mov	r3, r1
 8008378:	4313      	orrs	r3, r2
 800837a:	d00c      	beq.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800837c:	4b98      	ldr	r3, [pc, #608]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800837e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008382:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8008386:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800838a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800838e:	4a94      	ldr	r2, [pc, #592]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008390:	430b      	orrs	r3, r1
 8008392:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8008396:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800839a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800839e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80083a2:	633b      	str	r3, [r7, #48]	; 0x30
 80083a4:	2300      	movs	r3, #0
 80083a6:	637b      	str	r3, [r7, #52]	; 0x34
 80083a8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80083ac:	460b      	mov	r3, r1
 80083ae:	4313      	orrs	r3, r2
 80083b0:	d019      	beq.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80083b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80083b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80083ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083be:	d105      	bne.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80083c0:	4b87      	ldr	r3, [pc, #540]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80083c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c4:	4a86      	ldr	r2, [pc, #536]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80083c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083ca:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80083cc:	4b84      	ldr	r3, [pc, #528]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80083ce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80083d2:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80083d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80083da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80083de:	4a80      	ldr	r2, [pc, #512]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80083e0:	430b      	orrs	r3, r1
 80083e2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80083e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80083ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ee:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80083f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80083f4:	2300      	movs	r3, #0
 80083f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083f8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80083fc:	460b      	mov	r3, r1
 80083fe:	4313      	orrs	r3, r2
 8008400:	d00c      	beq.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8008402:	4b77      	ldr	r3, [pc, #476]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008408:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800840c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008410:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008414:	4972      	ldr	r1, [pc, #456]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008416:	4313      	orrs	r3, r2
 8008418:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800841c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008424:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8008428:	623b      	str	r3, [r7, #32]
 800842a:	2300      	movs	r3, #0
 800842c:	627b      	str	r3, [r7, #36]	; 0x24
 800842e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008432:	460b      	mov	r3, r1
 8008434:	4313      	orrs	r3, r2
 8008436:	d00c      	beq.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8008438:	4b69      	ldr	r3, [pc, #420]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800843a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800843e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008442:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008446:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800844a:	4965      	ldr	r1, [pc, #404]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800844c:	4313      	orrs	r3, r2
 800844e:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8008452:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845a:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800845e:	61bb      	str	r3, [r7, #24]
 8008460:	2300      	movs	r3, #0
 8008462:	61fb      	str	r3, [r7, #28]
 8008464:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008468:	460b      	mov	r3, r1
 800846a:	4313      	orrs	r3, r2
 800846c:	d00c      	beq.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800846e:	4b5c      	ldr	r3, [pc, #368]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008470:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008474:	f023 0218 	bic.w	r2, r3, #24
 8008478:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800847c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008480:	4957      	ldr	r1, [pc, #348]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008482:	4313      	orrs	r3, r2
 8008484:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008488:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800848c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008490:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8008494:	613b      	str	r3, [r7, #16]
 8008496:	2300      	movs	r3, #0
 8008498:	617b      	str	r3, [r7, #20]
 800849a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800849e:	460b      	mov	r3, r1
 80084a0:	4313      	orrs	r3, r2
 80084a2:	d032      	beq.n	800850a <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80084a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80084a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80084ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80084b0:	d105      	bne.n	80084be <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084b2:	4b4b      	ldr	r3, [pc, #300]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80084b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084b6:	4a4a      	ldr	r2, [pc, #296]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80084b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084bc:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80084be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80084c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80084c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80084ca:	d108      	bne.n	80084de <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80084cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80084d0:	3308      	adds	r3, #8
 80084d2:	4618      	mov	r0, r3
 80084d4:	f001 fde0 	bl	800a098 <RCCEx_PLL2_Config>
 80084d8:	4603      	mov	r3, r0
 80084da:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 80084de:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d10d      	bne.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80084e6:	4b3e      	ldr	r3, [pc, #248]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80084e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80084ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80084f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80084f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80084f8:	4939      	ldr	r1, [pc, #228]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80084fa:	4313      	orrs	r3, r2
 80084fc:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8008500:	e003      	b.n	800850a <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008502:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8008506:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800850a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800850e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008512:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8008516:	60bb      	str	r3, [r7, #8]
 8008518:	2300      	movs	r3, #0
 800851a:	60fb      	str	r3, [r7, #12]
 800851c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008520:	460b      	mov	r3, r1
 8008522:	4313      	orrs	r3, r2
 8008524:	d03a      	beq.n	800859c <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8008526:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800852a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800852e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008532:	d00e      	beq.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8008534:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008538:	d815      	bhi.n	8008566 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800853a:	2b00      	cmp	r3, #0
 800853c:	d017      	beq.n	800856e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800853e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008542:	d110      	bne.n	8008566 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008544:	4b26      	ldr	r3, [pc, #152]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008548:	4a25      	ldr	r2, [pc, #148]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800854a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800854e:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8008550:	e00e      	b.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008552:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008556:	3308      	adds	r3, #8
 8008558:	4618      	mov	r0, r3
 800855a:	f001 fd9d 	bl	800a098 <RCCEx_PLL2_Config>
 800855e:	4603      	mov	r3, r0
 8008560:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8008564:	e004      	b.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8008566:	2301      	movs	r3, #1
 8008568:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800856c:	e000      	b.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 800856e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008570:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8008574:	2b00      	cmp	r3, #0
 8008576:	d10d      	bne.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8008578:	4b19      	ldr	r3, [pc, #100]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800857a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800857e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008582:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008586:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800858a:	4915      	ldr	r1, [pc, #84]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800858c:	4313      	orrs	r3, r2
 800858e:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8008592:	e003      	b.n	800859c <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008594:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8008598:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800859c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80085a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80085a8:	603b      	str	r3, [r7, #0]
 80085aa:	2300      	movs	r3, #0
 80085ac:	607b      	str	r3, [r7, #4]
 80085ae:	e9d7 1200 	ldrd	r1, r2, [r7]
 80085b2:	460b      	mov	r3, r1
 80085b4:	4313      	orrs	r3, r2
 80085b6:	d00c      	beq.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80085b8:	4b09      	ldr	r3, [pc, #36]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80085ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80085be:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80085c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80085c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80085ca:	4905      	ldr	r1, [pc, #20]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80085cc:	4313      	orrs	r3, r2
 80085ce:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80085d2:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	37e8      	adds	r7, #232	; 0xe8
 80085da:	46bd      	mov	sp, r7
 80085dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085e0:	46020c00 	.word	0x46020c00

080085e4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b089      	sub	sp, #36	; 0x24
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80085ec:	4bac      	ldr	r3, [pc, #688]	; (80088a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80085ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085f4:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80085f6:	4baa      	ldr	r3, [pc, #680]	; (80088a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80085f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085fa:	f003 0303 	and.w	r3, r3, #3
 80085fe:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8008600:	4ba7      	ldr	r3, [pc, #668]	; (80088a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8008602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008604:	0a1b      	lsrs	r3, r3, #8
 8008606:	f003 030f 	and.w	r3, r3, #15
 800860a:	3301      	adds	r3, #1
 800860c:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 800860e:	4ba4      	ldr	r3, [pc, #656]	; (80088a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8008610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008612:	f003 0310 	and.w	r3, r3, #16
 8008616:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8008618:	4ba1      	ldr	r3, [pc, #644]	; (80088a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800861a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800861c:	08db      	lsrs	r3, r3, #3
 800861e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008622:	68fa      	ldr	r2, [r7, #12]
 8008624:	fb02 f303 	mul.w	r3, r2, r3
 8008628:	ee07 3a90 	vmov	s15, r3
 800862c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008630:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	2b00      	cmp	r3, #0
 8008638:	f000 8123 	beq.w	8008882 <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	2b03      	cmp	r3, #3
 8008640:	d062      	beq.n	8008708 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	2b03      	cmp	r3, #3
 8008646:	f200 8081 	bhi.w	800874c <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	2b01      	cmp	r3, #1
 800864e:	d024      	beq.n	800869a <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	2b02      	cmp	r3, #2
 8008654:	d17a      	bne.n	800874c <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	ee07 3a90 	vmov	s15, r3
 800865c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008660:	eddf 6a90 	vldr	s13, [pc, #576]	; 80088a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8008664:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008668:	4b8d      	ldr	r3, [pc, #564]	; (80088a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800866a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800866c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008670:	ee07 3a90 	vmov	s15, r3
 8008674:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8008678:	ed97 6a02 	vldr	s12, [r7, #8]
 800867c:	eddf 5a8a 	vldr	s11, [pc, #552]	; 80088a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8008680:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008684:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8008688:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800868c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008690:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008694:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008698:	e08f      	b.n	80087ba <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800869a:	4b81      	ldr	r3, [pc, #516]	; (80088a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d005      	beq.n	80086b2 <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 80086a6:	4b7e      	ldr	r3, [pc, #504]	; (80088a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80086a8:	689b      	ldr	r3, [r3, #8]
 80086aa:	0f1b      	lsrs	r3, r3, #28
 80086ac:	f003 030f 	and.w	r3, r3, #15
 80086b0:	e006      	b.n	80086c0 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 80086b2:	4b7b      	ldr	r3, [pc, #492]	; (80088a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80086b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80086b8:	041b      	lsls	r3, r3, #16
 80086ba:	0f1b      	lsrs	r3, r3, #28
 80086bc:	f003 030f 	and.w	r3, r3, #15
 80086c0:	4a7a      	ldr	r2, [pc, #488]	; (80088ac <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80086c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086c6:	ee07 3a90 	vmov	s15, r3
 80086ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	ee07 3a90 	vmov	s15, r3
 80086d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80086dc:	69bb      	ldr	r3, [r7, #24]
 80086de:	ee07 3a90 	vmov	s15, r3
 80086e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80086ea:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80088a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 80086ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80086fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008702:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008706:	e058      	b.n	80087ba <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	ee07 3a90 	vmov	s15, r3
 800870e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008712:	eddf 6a64 	vldr	s13, [pc, #400]	; 80088a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8008716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800871a:	4b61      	ldr	r3, [pc, #388]	; (80088a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800871c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800871e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008722:	ee07 3a90 	vmov	s15, r3
 8008726:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800872a:	ed97 6a02 	vldr	s12, [r7, #8]
 800872e:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80088a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8008732:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008736:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800873a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800873e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008746:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800874a:	e036      	b.n	80087ba <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800874c:	4b54      	ldr	r3, [pc, #336]	; (80088a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008754:	2b00      	cmp	r3, #0
 8008756:	d005      	beq.n	8008764 <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 8008758:	4b51      	ldr	r3, [pc, #324]	; (80088a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800875a:	689b      	ldr	r3, [r3, #8]
 800875c:	0f1b      	lsrs	r3, r3, #28
 800875e:	f003 030f 	and.w	r3, r3, #15
 8008762:	e006      	b.n	8008772 <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 8008764:	4b4e      	ldr	r3, [pc, #312]	; (80088a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8008766:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800876a:	041b      	lsls	r3, r3, #16
 800876c:	0f1b      	lsrs	r3, r3, #28
 800876e:	f003 030f 	and.w	r3, r3, #15
 8008772:	4a4e      	ldr	r2, [pc, #312]	; (80088ac <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8008774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008778:	ee07 3a90 	vmov	s15, r3
 800877c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	ee07 3a90 	vmov	s15, r3
 8008786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800878a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800878e:	69bb      	ldr	r3, [r7, #24]
 8008790:	ee07 3a90 	vmov	s15, r3
 8008794:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008798:	ed97 6a02 	vldr	s12, [r7, #8]
 800879c:	eddf 5a42 	vldr	s11, [pc, #264]	; 80088a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 80087a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80087b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087b8:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80087ba:	4b39      	ldr	r3, [pc, #228]	; (80088a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80087bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d017      	beq.n	80087f6 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80087c6:	4b36      	ldr	r3, [pc, #216]	; (80088a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80087c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087ca:	0a5b      	lsrs	r3, r3, #9
 80087cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087d0:	ee07 3a90 	vmov	s15, r3
 80087d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80087d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80087dc:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80087e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80087e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087ec:	ee17 2a90 	vmov	r2, s15
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	601a      	str	r2, [r3, #0]
 80087f4:	e002      	b.n	80087fc <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2200      	movs	r2, #0
 80087fa:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80087fc:	4b28      	ldr	r3, [pc, #160]	; (80088a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80087fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008804:	2b00      	cmp	r3, #0
 8008806:	d017      	beq.n	8008838 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008808:	4b25      	ldr	r3, [pc, #148]	; (80088a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800880a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800880c:	0c1b      	lsrs	r3, r3, #16
 800880e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008812:	ee07 3a90 	vmov	s15, r3
 8008816:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800881a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800881e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008822:	edd7 6a07 	vldr	s13, [r7, #28]
 8008826:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800882a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800882e:	ee17 2a90 	vmov	r2, s15
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	605a      	str	r2, [r3, #4]
 8008836:	e002      	b.n	800883e <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800883e:	4b18      	ldr	r3, [pc, #96]	; (80088a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8008840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008842:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008846:	2b00      	cmp	r3, #0
 8008848:	d017      	beq.n	800887a <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800884a:	4b15      	ldr	r3, [pc, #84]	; (80088a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800884c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800884e:	0e1b      	lsrs	r3, r3, #24
 8008850:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008854:	ee07 3a90 	vmov	s15, r3
 8008858:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800885c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008860:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008864:	edd7 6a07 	vldr	s13, [r7, #28]
 8008868:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800886c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008870:	ee17 2a90 	vmov	r2, s15
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008878:	e00c      	b.n	8008894 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	609a      	str	r2, [r3, #8]
}
 8008880:	e008      	b.n	8008894 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2200      	movs	r2, #0
 8008892:	609a      	str	r2, [r3, #8]
}
 8008894:	bf00      	nop
 8008896:	3724      	adds	r7, #36	; 0x24
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr
 80088a0:	46020c00 	.word	0x46020c00
 80088a4:	4b742400 	.word	0x4b742400
 80088a8:	46000000 	.word	0x46000000
 80088ac:	0800d020 	.word	0x0800d020

080088b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b089      	sub	sp, #36	; 0x24
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80088b8:	4bac      	ldr	r3, [pc, #688]	; (8008b6c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80088ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088c0:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80088c2:	4baa      	ldr	r3, [pc, #680]	; (8008b6c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80088c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c6:	f003 0303 	and.w	r3, r3, #3
 80088ca:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80088cc:	4ba7      	ldr	r3, [pc, #668]	; (8008b6c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80088ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d0:	0a1b      	lsrs	r3, r3, #8
 80088d2:	f003 030f 	and.w	r3, r3, #15
 80088d6:	3301      	adds	r3, #1
 80088d8:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 80088da:	4ba4      	ldr	r3, [pc, #656]	; (8008b6c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80088dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088de:	f003 0310 	and.w	r3, r3, #16
 80088e2:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80088e4:	4ba1      	ldr	r3, [pc, #644]	; (8008b6c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80088e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e8:	08db      	lsrs	r3, r3, #3
 80088ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80088ee:	68fa      	ldr	r2, [r7, #12]
 80088f0:	fb02 f303 	mul.w	r3, r2, r3
 80088f4:	ee07 3a90 	vmov	s15, r3
 80088f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088fc:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	2b00      	cmp	r3, #0
 8008904:	f000 8123 	beq.w	8008b4e <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	2b03      	cmp	r3, #3
 800890c:	d062      	beq.n	80089d4 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	2b03      	cmp	r3, #3
 8008912:	f200 8081 	bhi.w	8008a18 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	2b01      	cmp	r3, #1
 800891a:	d024      	beq.n	8008966 <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	2b02      	cmp	r3, #2
 8008920:	d17a      	bne.n	8008a18 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	ee07 3a90 	vmov	s15, r3
 8008928:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800892c:	eddf 6a90 	vldr	s13, [pc, #576]	; 8008b70 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8008930:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008934:	4b8d      	ldr	r3, [pc, #564]	; (8008b6c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8008936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800893c:	ee07 3a90 	vmov	s15, r3
 8008940:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8008944:	ed97 6a02 	vldr	s12, [r7, #8]
 8008948:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8008b74 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800894c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008950:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8008954:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008958:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800895c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008960:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008964:	e08f      	b.n	8008a86 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8008966:	4b81      	ldr	r3, [pc, #516]	; (8008b6c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800896e:	2b00      	cmp	r3, #0
 8008970:	d005      	beq.n	800897e <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 8008972:	4b7e      	ldr	r3, [pc, #504]	; (8008b6c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8008974:	689b      	ldr	r3, [r3, #8]
 8008976:	0f1b      	lsrs	r3, r3, #28
 8008978:	f003 030f 	and.w	r3, r3, #15
 800897c:	e006      	b.n	800898c <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 800897e:	4b7b      	ldr	r3, [pc, #492]	; (8008b6c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8008980:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008984:	041b      	lsls	r3, r3, #16
 8008986:	0f1b      	lsrs	r3, r3, #28
 8008988:	f003 030f 	and.w	r3, r3, #15
 800898c:	4a7a      	ldr	r2, [pc, #488]	; (8008b78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800898e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008992:	ee07 3a90 	vmov	s15, r3
 8008996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	ee07 3a90 	vmov	s15, r3
 80089a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80089a8:	69bb      	ldr	r3, [r7, #24]
 80089aa:	ee07 3a90 	vmov	s15, r3
 80089ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80089b6:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8008b74 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80089ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80089ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089d2:	e058      	b.n	8008a86 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	ee07 3a90 	vmov	s15, r3
 80089da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089de:	eddf 6a64 	vldr	s13, [pc, #400]	; 8008b70 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 80089e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089e6:	4b61      	ldr	r3, [pc, #388]	; (8008b6c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80089e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089ee:	ee07 3a90 	vmov	s15, r3
 80089f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80089f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80089fa:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8008b74 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80089fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a16:	e036      	b.n	8008a86 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8008a18:	4b54      	ldr	r3, [pc, #336]	; (8008b6c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8008a1a:	689b      	ldr	r3, [r3, #8]
 8008a1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d005      	beq.n	8008a30 <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 8008a24:	4b51      	ldr	r3, [pc, #324]	; (8008b6c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	0f1b      	lsrs	r3, r3, #28
 8008a2a:	f003 030f 	and.w	r3, r3, #15
 8008a2e:	e006      	b.n	8008a3e <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 8008a30:	4b4e      	ldr	r3, [pc, #312]	; (8008b6c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8008a32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008a36:	041b      	lsls	r3, r3, #16
 8008a38:	0f1b      	lsrs	r3, r3, #28
 8008a3a:	f003 030f 	and.w	r3, r3, #15
 8008a3e:	4a4e      	ldr	r2, [pc, #312]	; (8008b78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8008a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a44:	ee07 3a90 	vmov	s15, r3
 8008a48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	ee07 3a90 	vmov	s15, r3
 8008a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	ee07 3a90 	vmov	s15, r3
 8008a60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a64:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a68:	eddf 5a42 	vldr	s11, [pc, #264]	; 8008b74 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8008a6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a78:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8008a7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a80:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a84:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8008a86:	4b39      	ldr	r3, [pc, #228]	; (8008b6c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8008a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d017      	beq.n	8008ac2 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008a92:	4b36      	ldr	r3, [pc, #216]	; (8008b6c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8008a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a96:	0a5b      	lsrs	r3, r3, #9
 8008a98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a9c:	ee07 3a90 	vmov	s15, r3
 8008aa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8008aa4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008aa8:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008aac:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ab0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ab4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ab8:	ee17 2a90 	vmov	r2, s15
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	601a      	str	r2, [r3, #0]
 8008ac0:	e002      	b.n	8008ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8008ac8:	4b28      	ldr	r3, [pc, #160]	; (8008b6c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8008aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d017      	beq.n	8008b04 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008ad4:	4b25      	ldr	r3, [pc, #148]	; (8008b6c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8008ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ad8:	0c1b      	lsrs	r3, r3, #16
 8008ada:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ade:	ee07 3a90 	vmov	s15, r3
 8008ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8008ae6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008aea:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008aee:	edd7 6a07 	vldr	s13, [r7, #28]
 8008af2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008af6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008afa:	ee17 2a90 	vmov	r2, s15
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	605a      	str	r2, [r3, #4]
 8008b02:	e002      	b.n	8008b0a <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2200      	movs	r2, #0
 8008b08:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8008b0a:	4b18      	ldr	r3, [pc, #96]	; (8008b6c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8008b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d017      	beq.n	8008b46 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008b16:	4b15      	ldr	r3, [pc, #84]	; (8008b6c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8008b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b1a:	0e1b      	lsrs	r3, r3, #24
 8008b1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b20:	ee07 3a90 	vmov	s15, r3
 8008b24:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8008b28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b2c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008b30:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b3c:	ee17 2a90 	vmov	r2, s15
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008b44:	e00c      	b.n	8008b60 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	609a      	str	r2, [r3, #8]
}
 8008b4c:	e008      	b.n	8008b60 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	609a      	str	r2, [r3, #8]
}
 8008b60:	bf00      	nop
 8008b62:	3724      	adds	r7, #36	; 0x24
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr
 8008b6c:	46020c00 	.word	0x46020c00
 8008b70:	4b742400 	.word	0x4b742400
 8008b74:	46000000 	.word	0x46000000
 8008b78:	0800d020 	.word	0x0800d020

08008b7c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b089      	sub	sp, #36	; 0x24
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8008b84:	4bac      	ldr	r3, [pc, #688]	; (8008e38 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b8c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8008b8e:	4baa      	ldr	r3, [pc, #680]	; (8008e38 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b92:	f003 0303 	and.w	r3, r3, #3
 8008b96:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8008b98:	4ba7      	ldr	r3, [pc, #668]	; (8008e38 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b9c:	0a1b      	lsrs	r3, r3, #8
 8008b9e:	f003 030f 	and.w	r3, r3, #15
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8008ba6:	4ba4      	ldr	r3, [pc, #656]	; (8008e38 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008baa:	f003 0310 	and.w	r3, r3, #16
 8008bae:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8008bb0:	4ba1      	ldr	r3, [pc, #644]	; (8008e38 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008bb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bb4:	08db      	lsrs	r3, r3, #3
 8008bb6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008bba:	68fa      	ldr	r2, [r7, #12]
 8008bbc:	fb02 f303 	mul.w	r3, r2, r3
 8008bc0:	ee07 3a90 	vmov	s15, r3
 8008bc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bc8:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	f000 8123 	beq.w	8008e1a <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	2b03      	cmp	r3, #3
 8008bd8:	d062      	beq.n	8008ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	2b03      	cmp	r3, #3
 8008bde:	f200 8081 	bhi.w	8008ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d024      	beq.n	8008c32 <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	2b02      	cmp	r3, #2
 8008bec:	d17a      	bne.n	8008ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	ee07 3a90 	vmov	s15, r3
 8008bf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bf8:	eddf 6a90 	vldr	s13, [pc, #576]	; 8008e3c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8008bfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c00:	4b8d      	ldr	r3, [pc, #564]	; (8008e38 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c08:	ee07 3a90 	vmov	s15, r3
 8008c0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c10:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c14:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8008e40 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8008c18:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008c1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c24:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008c28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c2c:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8008c30:	e08f      	b.n	8008d52 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008c32:	4b81      	ldr	r3, [pc, #516]	; (8008e38 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008c34:	689b      	ldr	r3, [r3, #8]
 8008c36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d005      	beq.n	8008c4a <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 8008c3e:	4b7e      	ldr	r3, [pc, #504]	; (8008e38 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008c40:	689b      	ldr	r3, [r3, #8]
 8008c42:	0f1b      	lsrs	r3, r3, #28
 8008c44:	f003 030f 	and.w	r3, r3, #15
 8008c48:	e006      	b.n	8008c58 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 8008c4a:	4b7b      	ldr	r3, [pc, #492]	; (8008e38 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008c4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008c50:	041b      	lsls	r3, r3, #16
 8008c52:	0f1b      	lsrs	r3, r3, #28
 8008c54:	f003 030f 	and.w	r3, r3, #15
 8008c58:	4a7a      	ldr	r2, [pc, #488]	; (8008e44 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8008c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c5e:	ee07 3a90 	vmov	s15, r3
 8008c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	ee07 3a90 	vmov	s15, r3
 8008c6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c74:	69bb      	ldr	r3, [r7, #24]
 8008c76:	ee07 3a90 	vmov	s15, r3
 8008c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c82:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8008e40 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8008c86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c92:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c9e:	e058      	b.n	8008d52 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	ee07 3a90 	vmov	s15, r3
 8008ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008caa:	eddf 6a64 	vldr	s13, [pc, #400]	; 8008e3c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8008cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cb2:	4b61      	ldr	r3, [pc, #388]	; (8008e38 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cba:	ee07 3a90 	vmov	s15, r3
 8008cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8008cc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008cc6:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8008e40 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8008cca:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008cce:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8008cd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ce2:	e036      	b.n	8008d52 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008ce4:	4b54      	ldr	r3, [pc, #336]	; (8008e38 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d005      	beq.n	8008cfc <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 8008cf0:	4b51      	ldr	r3, [pc, #324]	; (8008e38 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008cf2:	689b      	ldr	r3, [r3, #8]
 8008cf4:	0f1b      	lsrs	r3, r3, #28
 8008cf6:	f003 030f 	and.w	r3, r3, #15
 8008cfa:	e006      	b.n	8008d0a <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 8008cfc:	4b4e      	ldr	r3, [pc, #312]	; (8008e38 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008cfe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008d02:	041b      	lsls	r3, r3, #16
 8008d04:	0f1b      	lsrs	r3, r3, #28
 8008d06:	f003 030f 	and.w	r3, r3, #15
 8008d0a:	4a4e      	ldr	r2, [pc, #312]	; (8008e44 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8008d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d10:	ee07 3a90 	vmov	s15, r3
 8008d14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	ee07 3a90 	vmov	s15, r3
 8008d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d26:	69bb      	ldr	r3, [r7, #24]
 8008d28:	ee07 3a90 	vmov	s15, r3
 8008d2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d30:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d34:	eddf 5a42 	vldr	s11, [pc, #264]	; 8008e40 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8008d38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d44:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008d48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d4c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d50:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8008d52:	4b39      	ldr	r3, [pc, #228]	; (8008e38 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d017      	beq.n	8008d8e <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008d5e:	4b36      	ldr	r3, [pc, #216]	; (8008e38 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d62:	0a5b      	lsrs	r3, r3, #9
 8008d64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d68:	ee07 3a90 	vmov	s15, r3
 8008d6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8008d70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d74:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008d78:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d84:	ee17 2a90 	vmov	r2, s15
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	601a      	str	r2, [r3, #0]
 8008d8c:	e002      	b.n	8008d94 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2200      	movs	r2, #0
 8008d92:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8008d94:	4b28      	ldr	r3, [pc, #160]	; (8008e38 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d017      	beq.n	8008dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008da0:	4b25      	ldr	r3, [pc, #148]	; (8008e38 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008da4:	0c1b      	lsrs	r3, r3, #16
 8008da6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008daa:	ee07 3a90 	vmov	s15, r3
 8008dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8008db2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008db6:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008dba:	edd7 6a07 	vldr	s13, [r7, #28]
 8008dbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dc6:	ee17 2a90 	vmov	r2, s15
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	605a      	str	r2, [r3, #4]
 8008dce:	e002      	b.n	8008dd6 <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8008dd6:	4b18      	ldr	r3, [pc, #96]	; (8008e38 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d017      	beq.n	8008e12 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008de2:	4b15      	ldr	r3, [pc, #84]	; (8008e38 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008de6:	0e1b      	lsrs	r3, r3, #24
 8008de8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dec:	ee07 3a90 	vmov	s15, r3
 8008df0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8008df4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008df8:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008dfc:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e08:	ee17 2a90 	vmov	r2, s15
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8008e10:	e00c      	b.n	8008e2c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2200      	movs	r2, #0
 8008e16:	609a      	str	r2, [r3, #8]
}
 8008e18:	e008      	b.n	8008e2c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2200      	movs	r2, #0
 8008e24:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	609a      	str	r2, [r3, #8]
}
 8008e2c:	bf00      	nop
 8008e2e:	3724      	adds	r7, #36	; 0x24
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr
 8008e38:	46020c00 	.word	0x46020c00
 8008e3c:	4b742400 	.word	0x4b742400
 8008e40:	46000000 	.word	0x46000000
 8008e44:	0800d020 	.word	0x0800d020

08008e48 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b08e      	sub	sp, #56	; 0x38
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8008e52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e56:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8008e5a:	430b      	orrs	r3, r1
 8008e5c:	d145      	bne.n	8008eea <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8008e5e:	4ba7      	ldr	r3, [pc, #668]	; (80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008e60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008e64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e68:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8008e6a:	4ba4      	ldr	r3, [pc, #656]	; (80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008e6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008e70:	f003 0302 	and.w	r3, r3, #2
 8008e74:	2b02      	cmp	r3, #2
 8008e76:	d108      	bne.n	8008e8a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8008e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e7e:	d104      	bne.n	8008e8a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8008e80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e84:	637b      	str	r3, [r7, #52]	; 0x34
 8008e86:	f001 b8fc 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8008e8a:	4b9c      	ldr	r3, [pc, #624]	; (80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008e8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008e90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e98:	d114      	bne.n	8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8008e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ea0:	d110      	bne.n	8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008ea2:	4b96      	ldr	r3, [pc, #600]	; (80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008ea4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008eac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008eb0:	d103      	bne.n	8008eba <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8008eb2:	23fa      	movs	r3, #250	; 0xfa
 8008eb4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008eb6:	f001 b8e4 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8008eba:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008ebe:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008ec0:	f001 b8df 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8008ec4:	4b8d      	ldr	r3, [pc, #564]	; (80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ecc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ed0:	d107      	bne.n	8008ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8008ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ed8:	d103      	bne.n	8008ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8008eda:	4b89      	ldr	r3, [pc, #548]	; (8009100 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008edc:	637b      	str	r3, [r7, #52]	; 0x34
 8008ede:	f001 b8d0 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	637b      	str	r3, [r7, #52]	; 0x34
 8008ee6:	f001 b8cc 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008eea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008eee:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8008ef2:	430b      	orrs	r3, r1
 8008ef4:	d151      	bne.n	8008f9a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8008ef6:	4b81      	ldr	r3, [pc, #516]	; (80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008ef8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008efc:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8008f00:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8008f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f04:	2b80      	cmp	r3, #128	; 0x80
 8008f06:	d035      	beq.n	8008f74 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8008f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f0a:	2b80      	cmp	r3, #128	; 0x80
 8008f0c:	d841      	bhi.n	8008f92 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f10:	2b60      	cmp	r3, #96	; 0x60
 8008f12:	d02a      	beq.n	8008f6a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8008f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f16:	2b60      	cmp	r3, #96	; 0x60
 8008f18:	d83b      	bhi.n	8008f92 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1c:	2b40      	cmp	r3, #64	; 0x40
 8008f1e:	d009      	beq.n	8008f34 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f22:	2b40      	cmp	r3, #64	; 0x40
 8008f24:	d835      	bhi.n	8008f92 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d00c      	beq.n	8008f46 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8008f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f2e:	2b20      	cmp	r3, #32
 8008f30:	d012      	beq.n	8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8008f32:	e02e      	b.n	8008f92 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f7ff fb53 	bl	80085e4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f40:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008f42:	f001 b89e 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f46:	f107 0318 	add.w	r3, r7, #24
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f7ff fcb0 	bl	80088b0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008f54:	f001 b895 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f58:	f107 030c 	add.w	r3, r7, #12
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f7ff fe0d 	bl	8008b7c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008f66:	f001 b88c 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008f6a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008f6e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008f70:	f001 b887 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008f74:	4b61      	ldr	r3, [pc, #388]	; (80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f80:	d103      	bne.n	8008f8a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8008f82:	4b60      	ldr	r3, [pc, #384]	; (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008f84:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008f86:	f001 b87c 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008f8e:	f001 b878 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 8008f92:	2300      	movs	r3, #0
 8008f94:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008f96:	f001 b874 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8008f9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f9e:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8008fa2:	430b      	orrs	r3, r1
 8008fa4:	d158      	bne.n	8009058 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8008fa6:	4b55      	ldr	r3, [pc, #340]	; (80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008fa8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008fac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008fb0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8008fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fb8:	d03b      	beq.n	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8008fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fc0:	d846      	bhi.n	8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8008fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008fc8:	d02e      	beq.n	8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8008fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008fd0:	d83e      	bhi.n	8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8008fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fd8:	d00b      	beq.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8008fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fe0:	d836      	bhi.n	8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8008fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d00d      	beq.n	8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8008fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fee:	d012      	beq.n	8009016 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8008ff0:	e02e      	b.n	8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7ff faf4 	bl	80085e4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ffe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009000:	f001 b83f 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009004:	f107 0318 	add.w	r3, r7, #24
 8009008:	4618      	mov	r0, r3
 800900a:	f7ff fc51 	bl	80088b0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800900e:	69bb      	ldr	r3, [r7, #24]
 8009010:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009012:	f001 b836 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009016:	f107 030c 	add.w	r3, r7, #12
 800901a:	4618      	mov	r0, r3
 800901c:	f7ff fdae 	bl	8008b7c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009024:	f001 b82d 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009028:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800902c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800902e:	f001 b828 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009032:	4b32      	ldr	r3, [pc, #200]	; (80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800903a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800903e:	d103      	bne.n	8009048 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8009040:	4b30      	ldr	r3, [pc, #192]	; (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009042:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009044:	f001 b81d 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8009048:	2300      	movs	r3, #0
 800904a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800904c:	f001 b819 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8009050:	2300      	movs	r3, #0
 8009052:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009054:	f001 b815 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8009058:	e9d7 2300 	ldrd	r2, r3, [r7]
 800905c:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8009060:	430b      	orrs	r3, r1
 8009062:	d126      	bne.n	80090b2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8009064:	4b25      	ldr	r3, [pc, #148]	; (80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009066:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800906a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800906e:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8009070:	4b22      	ldr	r3, [pc, #136]	; (80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009078:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800907c:	d106      	bne.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800907e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009080:	2b00      	cmp	r3, #0
 8009082:	d103      	bne.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8009084:	4b1f      	ldr	r3, [pc, #124]	; (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009086:	637b      	str	r3, [r7, #52]	; 0x34
 8009088:	f000 bffb 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800908c:	4b1b      	ldr	r3, [pc, #108]	; (80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009098:	d107      	bne.n	80090aa <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800909a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800909c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090a0:	d103      	bne.n	80090aa <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 80090a2:	4b19      	ldr	r3, [pc, #100]	; (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80090a4:	637b      	str	r3, [r7, #52]	; 0x34
 80090a6:	f000 bfec 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 80090aa:	2300      	movs	r3, #0
 80090ac:	637b      	str	r3, [r7, #52]	; 0x34
 80090ae:	f000 bfe8 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 80090b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090b6:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 80090ba:	430b      	orrs	r3, r1
 80090bc:	d164      	bne.n	8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80090be:	4b0f      	ldr	r3, [pc, #60]	; (80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80090c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80090c4:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80090c8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80090ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090cc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80090d0:	d03d      	beq.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80090d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80090d8:	d852      	bhi.n	8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80090da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090e0:	d014      	beq.n	800910c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 80090e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090e8:	d84a      	bhi.n	8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80090ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d01f      	beq.n	8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 80090f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80090f6:	d012      	beq.n	800911e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80090f8:	e042      	b.n	8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80090fa:	bf00      	nop
 80090fc:	46020c00 	.word	0x46020c00
 8009100:	0007a120 	.word	0x0007a120
 8009104:	00f42400 	.word	0x00f42400
 8009108:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800910c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009110:	4618      	mov	r0, r3
 8009112:	f7ff fa67 	bl	80085e4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8009116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009118:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800911a:	f000 bfb2 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800911e:	f107 0318 	add.w	r3, r7, #24
 8009122:	4618      	mov	r0, r3
 8009124:	f7ff fbc4 	bl	80088b0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8009128:	69fb      	ldr	r3, [r7, #28]
 800912a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800912c:	f000 bfa9 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8009130:	4bab      	ldr	r3, [pc, #684]	; (80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009138:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800913c:	d103      	bne.n	8009146 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800913e:	4ba9      	ldr	r3, [pc, #676]	; (80093e4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009140:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009142:	f000 bf9e 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8009146:	2300      	movs	r3, #0
 8009148:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800914a:	f000 bf9a 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800914e:	4ba4      	ldr	r3, [pc, #656]	; (80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8009150:	689b      	ldr	r3, [r3, #8]
 8009152:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009156:	2b00      	cmp	r3, #0
 8009158:	d005      	beq.n	8009166 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800915a:	4ba1      	ldr	r3, [pc, #644]	; (80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800915c:	689b      	ldr	r3, [r3, #8]
 800915e:	0e1b      	lsrs	r3, r3, #24
 8009160:	f003 030f 	and.w	r3, r3, #15
 8009164:	e006      	b.n	8009174 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 8009166:	4b9e      	ldr	r3, [pc, #632]	; (80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8009168:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800916c:	041b      	lsls	r3, r3, #16
 800916e:	0e1b      	lsrs	r3, r3, #24
 8009170:	f003 030f 	and.w	r3, r3, #15
 8009174:	4a9c      	ldr	r2, [pc, #624]	; (80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8009176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800917a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800917c:	f000 bf81 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8009180:	2300      	movs	r3, #0
 8009182:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009184:	f000 bf7d 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009188:	e9d7 2300 	ldrd	r2, r3, [r7]
 800918c:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8009190:	430b      	orrs	r3, r1
 8009192:	d175      	bne.n	8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009194:	4b92      	ldr	r3, [pc, #584]	; (80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8009196:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800919a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800919e:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80091a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d15b      	bne.n	800925e <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80091a6:	4b8e      	ldr	r3, [pc, #568]	; (80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80091a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80091ac:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80091b0:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 80091b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80091b8:	d034      	beq.n	8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80091ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091bc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80091c0:	d849      	bhi.n	8009256 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 80091c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091c8:	d00b      	beq.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 80091ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091d0:	d841      	bhi.n	8009256 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 80091d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d016      	beq.n	8009206 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80091d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80091de:	d009      	beq.n	80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 80091e0:	e039      	b.n	8009256 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091e6:	4618      	mov	r0, r3
 80091e8:	f7ff f9fc 	bl	80085e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80091ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ee:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80091f0:	f000 bf47 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091f4:	f107 0318 	add.w	r3, r7, #24
 80091f8:	4618      	mov	r0, r3
 80091fa:	f7ff fb59 	bl	80088b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80091fe:	69fb      	ldr	r3, [r7, #28]
 8009200:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8009202:	f000 bf3e 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8009206:	4b76      	ldr	r3, [pc, #472]	; (80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800920e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009212:	d103      	bne.n	800921c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 8009214:	4b73      	ldr	r3, [pc, #460]	; (80093e4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009216:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8009218:	f000 bf33 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 800921c:	2300      	movs	r3, #0
 800921e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8009220:	f000 bf2f 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009224:	4b6e      	ldr	r3, [pc, #440]	; (80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8009226:	689b      	ldr	r3, [r3, #8]
 8009228:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800922c:	2b00      	cmp	r3, #0
 800922e:	d005      	beq.n	800923c <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 8009230:	4b6b      	ldr	r3, [pc, #428]	; (80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8009232:	689b      	ldr	r3, [r3, #8]
 8009234:	0e1b      	lsrs	r3, r3, #24
 8009236:	f003 030f 	and.w	r3, r3, #15
 800923a:	e006      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 800923c:	4b68      	ldr	r3, [pc, #416]	; (80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800923e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009242:	041b      	lsls	r3, r3, #16
 8009244:	0e1b      	lsrs	r3, r3, #24
 8009246:	f003 030f 	and.w	r3, r3, #15
 800924a:	4a67      	ldr	r2, [pc, #412]	; (80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800924c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009250:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8009252:	f000 bf16 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 8009256:	2300      	movs	r3, #0
 8009258:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800925a:	f000 bf12 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800925e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009260:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009264:	d108      	bne.n	8009278 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800926a:	4618      	mov	r0, r3
 800926c:	f7ff f9ba 	bl	80085e4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8009270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009272:	637b      	str	r3, [r7, #52]	; 0x34
 8009274:	f000 bf05 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 8009278:	2300      	movs	r3, #0
 800927a:	637b      	str	r3, [r7, #52]	; 0x34
 800927c:	f000 bf01 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8009280:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009284:	1e51      	subs	r1, r2, #1
 8009286:	430b      	orrs	r3, r1
 8009288:	d136      	bne.n	80092f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800928a:	4b55      	ldr	r3, [pc, #340]	; (80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800928c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009290:	f003 0303 	and.w	r3, r3, #3
 8009294:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8009296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009298:	2b00      	cmp	r3, #0
 800929a:	d104      	bne.n	80092a6 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800929c:	f7fe fb34 	bl	8007908 <HAL_RCC_GetPCLK2Freq>
 80092a0:	6378      	str	r0, [r7, #52]	; 0x34
 80092a2:	f000 beee 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80092a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d104      	bne.n	80092b6 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80092ac:	f7fe f9f6 	bl	800769c <HAL_RCC_GetSysClockFreq>
 80092b0:	6378      	str	r0, [r7, #52]	; 0x34
 80092b2:	f000 bee6 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80092b6:	4b4a      	ldr	r3, [pc, #296]	; (80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092c2:	d106      	bne.n	80092d2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80092c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c6:	2b02      	cmp	r3, #2
 80092c8:	d103      	bne.n	80092d2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 80092ca:	4b48      	ldr	r3, [pc, #288]	; (80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80092cc:	637b      	str	r3, [r7, #52]	; 0x34
 80092ce:	f000 bed8 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80092d2:	4b43      	ldr	r3, [pc, #268]	; (80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80092d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80092d8:	f003 0302 	and.w	r3, r3, #2
 80092dc:	2b02      	cmp	r3, #2
 80092de:	d107      	bne.n	80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 80092e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e2:	2b03      	cmp	r3, #3
 80092e4:	d104      	bne.n	80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 80092e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092ea:	637b      	str	r3, [r7, #52]	; 0x34
 80092ec:	f000 bec9 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80092f0:	2300      	movs	r3, #0
 80092f2:	637b      	str	r3, [r7, #52]	; 0x34
 80092f4:	f000 bec5 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 80092f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092fc:	1e91      	subs	r1, r2, #2
 80092fe:	430b      	orrs	r3, r1
 8009300:	d136      	bne.n	8009370 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8009302:	4b37      	ldr	r3, [pc, #220]	; (80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8009304:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009308:	f003 030c 	and.w	r3, r3, #12
 800930c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800930e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009310:	2b00      	cmp	r3, #0
 8009312:	d104      	bne.n	800931e <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009314:	f7fe fae4 	bl	80078e0 <HAL_RCC_GetPCLK1Freq>
 8009318:	6378      	str	r0, [r7, #52]	; 0x34
 800931a:	f000 beb2 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800931e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009320:	2b04      	cmp	r3, #4
 8009322:	d104      	bne.n	800932e <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009324:	f7fe f9ba 	bl	800769c <HAL_RCC_GetSysClockFreq>
 8009328:	6378      	str	r0, [r7, #52]	; 0x34
 800932a:	f000 beaa 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800932e:	4b2c      	ldr	r3, [pc, #176]	; (80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800933a:	d106      	bne.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 800933c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800933e:	2b08      	cmp	r3, #8
 8009340:	d103      	bne.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 8009342:	4b2a      	ldr	r3, [pc, #168]	; (80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8009344:	637b      	str	r3, [r7, #52]	; 0x34
 8009346:	f000 be9c 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800934a:	4b25      	ldr	r3, [pc, #148]	; (80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800934c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009350:	f003 0302 	and.w	r3, r3, #2
 8009354:	2b02      	cmp	r3, #2
 8009356:	d107      	bne.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 8009358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800935a:	2b0c      	cmp	r3, #12
 800935c:	d104      	bne.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 800935e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009362:	637b      	str	r3, [r7, #52]	; 0x34
 8009364:	f000 be8d 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8009368:	2300      	movs	r3, #0
 800936a:	637b      	str	r3, [r7, #52]	; 0x34
 800936c:	f000 be89 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8009370:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009374:	1f11      	subs	r1, r2, #4
 8009376:	430b      	orrs	r3, r1
 8009378:	d13e      	bne.n	80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800937a:	4b19      	ldr	r3, [pc, #100]	; (80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800937c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009380:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009384:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8009386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009388:	2b00      	cmp	r3, #0
 800938a:	d104      	bne.n	8009396 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800938c:	f7fe faa8 	bl	80078e0 <HAL_RCC_GetPCLK1Freq>
 8009390:	6378      	str	r0, [r7, #52]	; 0x34
 8009392:	f000 be76 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8009396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009398:	2b10      	cmp	r3, #16
 800939a:	d104      	bne.n	80093a6 <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800939c:	f7fe f97e 	bl	800769c <HAL_RCC_GetSysClockFreq>
 80093a0:	6378      	str	r0, [r7, #52]	; 0x34
 80093a2:	f000 be6e 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80093a6:	4b0e      	ldr	r3, [pc, #56]	; (80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80093ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093b2:	d106      	bne.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 80093b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b6:	2b20      	cmp	r3, #32
 80093b8:	d103      	bne.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 80093ba:	4b0c      	ldr	r3, [pc, #48]	; (80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80093bc:	637b      	str	r3, [r7, #52]	; 0x34
 80093be:	f000 be60 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80093c2:	4b07      	ldr	r3, [pc, #28]	; (80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80093c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80093c8:	f003 0302 	and.w	r3, r3, #2
 80093cc:	2b02      	cmp	r3, #2
 80093ce:	d10f      	bne.n	80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80093d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d2:	2b30      	cmp	r3, #48	; 0x30
 80093d4:	d10c      	bne.n	80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 80093d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093da:	637b      	str	r3, [r7, #52]	; 0x34
 80093dc:	f000 be51 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 80093e0:	46020c00 	.word	0x46020c00
 80093e4:	02dc6c00 	.word	0x02dc6c00
 80093e8:	0800d020 	.word	0x0800d020
 80093ec:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80093f0:	2300      	movs	r3, #0
 80093f2:	637b      	str	r3, [r7, #52]	; 0x34
 80093f4:	f000 be45 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 80093f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093fc:	f1a2 0108 	sub.w	r1, r2, #8
 8009400:	430b      	orrs	r3, r1
 8009402:	d136      	bne.n	8009472 <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8009404:	4b9f      	ldr	r3, [pc, #636]	; (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800940a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800940e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8009410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009412:	2b00      	cmp	r3, #0
 8009414:	d104      	bne.n	8009420 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009416:	f7fe fa63 	bl	80078e0 <HAL_RCC_GetPCLK1Freq>
 800941a:	6378      	str	r0, [r7, #52]	; 0x34
 800941c:	f000 be31 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8009420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009422:	2b40      	cmp	r3, #64	; 0x40
 8009424:	d104      	bne.n	8009430 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009426:	f7fe f939 	bl	800769c <HAL_RCC_GetSysClockFreq>
 800942a:	6378      	str	r0, [r7, #52]	; 0x34
 800942c:	f000 be29 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8009430:	4b94      	ldr	r3, [pc, #592]	; (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800943c:	d106      	bne.n	800944c <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 800943e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009440:	2b80      	cmp	r3, #128	; 0x80
 8009442:	d103      	bne.n	800944c <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 8009444:	4b90      	ldr	r3, [pc, #576]	; (8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009446:	637b      	str	r3, [r7, #52]	; 0x34
 8009448:	f000 be1b 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800944c:	4b8d      	ldr	r3, [pc, #564]	; (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800944e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009452:	f003 0302 	and.w	r3, r3, #2
 8009456:	2b02      	cmp	r3, #2
 8009458:	d107      	bne.n	800946a <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 800945a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800945c:	2bc0      	cmp	r3, #192	; 0xc0
 800945e:	d104      	bne.n	800946a <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 8009460:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009464:	637b      	str	r3, [r7, #52]	; 0x34
 8009466:	f000 be0c 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800946a:	2300      	movs	r3, #0
 800946c:	637b      	str	r3, [r7, #52]	; 0x34
 800946e:	f000 be08 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8009472:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009476:	f1a2 0110 	sub.w	r1, r2, #16
 800947a:	430b      	orrs	r3, r1
 800947c:	d139      	bne.n	80094f2 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800947e:	4b81      	ldr	r3, [pc, #516]	; (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009480:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009484:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009488:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800948a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800948c:	2b00      	cmp	r3, #0
 800948e:	d104      	bne.n	800949a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009490:	f7fe fa26 	bl	80078e0 <HAL_RCC_GetPCLK1Freq>
 8009494:	6378      	str	r0, [r7, #52]	; 0x34
 8009496:	f000 bdf4 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800949a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800949c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094a0:	d104      	bne.n	80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80094a2:	f7fe f8fb 	bl	800769c <HAL_RCC_GetSysClockFreq>
 80094a6:	6378      	str	r0, [r7, #52]	; 0x34
 80094a8:	f000 bdeb 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80094ac:	4b75      	ldr	r3, [pc, #468]	; (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094b8:	d107      	bne.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 80094ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094c0:	d103      	bne.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 80094c2:	4b71      	ldr	r3, [pc, #452]	; (8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80094c4:	637b      	str	r3, [r7, #52]	; 0x34
 80094c6:	f000 bddc 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80094ca:	4b6e      	ldr	r3, [pc, #440]	; (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80094cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80094d0:	f003 0302 	and.w	r3, r3, #2
 80094d4:	2b02      	cmp	r3, #2
 80094d6:	d108      	bne.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 80094d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80094de:	d104      	bne.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 80094e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094e4:	637b      	str	r3, [r7, #52]	; 0x34
 80094e6:	f000 bdcc 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80094ea:	2300      	movs	r3, #0
 80094ec:	637b      	str	r3, [r7, #52]	; 0x34
 80094ee:	f000 bdc8 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80094f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094f6:	f1a2 0120 	sub.w	r1, r2, #32
 80094fa:	430b      	orrs	r3, r1
 80094fc:	d158      	bne.n	80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80094fe:	4b61      	ldr	r3, [pc, #388]	; (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009500:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009504:	f003 0307 	and.w	r3, r3, #7
 8009508:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800950a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800950c:	2b00      	cmp	r3, #0
 800950e:	d104      	bne.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8009510:	f7fe fa0e 	bl	8007930 <HAL_RCC_GetPCLK3Freq>
 8009514:	6378      	str	r0, [r7, #52]	; 0x34
 8009516:	f000 bdb4 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800951a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800951c:	2b01      	cmp	r3, #1
 800951e:	d104      	bne.n	800952a <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009520:	f7fe f8bc 	bl	800769c <HAL_RCC_GetSysClockFreq>
 8009524:	6378      	str	r0, [r7, #52]	; 0x34
 8009526:	f000 bdac 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800952a:	4b56      	ldr	r3, [pc, #344]	; (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009532:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009536:	d106      	bne.n	8009546 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 8009538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800953a:	2b02      	cmp	r3, #2
 800953c:	d103      	bne.n	8009546 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 800953e:	4b52      	ldr	r3, [pc, #328]	; (8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009540:	637b      	str	r3, [r7, #52]	; 0x34
 8009542:	f000 bd9e 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8009546:	4b4f      	ldr	r3, [pc, #316]	; (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009548:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800954c:	f003 0302 	and.w	r3, r3, #2
 8009550:	2b02      	cmp	r3, #2
 8009552:	d107      	bne.n	8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 8009554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009556:	2b03      	cmp	r3, #3
 8009558:	d104      	bne.n	8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 800955a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800955e:	637b      	str	r3, [r7, #52]	; 0x34
 8009560:	f000 bd8f 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8009564:	4b47      	ldr	r3, [pc, #284]	; (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f003 0320 	and.w	r3, r3, #32
 800956c:	2b20      	cmp	r3, #32
 800956e:	d11b      	bne.n	80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8009570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009572:	2b04      	cmp	r3, #4
 8009574:	d118      	bne.n	80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009576:	4b43      	ldr	r3, [pc, #268]	; (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009578:	689b      	ldr	r3, [r3, #8]
 800957a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800957e:	2b00      	cmp	r3, #0
 8009580:	d005      	beq.n	800958e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8009582:	4b40      	ldr	r3, [pc, #256]	; (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009584:	689b      	ldr	r3, [r3, #8]
 8009586:	0e1b      	lsrs	r3, r3, #24
 8009588:	f003 030f 	and.w	r3, r3, #15
 800958c:	e006      	b.n	800959c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 800958e:	4b3d      	ldr	r3, [pc, #244]	; (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009590:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009594:	041b      	lsls	r3, r3, #16
 8009596:	0e1b      	lsrs	r3, r3, #24
 8009598:	f003 030f 	and.w	r3, r3, #15
 800959c:	4a3b      	ldr	r2, [pc, #236]	; (800968c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800959e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095a2:	637b      	str	r3, [r7, #52]	; 0x34
 80095a4:	f000 bd6d 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80095a8:	2300      	movs	r3, #0
 80095aa:	637b      	str	r3, [r7, #52]	; 0x34
 80095ac:	f000 bd69 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80095b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095b4:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80095b8:	430b      	orrs	r3, r1
 80095ba:	d169      	bne.n	8009690 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80095bc:	4b31      	ldr	r3, [pc, #196]	; (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80095be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80095c2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80095c6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80095c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095ce:	d104      	bne.n	80095da <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80095d0:	f7fe f864 	bl	800769c <HAL_RCC_GetSysClockFreq>
 80095d4:	6378      	str	r0, [r7, #52]	; 0x34
 80095d6:	f000 bd54 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80095da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095e0:	d108      	bne.n	80095f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095e2:	f107 0318 	add.w	r3, r7, #24
 80095e6:	4618      	mov	r0, r3
 80095e8:	f7ff f962 	bl	80088b0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80095ec:	6a3b      	ldr	r3, [r7, #32]
 80095ee:	637b      	str	r3, [r7, #52]	; 0x34
 80095f0:	f000 bd47 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80095f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d104      	bne.n	8009604 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80095fa:	f7fe f957 	bl	80078ac <HAL_RCC_GetHCLKFreq>
 80095fe:	6378      	str	r0, [r7, #52]	; 0x34
 8009600:	f000 bd3f 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8009604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009606:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800960a:	d118      	bne.n	800963e <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 800960c:	4b1d      	ldr	r3, [pc, #116]	; (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800960e:	689b      	ldr	r3, [r3, #8]
 8009610:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009614:	2b00      	cmp	r3, #0
 8009616:	d005      	beq.n	8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8009618:	4b1a      	ldr	r3, [pc, #104]	; (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800961a:	689b      	ldr	r3, [r3, #8]
 800961c:	0f1b      	lsrs	r3, r3, #28
 800961e:	f003 030f 	and.w	r3, r3, #15
 8009622:	e006      	b.n	8009632 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8009624:	4b17      	ldr	r3, [pc, #92]	; (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009626:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800962a:	041b      	lsls	r3, r3, #16
 800962c:	0f1b      	lsrs	r3, r3, #28
 800962e:	f003 030f 	and.w	r3, r3, #15
 8009632:	4a16      	ldr	r2, [pc, #88]	; (800968c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8009634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009638:	637b      	str	r3, [r7, #52]	; 0x34
 800963a:	f000 bd22 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800963e:	4b11      	ldr	r3, [pc, #68]	; (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009646:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800964a:	d107      	bne.n	800965c <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 800964c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800964e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009652:	d103      	bne.n	800965c <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 8009654:	4b0c      	ldr	r3, [pc, #48]	; (8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009656:	637b      	str	r3, [r7, #52]	; 0x34
 8009658:	f000 bd13 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800965c:	4b09      	ldr	r3, [pc, #36]	; (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009668:	d107      	bne.n	800967a <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 800966a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800966c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009670:	d103      	bne.n	800967a <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 8009672:	4b05      	ldr	r3, [pc, #20]	; (8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009674:	637b      	str	r3, [r7, #52]	; 0x34
 8009676:	f000 bd04 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800967a:	2300      	movs	r3, #0
 800967c:	637b      	str	r3, [r7, #52]	; 0x34
 800967e:	f000 bd00 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8009682:	bf00      	nop
 8009684:	46020c00 	.word	0x46020c00
 8009688:	00f42400 	.word	0x00f42400
 800968c:	0800d020 	.word	0x0800d020
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8009690:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009694:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8009698:	430b      	orrs	r3, r1
 800969a:	d14e      	bne.n	800973a <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800969c:	4ba8      	ldr	r3, [pc, #672]	; (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800969e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80096a2:	f003 0307 	and.w	r3, r3, #7
 80096a6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80096a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096aa:	2b04      	cmp	r3, #4
 80096ac:	d841      	bhi.n	8009732 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80096ae:	a201      	add	r2, pc, #4	; (adr r2, 80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 80096b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b4:	080096ed 	.word	0x080096ed
 80096b8:	080096c9 	.word	0x080096c9
 80096bc:	080096db 	.word	0x080096db
 80096c0:	080096f7 	.word	0x080096f7
 80096c4:	08009701 	.word	0x08009701
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80096c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096cc:	4618      	mov	r0, r3
 80096ce:	f7fe ff89 	bl	80085e4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80096d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80096d6:	f000 bcd4 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096da:	f107 030c 	add.w	r3, r7, #12
 80096de:	4618      	mov	r0, r3
 80096e0:	f7ff fa4c 	bl	8008b7c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80096e8:	f000 bccb 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80096ec:	f7fe f8de 	bl	80078ac <HAL_RCC_GetHCLKFreq>
 80096f0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80096f2:	f000 bcc6 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80096f6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80096fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80096fc:	f000 bcc1 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009700:	4b8f      	ldr	r3, [pc, #572]	; (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009702:	689b      	ldr	r3, [r3, #8]
 8009704:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009708:	2b00      	cmp	r3, #0
 800970a:	d005      	beq.n	8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 800970c:	4b8c      	ldr	r3, [pc, #560]	; (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800970e:	689b      	ldr	r3, [r3, #8]
 8009710:	0e1b      	lsrs	r3, r3, #24
 8009712:	f003 030f 	and.w	r3, r3, #15
 8009716:	e006      	b.n	8009726 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8009718:	4b89      	ldr	r3, [pc, #548]	; (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800971a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800971e:	041b      	lsls	r3, r3, #16
 8009720:	0e1b      	lsrs	r3, r3, #24
 8009722:	f003 030f 	and.w	r3, r3, #15
 8009726:	4a87      	ldr	r2, [pc, #540]	; (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8009728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800972c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800972e:	f000 bca8 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8009732:	2300      	movs	r3, #0
 8009734:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009736:	f000 bca4 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800973a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800973e:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8009742:	430b      	orrs	r3, r1
 8009744:	d15d      	bne.n	8009802 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8009746:	4b7e      	ldr	r3, [pc, #504]	; (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009748:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800974c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8009750:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8009752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009754:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009758:	d036      	beq.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800975a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800975c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009760:	d84b      	bhi.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8009762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009764:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009768:	d029      	beq.n	80097be <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 800976a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800976c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009770:	d843      	bhi.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8009772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009774:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009778:	d013      	beq.n	80097a2 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800977a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009780:	d83b      	bhi.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8009782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009784:	2b00      	cmp	r3, #0
 8009786:	d015      	beq.n	80097b4 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 8009788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800978a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800978e:	d134      	bne.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009790:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009794:	4618      	mov	r0, r3
 8009796:	f7fe ff25 	bl	80085e4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800979a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800979c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800979e:	f000 bc70 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097a2:	f107 030c 	add.w	r3, r7, #12
 80097a6:	4618      	mov	r0, r3
 80097a8:	f7ff f9e8 	bl	8008b7c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80097b0:	f000 bc67 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80097b4:	f7fe f87a 	bl	80078ac <HAL_RCC_GetHCLKFreq>
 80097b8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80097ba:	f000 bc62 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80097be:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80097c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80097c4:	f000 bc5d 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80097c8:	4b5d      	ldr	r3, [pc, #372]	; (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80097ca:	689b      	ldr	r3, [r3, #8]
 80097cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d005      	beq.n	80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 80097d4:	4b5a      	ldr	r3, [pc, #360]	; (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	0e1b      	lsrs	r3, r3, #24
 80097da:	f003 030f 	and.w	r3, r3, #15
 80097de:	e006      	b.n	80097ee <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 80097e0:	4b57      	ldr	r3, [pc, #348]	; (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80097e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80097e6:	041b      	lsls	r3, r3, #16
 80097e8:	0e1b      	lsrs	r3, r3, #24
 80097ea:	f003 030f 	and.w	r3, r3, #15
 80097ee:	4a55      	ldr	r2, [pc, #340]	; (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80097f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80097f6:	f000 bc44 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80097fa:	2300      	movs	r3, #0
 80097fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80097fe:	f000 bc40 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8009802:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009806:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800980a:	430b      	orrs	r3, r1
 800980c:	d14a      	bne.n	80098a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800980e:	4b4c      	ldr	r3, [pc, #304]	; (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009814:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009818:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800981a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800981c:	2b00      	cmp	r3, #0
 800981e:	d104      	bne.n	800982a <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009820:	f7fe f85e 	bl	80078e0 <HAL_RCC_GetPCLK1Freq>
 8009824:	6378      	str	r0, [r7, #52]	; 0x34
 8009826:	f000 bc2c 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800982a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800982c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009830:	d104      	bne.n	800983c <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009832:	f7fd ff33 	bl	800769c <HAL_RCC_GetSysClockFreq>
 8009836:	6378      	str	r0, [r7, #52]	; 0x34
 8009838:	f000 bc23 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800983c:	4b40      	ldr	r3, [pc, #256]	; (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009844:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009848:	d107      	bne.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 800984a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800984c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009850:	d103      	bne.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 8009852:	4b3d      	ldr	r3, [pc, #244]	; (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009854:	637b      	str	r3, [r7, #52]	; 0x34
 8009856:	f000 bc14 	b.w	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800985a:	4b39      	ldr	r3, [pc, #228]	; (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f003 0320 	and.w	r3, r3, #32
 8009862:	2b20      	cmp	r3, #32
 8009864:	d11b      	bne.n	800989e <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 8009866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009868:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800986c:	d117      	bne.n	800989e <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800986e:	4b34      	ldr	r3, [pc, #208]	; (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009870:	689b      	ldr	r3, [r3, #8]
 8009872:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009876:	2b00      	cmp	r3, #0
 8009878:	d005      	beq.n	8009886 <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 800987a:	4b31      	ldr	r3, [pc, #196]	; (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800987c:	689b      	ldr	r3, [r3, #8]
 800987e:	0e1b      	lsrs	r3, r3, #24
 8009880:	f003 030f 	and.w	r3, r3, #15
 8009884:	e006      	b.n	8009894 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8009886:	4b2e      	ldr	r3, [pc, #184]	; (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009888:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800988c:	041b      	lsls	r3, r3, #16
 800988e:	0e1b      	lsrs	r3, r3, #24
 8009890:	f003 030f 	and.w	r3, r3, #15
 8009894:	4a2b      	ldr	r2, [pc, #172]	; (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8009896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800989a:	637b      	str	r3, [r7, #52]	; 0x34
 800989c:	e3f1      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800989e:	2300      	movs	r3, #0
 80098a0:	637b      	str	r3, [r7, #52]	; 0x34
 80098a2:	e3ee      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80098a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098a8:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 80098ac:	430b      	orrs	r3, r1
 80098ae:	d14d      	bne.n	800994c <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80098b0:	4b23      	ldr	r3, [pc, #140]	; (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80098b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80098b6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80098ba:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80098bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d103      	bne.n	80098ca <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80098c2:	f7fe f80d 	bl	80078e0 <HAL_RCC_GetPCLK1Freq>
 80098c6:	6378      	str	r0, [r7, #52]	; 0x34
 80098c8:	e3db      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80098ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098d0:	d103      	bne.n	80098da <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80098d2:	f7fd fee3 	bl	800769c <HAL_RCC_GetSysClockFreq>
 80098d6:	6378      	str	r0, [r7, #52]	; 0x34
 80098d8:	e3d3      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80098da:	4b19      	ldr	r3, [pc, #100]	; (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80098e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098e6:	d106      	bne.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 80098e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098ee:	d102      	bne.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 80098f0:	4b15      	ldr	r3, [pc, #84]	; (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80098f2:	637b      	str	r3, [r7, #52]	; 0x34
 80098f4:	e3c5      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80098f6:	4b12      	ldr	r3, [pc, #72]	; (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f003 0320 	and.w	r3, r3, #32
 80098fe:	2b20      	cmp	r3, #32
 8009900:	d11b      	bne.n	800993a <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8009902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009904:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009908:	d117      	bne.n	800993a <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800990a:	4b0d      	ldr	r3, [pc, #52]	; (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800990c:	689b      	ldr	r3, [r3, #8]
 800990e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009912:	2b00      	cmp	r3, #0
 8009914:	d005      	beq.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 8009916:	4b0a      	ldr	r3, [pc, #40]	; (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009918:	689b      	ldr	r3, [r3, #8]
 800991a:	0e1b      	lsrs	r3, r3, #24
 800991c:	f003 030f 	and.w	r3, r3, #15
 8009920:	e006      	b.n	8009930 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8009922:	4b07      	ldr	r3, [pc, #28]	; (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009924:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009928:	041b      	lsls	r3, r3, #16
 800992a:	0e1b      	lsrs	r3, r3, #24
 800992c:	f003 030f 	and.w	r3, r3, #15
 8009930:	4a04      	ldr	r2, [pc, #16]	; (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8009932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009936:	637b      	str	r3, [r7, #52]	; 0x34
 8009938:	e3a3      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800993a:	2300      	movs	r3, #0
 800993c:	637b      	str	r3, [r7, #52]	; 0x34
 800993e:	e3a0      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8009940:	46020c00 	.word	0x46020c00
 8009944:	0800d020 	.word	0x0800d020
 8009948:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800994c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009950:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8009954:	430b      	orrs	r3, r1
 8009956:	d148      	bne.n	80099ea <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8009958:	4b9d      	ldr	r3, [pc, #628]	; (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800995a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800995e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009962:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8009964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009966:	2bc0      	cmp	r3, #192	; 0xc0
 8009968:	d024      	beq.n	80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 800996a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800996c:	2bc0      	cmp	r3, #192	; 0xc0
 800996e:	d839      	bhi.n	80099e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8009970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009972:	2b80      	cmp	r3, #128	; 0x80
 8009974:	d00d      	beq.n	8009992 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8009976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009978:	2b80      	cmp	r3, #128	; 0x80
 800997a:	d833      	bhi.n	80099e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 800997c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800997e:	2b00      	cmp	r3, #0
 8009980:	d003      	beq.n	800998a <HAL_RCCEx_GetPeriphCLKFreq+0xb42>
 8009982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009984:	2b40      	cmp	r3, #64	; 0x40
 8009986:	d011      	beq.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8009988:	e02c      	b.n	80099e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800998a:	f7fd ffd1 	bl	8007930 <HAL_RCC_GetPCLK3Freq>
 800998e:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8009990:	e377      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009992:	4b8f      	ldr	r3, [pc, #572]	; (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800999a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800999e:	d102      	bne.n	80099a6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
        {
          frequency = HSI_VALUE;
 80099a0:	4b8c      	ldr	r3, [pc, #560]	; (8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80099a2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80099a4:	e36d      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80099a6:	2300      	movs	r3, #0
 80099a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80099aa:	e36a      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80099ac:	f7fd fe76 	bl	800769c <HAL_RCC_GetSysClockFreq>
 80099b0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80099b2:	e366      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 80099b4:	4b86      	ldr	r3, [pc, #536]	; (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d005      	beq.n	80099cc <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 80099c0:	4b83      	ldr	r3, [pc, #524]	; (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80099c2:	689b      	ldr	r3, [r3, #8]
 80099c4:	0f1b      	lsrs	r3, r3, #28
 80099c6:	f003 030f 	and.w	r3, r3, #15
 80099ca:	e006      	b.n	80099da <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 80099cc:	4b80      	ldr	r3, [pc, #512]	; (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80099ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80099d2:	041b      	lsls	r3, r3, #16
 80099d4:	0f1b      	lsrs	r3, r3, #28
 80099d6:	f003 030f 	and.w	r3, r3, #15
 80099da:	4a7f      	ldr	r2, [pc, #508]	; (8009bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 80099dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80099e2:	e34e      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 80099e4:	2300      	movs	r3, #0
 80099e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80099e8:	e34b      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80099ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099ee:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 80099f2:	430b      	orrs	r3, r1
 80099f4:	d147      	bne.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80099f6:	4b76      	ldr	r3, [pc, #472]	; (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80099f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80099fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009a00:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8009a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d103      	bne.n	8009a10 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009a08:	f7fd ff6a 	bl	80078e0 <HAL_RCC_GetPCLK1Freq>
 8009a0c:	6378      	str	r0, [r7, #52]	; 0x34
 8009a0e:	e338      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8009a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a16:	d103      	bne.n	8009a20 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009a18:	f7fd fe40 	bl	800769c <HAL_RCC_GetSysClockFreq>
 8009a1c:	6378      	str	r0, [r7, #52]	; 0x34
 8009a1e:	e330      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8009a20:	4b6b      	ldr	r3, [pc, #428]	; (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a2c:	d106      	bne.n	8009a3c <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8009a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a34:	d102      	bne.n	8009a3c <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HSI_VALUE;
 8009a36:	4b67      	ldr	r3, [pc, #412]	; (8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8009a38:	637b      	str	r3, [r7, #52]	; 0x34
 8009a3a:	e322      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8009a3c:	4b64      	ldr	r3, [pc, #400]	; (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f003 0320 	and.w	r3, r3, #32
 8009a44:	2b20      	cmp	r3, #32
 8009a46:	d11b      	bne.n	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 8009a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a4a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009a4e:	d117      	bne.n	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009a50:	4b5f      	ldr	r3, [pc, #380]	; (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009a52:	689b      	ldr	r3, [r3, #8]
 8009a54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d005      	beq.n	8009a68 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8009a5c:	4b5c      	ldr	r3, [pc, #368]	; (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009a5e:	689b      	ldr	r3, [r3, #8]
 8009a60:	0e1b      	lsrs	r3, r3, #24
 8009a62:	f003 030f 	and.w	r3, r3, #15
 8009a66:	e006      	b.n	8009a76 <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 8009a68:	4b59      	ldr	r3, [pc, #356]	; (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009a6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009a6e:	041b      	lsls	r3, r3, #16
 8009a70:	0e1b      	lsrs	r3, r3, #24
 8009a72:	f003 030f 	and.w	r3, r3, #15
 8009a76:	4a58      	ldr	r2, [pc, #352]	; (8009bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8009a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a7c:	637b      	str	r3, [r7, #52]	; 0x34
 8009a7e:	e300      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8009a80:	2300      	movs	r3, #0
 8009a82:	637b      	str	r3, [r7, #52]	; 0x34
 8009a84:	e2fd      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8009a86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a8a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8009a8e:	430b      	orrs	r3, r1
 8009a90:	d15b      	bne.n	8009b4a <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8009a92:	4b4f      	ldr	r3, [pc, #316]	; (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009a94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009a98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a9c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8009a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d117      	bne.n	8009ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009aa4:	4b4a      	ldr	r3, [pc, #296]	; (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009aa6:	689b      	ldr	r3, [r3, #8]
 8009aa8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d005      	beq.n	8009abc <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
 8009ab0:	4b47      	ldr	r3, [pc, #284]	; (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009ab2:	689b      	ldr	r3, [r3, #8]
 8009ab4:	0e1b      	lsrs	r3, r3, #24
 8009ab6:	f003 030f 	and.w	r3, r3, #15
 8009aba:	e006      	b.n	8009aca <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
 8009abc:	4b44      	ldr	r3, [pc, #272]	; (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009abe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009ac2:	041b      	lsls	r3, r3, #16
 8009ac4:	0e1b      	lsrs	r3, r3, #24
 8009ac6:	f003 030f 	and.w	r3, r3, #15
 8009aca:	4a43      	ldr	r2, [pc, #268]	; (8009bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8009acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ad0:	637b      	str	r3, [r7, #52]	; 0x34
 8009ad2:	e2d6      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8009ad4:	4b3e      	ldr	r3, [pc, #248]	; (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009ad6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009ada:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ade:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ae2:	d112      	bne.n	8009b0a <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8009ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009aea:	d10e      	bne.n	8009b0a <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009aec:	4b38      	ldr	r3, [pc, #224]	; (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009aee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009af6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009afa:	d102      	bne.n	8009b02 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
      {
        frequency = LSI_VALUE / 128U;
 8009afc:	23fa      	movs	r3, #250	; 0xfa
 8009afe:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009b00:	e2bf      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8009b02:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009b06:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009b08:	e2bb      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8009b0a:	4b31      	ldr	r3, [pc, #196]	; (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b16:	d106      	bne.n	8009b26 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 8009b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b1e:	d102      	bne.n	8009b26 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HSI_VALUE;
 8009b20:	4b2c      	ldr	r3, [pc, #176]	; (8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8009b22:	637b      	str	r3, [r7, #52]	; 0x34
 8009b24:	e2ad      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8009b26:	4b2a      	ldr	r3, [pc, #168]	; (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009b28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009b2c:	f003 0302 	and.w	r3, r3, #2
 8009b30:	2b02      	cmp	r3, #2
 8009b32:	d107      	bne.n	8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 8009b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b3a:	d103      	bne.n	8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
    {
      frequency = LSE_VALUE;
 8009b3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b40:	637b      	str	r3, [r7, #52]	; 0x34
 8009b42:	e29e      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8009b44:	2300      	movs	r3, #0
 8009b46:	637b      	str	r3, [r7, #52]	; 0x34
 8009b48:	e29b      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8009b4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b4e:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8009b52:	430b      	orrs	r3, r1
 8009b54:	d162      	bne.n	8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009b56:	4b1e      	ldr	r3, [pc, #120]	; (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009b58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009b5c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009b60:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8009b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d117      	bne.n	8009b98 <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009b68:	4b19      	ldr	r3, [pc, #100]	; (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009b6a:	689b      	ldr	r3, [r3, #8]
 8009b6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d005      	beq.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 8009b74:	4b16      	ldr	r3, [pc, #88]	; (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009b76:	689b      	ldr	r3, [r3, #8]
 8009b78:	0e1b      	lsrs	r3, r3, #24
 8009b7a:	f003 030f 	and.w	r3, r3, #15
 8009b7e:	e006      	b.n	8009b8e <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8009b80:	4b13      	ldr	r3, [pc, #76]	; (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009b82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009b86:	041b      	lsls	r3, r3, #16
 8009b88:	0e1b      	lsrs	r3, r3, #24
 8009b8a:	f003 030f 	and.w	r3, r3, #15
 8009b8e:	4a12      	ldr	r2, [pc, #72]	; (8009bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8009b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b94:	637b      	str	r3, [r7, #52]	; 0x34
 8009b96:	e274      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8009b98:	4b0d      	ldr	r3, [pc, #52]	; (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009b9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009b9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ba2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ba6:	d119      	bne.n	8009bdc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 8009ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009baa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bae:	d115      	bne.n	8009bdc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009bb0:	4b07      	ldr	r3, [pc, #28]	; (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009bb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009bba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009bbe:	d102      	bne.n	8009bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xd7e>
      {
        frequency = LSI_VALUE / 128U;
 8009bc0:	23fa      	movs	r3, #250	; 0xfa
 8009bc2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009bc4:	e25d      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8009bc6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009bca:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009bcc:	e259      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8009bce:	bf00      	nop
 8009bd0:	46020c00 	.word	0x46020c00
 8009bd4:	00f42400 	.word	0x00f42400
 8009bd8:	0800d020 	.word	0x0800d020
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8009bdc:	4b9d      	ldr	r3, [pc, #628]	; (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009be4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009be8:	d106      	bne.n	8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 8009bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009bf0:	d102      	bne.n	8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      frequency = HSI_VALUE;
 8009bf2:	4b99      	ldr	r3, [pc, #612]	; (8009e58 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8009bf4:	637b      	str	r3, [r7, #52]	; 0x34
 8009bf6:	e244      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8009bf8:	4b96      	ldr	r3, [pc, #600]	; (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8009bfa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009bfe:	f003 0302 	and.w	r3, r3, #2
 8009c02:	2b02      	cmp	r3, #2
 8009c04:	d107      	bne.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 8009c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009c0c:	d103      	bne.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
    {
      frequency = LSE_VALUE;
 8009c0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c12:	637b      	str	r3, [r7, #52]	; 0x34
 8009c14:	e235      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8009c16:	2300      	movs	r3, #0
 8009c18:	637b      	str	r3, [r7, #52]	; 0x34
 8009c1a:	e232      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8009c1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c20:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8009c24:	430b      	orrs	r3, r1
 8009c26:	d147      	bne.n	8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009c28:	4b8a      	ldr	r3, [pc, #552]	; (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8009c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009c2e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8009c32:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8009c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d103      	bne.n	8009c42 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009c3a:	f7fd fe51 	bl	80078e0 <HAL_RCC_GetPCLK1Freq>
 8009c3e:	6378      	str	r0, [r7, #52]	; 0x34
 8009c40:	e21f      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8009c42:	4b84      	ldr	r3, [pc, #528]	; (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8009c44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009c48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009c50:	d112      	bne.n	8009c78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8009c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009c58:	d10e      	bne.n	8009c78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009c5a:	4b7e      	ldr	r3, [pc, #504]	; (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8009c5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c68:	d102      	bne.n	8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      {
        frequency = LSI_VALUE / 128U;
 8009c6a:	23fa      	movs	r3, #250	; 0xfa
 8009c6c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009c6e:	e208      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8009c70:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009c74:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009c76:	e204      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8009c78:	4b76      	ldr	r3, [pc, #472]	; (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c84:	d106      	bne.n	8009c94 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 8009c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c88:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009c8c:	d102      	bne.n	8009c94 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HSI_VALUE;
 8009c8e:	4b72      	ldr	r3, [pc, #456]	; (8009e58 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8009c90:	637b      	str	r3, [r7, #52]	; 0x34
 8009c92:	e1f6      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8009c94:	4b6f      	ldr	r3, [pc, #444]	; (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8009c96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009c9a:	f003 0302 	and.w	r3, r3, #2
 8009c9e:	2b02      	cmp	r3, #2
 8009ca0:	d107      	bne.n	8009cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8009ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009ca8:	d103      	bne.n	8009cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    {
      frequency = LSE_VALUE;
 8009caa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009cae:	637b      	str	r3, [r7, #52]	; 0x34
 8009cb0:	e1e7      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	637b      	str	r3, [r7, #52]	; 0x34
 8009cb6:	e1e4      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8009cb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cbc:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8009cc0:	430b      	orrs	r3, r1
 8009cc2:	d12d      	bne.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8009cc4:	4b63      	ldr	r3, [pc, #396]	; (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8009cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009cca:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8009cce:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8009cd0:	4b60      	ldr	r3, [pc, #384]	; (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009cdc:	d105      	bne.n	8009cea <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 8009cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d102      	bne.n	8009cea <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HSE_VALUE;
 8009ce4:	4b5c      	ldr	r3, [pc, #368]	; (8009e58 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8009ce6:	637b      	str	r3, [r7, #52]	; 0x34
 8009ce8:	e1cb      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8009cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009cf0:	d107      	bne.n	8009d02 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009cf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f7fe fc74 	bl	80085e4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8009cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cfe:	637b      	str	r3, [r7, #52]	; 0x34
 8009d00:	e1bf      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8009d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d08:	d107      	bne.n	8009d1a <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d0a:	f107 0318 	add.w	r3, r7, #24
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f7fe fdce 	bl	80088b0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8009d14:	69bb      	ldr	r3, [r7, #24]
 8009d16:	637b      	str	r3, [r7, #52]	; 0x34
 8009d18:	e1b3      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	637b      	str	r3, [r7, #52]	; 0x34
 8009d1e:	e1b0      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8009d20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d24:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8009d28:	430b      	orrs	r3, r1
 8009d2a:	d14d      	bne.n	8009dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8009d2c:	4b49      	ldr	r3, [pc, #292]	; (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8009d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009d32:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009d36:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8009d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d3a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009d3e:	d028      	beq.n	8009d92 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 8009d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d42:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009d46:	d83c      	bhi.n	8009dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 8009d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d4e:	d013      	beq.n	8009d78 <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 8009d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d56:	d834      	bhi.n	8009dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 8009d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d004      	beq.n	8009d68 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 8009d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d64:	d004      	beq.n	8009d70 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8009d66:	e02c      	b.n	8009dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8009d68:	f7fd fdce 	bl	8007908 <HAL_RCC_GetPCLK2Freq>
 8009d6c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8009d6e:	e188      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009d70:	f7fd fc94 	bl	800769c <HAL_RCC_GetSysClockFreq>
 8009d74:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8009d76:	e184      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009d78:	4b36      	ldr	r3, [pc, #216]	; (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d84:	d102      	bne.n	8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
        {
          frequency = HSI_VALUE;
 8009d86:	4b34      	ldr	r3, [pc, #208]	; (8009e58 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8009d88:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009d8a:	e17a      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009d90:	e177      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009d92:	4b30      	ldr	r3, [pc, #192]	; (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8009d94:	689b      	ldr	r3, [r3, #8]
 8009d96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d005      	beq.n	8009daa <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 8009d9e:	4b2d      	ldr	r3, [pc, #180]	; (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8009da0:	689b      	ldr	r3, [r3, #8]
 8009da2:	0e1b      	lsrs	r3, r3, #24
 8009da4:	f003 030f 	and.w	r3, r3, #15
 8009da8:	e006      	b.n	8009db8 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 8009daa:	4b2a      	ldr	r3, [pc, #168]	; (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8009dac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009db0:	041b      	lsls	r3, r3, #16
 8009db2:	0e1b      	lsrs	r3, r3, #24
 8009db4:	f003 030f 	and.w	r3, r3, #15
 8009db8:	4a28      	ldr	r2, [pc, #160]	; (8009e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1014>)
 8009dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009dbe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009dc0:	e15f      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009dc6:	e15c      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8009dc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009dcc:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8009dd0:	430b      	orrs	r3, r1
 8009dd2:	d154      	bne.n	8009e7e <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8009dd4:	4b1f      	ldr	r3, [pc, #124]	; (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8009dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009dda:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009dde:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8009de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009de6:	d028      	beq.n	8009e3a <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8009de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009dee:	d843      	bhi.n	8009e78 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8009df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009df6:	d013      	beq.n	8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8009df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dfa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009dfe:	d83b      	bhi.n	8009e78 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8009e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d004      	beq.n	8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8009e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e0c:	d004      	beq.n	8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 8009e0e:	e033      	b.n	8009e78 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8009e10:	f7fd fd66 	bl	80078e0 <HAL_RCC_GetPCLK1Freq>
 8009e14:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8009e16:	e134      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009e18:	f7fd fc40 	bl	800769c <HAL_RCC_GetSysClockFreq>
 8009e1c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8009e1e:	e130      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009e20:	4b0c      	ldr	r3, [pc, #48]	; (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e2c:	d102      	bne.n	8009e34 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8009e2e:	4b0a      	ldr	r3, [pc, #40]	; (8009e58 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8009e30:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009e32:	e126      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8009e34:	2300      	movs	r3, #0
 8009e36:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009e38:	e123      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009e3a:	4b06      	ldr	r3, [pc, #24]	; (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8009e3c:	689b      	ldr	r3, [r3, #8]
 8009e3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d00c      	beq.n	8009e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
 8009e46:	4b03      	ldr	r3, [pc, #12]	; (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8009e48:	689b      	ldr	r3, [r3, #8]
 8009e4a:	0e1b      	lsrs	r3, r3, #24
 8009e4c:	f003 030f 	and.w	r3, r3, #15
 8009e50:	e00d      	b.n	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 8009e52:	bf00      	nop
 8009e54:	46020c00 	.word	0x46020c00
 8009e58:	00f42400 	.word	0x00f42400
 8009e5c:	0800d020 	.word	0x0800d020
 8009e60:	4b8a      	ldr	r3, [pc, #552]	; (800a08c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8009e62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009e66:	041b      	lsls	r3, r3, #16
 8009e68:	0e1b      	lsrs	r3, r3, #24
 8009e6a:	f003 030f 	and.w	r3, r3, #15
 8009e6e:	4a88      	ldr	r2, [pc, #544]	; (800a090 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8009e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e74:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009e76:	e104      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009e7c:	e101      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8009e7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e82:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8009e86:	430b      	orrs	r3, r1
 8009e88:	d16e      	bne.n	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8009e8a:	4b80      	ldr	r3, [pc, #512]	; (800a08c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8009e8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009e90:	f003 0318 	and.w	r3, r3, #24
 8009e94:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8009e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e98:	2b18      	cmp	r3, #24
 8009e9a:	d862      	bhi.n	8009f62 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 8009e9c:	a201      	add	r2, pc, #4	; (adr r2, 8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 8009e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea2:	bf00      	nop
 8009ea4:	08009f09 	.word	0x08009f09
 8009ea8:	08009f63 	.word	0x08009f63
 8009eac:	08009f63 	.word	0x08009f63
 8009eb0:	08009f63 	.word	0x08009f63
 8009eb4:	08009f63 	.word	0x08009f63
 8009eb8:	08009f63 	.word	0x08009f63
 8009ebc:	08009f63 	.word	0x08009f63
 8009ec0:	08009f63 	.word	0x08009f63
 8009ec4:	08009f11 	.word	0x08009f11
 8009ec8:	08009f63 	.word	0x08009f63
 8009ecc:	08009f63 	.word	0x08009f63
 8009ed0:	08009f63 	.word	0x08009f63
 8009ed4:	08009f63 	.word	0x08009f63
 8009ed8:	08009f63 	.word	0x08009f63
 8009edc:	08009f63 	.word	0x08009f63
 8009ee0:	08009f63 	.word	0x08009f63
 8009ee4:	08009f19 	.word	0x08009f19
 8009ee8:	08009f63 	.word	0x08009f63
 8009eec:	08009f63 	.word	0x08009f63
 8009ef0:	08009f63 	.word	0x08009f63
 8009ef4:	08009f63 	.word	0x08009f63
 8009ef8:	08009f63 	.word	0x08009f63
 8009efc:	08009f63 	.word	0x08009f63
 8009f00:	08009f63 	.word	0x08009f63
 8009f04:	08009f33 	.word	0x08009f33
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8009f08:	f7fd fd12 	bl	8007930 <HAL_RCC_GetPCLK3Freq>
 8009f0c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8009f0e:	e0b8      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009f10:	f7fd fbc4 	bl	800769c <HAL_RCC_GetSysClockFreq>
 8009f14:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8009f16:	e0b4      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009f18:	4b5c      	ldr	r3, [pc, #368]	; (800a08c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f24:	d102      	bne.n	8009f2c <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 8009f26:	4b5b      	ldr	r3, [pc, #364]	; (800a094 <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 8009f28:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009f2a:	e0aa      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009f30:	e0a7      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009f32:	4b56      	ldr	r3, [pc, #344]	; (800a08c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8009f34:	689b      	ldr	r3, [r3, #8]
 8009f36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d005      	beq.n	8009f4a <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 8009f3e:	4b53      	ldr	r3, [pc, #332]	; (800a08c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8009f40:	689b      	ldr	r3, [r3, #8]
 8009f42:	0e1b      	lsrs	r3, r3, #24
 8009f44:	f003 030f 	and.w	r3, r3, #15
 8009f48:	e006      	b.n	8009f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 8009f4a:	4b50      	ldr	r3, [pc, #320]	; (800a08c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8009f4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009f50:	041b      	lsls	r3, r3, #16
 8009f52:	0e1b      	lsrs	r3, r3, #24
 8009f54:	f003 030f 	and.w	r3, r3, #15
 8009f58:	4a4d      	ldr	r2, [pc, #308]	; (800a090 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8009f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f5e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009f60:	e08f      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8009f62:	2300      	movs	r3, #0
 8009f64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009f66:	e08c      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8009f68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f6c:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8009f70:	430b      	orrs	r3, r1
 8009f72:	d14c      	bne.n	800a00e <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8009f74:	4b45      	ldr	r3, [pc, #276]	; (800a08c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8009f76:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009f7a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009f7e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8009f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f82:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009f86:	d013      	beq.n	8009fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 8009f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f8a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009f8e:	d83b      	bhi.n	800a008 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8009f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f96:	d013      	beq.n	8009fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 8009f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f9e:	d833      	bhi.n	800a008 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8009fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d014      	beq.n	8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 8009fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009fac:	d014      	beq.n	8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8009fae:	e02b      	b.n	800a008 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009fb0:	f107 0318 	add.w	r3, r7, #24
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f7fe fc7b 	bl	80088b0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8009fba:	69fb      	ldr	r3, [r7, #28]
 8009fbc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009fbe:	e060      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009fc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f7fe fb0d 	bl	80085e4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8009fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fcc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009fce:	e058      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009fd0:	f7fd fb64 	bl	800769c <HAL_RCC_GetSysClockFreq>
 8009fd4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8009fd6:	e054      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009fd8:	4b2c      	ldr	r3, [pc, #176]	; (800a08c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8009fda:	689b      	ldr	r3, [r3, #8]
 8009fdc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d005      	beq.n	8009ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 8009fe4:	4b29      	ldr	r3, [pc, #164]	; (800a08c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8009fe6:	689b      	ldr	r3, [r3, #8]
 8009fe8:	0e1b      	lsrs	r3, r3, #24
 8009fea:	f003 030f 	and.w	r3, r3, #15
 8009fee:	e006      	b.n	8009ffe <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 8009ff0:	4b26      	ldr	r3, [pc, #152]	; (800a08c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8009ff2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009ff6:	041b      	lsls	r3, r3, #16
 8009ff8:	0e1b      	lsrs	r3, r3, #24
 8009ffa:	f003 030f 	and.w	r3, r3, #15
 8009ffe:	4a24      	ldr	r2, [pc, #144]	; (800a090 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 800a000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a004:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a006:	e03c      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800a008:	2300      	movs	r3, #0
 800a00a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a00c:	e039      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800a00e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a012:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 800a016:	430b      	orrs	r3, r1
 800a018:	d131      	bne.n	800a07e <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800a01a:	4b1c      	ldr	r3, [pc, #112]	; (800a08c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800a01c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a020:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a024:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800a026:	4b19      	ldr	r3, [pc, #100]	; (800a08c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800a028:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a02c:	f003 0302 	and.w	r3, r3, #2
 800a030:	2b02      	cmp	r3, #2
 800a032:	d106      	bne.n	800a042 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 800a034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a036:	2b00      	cmp	r3, #0
 800a038:	d103      	bne.n	800a042 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 800a03a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a03e:	637b      	str	r3, [r7, #52]	; 0x34
 800a040:	e01f      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800a042:	4b12      	ldr	r3, [pc, #72]	; (800a08c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800a044:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a048:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a04c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a050:	d112      	bne.n	800a078 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 800a052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a054:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a058:	d10e      	bne.n	800a078 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a05a:	4b0c      	ldr	r3, [pc, #48]	; (800a08c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800a05c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a064:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a068:	d102      	bne.n	800a070 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 800a06a:	23fa      	movs	r3, #250	; 0xfa
 800a06c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a06e:	e008      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800a070:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a074:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a076:	e004      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800a078:	2300      	movs	r3, #0
 800a07a:	637b      	str	r3, [r7, #52]	; 0x34
 800a07c:	e001      	b.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 800a07e:	2300      	movs	r3, #0
 800a080:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 800a082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a084:	4618      	mov	r0, r3
 800a086:	3738      	adds	r7, #56	; 0x38
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}
 800a08c:	46020c00 	.word	0x46020c00
 800a090:	0800d020 	.word	0x0800d020
 800a094:	00f42400 	.word	0x00f42400

0800a098 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b084      	sub	sp, #16
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800a0a0:	4b47      	ldr	r3, [pc, #284]	; (800a1c0 <RCCEx_PLL2_Config+0x128>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	4a46      	ldr	r2, [pc, #280]	; (800a1c0 <RCCEx_PLL2_Config+0x128>)
 800a0a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a0aa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a0ac:	f7f8 fe10 	bl	8002cd0 <HAL_GetTick>
 800a0b0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a0b2:	e008      	b.n	800a0c6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a0b4:	f7f8 fe0c 	bl	8002cd0 <HAL_GetTick>
 800a0b8:	4602      	mov	r2, r0
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	1ad3      	subs	r3, r2, r3
 800a0be:	2b02      	cmp	r3, #2
 800a0c0:	d901      	bls.n	800a0c6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a0c2:	2303      	movs	r3, #3
 800a0c4:	e077      	b.n	800a1b6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a0c6:	4b3e      	ldr	r3, [pc, #248]	; (800a1c0 <RCCEx_PLL2_Config+0x128>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d1f0      	bne.n	800a0b4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800a0d2:	4b3b      	ldr	r3, [pc, #236]	; (800a1c0 <RCCEx_PLL2_Config+0x128>)
 800a0d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0d6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a0da:	f023 0303 	bic.w	r3, r3, #3
 800a0de:	687a      	ldr	r2, [r7, #4]
 800a0e0:	6811      	ldr	r1, [r2, #0]
 800a0e2:	687a      	ldr	r2, [r7, #4]
 800a0e4:	6852      	ldr	r2, [r2, #4]
 800a0e6:	3a01      	subs	r2, #1
 800a0e8:	0212      	lsls	r2, r2, #8
 800a0ea:	430a      	orrs	r2, r1
 800a0ec:	4934      	ldr	r1, [pc, #208]	; (800a1c0 <RCCEx_PLL2_Config+0x128>)
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	62cb      	str	r3, [r1, #44]	; 0x2c
 800a0f2:	4b33      	ldr	r3, [pc, #204]	; (800a1c0 <RCCEx_PLL2_Config+0x128>)
 800a0f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a0f6:	4b33      	ldr	r3, [pc, #204]	; (800a1c4 <RCCEx_PLL2_Config+0x12c>)
 800a0f8:	4013      	ands	r3, r2
 800a0fa:	687a      	ldr	r2, [r7, #4]
 800a0fc:	6892      	ldr	r2, [r2, #8]
 800a0fe:	3a01      	subs	r2, #1
 800a100:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	68d2      	ldr	r2, [r2, #12]
 800a108:	3a01      	subs	r2, #1
 800a10a:	0252      	lsls	r2, r2, #9
 800a10c:	b292      	uxth	r2, r2
 800a10e:	4311      	orrs	r1, r2
 800a110:	687a      	ldr	r2, [r7, #4]
 800a112:	6912      	ldr	r2, [r2, #16]
 800a114:	3a01      	subs	r2, #1
 800a116:	0412      	lsls	r2, r2, #16
 800a118:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800a11c:	4311      	orrs	r1, r2
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	6952      	ldr	r2, [r2, #20]
 800a122:	3a01      	subs	r2, #1
 800a124:	0612      	lsls	r2, r2, #24
 800a126:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800a12a:	430a      	orrs	r2, r1
 800a12c:	4924      	ldr	r1, [pc, #144]	; (800a1c0 <RCCEx_PLL2_Config+0x128>)
 800a12e:	4313      	orrs	r3, r2
 800a130:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800a132:	4b23      	ldr	r3, [pc, #140]	; (800a1c0 <RCCEx_PLL2_Config+0x128>)
 800a134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a136:	f023 020c 	bic.w	r2, r3, #12
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	699b      	ldr	r3, [r3, #24]
 800a13e:	4920      	ldr	r1, [pc, #128]	; (800a1c0 <RCCEx_PLL2_Config+0x128>)
 800a140:	4313      	orrs	r3, r2
 800a142:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800a144:	4b1e      	ldr	r3, [pc, #120]	; (800a1c0 <RCCEx_PLL2_Config+0x128>)
 800a146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6a1b      	ldr	r3, [r3, #32]
 800a14c:	491c      	ldr	r1, [pc, #112]	; (800a1c0 <RCCEx_PLL2_Config+0x128>)
 800a14e:	4313      	orrs	r3, r2
 800a150:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800a152:	4b1b      	ldr	r3, [pc, #108]	; (800a1c0 <RCCEx_PLL2_Config+0x128>)
 800a154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a156:	4a1a      	ldr	r2, [pc, #104]	; (800a1c0 <RCCEx_PLL2_Config+0x128>)
 800a158:	f023 0310 	bic.w	r3, r3, #16
 800a15c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a15e:	4b18      	ldr	r3, [pc, #96]	; (800a1c0 <RCCEx_PLL2_Config+0x128>)
 800a160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a162:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a166:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800a16a:	687a      	ldr	r2, [r7, #4]
 800a16c:	69d2      	ldr	r2, [r2, #28]
 800a16e:	00d2      	lsls	r2, r2, #3
 800a170:	4913      	ldr	r1, [pc, #76]	; (800a1c0 <RCCEx_PLL2_Config+0x128>)
 800a172:	4313      	orrs	r3, r2
 800a174:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800a176:	4b12      	ldr	r3, [pc, #72]	; (800a1c0 <RCCEx_PLL2_Config+0x128>)
 800a178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a17a:	4a11      	ldr	r2, [pc, #68]	; (800a1c0 <RCCEx_PLL2_Config+0x128>)
 800a17c:	f043 0310 	orr.w	r3, r3, #16
 800a180:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800a182:	4b0f      	ldr	r3, [pc, #60]	; (800a1c0 <RCCEx_PLL2_Config+0x128>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4a0e      	ldr	r2, [pc, #56]	; (800a1c0 <RCCEx_PLL2_Config+0x128>)
 800a188:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a18c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a18e:	f7f8 fd9f 	bl	8002cd0 <HAL_GetTick>
 800a192:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a194:	e008      	b.n	800a1a8 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a196:	f7f8 fd9b 	bl	8002cd0 <HAL_GetTick>
 800a19a:	4602      	mov	r2, r0
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	1ad3      	subs	r3, r2, r3
 800a1a0:	2b02      	cmp	r3, #2
 800a1a2:	d901      	bls.n	800a1a8 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800a1a4:	2303      	movs	r3, #3
 800a1a6:	e006      	b.n	800a1b6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a1a8:	4b05      	ldr	r3, [pc, #20]	; (800a1c0 <RCCEx_PLL2_Config+0x128>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d0f0      	beq.n	800a196 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800a1b4:	2300      	movs	r3, #0

}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3710      	adds	r7, #16
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	46020c00 	.word	0x46020c00
 800a1c4:	80800000 	.word	0x80800000

0800a1c8 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b084      	sub	sp, #16
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800a1d0:	4b47      	ldr	r3, [pc, #284]	; (800a2f0 <RCCEx_PLL3_Config+0x128>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4a46      	ldr	r2, [pc, #280]	; (800a2f0 <RCCEx_PLL3_Config+0x128>)
 800a1d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a1da:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a1dc:	f7f8 fd78 	bl	8002cd0 <HAL_GetTick>
 800a1e0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a1e2:	e008      	b.n	800a1f6 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a1e4:	f7f8 fd74 	bl	8002cd0 <HAL_GetTick>
 800a1e8:	4602      	mov	r2, r0
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	1ad3      	subs	r3, r2, r3
 800a1ee:	2b02      	cmp	r3, #2
 800a1f0:	d901      	bls.n	800a1f6 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a1f2:	2303      	movs	r3, #3
 800a1f4:	e077      	b.n	800a2e6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a1f6:	4b3e      	ldr	r3, [pc, #248]	; (800a2f0 <RCCEx_PLL3_Config+0x128>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d1f0      	bne.n	800a1e4 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800a202:	4b3b      	ldr	r3, [pc, #236]	; (800a2f0 <RCCEx_PLL3_Config+0x128>)
 800a204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a206:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a20a:	f023 0303 	bic.w	r3, r3, #3
 800a20e:	687a      	ldr	r2, [r7, #4]
 800a210:	6811      	ldr	r1, [r2, #0]
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	6852      	ldr	r2, [r2, #4]
 800a216:	3a01      	subs	r2, #1
 800a218:	0212      	lsls	r2, r2, #8
 800a21a:	430a      	orrs	r2, r1
 800a21c:	4934      	ldr	r1, [pc, #208]	; (800a2f0 <RCCEx_PLL3_Config+0x128>)
 800a21e:	4313      	orrs	r3, r2
 800a220:	630b      	str	r3, [r1, #48]	; 0x30
 800a222:	4b33      	ldr	r3, [pc, #204]	; (800a2f0 <RCCEx_PLL3_Config+0x128>)
 800a224:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a226:	4b33      	ldr	r3, [pc, #204]	; (800a2f4 <RCCEx_PLL3_Config+0x12c>)
 800a228:	4013      	ands	r3, r2
 800a22a:	687a      	ldr	r2, [r7, #4]
 800a22c:	6892      	ldr	r2, [r2, #8]
 800a22e:	3a01      	subs	r2, #1
 800a230:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800a234:	687a      	ldr	r2, [r7, #4]
 800a236:	68d2      	ldr	r2, [r2, #12]
 800a238:	3a01      	subs	r2, #1
 800a23a:	0252      	lsls	r2, r2, #9
 800a23c:	b292      	uxth	r2, r2
 800a23e:	4311      	orrs	r1, r2
 800a240:	687a      	ldr	r2, [r7, #4]
 800a242:	6912      	ldr	r2, [r2, #16]
 800a244:	3a01      	subs	r2, #1
 800a246:	0412      	lsls	r2, r2, #16
 800a248:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800a24c:	4311      	orrs	r1, r2
 800a24e:	687a      	ldr	r2, [r7, #4]
 800a250:	6952      	ldr	r2, [r2, #20]
 800a252:	3a01      	subs	r2, #1
 800a254:	0612      	lsls	r2, r2, #24
 800a256:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800a25a:	430a      	orrs	r2, r1
 800a25c:	4924      	ldr	r1, [pc, #144]	; (800a2f0 <RCCEx_PLL3_Config+0x128>)
 800a25e:	4313      	orrs	r3, r2
 800a260:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800a262:	4b23      	ldr	r3, [pc, #140]	; (800a2f0 <RCCEx_PLL3_Config+0x128>)
 800a264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a266:	f023 020c 	bic.w	r2, r3, #12
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	699b      	ldr	r3, [r3, #24]
 800a26e:	4920      	ldr	r1, [pc, #128]	; (800a2f0 <RCCEx_PLL3_Config+0x128>)
 800a270:	4313      	orrs	r3, r2
 800a272:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800a274:	4b1e      	ldr	r3, [pc, #120]	; (800a2f0 <RCCEx_PLL3_Config+0x128>)
 800a276:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6a1b      	ldr	r3, [r3, #32]
 800a27c:	491c      	ldr	r1, [pc, #112]	; (800a2f0 <RCCEx_PLL3_Config+0x128>)
 800a27e:	4313      	orrs	r3, r2
 800a280:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800a282:	4b1b      	ldr	r3, [pc, #108]	; (800a2f0 <RCCEx_PLL3_Config+0x128>)
 800a284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a286:	4a1a      	ldr	r2, [pc, #104]	; (800a2f0 <RCCEx_PLL3_Config+0x128>)
 800a288:	f023 0310 	bic.w	r3, r3, #16
 800a28c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a28e:	4b18      	ldr	r3, [pc, #96]	; (800a2f0 <RCCEx_PLL3_Config+0x128>)
 800a290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a292:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a296:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800a29a:	687a      	ldr	r2, [r7, #4]
 800a29c:	69d2      	ldr	r2, [r2, #28]
 800a29e:	00d2      	lsls	r2, r2, #3
 800a2a0:	4913      	ldr	r1, [pc, #76]	; (800a2f0 <RCCEx_PLL3_Config+0x128>)
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800a2a6:	4b12      	ldr	r3, [pc, #72]	; (800a2f0 <RCCEx_PLL3_Config+0x128>)
 800a2a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2aa:	4a11      	ldr	r2, [pc, #68]	; (800a2f0 <RCCEx_PLL3_Config+0x128>)
 800a2ac:	f043 0310 	orr.w	r3, r3, #16
 800a2b0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800a2b2:	4b0f      	ldr	r3, [pc, #60]	; (800a2f0 <RCCEx_PLL3_Config+0x128>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4a0e      	ldr	r2, [pc, #56]	; (800a2f0 <RCCEx_PLL3_Config+0x128>)
 800a2b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2bc:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a2be:	f7f8 fd07 	bl	8002cd0 <HAL_GetTick>
 800a2c2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a2c4:	e008      	b.n	800a2d8 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a2c6:	f7f8 fd03 	bl	8002cd0 <HAL_GetTick>
 800a2ca:	4602      	mov	r2, r0
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	1ad3      	subs	r3, r2, r3
 800a2d0:	2b02      	cmp	r3, #2
 800a2d2:	d901      	bls.n	800a2d8 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800a2d4:	2303      	movs	r3, #3
 800a2d6:	e006      	b.n	800a2e6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a2d8:	4b05      	ldr	r3, [pc, #20]	; (800a2f0 <RCCEx_PLL3_Config+0x128>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d0f0      	beq.n	800a2c6 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800a2e4:	2300      	movs	r3, #0
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3710      	adds	r7, #16
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	46020c00 	.word	0x46020c00
 800a2f4:	80800000 	.word	0x80800000

0800a2f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b082      	sub	sp, #8
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d101      	bne.n	800a30a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a306:	2301      	movs	r3, #1
 800a308:	e049      	b.n	800a39e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a310:	b2db      	uxtb	r3, r3
 800a312:	2b00      	cmp	r3, #0
 800a314:	d106      	bne.n	800a324 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2200      	movs	r2, #0
 800a31a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f7f8 fab4 	bl	800288c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2202      	movs	r2, #2
 800a328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681a      	ldr	r2, [r3, #0]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	3304      	adds	r3, #4
 800a334:	4619      	mov	r1, r3
 800a336:	4610      	mov	r0, r2
 800a338:	f000 fc9c 	bl	800ac74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2201      	movs	r2, #1
 800a340:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2201      	movs	r2, #1
 800a348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2201      	movs	r2, #1
 800a350:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2201      	movs	r2, #1
 800a358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2201      	movs	r2, #1
 800a360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2201      	movs	r2, #1
 800a368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2201      	movs	r2, #1
 800a370:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2201      	movs	r2, #1
 800a378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2201      	movs	r2, #1
 800a380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2201      	movs	r2, #1
 800a388:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2201      	movs	r2, #1
 800a390:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2201      	movs	r2, #1
 800a398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a39c:	2300      	movs	r3, #0
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3708      	adds	r7, #8
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
	...

0800a3a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b085      	sub	sp, #20
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3b6:	b2db      	uxtb	r3, r3
 800a3b8:	2b01      	cmp	r3, #1
 800a3ba:	d001      	beq.n	800a3c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a3bc:	2301      	movs	r3, #1
 800a3be:	e072      	b.n	800a4a6 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2202      	movs	r2, #2
 800a3c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	68da      	ldr	r2, [r3, #12]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f042 0201 	orr.w	r2, r2, #1
 800a3d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4a35      	ldr	r2, [pc, #212]	; (800a4b4 <HAL_TIM_Base_Start_IT+0x10c>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d040      	beq.n	800a464 <HAL_TIM_Base_Start_IT+0xbc>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4a34      	ldr	r2, [pc, #208]	; (800a4b8 <HAL_TIM_Base_Start_IT+0x110>)
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d03b      	beq.n	800a464 <HAL_TIM_Base_Start_IT+0xbc>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3f4:	d036      	beq.n	800a464 <HAL_TIM_Base_Start_IT+0xbc>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a3fe:	d031      	beq.n	800a464 <HAL_TIM_Base_Start_IT+0xbc>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4a2d      	ldr	r2, [pc, #180]	; (800a4bc <HAL_TIM_Base_Start_IT+0x114>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d02c      	beq.n	800a464 <HAL_TIM_Base_Start_IT+0xbc>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	4a2c      	ldr	r2, [pc, #176]	; (800a4c0 <HAL_TIM_Base_Start_IT+0x118>)
 800a410:	4293      	cmp	r3, r2
 800a412:	d027      	beq.n	800a464 <HAL_TIM_Base_Start_IT+0xbc>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	4a2a      	ldr	r2, [pc, #168]	; (800a4c4 <HAL_TIM_Base_Start_IT+0x11c>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d022      	beq.n	800a464 <HAL_TIM_Base_Start_IT+0xbc>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	4a29      	ldr	r2, [pc, #164]	; (800a4c8 <HAL_TIM_Base_Start_IT+0x120>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d01d      	beq.n	800a464 <HAL_TIM_Base_Start_IT+0xbc>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4a27      	ldr	r2, [pc, #156]	; (800a4cc <HAL_TIM_Base_Start_IT+0x124>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d018      	beq.n	800a464 <HAL_TIM_Base_Start_IT+0xbc>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4a26      	ldr	r2, [pc, #152]	; (800a4d0 <HAL_TIM_Base_Start_IT+0x128>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d013      	beq.n	800a464 <HAL_TIM_Base_Start_IT+0xbc>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4a24      	ldr	r2, [pc, #144]	; (800a4d4 <HAL_TIM_Base_Start_IT+0x12c>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d00e      	beq.n	800a464 <HAL_TIM_Base_Start_IT+0xbc>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	4a23      	ldr	r2, [pc, #140]	; (800a4d8 <HAL_TIM_Base_Start_IT+0x130>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d009      	beq.n	800a464 <HAL_TIM_Base_Start_IT+0xbc>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4a21      	ldr	r2, [pc, #132]	; (800a4dc <HAL_TIM_Base_Start_IT+0x134>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d004      	beq.n	800a464 <HAL_TIM_Base_Start_IT+0xbc>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	4a20      	ldr	r2, [pc, #128]	; (800a4e0 <HAL_TIM_Base_Start_IT+0x138>)
 800a460:	4293      	cmp	r3, r2
 800a462:	d115      	bne.n	800a490 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	689a      	ldr	r2, [r3, #8]
 800a46a:	4b1e      	ldr	r3, [pc, #120]	; (800a4e4 <HAL_TIM_Base_Start_IT+0x13c>)
 800a46c:	4013      	ands	r3, r2
 800a46e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2b06      	cmp	r3, #6
 800a474:	d015      	beq.n	800a4a2 <HAL_TIM_Base_Start_IT+0xfa>
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a47c:	d011      	beq.n	800a4a2 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	681a      	ldr	r2, [r3, #0]
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f042 0201 	orr.w	r2, r2, #1
 800a48c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a48e:	e008      	b.n	800a4a2 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	681a      	ldr	r2, [r3, #0]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f042 0201 	orr.w	r2, r2, #1
 800a49e:	601a      	str	r2, [r3, #0]
 800a4a0:	e000      	b.n	800a4a4 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a4a4:	2300      	movs	r3, #0
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3714      	adds	r7, #20
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b0:	4770      	bx	lr
 800a4b2:	bf00      	nop
 800a4b4:	40012c00 	.word	0x40012c00
 800a4b8:	50012c00 	.word	0x50012c00
 800a4bc:	40000400 	.word	0x40000400
 800a4c0:	50000400 	.word	0x50000400
 800a4c4:	40000800 	.word	0x40000800
 800a4c8:	50000800 	.word	0x50000800
 800a4cc:	40000c00 	.word	0x40000c00
 800a4d0:	50000c00 	.word	0x50000c00
 800a4d4:	40013400 	.word	0x40013400
 800a4d8:	50013400 	.word	0x50013400
 800a4dc:	40014000 	.word	0x40014000
 800a4e0:	50014000 	.word	0x50014000
 800a4e4:	00010007 	.word	0x00010007

0800a4e8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b082      	sub	sp, #8
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d101      	bne.n	800a4fa <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	e049      	b.n	800a58e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a500:	b2db      	uxtb	r3, r3
 800a502:	2b00      	cmp	r3, #0
 800a504:	d106      	bne.n	800a514 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2200      	movs	r2, #0
 800a50a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f000 f841 	bl	800a596 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2202      	movs	r2, #2
 800a518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681a      	ldr	r2, [r3, #0]
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	3304      	adds	r3, #4
 800a524:	4619      	mov	r1, r3
 800a526:	4610      	mov	r0, r2
 800a528:	f000 fba4 	bl	800ac74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2201      	movs	r2, #1
 800a530:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2201      	movs	r2, #1
 800a538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2201      	movs	r2, #1
 800a540:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2201      	movs	r2, #1
 800a548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2201      	movs	r2, #1
 800a550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2201      	movs	r2, #1
 800a558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2201      	movs	r2, #1
 800a560:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2201      	movs	r2, #1
 800a568:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2201      	movs	r2, #1
 800a570:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2201      	movs	r2, #1
 800a578:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2201      	movs	r2, #1
 800a580:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2201      	movs	r2, #1
 800a588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a58c:	2300      	movs	r3, #0
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3708      	adds	r7, #8
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}

0800a596 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800a596:	b480      	push	{r7}
 800a598:	b083      	sub	sp, #12
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800a59e:	bf00      	nop
 800a5a0:	370c      	adds	r7, #12
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr

0800a5aa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a5aa:	b580      	push	{r7, lr}
 800a5ac:	b082      	sub	sp, #8
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	691b      	ldr	r3, [r3, #16]
 800a5b8:	f003 0302 	and.w	r3, r3, #2
 800a5bc:	2b02      	cmp	r3, #2
 800a5be:	d122      	bne.n	800a606 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	68db      	ldr	r3, [r3, #12]
 800a5c6:	f003 0302 	and.w	r3, r3, #2
 800a5ca:	2b02      	cmp	r3, #2
 800a5cc:	d11b      	bne.n	800a606 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f06f 0202 	mvn.w	r2, #2
 800a5d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2201      	movs	r2, #1
 800a5dc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	699b      	ldr	r3, [r3, #24]
 800a5e4:	f003 0303 	and.w	r3, r3, #3
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d003      	beq.n	800a5f4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f000 fb23 	bl	800ac38 <HAL_TIM_IC_CaptureCallback>
 800a5f2:	e005      	b.n	800a600 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f000 fb15 	bl	800ac24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f000 fb26 	bl	800ac4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2200      	movs	r2, #0
 800a604:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	691b      	ldr	r3, [r3, #16]
 800a60c:	f003 0304 	and.w	r3, r3, #4
 800a610:	2b04      	cmp	r3, #4
 800a612:	d122      	bne.n	800a65a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	68db      	ldr	r3, [r3, #12]
 800a61a:	f003 0304 	and.w	r3, r3, #4
 800a61e:	2b04      	cmp	r3, #4
 800a620:	d11b      	bne.n	800a65a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f06f 0204 	mvn.w	r2, #4
 800a62a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2202      	movs	r2, #2
 800a630:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	699b      	ldr	r3, [r3, #24]
 800a638:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d003      	beq.n	800a648 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f000 faf9 	bl	800ac38 <HAL_TIM_IC_CaptureCallback>
 800a646:	e005      	b.n	800a654 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f000 faeb 	bl	800ac24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f000 fafc 	bl	800ac4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2200      	movs	r2, #0
 800a658:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	691b      	ldr	r3, [r3, #16]
 800a660:	f003 0308 	and.w	r3, r3, #8
 800a664:	2b08      	cmp	r3, #8
 800a666:	d122      	bne.n	800a6ae <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	68db      	ldr	r3, [r3, #12]
 800a66e:	f003 0308 	and.w	r3, r3, #8
 800a672:	2b08      	cmp	r3, #8
 800a674:	d11b      	bne.n	800a6ae <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f06f 0208 	mvn.w	r2, #8
 800a67e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2204      	movs	r2, #4
 800a684:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	69db      	ldr	r3, [r3, #28]
 800a68c:	f003 0303 	and.w	r3, r3, #3
 800a690:	2b00      	cmp	r3, #0
 800a692:	d003      	beq.n	800a69c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f000 facf 	bl	800ac38 <HAL_TIM_IC_CaptureCallback>
 800a69a:	e005      	b.n	800a6a8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f000 fac1 	bl	800ac24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f000 fad2 	bl	800ac4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	691b      	ldr	r3, [r3, #16]
 800a6b4:	f003 0310 	and.w	r3, r3, #16
 800a6b8:	2b10      	cmp	r3, #16
 800a6ba:	d122      	bne.n	800a702 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	68db      	ldr	r3, [r3, #12]
 800a6c2:	f003 0310 	and.w	r3, r3, #16
 800a6c6:	2b10      	cmp	r3, #16
 800a6c8:	d11b      	bne.n	800a702 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f06f 0210 	mvn.w	r2, #16
 800a6d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2208      	movs	r2, #8
 800a6d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	69db      	ldr	r3, [r3, #28]
 800a6e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d003      	beq.n	800a6f0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 faa5 	bl	800ac38 <HAL_TIM_IC_CaptureCallback>
 800a6ee:	e005      	b.n	800a6fc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f000 fa97 	bl	800ac24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f000 faa8 	bl	800ac4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2200      	movs	r2, #0
 800a700:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	691b      	ldr	r3, [r3, #16]
 800a708:	f003 0301 	and.w	r3, r3, #1
 800a70c:	2b01      	cmp	r3, #1
 800a70e:	d10e      	bne.n	800a72e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	68db      	ldr	r3, [r3, #12]
 800a716:	f003 0301 	and.w	r3, r3, #1
 800a71a:	2b01      	cmp	r3, #1
 800a71c:	d107      	bne.n	800a72e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f06f 0201 	mvn.w	r2, #1
 800a726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f7f7 fdb5 	bl	8002298 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	691b      	ldr	r3, [r3, #16]
 800a734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a738:	2b80      	cmp	r3, #128	; 0x80
 800a73a:	d10e      	bne.n	800a75a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	68db      	ldr	r3, [r3, #12]
 800a742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a746:	2b80      	cmp	r3, #128	; 0x80
 800a748:	d107      	bne.n	800a75a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f001 f991 	bl	800ba7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	691b      	ldr	r3, [r3, #16]
 800a760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a764:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a768:	d10e      	bne.n	800a788 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	68db      	ldr	r3, [r3, #12]
 800a770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a774:	2b80      	cmp	r3, #128	; 0x80
 800a776:	d107      	bne.n	800a788 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f001 f984 	bl	800ba90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	691b      	ldr	r3, [r3, #16]
 800a78e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a792:	2b40      	cmp	r3, #64	; 0x40
 800a794:	d10e      	bne.n	800a7b4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	68db      	ldr	r3, [r3, #12]
 800a79c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7a0:	2b40      	cmp	r3, #64	; 0x40
 800a7a2:	d107      	bne.n	800a7b4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a7ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f000 fa56 	bl	800ac60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	691b      	ldr	r3, [r3, #16]
 800a7ba:	f003 0320 	and.w	r3, r3, #32
 800a7be:	2b20      	cmp	r3, #32
 800a7c0:	d10e      	bne.n	800a7e0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	68db      	ldr	r3, [r3, #12]
 800a7c8:	f003 0320 	and.w	r3, r3, #32
 800a7cc:	2b20      	cmp	r3, #32
 800a7ce:	d107      	bne.n	800a7e0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f06f 0220 	mvn.w	r2, #32
 800a7d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f001 f944 	bl	800ba68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	691b      	ldr	r3, [r3, #16]
 800a7e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a7ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7ee:	d10f      	bne.n	800a810 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	68db      	ldr	r3, [r3, #12]
 800a7f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a7fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7fe:	d107      	bne.n	800a810 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800a808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f001 f94a 	bl	800baa4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	691b      	ldr	r3, [r3, #16]
 800a816:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a81a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a81e:	d10f      	bne.n	800a840 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	68db      	ldr	r3, [r3, #12]
 800a826:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a82a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a82e:	d107      	bne.n	800a840 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800a838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f001 f93c 	bl	800bab8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	691b      	ldr	r3, [r3, #16]
 800a846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a84a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a84e:	d10f      	bne.n	800a870 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	68db      	ldr	r3, [r3, #12]
 800a856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a85a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a85e:	d107      	bne.n	800a870 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800a868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f001 f92e 	bl	800bacc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	691b      	ldr	r3, [r3, #16]
 800a876:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a87a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a87e:	d10f      	bne.n	800a8a0 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	68db      	ldr	r3, [r3, #12]
 800a886:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a88a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a88e:	d107      	bne.n	800a8a0 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800a898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f001 f920 	bl	800bae0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a8a0:	bf00      	nop
 800a8a2:	3708      	adds	r7, #8
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b086      	sub	sp, #24
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	60f8      	str	r0, [r7, #12]
 800a8b0:	60b9      	str	r1, [r7, #8]
 800a8b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8be:	2b01      	cmp	r3, #1
 800a8c0:	d101      	bne.n	800a8c6 <HAL_TIM_OC_ConfigChannel+0x1e>
 800a8c2:	2302      	movs	r3, #2
 800a8c4:	e066      	b.n	800a994 <HAL_TIM_OC_ConfigChannel+0xec>
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	2201      	movs	r2, #1
 800a8ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2b14      	cmp	r3, #20
 800a8d2:	d857      	bhi.n	800a984 <HAL_TIM_OC_ConfigChannel+0xdc>
 800a8d4:	a201      	add	r2, pc, #4	; (adr r2, 800a8dc <HAL_TIM_OC_ConfigChannel+0x34>)
 800a8d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8da:	bf00      	nop
 800a8dc:	0800a931 	.word	0x0800a931
 800a8e0:	0800a985 	.word	0x0800a985
 800a8e4:	0800a985 	.word	0x0800a985
 800a8e8:	0800a985 	.word	0x0800a985
 800a8ec:	0800a93f 	.word	0x0800a93f
 800a8f0:	0800a985 	.word	0x0800a985
 800a8f4:	0800a985 	.word	0x0800a985
 800a8f8:	0800a985 	.word	0x0800a985
 800a8fc:	0800a94d 	.word	0x0800a94d
 800a900:	0800a985 	.word	0x0800a985
 800a904:	0800a985 	.word	0x0800a985
 800a908:	0800a985 	.word	0x0800a985
 800a90c:	0800a95b 	.word	0x0800a95b
 800a910:	0800a985 	.word	0x0800a985
 800a914:	0800a985 	.word	0x0800a985
 800a918:	0800a985 	.word	0x0800a985
 800a91c:	0800a969 	.word	0x0800a969
 800a920:	0800a985 	.word	0x0800a985
 800a924:	0800a985 	.word	0x0800a985
 800a928:	0800a985 	.word	0x0800a985
 800a92c:	0800a977 	.word	0x0800a977
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	68b9      	ldr	r1, [r7, #8]
 800a936:	4618      	mov	r0, r3
 800a938:	f000 fa96 	bl	800ae68 <TIM_OC1_SetConfig>
      break;
 800a93c:	e025      	b.n	800a98a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	68b9      	ldr	r1, [r7, #8]
 800a944:	4618      	mov	r0, r3
 800a946:	f000 fb51 	bl	800afec <TIM_OC2_SetConfig>
      break;
 800a94a:	e01e      	b.n	800a98a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	68b9      	ldr	r1, [r7, #8]
 800a952:	4618      	mov	r0, r3
 800a954:	f000 fbfa 	bl	800b14c <TIM_OC3_SetConfig>
      break;
 800a958:	e017      	b.n	800a98a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	68b9      	ldr	r1, [r7, #8]
 800a960:	4618      	mov	r0, r3
 800a962:	f000 fca1 	bl	800b2a8 <TIM_OC4_SetConfig>
      break;
 800a966:	e010      	b.n	800a98a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	68b9      	ldr	r1, [r7, #8]
 800a96e:	4618      	mov	r0, r3
 800a970:	f000 fd4a 	bl	800b408 <TIM_OC5_SetConfig>
      break;
 800a974:	e009      	b.n	800a98a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	68b9      	ldr	r1, [r7, #8]
 800a97c:	4618      	mov	r0, r3
 800a97e:	f000 fdc5 	bl	800b50c <TIM_OC6_SetConfig>
      break;
 800a982:	e002      	b.n	800a98a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800a984:	2301      	movs	r3, #1
 800a986:	75fb      	strb	r3, [r7, #23]
      break;
 800a988:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	2200      	movs	r2, #0
 800a98e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a992:	7dfb      	ldrb	r3, [r7, #23]
}
 800a994:	4618      	mov	r0, r3
 800a996:	3718      	adds	r7, #24
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}

0800a99c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b084      	sub	sp, #16
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
 800a9a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9b0:	2b01      	cmp	r3, #1
 800a9b2:	d101      	bne.n	800a9b8 <HAL_TIM_ConfigClockSource+0x1c>
 800a9b4:	2302      	movs	r3, #2
 800a9b6:	e0e6      	b.n	800ab86 <HAL_TIM_ConfigClockSource+0x1ea>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2201      	movs	r2, #1
 800a9bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2202      	movs	r2, #2
 800a9c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	689b      	ldr	r3, [r3, #8]
 800a9ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800a9d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a9da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a9e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	68ba      	ldr	r2, [r7, #8]
 800a9ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	4a67      	ldr	r2, [pc, #412]	; (800ab90 <HAL_TIM_ConfigClockSource+0x1f4>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	f000 80b1 	beq.w	800ab5a <HAL_TIM_ConfigClockSource+0x1be>
 800a9f8:	4a65      	ldr	r2, [pc, #404]	; (800ab90 <HAL_TIM_ConfigClockSource+0x1f4>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	f200 80b6 	bhi.w	800ab6c <HAL_TIM_ConfigClockSource+0x1d0>
 800aa00:	4a64      	ldr	r2, [pc, #400]	; (800ab94 <HAL_TIM_ConfigClockSource+0x1f8>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	f000 80a9 	beq.w	800ab5a <HAL_TIM_ConfigClockSource+0x1be>
 800aa08:	4a62      	ldr	r2, [pc, #392]	; (800ab94 <HAL_TIM_ConfigClockSource+0x1f8>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	f200 80ae 	bhi.w	800ab6c <HAL_TIM_ConfigClockSource+0x1d0>
 800aa10:	4a61      	ldr	r2, [pc, #388]	; (800ab98 <HAL_TIM_ConfigClockSource+0x1fc>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	f000 80a1 	beq.w	800ab5a <HAL_TIM_ConfigClockSource+0x1be>
 800aa18:	4a5f      	ldr	r2, [pc, #380]	; (800ab98 <HAL_TIM_ConfigClockSource+0x1fc>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	f200 80a6 	bhi.w	800ab6c <HAL_TIM_ConfigClockSource+0x1d0>
 800aa20:	4a5e      	ldr	r2, [pc, #376]	; (800ab9c <HAL_TIM_ConfigClockSource+0x200>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	f000 8099 	beq.w	800ab5a <HAL_TIM_ConfigClockSource+0x1be>
 800aa28:	4a5c      	ldr	r2, [pc, #368]	; (800ab9c <HAL_TIM_ConfigClockSource+0x200>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	f200 809e 	bhi.w	800ab6c <HAL_TIM_ConfigClockSource+0x1d0>
 800aa30:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800aa34:	f000 8091 	beq.w	800ab5a <HAL_TIM_ConfigClockSource+0x1be>
 800aa38:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800aa3c:	f200 8096 	bhi.w	800ab6c <HAL_TIM_ConfigClockSource+0x1d0>
 800aa40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa44:	f000 8089 	beq.w	800ab5a <HAL_TIM_ConfigClockSource+0x1be>
 800aa48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa4c:	f200 808e 	bhi.w	800ab6c <HAL_TIM_ConfigClockSource+0x1d0>
 800aa50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa54:	d03e      	beq.n	800aad4 <HAL_TIM_ConfigClockSource+0x138>
 800aa56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa5a:	f200 8087 	bhi.w	800ab6c <HAL_TIM_ConfigClockSource+0x1d0>
 800aa5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa62:	f000 8086 	beq.w	800ab72 <HAL_TIM_ConfigClockSource+0x1d6>
 800aa66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa6a:	d87f      	bhi.n	800ab6c <HAL_TIM_ConfigClockSource+0x1d0>
 800aa6c:	2b70      	cmp	r3, #112	; 0x70
 800aa6e:	d01a      	beq.n	800aaa6 <HAL_TIM_ConfigClockSource+0x10a>
 800aa70:	2b70      	cmp	r3, #112	; 0x70
 800aa72:	d87b      	bhi.n	800ab6c <HAL_TIM_ConfigClockSource+0x1d0>
 800aa74:	2b60      	cmp	r3, #96	; 0x60
 800aa76:	d050      	beq.n	800ab1a <HAL_TIM_ConfigClockSource+0x17e>
 800aa78:	2b60      	cmp	r3, #96	; 0x60
 800aa7a:	d877      	bhi.n	800ab6c <HAL_TIM_ConfigClockSource+0x1d0>
 800aa7c:	2b50      	cmp	r3, #80	; 0x50
 800aa7e:	d03c      	beq.n	800aafa <HAL_TIM_ConfigClockSource+0x15e>
 800aa80:	2b50      	cmp	r3, #80	; 0x50
 800aa82:	d873      	bhi.n	800ab6c <HAL_TIM_ConfigClockSource+0x1d0>
 800aa84:	2b40      	cmp	r3, #64	; 0x40
 800aa86:	d058      	beq.n	800ab3a <HAL_TIM_ConfigClockSource+0x19e>
 800aa88:	2b40      	cmp	r3, #64	; 0x40
 800aa8a:	d86f      	bhi.n	800ab6c <HAL_TIM_ConfigClockSource+0x1d0>
 800aa8c:	2b30      	cmp	r3, #48	; 0x30
 800aa8e:	d064      	beq.n	800ab5a <HAL_TIM_ConfigClockSource+0x1be>
 800aa90:	2b30      	cmp	r3, #48	; 0x30
 800aa92:	d86b      	bhi.n	800ab6c <HAL_TIM_ConfigClockSource+0x1d0>
 800aa94:	2b20      	cmp	r3, #32
 800aa96:	d060      	beq.n	800ab5a <HAL_TIM_ConfigClockSource+0x1be>
 800aa98:	2b20      	cmp	r3, #32
 800aa9a:	d867      	bhi.n	800ab6c <HAL_TIM_ConfigClockSource+0x1d0>
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d05c      	beq.n	800ab5a <HAL_TIM_ConfigClockSource+0x1be>
 800aaa0:	2b10      	cmp	r3, #16
 800aaa2:	d05a      	beq.n	800ab5a <HAL_TIM_ConfigClockSource+0x1be>
 800aaa4:	e062      	b.n	800ab6c <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6818      	ldr	r0, [r3, #0]
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	6899      	ldr	r1, [r3, #8]
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	685a      	ldr	r2, [r3, #4]
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	68db      	ldr	r3, [r3, #12]
 800aab6:	f000 fef5 	bl	800b8a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	689b      	ldr	r3, [r3, #8]
 800aac0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800aac8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	68ba      	ldr	r2, [r7, #8]
 800aad0:	609a      	str	r2, [r3, #8]
      break;
 800aad2:	e04f      	b.n	800ab74 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6818      	ldr	r0, [r3, #0]
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	6899      	ldr	r1, [r3, #8]
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	685a      	ldr	r2, [r3, #4]
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	68db      	ldr	r3, [r3, #12]
 800aae4:	f000 fede 	bl	800b8a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	689a      	ldr	r2, [r3, #8]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aaf6:	609a      	str	r2, [r3, #8]
      break;
 800aaf8:	e03c      	b.n	800ab74 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6818      	ldr	r0, [r3, #0]
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	6859      	ldr	r1, [r3, #4]
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	68db      	ldr	r3, [r3, #12]
 800ab06:	461a      	mov	r2, r3
 800ab08:	f000 fe50 	bl	800b7ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	2150      	movs	r1, #80	; 0x50
 800ab12:	4618      	mov	r0, r3
 800ab14:	f000 fea9 	bl	800b86a <TIM_ITRx_SetConfig>
      break;
 800ab18:	e02c      	b.n	800ab74 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6818      	ldr	r0, [r3, #0]
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	6859      	ldr	r1, [r3, #4]
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	68db      	ldr	r3, [r3, #12]
 800ab26:	461a      	mov	r2, r3
 800ab28:	f000 fe6f 	bl	800b80a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	2160      	movs	r1, #96	; 0x60
 800ab32:	4618      	mov	r0, r3
 800ab34:	f000 fe99 	bl	800b86a <TIM_ITRx_SetConfig>
      break;
 800ab38:	e01c      	b.n	800ab74 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6818      	ldr	r0, [r3, #0]
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	6859      	ldr	r1, [r3, #4]
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	68db      	ldr	r3, [r3, #12]
 800ab46:	461a      	mov	r2, r3
 800ab48:	f000 fe30 	bl	800b7ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	2140      	movs	r1, #64	; 0x40
 800ab52:	4618      	mov	r0, r3
 800ab54:	f000 fe89 	bl	800b86a <TIM_ITRx_SetConfig>
      break;
 800ab58:	e00c      	b.n	800ab74 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681a      	ldr	r2, [r3, #0]
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	4619      	mov	r1, r3
 800ab64:	4610      	mov	r0, r2
 800ab66:	f000 fe80 	bl	800b86a <TIM_ITRx_SetConfig>
      break;
 800ab6a:	e003      	b.n	800ab74 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	73fb      	strb	r3, [r7, #15]
      break;
 800ab70:	e000      	b.n	800ab74 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800ab72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2201      	movs	r2, #1
 800ab78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ab84:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3710      	adds	r7, #16
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}
 800ab8e:	bf00      	nop
 800ab90:	00100070 	.word	0x00100070
 800ab94:	00100040 	.word	0x00100040
 800ab98:	00100030 	.word	0x00100030
 800ab9c:	00100020 	.word	0x00100020

0800aba0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b082      	sub	sp, #8
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abb0:	2b01      	cmp	r3, #1
 800abb2:	d101      	bne.n	800abb8 <HAL_TIM_SlaveConfigSynchro+0x18>
 800abb4:	2302      	movs	r3, #2
 800abb6:	e031      	b.n	800ac1c <HAL_TIM_SlaveConfigSynchro+0x7c>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2201      	movs	r2, #1
 800abbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2202      	movs	r2, #2
 800abc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800abc8:	6839      	ldr	r1, [r7, #0]
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f000 fd22 	bl	800b614 <TIM_SlaveTimer_SetConfig>
 800abd0:	4603      	mov	r3, r0
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d009      	beq.n	800abea <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2201      	movs	r2, #1
 800abda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2200      	movs	r2, #0
 800abe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800abe6:	2301      	movs	r3, #1
 800abe8:	e018      	b.n	800ac1c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	68da      	ldr	r2, [r3, #12]
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800abf8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	68da      	ldr	r2, [r3, #12]
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ac08:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2201      	movs	r2, #1
 800ac0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2200      	movs	r2, #0
 800ac16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac1a:	2300      	movs	r3, #0
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	3708      	adds	r7, #8
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}

0800ac24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ac24:	b480      	push	{r7}
 800ac26:	b083      	sub	sp, #12
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ac2c:	bf00      	nop
 800ac2e:	370c      	adds	r7, #12
 800ac30:	46bd      	mov	sp, r7
 800ac32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac36:	4770      	bx	lr

0800ac38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b083      	sub	sp, #12
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ac40:	bf00      	nop
 800ac42:	370c      	adds	r7, #12
 800ac44:	46bd      	mov	sp, r7
 800ac46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4a:	4770      	bx	lr

0800ac4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b083      	sub	sp, #12
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ac54:	bf00      	nop
 800ac56:	370c      	adds	r7, #12
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5e:	4770      	bx	lr

0800ac60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ac60:	b480      	push	{r7}
 800ac62:	b083      	sub	sp, #12
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ac68:	bf00      	nop
 800ac6a:	370c      	adds	r7, #12
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac72:	4770      	bx	lr

0800ac74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ac74:	b480      	push	{r7}
 800ac76:	b085      	sub	sp, #20
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	4a68      	ldr	r2, [pc, #416]	; (800ae28 <TIM_Base_SetConfig+0x1b4>)
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	d02b      	beq.n	800ace4 <TIM_Base_SetConfig+0x70>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	4a67      	ldr	r2, [pc, #412]	; (800ae2c <TIM_Base_SetConfig+0x1b8>)
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d027      	beq.n	800ace4 <TIM_Base_SetConfig+0x70>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac9a:	d023      	beq.n	800ace4 <TIM_Base_SetConfig+0x70>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aca2:	d01f      	beq.n	800ace4 <TIM_Base_SetConfig+0x70>
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	4a62      	ldr	r2, [pc, #392]	; (800ae30 <TIM_Base_SetConfig+0x1bc>)
 800aca8:	4293      	cmp	r3, r2
 800acaa:	d01b      	beq.n	800ace4 <TIM_Base_SetConfig+0x70>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	4a61      	ldr	r2, [pc, #388]	; (800ae34 <TIM_Base_SetConfig+0x1c0>)
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d017      	beq.n	800ace4 <TIM_Base_SetConfig+0x70>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	4a60      	ldr	r2, [pc, #384]	; (800ae38 <TIM_Base_SetConfig+0x1c4>)
 800acb8:	4293      	cmp	r3, r2
 800acba:	d013      	beq.n	800ace4 <TIM_Base_SetConfig+0x70>
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	4a5f      	ldr	r2, [pc, #380]	; (800ae3c <TIM_Base_SetConfig+0x1c8>)
 800acc0:	4293      	cmp	r3, r2
 800acc2:	d00f      	beq.n	800ace4 <TIM_Base_SetConfig+0x70>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	4a5e      	ldr	r2, [pc, #376]	; (800ae40 <TIM_Base_SetConfig+0x1cc>)
 800acc8:	4293      	cmp	r3, r2
 800acca:	d00b      	beq.n	800ace4 <TIM_Base_SetConfig+0x70>
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	4a5d      	ldr	r2, [pc, #372]	; (800ae44 <TIM_Base_SetConfig+0x1d0>)
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d007      	beq.n	800ace4 <TIM_Base_SetConfig+0x70>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	4a5c      	ldr	r2, [pc, #368]	; (800ae48 <TIM_Base_SetConfig+0x1d4>)
 800acd8:	4293      	cmp	r3, r2
 800acda:	d003      	beq.n	800ace4 <TIM_Base_SetConfig+0x70>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	4a5b      	ldr	r2, [pc, #364]	; (800ae4c <TIM_Base_SetConfig+0x1d8>)
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d108      	bne.n	800acf6 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	68fa      	ldr	r2, [r7, #12]
 800acf2:	4313      	orrs	r3, r2
 800acf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	4a4b      	ldr	r2, [pc, #300]	; (800ae28 <TIM_Base_SetConfig+0x1b4>)
 800acfa:	4293      	cmp	r3, r2
 800acfc:	d043      	beq.n	800ad86 <TIM_Base_SetConfig+0x112>
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	4a4a      	ldr	r2, [pc, #296]	; (800ae2c <TIM_Base_SetConfig+0x1b8>)
 800ad02:	4293      	cmp	r3, r2
 800ad04:	d03f      	beq.n	800ad86 <TIM_Base_SetConfig+0x112>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad0c:	d03b      	beq.n	800ad86 <TIM_Base_SetConfig+0x112>
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad14:	d037      	beq.n	800ad86 <TIM_Base_SetConfig+0x112>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	4a45      	ldr	r2, [pc, #276]	; (800ae30 <TIM_Base_SetConfig+0x1bc>)
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d033      	beq.n	800ad86 <TIM_Base_SetConfig+0x112>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	4a44      	ldr	r2, [pc, #272]	; (800ae34 <TIM_Base_SetConfig+0x1c0>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d02f      	beq.n	800ad86 <TIM_Base_SetConfig+0x112>
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	4a43      	ldr	r2, [pc, #268]	; (800ae38 <TIM_Base_SetConfig+0x1c4>)
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d02b      	beq.n	800ad86 <TIM_Base_SetConfig+0x112>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	4a42      	ldr	r2, [pc, #264]	; (800ae3c <TIM_Base_SetConfig+0x1c8>)
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d027      	beq.n	800ad86 <TIM_Base_SetConfig+0x112>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	4a41      	ldr	r2, [pc, #260]	; (800ae40 <TIM_Base_SetConfig+0x1cc>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d023      	beq.n	800ad86 <TIM_Base_SetConfig+0x112>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	4a40      	ldr	r2, [pc, #256]	; (800ae44 <TIM_Base_SetConfig+0x1d0>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d01f      	beq.n	800ad86 <TIM_Base_SetConfig+0x112>
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	4a3f      	ldr	r2, [pc, #252]	; (800ae48 <TIM_Base_SetConfig+0x1d4>)
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d01b      	beq.n	800ad86 <TIM_Base_SetConfig+0x112>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	4a3e      	ldr	r2, [pc, #248]	; (800ae4c <TIM_Base_SetConfig+0x1d8>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d017      	beq.n	800ad86 <TIM_Base_SetConfig+0x112>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	4a3d      	ldr	r2, [pc, #244]	; (800ae50 <TIM_Base_SetConfig+0x1dc>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d013      	beq.n	800ad86 <TIM_Base_SetConfig+0x112>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	4a3c      	ldr	r2, [pc, #240]	; (800ae54 <TIM_Base_SetConfig+0x1e0>)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d00f      	beq.n	800ad86 <TIM_Base_SetConfig+0x112>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	4a3b      	ldr	r2, [pc, #236]	; (800ae58 <TIM_Base_SetConfig+0x1e4>)
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d00b      	beq.n	800ad86 <TIM_Base_SetConfig+0x112>
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	4a3a      	ldr	r2, [pc, #232]	; (800ae5c <TIM_Base_SetConfig+0x1e8>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d007      	beq.n	800ad86 <TIM_Base_SetConfig+0x112>
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	4a39      	ldr	r2, [pc, #228]	; (800ae60 <TIM_Base_SetConfig+0x1ec>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d003      	beq.n	800ad86 <TIM_Base_SetConfig+0x112>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	4a38      	ldr	r2, [pc, #224]	; (800ae64 <TIM_Base_SetConfig+0x1f0>)
 800ad82:	4293      	cmp	r3, r2
 800ad84:	d108      	bne.n	800ad98 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	68db      	ldr	r3, [r3, #12]
 800ad92:	68fa      	ldr	r2, [r7, #12]
 800ad94:	4313      	orrs	r3, r2
 800ad96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	695b      	ldr	r3, [r3, #20]
 800ada2:	4313      	orrs	r3, r2
 800ada4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	68fa      	ldr	r2, [r7, #12]
 800adaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	689a      	ldr	r2, [r3, #8]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	681a      	ldr	r2, [r3, #0]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	4a1a      	ldr	r2, [pc, #104]	; (800ae28 <TIM_Base_SetConfig+0x1b4>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d023      	beq.n	800ae0c <TIM_Base_SetConfig+0x198>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	4a19      	ldr	r2, [pc, #100]	; (800ae2c <TIM_Base_SetConfig+0x1b8>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	d01f      	beq.n	800ae0c <TIM_Base_SetConfig+0x198>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	4a1e      	ldr	r2, [pc, #120]	; (800ae48 <TIM_Base_SetConfig+0x1d4>)
 800add0:	4293      	cmp	r3, r2
 800add2:	d01b      	beq.n	800ae0c <TIM_Base_SetConfig+0x198>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	4a1d      	ldr	r2, [pc, #116]	; (800ae4c <TIM_Base_SetConfig+0x1d8>)
 800add8:	4293      	cmp	r3, r2
 800adda:	d017      	beq.n	800ae0c <TIM_Base_SetConfig+0x198>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	4a1c      	ldr	r2, [pc, #112]	; (800ae50 <TIM_Base_SetConfig+0x1dc>)
 800ade0:	4293      	cmp	r3, r2
 800ade2:	d013      	beq.n	800ae0c <TIM_Base_SetConfig+0x198>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	4a1b      	ldr	r2, [pc, #108]	; (800ae54 <TIM_Base_SetConfig+0x1e0>)
 800ade8:	4293      	cmp	r3, r2
 800adea:	d00f      	beq.n	800ae0c <TIM_Base_SetConfig+0x198>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	4a1a      	ldr	r2, [pc, #104]	; (800ae58 <TIM_Base_SetConfig+0x1e4>)
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d00b      	beq.n	800ae0c <TIM_Base_SetConfig+0x198>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	4a19      	ldr	r2, [pc, #100]	; (800ae5c <TIM_Base_SetConfig+0x1e8>)
 800adf8:	4293      	cmp	r3, r2
 800adfa:	d007      	beq.n	800ae0c <TIM_Base_SetConfig+0x198>
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	4a18      	ldr	r2, [pc, #96]	; (800ae60 <TIM_Base_SetConfig+0x1ec>)
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d003      	beq.n	800ae0c <TIM_Base_SetConfig+0x198>
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	4a17      	ldr	r2, [pc, #92]	; (800ae64 <TIM_Base_SetConfig+0x1f0>)
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d103      	bne.n	800ae14 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	691a      	ldr	r2, [r3, #16]
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2201      	movs	r2, #1
 800ae18:	615a      	str	r2, [r3, #20]
}
 800ae1a:	bf00      	nop
 800ae1c:	3714      	adds	r7, #20
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae24:	4770      	bx	lr
 800ae26:	bf00      	nop
 800ae28:	40012c00 	.word	0x40012c00
 800ae2c:	50012c00 	.word	0x50012c00
 800ae30:	40000400 	.word	0x40000400
 800ae34:	50000400 	.word	0x50000400
 800ae38:	40000800 	.word	0x40000800
 800ae3c:	50000800 	.word	0x50000800
 800ae40:	40000c00 	.word	0x40000c00
 800ae44:	50000c00 	.word	0x50000c00
 800ae48:	40013400 	.word	0x40013400
 800ae4c:	50013400 	.word	0x50013400
 800ae50:	40014000 	.word	0x40014000
 800ae54:	50014000 	.word	0x50014000
 800ae58:	40014400 	.word	0x40014400
 800ae5c:	50014400 	.word	0x50014400
 800ae60:	40014800 	.word	0x40014800
 800ae64:	50014800 	.word	0x50014800

0800ae68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b087      	sub	sp, #28
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6a1b      	ldr	r3, [r3, #32]
 800ae76:	f023 0201 	bic.w	r2, r3, #1
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6a1b      	ldr	r3, [r3, #32]
 800ae82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	685b      	ldr	r3, [r3, #4]
 800ae88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	699b      	ldr	r3, [r3, #24]
 800ae8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ae96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	f023 0303 	bic.w	r3, r3, #3
 800aea2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	68fa      	ldr	r2, [r7, #12]
 800aeaa:	4313      	orrs	r3, r2
 800aeac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	f023 0302 	bic.w	r3, r3, #2
 800aeb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	689b      	ldr	r3, [r3, #8]
 800aeba:	697a      	ldr	r2, [r7, #20]
 800aebc:	4313      	orrs	r3, r2
 800aebe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	4a40      	ldr	r2, [pc, #256]	; (800afc4 <TIM_OC1_SetConfig+0x15c>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d023      	beq.n	800af10 <TIM_OC1_SetConfig+0xa8>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	4a3f      	ldr	r2, [pc, #252]	; (800afc8 <TIM_OC1_SetConfig+0x160>)
 800aecc:	4293      	cmp	r3, r2
 800aece:	d01f      	beq.n	800af10 <TIM_OC1_SetConfig+0xa8>
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	4a3e      	ldr	r2, [pc, #248]	; (800afcc <TIM_OC1_SetConfig+0x164>)
 800aed4:	4293      	cmp	r3, r2
 800aed6:	d01b      	beq.n	800af10 <TIM_OC1_SetConfig+0xa8>
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	4a3d      	ldr	r2, [pc, #244]	; (800afd0 <TIM_OC1_SetConfig+0x168>)
 800aedc:	4293      	cmp	r3, r2
 800aede:	d017      	beq.n	800af10 <TIM_OC1_SetConfig+0xa8>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	4a3c      	ldr	r2, [pc, #240]	; (800afd4 <TIM_OC1_SetConfig+0x16c>)
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d013      	beq.n	800af10 <TIM_OC1_SetConfig+0xa8>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	4a3b      	ldr	r2, [pc, #236]	; (800afd8 <TIM_OC1_SetConfig+0x170>)
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d00f      	beq.n	800af10 <TIM_OC1_SetConfig+0xa8>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	4a3a      	ldr	r2, [pc, #232]	; (800afdc <TIM_OC1_SetConfig+0x174>)
 800aef4:	4293      	cmp	r3, r2
 800aef6:	d00b      	beq.n	800af10 <TIM_OC1_SetConfig+0xa8>
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	4a39      	ldr	r2, [pc, #228]	; (800afe0 <TIM_OC1_SetConfig+0x178>)
 800aefc:	4293      	cmp	r3, r2
 800aefe:	d007      	beq.n	800af10 <TIM_OC1_SetConfig+0xa8>
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	4a38      	ldr	r2, [pc, #224]	; (800afe4 <TIM_OC1_SetConfig+0x17c>)
 800af04:	4293      	cmp	r3, r2
 800af06:	d003      	beq.n	800af10 <TIM_OC1_SetConfig+0xa8>
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	4a37      	ldr	r2, [pc, #220]	; (800afe8 <TIM_OC1_SetConfig+0x180>)
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d10c      	bne.n	800af2a <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	f023 0308 	bic.w	r3, r3, #8
 800af16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	68db      	ldr	r3, [r3, #12]
 800af1c:	697a      	ldr	r2, [r7, #20]
 800af1e:	4313      	orrs	r3, r2
 800af20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	f023 0304 	bic.w	r3, r3, #4
 800af28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	4a25      	ldr	r2, [pc, #148]	; (800afc4 <TIM_OC1_SetConfig+0x15c>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	d023      	beq.n	800af7a <TIM_OC1_SetConfig+0x112>
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	4a24      	ldr	r2, [pc, #144]	; (800afc8 <TIM_OC1_SetConfig+0x160>)
 800af36:	4293      	cmp	r3, r2
 800af38:	d01f      	beq.n	800af7a <TIM_OC1_SetConfig+0x112>
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	4a23      	ldr	r2, [pc, #140]	; (800afcc <TIM_OC1_SetConfig+0x164>)
 800af3e:	4293      	cmp	r3, r2
 800af40:	d01b      	beq.n	800af7a <TIM_OC1_SetConfig+0x112>
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	4a22      	ldr	r2, [pc, #136]	; (800afd0 <TIM_OC1_SetConfig+0x168>)
 800af46:	4293      	cmp	r3, r2
 800af48:	d017      	beq.n	800af7a <TIM_OC1_SetConfig+0x112>
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	4a21      	ldr	r2, [pc, #132]	; (800afd4 <TIM_OC1_SetConfig+0x16c>)
 800af4e:	4293      	cmp	r3, r2
 800af50:	d013      	beq.n	800af7a <TIM_OC1_SetConfig+0x112>
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	4a20      	ldr	r2, [pc, #128]	; (800afd8 <TIM_OC1_SetConfig+0x170>)
 800af56:	4293      	cmp	r3, r2
 800af58:	d00f      	beq.n	800af7a <TIM_OC1_SetConfig+0x112>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	4a1f      	ldr	r2, [pc, #124]	; (800afdc <TIM_OC1_SetConfig+0x174>)
 800af5e:	4293      	cmp	r3, r2
 800af60:	d00b      	beq.n	800af7a <TIM_OC1_SetConfig+0x112>
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	4a1e      	ldr	r2, [pc, #120]	; (800afe0 <TIM_OC1_SetConfig+0x178>)
 800af66:	4293      	cmp	r3, r2
 800af68:	d007      	beq.n	800af7a <TIM_OC1_SetConfig+0x112>
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	4a1d      	ldr	r2, [pc, #116]	; (800afe4 <TIM_OC1_SetConfig+0x17c>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d003      	beq.n	800af7a <TIM_OC1_SetConfig+0x112>
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	4a1c      	ldr	r2, [pc, #112]	; (800afe8 <TIM_OC1_SetConfig+0x180>)
 800af76:	4293      	cmp	r3, r2
 800af78:	d111      	bne.n	800af9e <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800af88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	695b      	ldr	r3, [r3, #20]
 800af8e:	693a      	ldr	r2, [r7, #16]
 800af90:	4313      	orrs	r3, r2
 800af92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	699b      	ldr	r3, [r3, #24]
 800af98:	693a      	ldr	r2, [r7, #16]
 800af9a:	4313      	orrs	r3, r2
 800af9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	693a      	ldr	r2, [r7, #16]
 800afa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	68fa      	ldr	r2, [r7, #12]
 800afa8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	685a      	ldr	r2, [r3, #4]
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	697a      	ldr	r2, [r7, #20]
 800afb6:	621a      	str	r2, [r3, #32]
}
 800afb8:	bf00      	nop
 800afba:	371c      	adds	r7, #28
 800afbc:	46bd      	mov	sp, r7
 800afbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc2:	4770      	bx	lr
 800afc4:	40012c00 	.word	0x40012c00
 800afc8:	50012c00 	.word	0x50012c00
 800afcc:	40013400 	.word	0x40013400
 800afd0:	50013400 	.word	0x50013400
 800afd4:	40014000 	.word	0x40014000
 800afd8:	50014000 	.word	0x50014000
 800afdc:	40014400 	.word	0x40014400
 800afe0:	50014400 	.word	0x50014400
 800afe4:	40014800 	.word	0x40014800
 800afe8:	50014800 	.word	0x50014800

0800afec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800afec:	b480      	push	{r7}
 800afee:	b087      	sub	sp, #28
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
 800aff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6a1b      	ldr	r3, [r3, #32]
 800affa:	f023 0210 	bic.w	r2, r3, #16
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6a1b      	ldr	r3, [r3, #32]
 800b006:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	685b      	ldr	r3, [r3, #4]
 800b00c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	699b      	ldr	r3, [r3, #24]
 800b012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b01a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b01e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b026:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	021b      	lsls	r3, r3, #8
 800b02e:	68fa      	ldr	r2, [r7, #12]
 800b030:	4313      	orrs	r3, r2
 800b032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	f023 0320 	bic.w	r3, r3, #32
 800b03a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	689b      	ldr	r3, [r3, #8]
 800b040:	011b      	lsls	r3, r3, #4
 800b042:	697a      	ldr	r2, [r7, #20]
 800b044:	4313      	orrs	r3, r2
 800b046:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	4a36      	ldr	r2, [pc, #216]	; (800b124 <TIM_OC2_SetConfig+0x138>)
 800b04c:	4293      	cmp	r3, r2
 800b04e:	d00b      	beq.n	800b068 <TIM_OC2_SetConfig+0x7c>
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	4a35      	ldr	r2, [pc, #212]	; (800b128 <TIM_OC2_SetConfig+0x13c>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d007      	beq.n	800b068 <TIM_OC2_SetConfig+0x7c>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	4a34      	ldr	r2, [pc, #208]	; (800b12c <TIM_OC2_SetConfig+0x140>)
 800b05c:	4293      	cmp	r3, r2
 800b05e:	d003      	beq.n	800b068 <TIM_OC2_SetConfig+0x7c>
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	4a33      	ldr	r2, [pc, #204]	; (800b130 <TIM_OC2_SetConfig+0x144>)
 800b064:	4293      	cmp	r3, r2
 800b066:	d10d      	bne.n	800b084 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b06e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	68db      	ldr	r3, [r3, #12]
 800b074:	011b      	lsls	r3, r3, #4
 800b076:	697a      	ldr	r2, [r7, #20]
 800b078:	4313      	orrs	r3, r2
 800b07a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b07c:	697b      	ldr	r3, [r7, #20]
 800b07e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b082:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	4a27      	ldr	r2, [pc, #156]	; (800b124 <TIM_OC2_SetConfig+0x138>)
 800b088:	4293      	cmp	r3, r2
 800b08a:	d023      	beq.n	800b0d4 <TIM_OC2_SetConfig+0xe8>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	4a26      	ldr	r2, [pc, #152]	; (800b128 <TIM_OC2_SetConfig+0x13c>)
 800b090:	4293      	cmp	r3, r2
 800b092:	d01f      	beq.n	800b0d4 <TIM_OC2_SetConfig+0xe8>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	4a25      	ldr	r2, [pc, #148]	; (800b12c <TIM_OC2_SetConfig+0x140>)
 800b098:	4293      	cmp	r3, r2
 800b09a:	d01b      	beq.n	800b0d4 <TIM_OC2_SetConfig+0xe8>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	4a24      	ldr	r2, [pc, #144]	; (800b130 <TIM_OC2_SetConfig+0x144>)
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	d017      	beq.n	800b0d4 <TIM_OC2_SetConfig+0xe8>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	4a23      	ldr	r2, [pc, #140]	; (800b134 <TIM_OC2_SetConfig+0x148>)
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d013      	beq.n	800b0d4 <TIM_OC2_SetConfig+0xe8>
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	4a22      	ldr	r2, [pc, #136]	; (800b138 <TIM_OC2_SetConfig+0x14c>)
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d00f      	beq.n	800b0d4 <TIM_OC2_SetConfig+0xe8>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	4a21      	ldr	r2, [pc, #132]	; (800b13c <TIM_OC2_SetConfig+0x150>)
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	d00b      	beq.n	800b0d4 <TIM_OC2_SetConfig+0xe8>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	4a20      	ldr	r2, [pc, #128]	; (800b140 <TIM_OC2_SetConfig+0x154>)
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d007      	beq.n	800b0d4 <TIM_OC2_SetConfig+0xe8>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	4a1f      	ldr	r2, [pc, #124]	; (800b144 <TIM_OC2_SetConfig+0x158>)
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	d003      	beq.n	800b0d4 <TIM_OC2_SetConfig+0xe8>
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	4a1e      	ldr	r2, [pc, #120]	; (800b148 <TIM_OC2_SetConfig+0x15c>)
 800b0d0:	4293      	cmp	r3, r2
 800b0d2:	d113      	bne.n	800b0fc <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b0da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b0e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	695b      	ldr	r3, [r3, #20]
 800b0e8:	009b      	lsls	r3, r3, #2
 800b0ea:	693a      	ldr	r2, [r7, #16]
 800b0ec:	4313      	orrs	r3, r2
 800b0ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	699b      	ldr	r3, [r3, #24]
 800b0f4:	009b      	lsls	r3, r3, #2
 800b0f6:	693a      	ldr	r2, [r7, #16]
 800b0f8:	4313      	orrs	r3, r2
 800b0fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	693a      	ldr	r2, [r7, #16]
 800b100:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	68fa      	ldr	r2, [r7, #12]
 800b106:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	685a      	ldr	r2, [r3, #4]
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	697a      	ldr	r2, [r7, #20]
 800b114:	621a      	str	r2, [r3, #32]
}
 800b116:	bf00      	nop
 800b118:	371c      	adds	r7, #28
 800b11a:	46bd      	mov	sp, r7
 800b11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b120:	4770      	bx	lr
 800b122:	bf00      	nop
 800b124:	40012c00 	.word	0x40012c00
 800b128:	50012c00 	.word	0x50012c00
 800b12c:	40013400 	.word	0x40013400
 800b130:	50013400 	.word	0x50013400
 800b134:	40014000 	.word	0x40014000
 800b138:	50014000 	.word	0x50014000
 800b13c:	40014400 	.word	0x40014400
 800b140:	50014400 	.word	0x50014400
 800b144:	40014800 	.word	0x40014800
 800b148:	50014800 	.word	0x50014800

0800b14c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b14c:	b480      	push	{r7}
 800b14e:	b087      	sub	sp, #28
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6a1b      	ldr	r3, [r3, #32]
 800b15a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6a1b      	ldr	r3, [r3, #32]
 800b166:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	685b      	ldr	r3, [r3, #4]
 800b16c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	69db      	ldr	r3, [r3, #28]
 800b172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b17a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b17e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f023 0303 	bic.w	r3, r3, #3
 800b186:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	68fa      	ldr	r2, [r7, #12]
 800b18e:	4313      	orrs	r3, r2
 800b190:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b198:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	689b      	ldr	r3, [r3, #8]
 800b19e:	021b      	lsls	r3, r3, #8
 800b1a0:	697a      	ldr	r2, [r7, #20]
 800b1a2:	4313      	orrs	r3, r2
 800b1a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	4a35      	ldr	r2, [pc, #212]	; (800b280 <TIM_OC3_SetConfig+0x134>)
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	d00b      	beq.n	800b1c6 <TIM_OC3_SetConfig+0x7a>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	4a34      	ldr	r2, [pc, #208]	; (800b284 <TIM_OC3_SetConfig+0x138>)
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	d007      	beq.n	800b1c6 <TIM_OC3_SetConfig+0x7a>
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	4a33      	ldr	r2, [pc, #204]	; (800b288 <TIM_OC3_SetConfig+0x13c>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d003      	beq.n	800b1c6 <TIM_OC3_SetConfig+0x7a>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	4a32      	ldr	r2, [pc, #200]	; (800b28c <TIM_OC3_SetConfig+0x140>)
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d10d      	bne.n	800b1e2 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b1cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	68db      	ldr	r3, [r3, #12]
 800b1d2:	021b      	lsls	r3, r3, #8
 800b1d4:	697a      	ldr	r2, [r7, #20]
 800b1d6:	4313      	orrs	r3, r2
 800b1d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b1e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	4a26      	ldr	r2, [pc, #152]	; (800b280 <TIM_OC3_SetConfig+0x134>)
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d023      	beq.n	800b232 <TIM_OC3_SetConfig+0xe6>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	4a25      	ldr	r2, [pc, #148]	; (800b284 <TIM_OC3_SetConfig+0x138>)
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d01f      	beq.n	800b232 <TIM_OC3_SetConfig+0xe6>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	4a24      	ldr	r2, [pc, #144]	; (800b288 <TIM_OC3_SetConfig+0x13c>)
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d01b      	beq.n	800b232 <TIM_OC3_SetConfig+0xe6>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	4a23      	ldr	r2, [pc, #140]	; (800b28c <TIM_OC3_SetConfig+0x140>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d017      	beq.n	800b232 <TIM_OC3_SetConfig+0xe6>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	4a22      	ldr	r2, [pc, #136]	; (800b290 <TIM_OC3_SetConfig+0x144>)
 800b206:	4293      	cmp	r3, r2
 800b208:	d013      	beq.n	800b232 <TIM_OC3_SetConfig+0xe6>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	4a21      	ldr	r2, [pc, #132]	; (800b294 <TIM_OC3_SetConfig+0x148>)
 800b20e:	4293      	cmp	r3, r2
 800b210:	d00f      	beq.n	800b232 <TIM_OC3_SetConfig+0xe6>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	4a20      	ldr	r2, [pc, #128]	; (800b298 <TIM_OC3_SetConfig+0x14c>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d00b      	beq.n	800b232 <TIM_OC3_SetConfig+0xe6>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	4a1f      	ldr	r2, [pc, #124]	; (800b29c <TIM_OC3_SetConfig+0x150>)
 800b21e:	4293      	cmp	r3, r2
 800b220:	d007      	beq.n	800b232 <TIM_OC3_SetConfig+0xe6>
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	4a1e      	ldr	r2, [pc, #120]	; (800b2a0 <TIM_OC3_SetConfig+0x154>)
 800b226:	4293      	cmp	r3, r2
 800b228:	d003      	beq.n	800b232 <TIM_OC3_SetConfig+0xe6>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	4a1d      	ldr	r2, [pc, #116]	; (800b2a4 <TIM_OC3_SetConfig+0x158>)
 800b22e:	4293      	cmp	r3, r2
 800b230:	d113      	bne.n	800b25a <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b238:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b23a:	693b      	ldr	r3, [r7, #16]
 800b23c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b240:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	695b      	ldr	r3, [r3, #20]
 800b246:	011b      	lsls	r3, r3, #4
 800b248:	693a      	ldr	r2, [r7, #16]
 800b24a:	4313      	orrs	r3, r2
 800b24c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	699b      	ldr	r3, [r3, #24]
 800b252:	011b      	lsls	r3, r3, #4
 800b254:	693a      	ldr	r2, [r7, #16]
 800b256:	4313      	orrs	r3, r2
 800b258:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	693a      	ldr	r2, [r7, #16]
 800b25e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	68fa      	ldr	r2, [r7, #12]
 800b264:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	685a      	ldr	r2, [r3, #4]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	697a      	ldr	r2, [r7, #20]
 800b272:	621a      	str	r2, [r3, #32]
}
 800b274:	bf00      	nop
 800b276:	371c      	adds	r7, #28
 800b278:	46bd      	mov	sp, r7
 800b27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27e:	4770      	bx	lr
 800b280:	40012c00 	.word	0x40012c00
 800b284:	50012c00 	.word	0x50012c00
 800b288:	40013400 	.word	0x40013400
 800b28c:	50013400 	.word	0x50013400
 800b290:	40014000 	.word	0x40014000
 800b294:	50014000 	.word	0x50014000
 800b298:	40014400 	.word	0x40014400
 800b29c:	50014400 	.word	0x50014400
 800b2a0:	40014800 	.word	0x40014800
 800b2a4:	50014800 	.word	0x50014800

0800b2a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b087      	sub	sp, #28
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
 800b2b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6a1b      	ldr	r3, [r3, #32]
 800b2b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6a1b      	ldr	r3, [r3, #32]
 800b2c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	685b      	ldr	r3, [r3, #4]
 800b2c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	69db      	ldr	r3, [r3, #28]
 800b2ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b2d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b2da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b2e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	021b      	lsls	r3, r3, #8
 800b2ea:	68fa      	ldr	r2, [r7, #12]
 800b2ec:	4313      	orrs	r3, r2
 800b2ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b2f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	689b      	ldr	r3, [r3, #8]
 800b2fc:	031b      	lsls	r3, r3, #12
 800b2fe:	697a      	ldr	r2, [r7, #20]
 800b300:	4313      	orrs	r3, r2
 800b302:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	4a36      	ldr	r2, [pc, #216]	; (800b3e0 <TIM_OC4_SetConfig+0x138>)
 800b308:	4293      	cmp	r3, r2
 800b30a:	d00b      	beq.n	800b324 <TIM_OC4_SetConfig+0x7c>
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	4a35      	ldr	r2, [pc, #212]	; (800b3e4 <TIM_OC4_SetConfig+0x13c>)
 800b310:	4293      	cmp	r3, r2
 800b312:	d007      	beq.n	800b324 <TIM_OC4_SetConfig+0x7c>
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	4a34      	ldr	r2, [pc, #208]	; (800b3e8 <TIM_OC4_SetConfig+0x140>)
 800b318:	4293      	cmp	r3, r2
 800b31a:	d003      	beq.n	800b324 <TIM_OC4_SetConfig+0x7c>
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	4a33      	ldr	r2, [pc, #204]	; (800b3ec <TIM_OC4_SetConfig+0x144>)
 800b320:	4293      	cmp	r3, r2
 800b322:	d10d      	bne.n	800b340 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b324:	697b      	ldr	r3, [r7, #20]
 800b326:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b32a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	68db      	ldr	r3, [r3, #12]
 800b330:	031b      	lsls	r3, r3, #12
 800b332:	697a      	ldr	r2, [r7, #20]
 800b334:	4313      	orrs	r3, r2
 800b336:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b33e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	4a27      	ldr	r2, [pc, #156]	; (800b3e0 <TIM_OC4_SetConfig+0x138>)
 800b344:	4293      	cmp	r3, r2
 800b346:	d023      	beq.n	800b390 <TIM_OC4_SetConfig+0xe8>
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	4a26      	ldr	r2, [pc, #152]	; (800b3e4 <TIM_OC4_SetConfig+0x13c>)
 800b34c:	4293      	cmp	r3, r2
 800b34e:	d01f      	beq.n	800b390 <TIM_OC4_SetConfig+0xe8>
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	4a25      	ldr	r2, [pc, #148]	; (800b3e8 <TIM_OC4_SetConfig+0x140>)
 800b354:	4293      	cmp	r3, r2
 800b356:	d01b      	beq.n	800b390 <TIM_OC4_SetConfig+0xe8>
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	4a24      	ldr	r2, [pc, #144]	; (800b3ec <TIM_OC4_SetConfig+0x144>)
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d017      	beq.n	800b390 <TIM_OC4_SetConfig+0xe8>
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	4a23      	ldr	r2, [pc, #140]	; (800b3f0 <TIM_OC4_SetConfig+0x148>)
 800b364:	4293      	cmp	r3, r2
 800b366:	d013      	beq.n	800b390 <TIM_OC4_SetConfig+0xe8>
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	4a22      	ldr	r2, [pc, #136]	; (800b3f4 <TIM_OC4_SetConfig+0x14c>)
 800b36c:	4293      	cmp	r3, r2
 800b36e:	d00f      	beq.n	800b390 <TIM_OC4_SetConfig+0xe8>
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	4a21      	ldr	r2, [pc, #132]	; (800b3f8 <TIM_OC4_SetConfig+0x150>)
 800b374:	4293      	cmp	r3, r2
 800b376:	d00b      	beq.n	800b390 <TIM_OC4_SetConfig+0xe8>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	4a20      	ldr	r2, [pc, #128]	; (800b3fc <TIM_OC4_SetConfig+0x154>)
 800b37c:	4293      	cmp	r3, r2
 800b37e:	d007      	beq.n	800b390 <TIM_OC4_SetConfig+0xe8>
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	4a1f      	ldr	r2, [pc, #124]	; (800b400 <TIM_OC4_SetConfig+0x158>)
 800b384:	4293      	cmp	r3, r2
 800b386:	d003      	beq.n	800b390 <TIM_OC4_SetConfig+0xe8>
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	4a1e      	ldr	r2, [pc, #120]	; (800b404 <TIM_OC4_SetConfig+0x15c>)
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d113      	bne.n	800b3b8 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b396:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b39e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	695b      	ldr	r3, [r3, #20]
 800b3a4:	019b      	lsls	r3, r3, #6
 800b3a6:	693a      	ldr	r2, [r7, #16]
 800b3a8:	4313      	orrs	r3, r2
 800b3aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	699b      	ldr	r3, [r3, #24]
 800b3b0:	019b      	lsls	r3, r3, #6
 800b3b2:	693a      	ldr	r2, [r7, #16]
 800b3b4:	4313      	orrs	r3, r2
 800b3b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	693a      	ldr	r2, [r7, #16]
 800b3bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	68fa      	ldr	r2, [r7, #12]
 800b3c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	685a      	ldr	r2, [r3, #4]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	697a      	ldr	r2, [r7, #20]
 800b3d0:	621a      	str	r2, [r3, #32]
}
 800b3d2:	bf00      	nop
 800b3d4:	371c      	adds	r7, #28
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3dc:	4770      	bx	lr
 800b3de:	bf00      	nop
 800b3e0:	40012c00 	.word	0x40012c00
 800b3e4:	50012c00 	.word	0x50012c00
 800b3e8:	40013400 	.word	0x40013400
 800b3ec:	50013400 	.word	0x50013400
 800b3f0:	40014000 	.word	0x40014000
 800b3f4:	50014000 	.word	0x50014000
 800b3f8:	40014400 	.word	0x40014400
 800b3fc:	50014400 	.word	0x50014400
 800b400:	40014800 	.word	0x40014800
 800b404:	50014800 	.word	0x50014800

0800b408 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b408:	b480      	push	{r7}
 800b40a:	b087      	sub	sp, #28
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
 800b410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6a1b      	ldr	r3, [r3, #32]
 800b416:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6a1b      	ldr	r3, [r3, #32]
 800b422:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	685b      	ldr	r3, [r3, #4]
 800b428:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b42e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b43a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	68fa      	ldr	r2, [r7, #12]
 800b442:	4313      	orrs	r3, r2
 800b444:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b446:	693b      	ldr	r3, [r7, #16]
 800b448:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b44c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	689b      	ldr	r3, [r3, #8]
 800b452:	041b      	lsls	r3, r3, #16
 800b454:	693a      	ldr	r2, [r7, #16]
 800b456:	4313      	orrs	r3, r2
 800b458:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	4a21      	ldr	r2, [pc, #132]	; (800b4e4 <TIM_OC5_SetConfig+0xdc>)
 800b45e:	4293      	cmp	r3, r2
 800b460:	d023      	beq.n	800b4aa <TIM_OC5_SetConfig+0xa2>
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	4a20      	ldr	r2, [pc, #128]	; (800b4e8 <TIM_OC5_SetConfig+0xe0>)
 800b466:	4293      	cmp	r3, r2
 800b468:	d01f      	beq.n	800b4aa <TIM_OC5_SetConfig+0xa2>
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	4a1f      	ldr	r2, [pc, #124]	; (800b4ec <TIM_OC5_SetConfig+0xe4>)
 800b46e:	4293      	cmp	r3, r2
 800b470:	d01b      	beq.n	800b4aa <TIM_OC5_SetConfig+0xa2>
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	4a1e      	ldr	r2, [pc, #120]	; (800b4f0 <TIM_OC5_SetConfig+0xe8>)
 800b476:	4293      	cmp	r3, r2
 800b478:	d017      	beq.n	800b4aa <TIM_OC5_SetConfig+0xa2>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	4a1d      	ldr	r2, [pc, #116]	; (800b4f4 <TIM_OC5_SetConfig+0xec>)
 800b47e:	4293      	cmp	r3, r2
 800b480:	d013      	beq.n	800b4aa <TIM_OC5_SetConfig+0xa2>
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	4a1c      	ldr	r2, [pc, #112]	; (800b4f8 <TIM_OC5_SetConfig+0xf0>)
 800b486:	4293      	cmp	r3, r2
 800b488:	d00f      	beq.n	800b4aa <TIM_OC5_SetConfig+0xa2>
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	4a1b      	ldr	r2, [pc, #108]	; (800b4fc <TIM_OC5_SetConfig+0xf4>)
 800b48e:	4293      	cmp	r3, r2
 800b490:	d00b      	beq.n	800b4aa <TIM_OC5_SetConfig+0xa2>
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	4a1a      	ldr	r2, [pc, #104]	; (800b500 <TIM_OC5_SetConfig+0xf8>)
 800b496:	4293      	cmp	r3, r2
 800b498:	d007      	beq.n	800b4aa <TIM_OC5_SetConfig+0xa2>
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	4a19      	ldr	r2, [pc, #100]	; (800b504 <TIM_OC5_SetConfig+0xfc>)
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d003      	beq.n	800b4aa <TIM_OC5_SetConfig+0xa2>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	4a18      	ldr	r2, [pc, #96]	; (800b508 <TIM_OC5_SetConfig+0x100>)
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	d109      	bne.n	800b4be <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b4b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	695b      	ldr	r3, [r3, #20]
 800b4b6:	021b      	lsls	r3, r3, #8
 800b4b8:	697a      	ldr	r2, [r7, #20]
 800b4ba:	4313      	orrs	r3, r2
 800b4bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	697a      	ldr	r2, [r7, #20]
 800b4c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	68fa      	ldr	r2, [r7, #12]
 800b4c8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	685a      	ldr	r2, [r3, #4]
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	693a      	ldr	r2, [r7, #16]
 800b4d6:	621a      	str	r2, [r3, #32]
}
 800b4d8:	bf00      	nop
 800b4da:	371c      	adds	r7, #28
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e2:	4770      	bx	lr
 800b4e4:	40012c00 	.word	0x40012c00
 800b4e8:	50012c00 	.word	0x50012c00
 800b4ec:	40013400 	.word	0x40013400
 800b4f0:	50013400 	.word	0x50013400
 800b4f4:	40014000 	.word	0x40014000
 800b4f8:	50014000 	.word	0x50014000
 800b4fc:	40014400 	.word	0x40014400
 800b500:	50014400 	.word	0x50014400
 800b504:	40014800 	.word	0x40014800
 800b508:	50014800 	.word	0x50014800

0800b50c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b087      	sub	sp, #28
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6a1b      	ldr	r3, [r3, #32]
 800b51a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6a1b      	ldr	r3, [r3, #32]
 800b526:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	685b      	ldr	r3, [r3, #4]
 800b52c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b53a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b53e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	021b      	lsls	r3, r3, #8
 800b546:	68fa      	ldr	r2, [r7, #12]
 800b548:	4313      	orrs	r3, r2
 800b54a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b552:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	689b      	ldr	r3, [r3, #8]
 800b558:	051b      	lsls	r3, r3, #20
 800b55a:	693a      	ldr	r2, [r7, #16]
 800b55c:	4313      	orrs	r3, r2
 800b55e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	4a22      	ldr	r2, [pc, #136]	; (800b5ec <TIM_OC6_SetConfig+0xe0>)
 800b564:	4293      	cmp	r3, r2
 800b566:	d023      	beq.n	800b5b0 <TIM_OC6_SetConfig+0xa4>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	4a21      	ldr	r2, [pc, #132]	; (800b5f0 <TIM_OC6_SetConfig+0xe4>)
 800b56c:	4293      	cmp	r3, r2
 800b56e:	d01f      	beq.n	800b5b0 <TIM_OC6_SetConfig+0xa4>
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	4a20      	ldr	r2, [pc, #128]	; (800b5f4 <TIM_OC6_SetConfig+0xe8>)
 800b574:	4293      	cmp	r3, r2
 800b576:	d01b      	beq.n	800b5b0 <TIM_OC6_SetConfig+0xa4>
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	4a1f      	ldr	r2, [pc, #124]	; (800b5f8 <TIM_OC6_SetConfig+0xec>)
 800b57c:	4293      	cmp	r3, r2
 800b57e:	d017      	beq.n	800b5b0 <TIM_OC6_SetConfig+0xa4>
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	4a1e      	ldr	r2, [pc, #120]	; (800b5fc <TIM_OC6_SetConfig+0xf0>)
 800b584:	4293      	cmp	r3, r2
 800b586:	d013      	beq.n	800b5b0 <TIM_OC6_SetConfig+0xa4>
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	4a1d      	ldr	r2, [pc, #116]	; (800b600 <TIM_OC6_SetConfig+0xf4>)
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d00f      	beq.n	800b5b0 <TIM_OC6_SetConfig+0xa4>
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	4a1c      	ldr	r2, [pc, #112]	; (800b604 <TIM_OC6_SetConfig+0xf8>)
 800b594:	4293      	cmp	r3, r2
 800b596:	d00b      	beq.n	800b5b0 <TIM_OC6_SetConfig+0xa4>
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	4a1b      	ldr	r2, [pc, #108]	; (800b608 <TIM_OC6_SetConfig+0xfc>)
 800b59c:	4293      	cmp	r3, r2
 800b59e:	d007      	beq.n	800b5b0 <TIM_OC6_SetConfig+0xa4>
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	4a1a      	ldr	r2, [pc, #104]	; (800b60c <TIM_OC6_SetConfig+0x100>)
 800b5a4:	4293      	cmp	r3, r2
 800b5a6:	d003      	beq.n	800b5b0 <TIM_OC6_SetConfig+0xa4>
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	4a19      	ldr	r2, [pc, #100]	; (800b610 <TIM_OC6_SetConfig+0x104>)
 800b5ac:	4293      	cmp	r3, r2
 800b5ae:	d109      	bne.n	800b5c4 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b5b0:	697b      	ldr	r3, [r7, #20]
 800b5b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b5b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	695b      	ldr	r3, [r3, #20]
 800b5bc:	029b      	lsls	r3, r3, #10
 800b5be:	697a      	ldr	r2, [r7, #20]
 800b5c0:	4313      	orrs	r3, r2
 800b5c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	697a      	ldr	r2, [r7, #20]
 800b5c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	68fa      	ldr	r2, [r7, #12]
 800b5ce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	685a      	ldr	r2, [r3, #4]
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	693a      	ldr	r2, [r7, #16]
 800b5dc:	621a      	str	r2, [r3, #32]
}
 800b5de:	bf00      	nop
 800b5e0:	371c      	adds	r7, #28
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e8:	4770      	bx	lr
 800b5ea:	bf00      	nop
 800b5ec:	40012c00 	.word	0x40012c00
 800b5f0:	50012c00 	.word	0x50012c00
 800b5f4:	40013400 	.word	0x40013400
 800b5f8:	50013400 	.word	0x50013400
 800b5fc:	40014000 	.word	0x40014000
 800b600:	50014000 	.word	0x50014000
 800b604:	40014400 	.word	0x40014400
 800b608:	50014400 	.word	0x50014400
 800b60c:	40014800 	.word	0x40014800
 800b610:	50014800 	.word	0x50014800

0800b614 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b086      	sub	sp, #24
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
 800b61c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b61e:	2300      	movs	r3, #0
 800b620:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	689b      	ldr	r3, [r3, #8]
 800b628:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b62a:	693b      	ldr	r3, [r7, #16]
 800b62c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800b630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b634:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	685b      	ldr	r3, [r3, #4]
 800b63a:	693a      	ldr	r2, [r7, #16]
 800b63c:	4313      	orrs	r3, r2
 800b63e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b646:	f023 0307 	bic.w	r3, r3, #7
 800b64a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	693a      	ldr	r2, [r7, #16]
 800b652:	4313      	orrs	r3, r2
 800b654:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	693a      	ldr	r2, [r7, #16]
 800b65c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	685b      	ldr	r3, [r3, #4]
 800b662:	4a4e      	ldr	r2, [pc, #312]	; (800b79c <TIM_SlaveTimer_SetConfig+0x188>)
 800b664:	4293      	cmp	r3, r2
 800b666:	f000 8092 	beq.w	800b78e <TIM_SlaveTimer_SetConfig+0x17a>
 800b66a:	4a4c      	ldr	r2, [pc, #304]	; (800b79c <TIM_SlaveTimer_SetConfig+0x188>)
 800b66c:	4293      	cmp	r3, r2
 800b66e:	f200 808b 	bhi.w	800b788 <TIM_SlaveTimer_SetConfig+0x174>
 800b672:	4a4b      	ldr	r2, [pc, #300]	; (800b7a0 <TIM_SlaveTimer_SetConfig+0x18c>)
 800b674:	4293      	cmp	r3, r2
 800b676:	f000 808a 	beq.w	800b78e <TIM_SlaveTimer_SetConfig+0x17a>
 800b67a:	4a49      	ldr	r2, [pc, #292]	; (800b7a0 <TIM_SlaveTimer_SetConfig+0x18c>)
 800b67c:	4293      	cmp	r3, r2
 800b67e:	f200 8083 	bhi.w	800b788 <TIM_SlaveTimer_SetConfig+0x174>
 800b682:	4a48      	ldr	r2, [pc, #288]	; (800b7a4 <TIM_SlaveTimer_SetConfig+0x190>)
 800b684:	4293      	cmp	r3, r2
 800b686:	f000 8082 	beq.w	800b78e <TIM_SlaveTimer_SetConfig+0x17a>
 800b68a:	4a46      	ldr	r2, [pc, #280]	; (800b7a4 <TIM_SlaveTimer_SetConfig+0x190>)
 800b68c:	4293      	cmp	r3, r2
 800b68e:	d87b      	bhi.n	800b788 <TIM_SlaveTimer_SetConfig+0x174>
 800b690:	4a45      	ldr	r2, [pc, #276]	; (800b7a8 <TIM_SlaveTimer_SetConfig+0x194>)
 800b692:	4293      	cmp	r3, r2
 800b694:	d07b      	beq.n	800b78e <TIM_SlaveTimer_SetConfig+0x17a>
 800b696:	4a44      	ldr	r2, [pc, #272]	; (800b7a8 <TIM_SlaveTimer_SetConfig+0x194>)
 800b698:	4293      	cmp	r3, r2
 800b69a:	d875      	bhi.n	800b788 <TIM_SlaveTimer_SetConfig+0x174>
 800b69c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b6a0:	d075      	beq.n	800b78e <TIM_SlaveTimer_SetConfig+0x17a>
 800b6a2:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b6a6:	d86f      	bhi.n	800b788 <TIM_SlaveTimer_SetConfig+0x174>
 800b6a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b6ac:	d06f      	beq.n	800b78e <TIM_SlaveTimer_SetConfig+0x17a>
 800b6ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b6b2:	d869      	bhi.n	800b788 <TIM_SlaveTimer_SetConfig+0x174>
 800b6b4:	2b70      	cmp	r3, #112	; 0x70
 800b6b6:	d01a      	beq.n	800b6ee <TIM_SlaveTimer_SetConfig+0xda>
 800b6b8:	2b70      	cmp	r3, #112	; 0x70
 800b6ba:	d865      	bhi.n	800b788 <TIM_SlaveTimer_SetConfig+0x174>
 800b6bc:	2b60      	cmp	r3, #96	; 0x60
 800b6be:	d059      	beq.n	800b774 <TIM_SlaveTimer_SetConfig+0x160>
 800b6c0:	2b60      	cmp	r3, #96	; 0x60
 800b6c2:	d861      	bhi.n	800b788 <TIM_SlaveTimer_SetConfig+0x174>
 800b6c4:	2b50      	cmp	r3, #80	; 0x50
 800b6c6:	d04b      	beq.n	800b760 <TIM_SlaveTimer_SetConfig+0x14c>
 800b6c8:	2b50      	cmp	r3, #80	; 0x50
 800b6ca:	d85d      	bhi.n	800b788 <TIM_SlaveTimer_SetConfig+0x174>
 800b6cc:	2b40      	cmp	r3, #64	; 0x40
 800b6ce:	d019      	beq.n	800b704 <TIM_SlaveTimer_SetConfig+0xf0>
 800b6d0:	2b40      	cmp	r3, #64	; 0x40
 800b6d2:	d859      	bhi.n	800b788 <TIM_SlaveTimer_SetConfig+0x174>
 800b6d4:	2b30      	cmp	r3, #48	; 0x30
 800b6d6:	d05a      	beq.n	800b78e <TIM_SlaveTimer_SetConfig+0x17a>
 800b6d8:	2b30      	cmp	r3, #48	; 0x30
 800b6da:	d855      	bhi.n	800b788 <TIM_SlaveTimer_SetConfig+0x174>
 800b6dc:	2b20      	cmp	r3, #32
 800b6de:	d056      	beq.n	800b78e <TIM_SlaveTimer_SetConfig+0x17a>
 800b6e0:	2b20      	cmp	r3, #32
 800b6e2:	d851      	bhi.n	800b788 <TIM_SlaveTimer_SetConfig+0x174>
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d052      	beq.n	800b78e <TIM_SlaveTimer_SetConfig+0x17a>
 800b6e8:	2b10      	cmp	r3, #16
 800b6ea:	d050      	beq.n	800b78e <TIM_SlaveTimer_SetConfig+0x17a>
 800b6ec:	e04c      	b.n	800b788 <TIM_SlaveTimer_SetConfig+0x174>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6818      	ldr	r0, [r3, #0]
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	68d9      	ldr	r1, [r3, #12]
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	689a      	ldr	r2, [r3, #8]
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	691b      	ldr	r3, [r3, #16]
 800b6fe:	f000 f8d1 	bl	800b8a4 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800b702:	e045      	b.n	800b790 <TIM_SlaveTimer_SetConfig+0x17c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	2b05      	cmp	r3, #5
 800b70a:	d004      	beq.n	800b716 <TIM_SlaveTimer_SetConfig+0x102>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800b710:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 800b714:	d101      	bne.n	800b71a <TIM_SlaveTimer_SetConfig+0x106>
      {
        return HAL_ERROR;
 800b716:	2301      	movs	r3, #1
 800b718:	e03b      	b.n	800b792 <TIM_SlaveTimer_SetConfig+0x17e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	6a1b      	ldr	r3, [r3, #32]
 800b720:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	6a1a      	ldr	r2, [r3, #32]
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	f022 0201 	bic.w	r2, r2, #1
 800b730:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	699b      	ldr	r3, [r3, #24]
 800b738:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b740:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	691b      	ldr	r3, [r3, #16]
 800b746:	011b      	lsls	r3, r3, #4
 800b748:	68ba      	ldr	r2, [r7, #8]
 800b74a:	4313      	orrs	r3, r2
 800b74c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	68ba      	ldr	r2, [r7, #8]
 800b754:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	68fa      	ldr	r2, [r7, #12]
 800b75c:	621a      	str	r2, [r3, #32]
      break;
 800b75e:	e017      	b.n	800b790 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6818      	ldr	r0, [r3, #0]
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	6899      	ldr	r1, [r3, #8]
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	691b      	ldr	r3, [r3, #16]
 800b76c:	461a      	mov	r2, r3
 800b76e:	f000 f81d 	bl	800b7ac <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800b772:	e00d      	b.n	800b790 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6818      	ldr	r0, [r3, #0]
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	6899      	ldr	r1, [r3, #8]
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	691b      	ldr	r3, [r3, #16]
 800b780:	461a      	mov	r2, r3
 800b782:	f000 f842 	bl	800b80a <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800b786:	e003      	b.n	800b790 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 800b788:	2301      	movs	r3, #1
 800b78a:	75fb      	strb	r3, [r7, #23]
      break;
 800b78c:	e000      	b.n	800b790 <TIM_SlaveTimer_SetConfig+0x17c>
      break;
 800b78e:	bf00      	nop
  }

  return status;
 800b790:	7dfb      	ldrb	r3, [r7, #23]
}
 800b792:	4618      	mov	r0, r3
 800b794:	3718      	adds	r7, #24
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}
 800b79a:	bf00      	nop
 800b79c:	00100070 	.word	0x00100070
 800b7a0:	00100040 	.word	0x00100040
 800b7a4:	00100030 	.word	0x00100030
 800b7a8:	00100020 	.word	0x00100020

0800b7ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	b087      	sub	sp, #28
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	60f8      	str	r0, [r7, #12]
 800b7b4:	60b9      	str	r1, [r7, #8]
 800b7b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	6a1b      	ldr	r3, [r3, #32]
 800b7bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	6a1b      	ldr	r3, [r3, #32]
 800b7c2:	f023 0201 	bic.w	r2, r3, #1
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	699b      	ldr	r3, [r3, #24]
 800b7ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b7d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	011b      	lsls	r3, r3, #4
 800b7dc:	693a      	ldr	r2, [r7, #16]
 800b7de:	4313      	orrs	r3, r2
 800b7e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	f023 030a 	bic.w	r3, r3, #10
 800b7e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b7ea:	697a      	ldr	r2, [r7, #20]
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	4313      	orrs	r3, r2
 800b7f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	693a      	ldr	r2, [r7, #16]
 800b7f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	697a      	ldr	r2, [r7, #20]
 800b7fc:	621a      	str	r2, [r3, #32]
}
 800b7fe:	bf00      	nop
 800b800:	371c      	adds	r7, #28
 800b802:	46bd      	mov	sp, r7
 800b804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b808:	4770      	bx	lr

0800b80a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b80a:	b480      	push	{r7}
 800b80c:	b087      	sub	sp, #28
 800b80e:	af00      	add	r7, sp, #0
 800b810:	60f8      	str	r0, [r7, #12]
 800b812:	60b9      	str	r1, [r7, #8]
 800b814:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	6a1b      	ldr	r3, [r3, #32]
 800b81a:	f023 0210 	bic.w	r2, r3, #16
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	699b      	ldr	r3, [r3, #24]
 800b826:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	6a1b      	ldr	r3, [r3, #32]
 800b82c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b82e:	697b      	ldr	r3, [r7, #20]
 800b830:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b834:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	031b      	lsls	r3, r3, #12
 800b83a:	697a      	ldr	r2, [r7, #20]
 800b83c:	4313      	orrs	r3, r2
 800b83e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b840:	693b      	ldr	r3, [r7, #16]
 800b842:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b846:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	011b      	lsls	r3, r3, #4
 800b84c:	693a      	ldr	r2, [r7, #16]
 800b84e:	4313      	orrs	r3, r2
 800b850:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	697a      	ldr	r2, [r7, #20]
 800b856:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	693a      	ldr	r2, [r7, #16]
 800b85c:	621a      	str	r2, [r3, #32]
}
 800b85e:	bf00      	nop
 800b860:	371c      	adds	r7, #28
 800b862:	46bd      	mov	sp, r7
 800b864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b868:	4770      	bx	lr

0800b86a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_ITR8: Internal Trigger 8
  *            @arg TIM_TS_ITR11: Internal Trigger 11
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b86a:	b480      	push	{r7}
 800b86c:	b085      	sub	sp, #20
 800b86e:	af00      	add	r7, sp, #0
 800b870:	6078      	str	r0, [r7, #4]
 800b872:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	689b      	ldr	r3, [r3, #8]
 800b878:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800b880:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b884:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b886:	683a      	ldr	r2, [r7, #0]
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	4313      	orrs	r3, r2
 800b88c:	f043 0307 	orr.w	r3, r3, #7
 800b890:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	68fa      	ldr	r2, [r7, #12]
 800b896:	609a      	str	r2, [r3, #8]
}
 800b898:	bf00      	nop
 800b89a:	3714      	adds	r7, #20
 800b89c:	46bd      	mov	sp, r7
 800b89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a2:	4770      	bx	lr

0800b8a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b087      	sub	sp, #28
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	60f8      	str	r0, [r7, #12]
 800b8ac:	60b9      	str	r1, [r7, #8]
 800b8ae:	607a      	str	r2, [r7, #4]
 800b8b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	689b      	ldr	r3, [r3, #8]
 800b8b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b8be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	021a      	lsls	r2, r3, #8
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	431a      	orrs	r2, r3
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	4313      	orrs	r3, r2
 800b8cc:	697a      	ldr	r2, [r7, #20]
 800b8ce:	4313      	orrs	r3, r2
 800b8d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	697a      	ldr	r2, [r7, #20]
 800b8d6:	609a      	str	r2, [r3, #8]
}
 800b8d8:	bf00      	nop
 800b8da:	371c      	adds	r7, #28
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e2:	4770      	bx	lr

0800b8e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b085      	sub	sp, #20
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
 800b8ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b8f4:	2b01      	cmp	r3, #1
 800b8f6:	d101      	bne.n	800b8fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b8f8:	2302      	movs	r3, #2
 800b8fa:	e097      	b.n	800ba2c <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2201      	movs	r2, #1
 800b900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2202      	movs	r2, #2
 800b908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	685b      	ldr	r3, [r3, #4]
 800b912:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	689b      	ldr	r3, [r3, #8]
 800b91a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	4a45      	ldr	r2, [pc, #276]	; (800ba38 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800b922:	4293      	cmp	r3, r2
 800b924:	d00e      	beq.n	800b944 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	4a44      	ldr	r2, [pc, #272]	; (800ba3c <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800b92c:	4293      	cmp	r3, r2
 800b92e:	d009      	beq.n	800b944 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	4a42      	ldr	r2, [pc, #264]	; (800ba40 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d004      	beq.n	800b944 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	4a41      	ldr	r2, [pc, #260]	; (800ba44 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800b940:	4293      	cmp	r3, r2
 800b942:	d108      	bne.n	800b956 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b94a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	685b      	ldr	r3, [r3, #4]
 800b950:	68fa      	ldr	r2, [r7, #12]
 800b952:	4313      	orrs	r3, r2
 800b954:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800b95c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b960:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	68fa      	ldr	r2, [r7, #12]
 800b968:	4313      	orrs	r3, r2
 800b96a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	68fa      	ldr	r2, [r7, #12]
 800b972:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	4a2f      	ldr	r2, [pc, #188]	; (800ba38 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800b97a:	4293      	cmp	r3, r2
 800b97c:	d040      	beq.n	800ba00 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	4a2e      	ldr	r2, [pc, #184]	; (800ba3c <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800b984:	4293      	cmp	r3, r2
 800b986:	d03b      	beq.n	800ba00 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b990:	d036      	beq.n	800ba00 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b99a:	d031      	beq.n	800ba00 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	4a29      	ldr	r2, [pc, #164]	; (800ba48 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	d02c      	beq.n	800ba00 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	4a28      	ldr	r2, [pc, #160]	; (800ba4c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800b9ac:	4293      	cmp	r3, r2
 800b9ae:	d027      	beq.n	800ba00 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	4a26      	ldr	r2, [pc, #152]	; (800ba50 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	d022      	beq.n	800ba00 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	4a25      	ldr	r2, [pc, #148]	; (800ba54 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800b9c0:	4293      	cmp	r3, r2
 800b9c2:	d01d      	beq.n	800ba00 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	4a23      	ldr	r2, [pc, #140]	; (800ba58 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	d018      	beq.n	800ba00 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	4a22      	ldr	r2, [pc, #136]	; (800ba5c <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	d013      	beq.n	800ba00 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	4a18      	ldr	r2, [pc, #96]	; (800ba40 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d00e      	beq.n	800ba00 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	4a17      	ldr	r2, [pc, #92]	; (800ba44 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	d009      	beq.n	800ba00 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	4a1b      	ldr	r2, [pc, #108]	; (800ba60 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800b9f2:	4293      	cmp	r3, r2
 800b9f4:	d004      	beq.n	800ba00 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	4a1a      	ldr	r2, [pc, #104]	; (800ba64 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800b9fc:	4293      	cmp	r3, r2
 800b9fe:	d10c      	bne.n	800ba1a <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	689b      	ldr	r3, [r3, #8]
 800ba0c:	68ba      	ldr	r2, [r7, #8]
 800ba0e:	4313      	orrs	r3, r2
 800ba10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	68ba      	ldr	r2, [r7, #8]
 800ba18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2201      	movs	r2, #1
 800ba1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2200      	movs	r2, #0
 800ba26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ba2a:	2300      	movs	r3, #0
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3714      	adds	r7, #20
 800ba30:	46bd      	mov	sp, r7
 800ba32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba36:	4770      	bx	lr
 800ba38:	40012c00 	.word	0x40012c00
 800ba3c:	50012c00 	.word	0x50012c00
 800ba40:	40013400 	.word	0x40013400
 800ba44:	50013400 	.word	0x50013400
 800ba48:	40000400 	.word	0x40000400
 800ba4c:	50000400 	.word	0x50000400
 800ba50:	40000800 	.word	0x40000800
 800ba54:	50000800 	.word	0x50000800
 800ba58:	40000c00 	.word	0x40000c00
 800ba5c:	50000c00 	.word	0x50000c00
 800ba60:	40014000 	.word	0x40014000
 800ba64:	50014000 	.word	0x50014000

0800ba68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b083      	sub	sp, #12
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ba70:	bf00      	nop
 800ba72:	370c      	adds	r7, #12
 800ba74:	46bd      	mov	sp, r7
 800ba76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7a:	4770      	bx	lr

0800ba7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ba7c:	b480      	push	{r7}
 800ba7e:	b083      	sub	sp, #12
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ba84:	bf00      	nop
 800ba86:	370c      	adds	r7, #12
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8e:	4770      	bx	lr

0800ba90 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ba90:	b480      	push	{r7}
 800ba92:	b083      	sub	sp, #12
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ba98:	bf00      	nop
 800ba9a:	370c      	adds	r7, #12
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa2:	4770      	bx	lr

0800baa4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800baa4:	b480      	push	{r7}
 800baa6:	b083      	sub	sp, #12
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800baac:	bf00      	nop
 800baae:	370c      	adds	r7, #12
 800bab0:	46bd      	mov	sp, r7
 800bab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab6:	4770      	bx	lr

0800bab8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800bab8:	b480      	push	{r7}
 800baba:	b083      	sub	sp, #12
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800bac0:	bf00      	nop
 800bac2:	370c      	adds	r7, #12
 800bac4:	46bd      	mov	sp, r7
 800bac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baca:	4770      	bx	lr

0800bacc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800bacc:	b480      	push	{r7}
 800bace:	b083      	sub	sp, #12
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800bad4:	bf00      	nop
 800bad6:	370c      	adds	r7, #12
 800bad8:	46bd      	mov	sp, r7
 800bada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bade:	4770      	bx	lr

0800bae0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800bae0:	b480      	push	{r7}
 800bae2:	b083      	sub	sp, #12
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800bae8:	bf00      	nop
 800baea:	370c      	adds	r7, #12
 800baec:	46bd      	mov	sp, r7
 800baee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf2:	4770      	bx	lr

0800baf4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b082      	sub	sp, #8
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d101      	bne.n	800bb06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bb02:	2301      	movs	r3, #1
 800bb04:	e042      	b.n	800bb8c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d106      	bne.n	800bb1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2200      	movs	r2, #0
 800bb14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	f7f6 ff15 	bl	8002948 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2224      	movs	r2, #36	; 0x24
 800bb22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	681a      	ldr	r2, [r3, #0]
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	f022 0201 	bic.w	r2, r2, #1
 800bb34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	f000 f96c 	bl	800be14 <UART_SetConfig>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	2b01      	cmp	r3, #1
 800bb40:	d101      	bne.n	800bb46 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bb42:	2301      	movs	r3, #1
 800bb44:	e022      	b.n	800bb8c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d002      	beq.n	800bb54 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	f000 fb02 	bl	800c158 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	685a      	ldr	r2, [r3, #4]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bb62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	689a      	ldr	r2, [r3, #8]
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bb72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	681a      	ldr	r2, [r3, #0]
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	f042 0201 	orr.w	r2, r2, #1
 800bb82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f000 fb89 	bl	800c29c <UART_CheckIdleState>
 800bb8a:	4603      	mov	r3, r0
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	3708      	adds	r7, #8
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bd80      	pop	{r7, pc}

0800bb94 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bb94:	b480      	push	{r7}
 800bb96:	b091      	sub	sp, #68	; 0x44
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	60f8      	str	r0, [r7, #12]
 800bb9c:	60b9      	str	r1, [r7, #8]
 800bb9e:	4613      	mov	r3, r2
 800bba0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bba8:	2b20      	cmp	r3, #32
 800bbaa:	f040 809b 	bne.w	800bce4 <HAL_UART_Transmit_IT+0x150>
  {
    if ((pData == NULL) || (Size == 0U))
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d002      	beq.n	800bbba <HAL_UART_Transmit_IT+0x26>
 800bbb4:	88fb      	ldrh	r3, [r7, #6]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d101      	bne.n	800bbbe <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800bbba:	2301      	movs	r3, #1
 800bbbc:	e093      	b.n	800bce6 <HAL_UART_Transmit_IT+0x152>
    }

    __HAL_LOCK(huart);
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bbc4:	2b01      	cmp	r3, #1
 800bbc6:	d101      	bne.n	800bbcc <HAL_UART_Transmit_IT+0x38>
 800bbc8:	2302      	movs	r3, #2
 800bbca:	e08c      	b.n	800bce6 <HAL_UART_Transmit_IT+0x152>
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	2201      	movs	r2, #1
 800bbd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	689b      	ldr	r3, [r3, #8]
 800bbda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbde:	2b80      	cmp	r3, #128	; 0x80
 800bbe0:	d107      	bne.n	800bbf2 <HAL_UART_Transmit_IT+0x5e>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	689a      	ldr	r2, [r3, #8]
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bbf0:	609a      	str	r2, [r3, #8]
    }

    huart->pTxBuffPtr  = pData;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	68ba      	ldr	r2, [r7, #8]
 800bbf6:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	88fa      	ldrh	r2, [r7, #6]
 800bbfc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	88fa      	ldrh	r2, [r7, #6]
 800bc04:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	2200      	movs	r2, #0
 800bc12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	2221      	movs	r2, #33	; 0x21
 800bc1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc26:	d12e      	bne.n	800bc86 <HAL_UART_Transmit_IT+0xf2>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	689b      	ldr	r3, [r3, #8]
 800bc2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc30:	d107      	bne.n	800bc42 <HAL_UART_Transmit_IT+0xae>
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	691b      	ldr	r3, [r3, #16]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d103      	bne.n	800bc42 <HAL_UART_Transmit_IT+0xae>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	4a2d      	ldr	r2, [pc, #180]	; (800bcf4 <HAL_UART_Transmit_IT+0x160>)
 800bc3e:	675a      	str	r2, [r3, #116]	; 0x74
 800bc40:	e002      	b.n	800bc48 <HAL_UART_Transmit_IT+0xb4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	4a2c      	ldr	r2, [pc, #176]	; (800bcf8 <HAL_UART_Transmit_IT+0x164>)
 800bc46:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	3308      	adds	r3, #8
 800bc56:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc5a:	e853 3f00 	ldrex	r3, [r3]
 800bc5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bc60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc62:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bc66:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	3308      	adds	r3, #8
 800bc6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc70:	637a      	str	r2, [r7, #52]	; 0x34
 800bc72:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bc76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc78:	e841 2300 	strex	r3, r2, [r1]
 800bc7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bc7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d1e5      	bne.n	800bc50 <HAL_UART_Transmit_IT+0xbc>
 800bc84:	e02c      	b.n	800bce0 <HAL_UART_Transmit_IT+0x14c>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	689b      	ldr	r3, [r3, #8]
 800bc8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc8e:	d107      	bne.n	800bca0 <HAL_UART_Transmit_IT+0x10c>
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	691b      	ldr	r3, [r3, #16]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d103      	bne.n	800bca0 <HAL_UART_Transmit_IT+0x10c>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	4a18      	ldr	r2, [pc, #96]	; (800bcfc <HAL_UART_Transmit_IT+0x168>)
 800bc9c:	675a      	str	r2, [r3, #116]	; 0x74
 800bc9e:	e002      	b.n	800bca6 <HAL_UART_Transmit_IT+0x112>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	4a17      	ldr	r2, [pc, #92]	; (800bd00 <HAL_UART_Transmit_IT+0x16c>)
 800bca4:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	2200      	movs	r2, #0
 800bcaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	e853 3f00 	ldrex	r3, [r3]
 800bcba:	613b      	str	r3, [r7, #16]
   return(result);
 800bcbc:	693b      	ldr	r3, [r7, #16]
 800bcbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	461a      	mov	r2, r3
 800bcca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bccc:	623b      	str	r3, [r7, #32]
 800bcce:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcd0:	69f9      	ldr	r1, [r7, #28]
 800bcd2:	6a3a      	ldr	r2, [r7, #32]
 800bcd4:	e841 2300 	strex	r3, r2, [r1]
 800bcd8:	61bb      	str	r3, [r7, #24]
   return(result);
 800bcda:	69bb      	ldr	r3, [r7, #24]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d1e6      	bne.n	800bcae <HAL_UART_Transmit_IT+0x11a>
    }

    return HAL_OK;
 800bce0:	2300      	movs	r3, #0
 800bce2:	e000      	b.n	800bce6 <HAL_UART_Transmit_IT+0x152>
  }
  else
  {
    return HAL_BUSY;
 800bce4:	2302      	movs	r3, #2
  }
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	3744      	adds	r7, #68	; 0x44
 800bcea:	46bd      	mov	sp, r7
 800bcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf0:	4770      	bx	lr
 800bcf2:	bf00      	nop
 800bcf4:	0800cbf5 	.word	0x0800cbf5
 800bcf8:	0800cb15 	.word	0x0800cb15
 800bcfc:	0800ca53 	.word	0x0800ca53
 800bd00:	0800c99b 	.word	0x0800c99b

0800bd04 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b08a      	sub	sp, #40	; 0x28
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	60f8      	str	r0, [r7, #12]
 800bd0c:	60b9      	str	r1, [r7, #8]
 800bd0e:	4613      	mov	r3, r2
 800bd10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd18:	2b20      	cmp	r3, #32
 800bd1a:	d147      	bne.n	800bdac <HAL_UART_Receive_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d002      	beq.n	800bd28 <HAL_UART_Receive_DMA+0x24>
 800bd22:	88fb      	ldrh	r3, [r7, #6]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d101      	bne.n	800bd2c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800bd28:	2301      	movs	r3, #1
 800bd2a:	e040      	b.n	800bdae <HAL_UART_Receive_DMA+0xaa>
    }

    __HAL_LOCK(huart);
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bd32:	2b01      	cmp	r3, #1
 800bd34:	d101      	bne.n	800bd3a <HAL_UART_Receive_DMA+0x36>
 800bd36:	2302      	movs	r3, #2
 800bd38:	e039      	b.n	800bdae <HAL_UART_Receive_DMA+0xaa>
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	2201      	movs	r2, #1
 800bd3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	2200      	movs	r2, #0
 800bd46:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	4a1a      	ldr	r2, [pc, #104]	; (800bdb8 <HAL_UART_Receive_DMA+0xb4>)
 800bd4e:	4293      	cmp	r3, r2
 800bd50:	d024      	beq.n	800bd9c <HAL_UART_Receive_DMA+0x98>
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	4a19      	ldr	r2, [pc, #100]	; (800bdbc <HAL_UART_Receive_DMA+0xb8>)
 800bd58:	4293      	cmp	r3, r2
 800bd5a:	d01f      	beq.n	800bd9c <HAL_UART_Receive_DMA+0x98>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	685b      	ldr	r3, [r3, #4]
 800bd62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d018      	beq.n	800bd9c <HAL_UART_Receive_DMA+0x98>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd70:	697b      	ldr	r3, [r7, #20]
 800bd72:	e853 3f00 	ldrex	r3, [r3]
 800bd76:	613b      	str	r3, [r7, #16]
   return(result);
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bd7e:	627b      	str	r3, [r7, #36]	; 0x24
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	461a      	mov	r2, r3
 800bd86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd88:	623b      	str	r3, [r7, #32]
 800bd8a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd8c:	69f9      	ldr	r1, [r7, #28]
 800bd8e:	6a3a      	ldr	r2, [r7, #32]
 800bd90:	e841 2300 	strex	r3, r2, [r1]
 800bd94:	61bb      	str	r3, [r7, #24]
   return(result);
 800bd96:	69bb      	ldr	r3, [r7, #24]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d1e6      	bne.n	800bd6a <HAL_UART_Receive_DMA+0x66>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800bd9c:	88fb      	ldrh	r3, [r7, #6]
 800bd9e:	461a      	mov	r2, r3
 800bda0:	68b9      	ldr	r1, [r7, #8]
 800bda2:	68f8      	ldr	r0, [r7, #12]
 800bda4:	f000 fb8e 	bl	800c4c4 <UART_Start_Receive_DMA>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	e000      	b.n	800bdae <HAL_UART_Receive_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 800bdac:	2302      	movs	r3, #2
  }
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	3728      	adds	r7, #40	; 0x28
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}
 800bdb6:	bf00      	nop
 800bdb8:	46002400 	.word	0x46002400
 800bdbc:	56002400 	.word	0x56002400

0800bdc0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bdc0:	b480      	push	{r7}
 800bdc2:	b083      	sub	sp, #12
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800bdc8:	bf00      	nop
 800bdca:	370c      	adds	r7, #12
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd2:	4770      	bx	lr

0800bdd4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b083      	sub	sp, #12
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800bddc:	bf00      	nop
 800bdde:	370c      	adds	r7, #12
 800bde0:	46bd      	mov	sp, r7
 800bde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde6:	4770      	bx	lr

0800bde8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b083      	sub	sp, #12
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bdf0:	bf00      	nop
 800bdf2:	370c      	adds	r7, #12
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfa:	4770      	bx	lr

0800bdfc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b083      	sub	sp, #12
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
 800be04:	460b      	mov	r3, r1
 800be06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800be08:	bf00      	nop
 800be0a:	370c      	adds	r7, #12
 800be0c:	46bd      	mov	sp, r7
 800be0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be12:	4770      	bx	lr

0800be14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800be14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800be18:	b094      	sub	sp, #80	; 0x50
 800be1a:	af00      	add	r7, sp, #0
 800be1c:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800be1e:	2300      	movs	r3, #0
 800be20:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800be24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be26:	681a      	ldr	r2, [r3, #0]
 800be28:	4b7e      	ldr	r3, [pc, #504]	; (800c024 <UART_SetConfig+0x210>)
 800be2a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800be2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be2e:	689a      	ldr	r2, [r3, #8]
 800be30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be32:	691b      	ldr	r3, [r3, #16]
 800be34:	431a      	orrs	r2, r3
 800be36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be38:	695b      	ldr	r3, [r3, #20]
 800be3a:	431a      	orrs	r2, r3
 800be3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be3e:	69db      	ldr	r3, [r3, #28]
 800be40:	4313      	orrs	r3, r2
 800be42:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800be44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	4977      	ldr	r1, [pc, #476]	; (800c028 <UART_SetConfig+0x214>)
 800be4c:	4019      	ands	r1, r3
 800be4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be50:	681a      	ldr	r2, [r3, #0]
 800be52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be54:	430b      	orrs	r3, r1
 800be56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800be58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	685b      	ldr	r3, [r3, #4]
 800be5e:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800be62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be64:	68d9      	ldr	r1, [r3, #12]
 800be66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be68:	681a      	ldr	r2, [r3, #0]
 800be6a:	ea40 0301 	orr.w	r3, r0, r1
 800be6e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800be70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be72:	699b      	ldr	r3, [r3, #24]
 800be74:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800be76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be78:	681a      	ldr	r2, [r3, #0]
 800be7a:	4b6a      	ldr	r3, [pc, #424]	; (800c024 <UART_SetConfig+0x210>)
 800be7c:	429a      	cmp	r2, r3
 800be7e:	d009      	beq.n	800be94 <UART_SetConfig+0x80>
 800be80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be82:	681a      	ldr	r2, [r3, #0]
 800be84:	4b69      	ldr	r3, [pc, #420]	; (800c02c <UART_SetConfig+0x218>)
 800be86:	429a      	cmp	r2, r3
 800be88:	d004      	beq.n	800be94 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800be8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be8c:	6a1a      	ldr	r2, [r3, #32]
 800be8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be90:	4313      	orrs	r3, r2
 800be92:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800be94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	689b      	ldr	r3, [r3, #8]
 800be9a:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800be9e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800bea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bea4:	681a      	ldr	r2, [r3, #0]
 800bea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bea8:	430b      	orrs	r3, r1
 800beaa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800beac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beb2:	f023 000f 	bic.w	r0, r3, #15
 800beb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beb8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800beba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bebc:	681a      	ldr	r2, [r3, #0]
 800bebe:	ea40 0301 	orr.w	r3, r0, r1
 800bec2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bec6:	681a      	ldr	r2, [r3, #0]
 800bec8:	4b59      	ldr	r3, [pc, #356]	; (800c030 <UART_SetConfig+0x21c>)
 800beca:	429a      	cmp	r2, r3
 800becc:	d102      	bne.n	800bed4 <UART_SetConfig+0xc0>
 800bece:	2301      	movs	r3, #1
 800bed0:	64bb      	str	r3, [r7, #72]	; 0x48
 800bed2:	e029      	b.n	800bf28 <UART_SetConfig+0x114>
 800bed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bed6:	681a      	ldr	r2, [r3, #0]
 800bed8:	4b56      	ldr	r3, [pc, #344]	; (800c034 <UART_SetConfig+0x220>)
 800beda:	429a      	cmp	r2, r3
 800bedc:	d102      	bne.n	800bee4 <UART_SetConfig+0xd0>
 800bede:	2302      	movs	r3, #2
 800bee0:	64bb      	str	r3, [r7, #72]	; 0x48
 800bee2:	e021      	b.n	800bf28 <UART_SetConfig+0x114>
 800bee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bee6:	681a      	ldr	r2, [r3, #0]
 800bee8:	4b53      	ldr	r3, [pc, #332]	; (800c038 <UART_SetConfig+0x224>)
 800beea:	429a      	cmp	r2, r3
 800beec:	d102      	bne.n	800bef4 <UART_SetConfig+0xe0>
 800beee:	2304      	movs	r3, #4
 800bef0:	64bb      	str	r3, [r7, #72]	; 0x48
 800bef2:	e019      	b.n	800bf28 <UART_SetConfig+0x114>
 800bef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bef6:	681a      	ldr	r2, [r3, #0]
 800bef8:	4b50      	ldr	r3, [pc, #320]	; (800c03c <UART_SetConfig+0x228>)
 800befa:	429a      	cmp	r2, r3
 800befc:	d102      	bne.n	800bf04 <UART_SetConfig+0xf0>
 800befe:	2308      	movs	r3, #8
 800bf00:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf02:	e011      	b.n	800bf28 <UART_SetConfig+0x114>
 800bf04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf06:	681a      	ldr	r2, [r3, #0]
 800bf08:	4b4d      	ldr	r3, [pc, #308]	; (800c040 <UART_SetConfig+0x22c>)
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	d102      	bne.n	800bf14 <UART_SetConfig+0x100>
 800bf0e:	2310      	movs	r3, #16
 800bf10:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf12:	e009      	b.n	800bf28 <UART_SetConfig+0x114>
 800bf14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf16:	681a      	ldr	r2, [r3, #0]
 800bf18:	4b42      	ldr	r3, [pc, #264]	; (800c024 <UART_SetConfig+0x210>)
 800bf1a:	429a      	cmp	r2, r3
 800bf1c:	d102      	bne.n	800bf24 <UART_SetConfig+0x110>
 800bf1e:	2320      	movs	r3, #32
 800bf20:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf22:	e001      	b.n	800bf28 <UART_SetConfig+0x114>
 800bf24:	2300      	movs	r3, #0
 800bf26:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bf28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf2a:	681a      	ldr	r2, [r3, #0]
 800bf2c:	4b3d      	ldr	r3, [pc, #244]	; (800c024 <UART_SetConfig+0x210>)
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	d005      	beq.n	800bf3e <UART_SetConfig+0x12a>
 800bf32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf34:	681a      	ldr	r2, [r3, #0]
 800bf36:	4b3d      	ldr	r3, [pc, #244]	; (800c02c <UART_SetConfig+0x218>)
 800bf38:	429a      	cmp	r2, r3
 800bf3a:	f040 8085 	bne.w	800c048 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800bf3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf40:	2200      	movs	r2, #0
 800bf42:	623b      	str	r3, [r7, #32]
 800bf44:	627a      	str	r2, [r7, #36]	; 0x24
 800bf46:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800bf4a:	f7fc ff7d 	bl	8008e48 <HAL_RCCEx_GetPeriphCLKFreq>
 800bf4e:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800bf50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	f000 80e8 	beq.w	800c128 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bf58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf5c:	4a39      	ldr	r2, [pc, #228]	; (800c044 <UART_SetConfig+0x230>)
 800bf5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf62:	461a      	mov	r2, r3
 800bf64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf66:	fbb3 f3f2 	udiv	r3, r3, r2
 800bf6a:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bf6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf6e:	685a      	ldr	r2, [r3, #4]
 800bf70:	4613      	mov	r3, r2
 800bf72:	005b      	lsls	r3, r3, #1
 800bf74:	4413      	add	r3, r2
 800bf76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf78:	429a      	cmp	r2, r3
 800bf7a:	d305      	bcc.n	800bf88 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bf7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf7e:	685b      	ldr	r3, [r3, #4]
 800bf80:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bf82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf84:	429a      	cmp	r2, r3
 800bf86:	d903      	bls.n	800bf90 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800bf88:	2301      	movs	r3, #1
 800bf8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800bf8e:	e048      	b.n	800c022 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf92:	2200      	movs	r2, #0
 800bf94:	61bb      	str	r3, [r7, #24]
 800bf96:	61fa      	str	r2, [r7, #28]
 800bf98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf9c:	4a29      	ldr	r2, [pc, #164]	; (800c044 <UART_SetConfig+0x230>)
 800bf9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bfa2:	b29b      	uxth	r3, r3
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	613b      	str	r3, [r7, #16]
 800bfa8:	617a      	str	r2, [r7, #20]
 800bfaa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bfae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800bfb2:	f7f4 fd87 	bl	8000ac4 <__aeabi_uldivmod>
 800bfb6:	4602      	mov	r2, r0
 800bfb8:	460b      	mov	r3, r1
 800bfba:	4610      	mov	r0, r2
 800bfbc:	4619      	mov	r1, r3
 800bfbe:	f04f 0200 	mov.w	r2, #0
 800bfc2:	f04f 0300 	mov.w	r3, #0
 800bfc6:	020b      	lsls	r3, r1, #8
 800bfc8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bfcc:	0202      	lsls	r2, r0, #8
 800bfce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bfd0:	6849      	ldr	r1, [r1, #4]
 800bfd2:	0849      	lsrs	r1, r1, #1
 800bfd4:	2000      	movs	r0, #0
 800bfd6:	460c      	mov	r4, r1
 800bfd8:	4605      	mov	r5, r0
 800bfda:	eb12 0804 	adds.w	r8, r2, r4
 800bfde:	eb43 0905 	adc.w	r9, r3, r5
 800bfe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfe4:	685b      	ldr	r3, [r3, #4]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	60bb      	str	r3, [r7, #8]
 800bfea:	60fa      	str	r2, [r7, #12]
 800bfec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bff0:	4640      	mov	r0, r8
 800bff2:	4649      	mov	r1, r9
 800bff4:	f7f4 fd66 	bl	8000ac4 <__aeabi_uldivmod>
 800bff8:	4602      	mov	r2, r0
 800bffa:	460b      	mov	r3, r1
 800bffc:	4613      	mov	r3, r2
 800bffe:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c002:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c006:	d308      	bcc.n	800c01a <UART_SetConfig+0x206>
 800c008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c00a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c00e:	d204      	bcs.n	800c01a <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800c010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c016:	60da      	str	r2, [r3, #12]
 800c018:	e003      	b.n	800c022 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800c01a:	2301      	movs	r3, #1
 800c01c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800c020:	e082      	b.n	800c128 <UART_SetConfig+0x314>
 800c022:	e081      	b.n	800c128 <UART_SetConfig+0x314>
 800c024:	46002400 	.word	0x46002400
 800c028:	cfff69f3 	.word	0xcfff69f3
 800c02c:	56002400 	.word	0x56002400
 800c030:	40013800 	.word	0x40013800
 800c034:	40004400 	.word	0x40004400
 800c038:	40004800 	.word	0x40004800
 800c03c:	40004c00 	.word	0x40004c00
 800c040:	40005000 	.word	0x40005000
 800c044:	0800d0e0 	.word	0x0800d0e0
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c04a:	69db      	ldr	r3, [r3, #28]
 800c04c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c050:	d13c      	bne.n	800c0cc <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c052:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c054:	2200      	movs	r2, #0
 800c056:	603b      	str	r3, [r7, #0]
 800c058:	607a      	str	r2, [r7, #4]
 800c05a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c05e:	f7fc fef3 	bl	8008e48 <HAL_RCCEx_GetPeriphCLKFreq>
 800c062:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c064:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c066:	2b00      	cmp	r3, #0
 800c068:	d05e      	beq.n	800c128 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c06a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c06e:	4a39      	ldr	r2, [pc, #228]	; (800c154 <UART_SetConfig+0x340>)
 800c070:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c074:	461a      	mov	r2, r3
 800c076:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c078:	fbb3 f3f2 	udiv	r3, r3, r2
 800c07c:	005a      	lsls	r2, r3, #1
 800c07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c080:	685b      	ldr	r3, [r3, #4]
 800c082:	085b      	lsrs	r3, r3, #1
 800c084:	441a      	add	r2, r3
 800c086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c088:	685b      	ldr	r3, [r3, #4]
 800c08a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c08e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c092:	2b0f      	cmp	r3, #15
 800c094:	d916      	bls.n	800c0c4 <UART_SetConfig+0x2b0>
 800c096:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c09c:	d212      	bcs.n	800c0c4 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c09e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0a0:	b29b      	uxth	r3, r3
 800c0a2:	f023 030f 	bic.w	r3, r3, #15
 800c0a6:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c0a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0aa:	085b      	lsrs	r3, r3, #1
 800c0ac:	b29b      	uxth	r3, r3
 800c0ae:	f003 0307 	and.w	r3, r3, #7
 800c0b2:	b29a      	uxth	r2, r3
 800c0b4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c0b6:	4313      	orrs	r3, r2
 800c0b8:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800c0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c0c0:	60da      	str	r2, [r3, #12]
 800c0c2:	e031      	b.n	800c128 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800c0c4:	2301      	movs	r3, #1
 800c0c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800c0ca:	e02d      	b.n	800c128 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c0cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	469a      	mov	sl, r3
 800c0d2:	4693      	mov	fp, r2
 800c0d4:	4650      	mov	r0, sl
 800c0d6:	4659      	mov	r1, fp
 800c0d8:	f7fc feb6 	bl	8008e48 <HAL_RCCEx_GetPeriphCLKFreq>
 800c0dc:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800c0de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d021      	beq.n	800c128 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0e8:	4a1a      	ldr	r2, [pc, #104]	; (800c154 <UART_SetConfig+0x340>)
 800c0ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c0ee:	461a      	mov	r2, r3
 800c0f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0f2:	fbb3 f2f2 	udiv	r2, r3, r2
 800c0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0f8:	685b      	ldr	r3, [r3, #4]
 800c0fa:	085b      	lsrs	r3, r3, #1
 800c0fc:	441a      	add	r2, r3
 800c0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c100:	685b      	ldr	r3, [r3, #4]
 800c102:	fbb2 f3f3 	udiv	r3, r2, r3
 800c106:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c10a:	2b0f      	cmp	r3, #15
 800c10c:	d909      	bls.n	800c122 <UART_SetConfig+0x30e>
 800c10e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c114:	d205      	bcs.n	800c122 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c118:	b29a      	uxth	r2, r3
 800c11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	60da      	str	r2, [r3, #12]
 800c120:	e002      	b.n	800c128 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800c122:	2301      	movs	r3, #1
 800c124:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c12a:	2201      	movs	r2, #1
 800c12c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c132:	2201      	movs	r2, #1
 800c134:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c13a:	2200      	movs	r2, #0
 800c13c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c140:	2200      	movs	r2, #0
 800c142:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c144:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3750      	adds	r7, #80	; 0x50
 800c14c:	46bd      	mov	sp, r7
 800c14e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c152:	bf00      	nop
 800c154:	0800d0e0 	.word	0x0800d0e0

0800c158 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c158:	b480      	push	{r7}
 800c15a:	b083      	sub	sp, #12
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c164:	f003 0301 	and.w	r3, r3, #1
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d00a      	beq.n	800c182 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	685b      	ldr	r3, [r3, #4]
 800c172:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	430a      	orrs	r2, r1
 800c180:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c186:	f003 0302 	and.w	r3, r3, #2
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d00a      	beq.n	800c1a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	685b      	ldr	r3, [r3, #4]
 800c194:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	430a      	orrs	r2, r1
 800c1a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1a8:	f003 0304 	and.w	r3, r3, #4
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d00a      	beq.n	800c1c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	685b      	ldr	r3, [r3, #4]
 800c1b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	430a      	orrs	r2, r1
 800c1c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1ca:	f003 0308 	and.w	r3, r3, #8
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d00a      	beq.n	800c1e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	685b      	ldr	r3, [r3, #4]
 800c1d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	430a      	orrs	r2, r1
 800c1e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1ec:	f003 0310 	and.w	r3, r3, #16
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d00a      	beq.n	800c20a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	689b      	ldr	r3, [r3, #8]
 800c1fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	430a      	orrs	r2, r1
 800c208:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c20e:	f003 0320 	and.w	r3, r3, #32
 800c212:	2b00      	cmp	r3, #0
 800c214:	d00a      	beq.n	800c22c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	689b      	ldr	r3, [r3, #8]
 800c21c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	430a      	orrs	r2, r1
 800c22a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c234:	2b00      	cmp	r3, #0
 800c236:	d01a      	beq.n	800c26e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	685b      	ldr	r3, [r3, #4]
 800c23e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	430a      	orrs	r2, r1
 800c24c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c252:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c256:	d10a      	bne.n	800c26e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	685b      	ldr	r3, [r3, #4]
 800c25e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	430a      	orrs	r2, r1
 800c26c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c276:	2b00      	cmp	r3, #0
 800c278:	d00a      	beq.n	800c290 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	685b      	ldr	r3, [r3, #4]
 800c280:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	430a      	orrs	r2, r1
 800c28e:	605a      	str	r2, [r3, #4]
  }
}
 800c290:	bf00      	nop
 800c292:	370c      	adds	r7, #12
 800c294:	46bd      	mov	sp, r7
 800c296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29a:	4770      	bx	lr

0800c29c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b086      	sub	sp, #24
 800c2a0:	af02      	add	r7, sp, #8
 800c2a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c2ac:	f7f6 fd10 	bl	8002cd0 <HAL_GetTick>
 800c2b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	f003 0308 	and.w	r3, r3, #8
 800c2bc:	2b08      	cmp	r3, #8
 800c2be:	d10e      	bne.n	800c2de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c2c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c2c4:	9300      	str	r3, [sp, #0]
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f000 f82f 	bl	800c332 <UART_WaitOnFlagUntilTimeout>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d001      	beq.n	800c2de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c2da:	2303      	movs	r3, #3
 800c2dc:	e025      	b.n	800c32a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	f003 0304 	and.w	r3, r3, #4
 800c2e8:	2b04      	cmp	r3, #4
 800c2ea:	d10e      	bne.n	800c30a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c2ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c2f0:	9300      	str	r3, [sp, #0]
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f000 f819 	bl	800c332 <UART_WaitOnFlagUntilTimeout>
 800c300:	4603      	mov	r3, r0
 800c302:	2b00      	cmp	r3, #0
 800c304:	d001      	beq.n	800c30a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c306:	2303      	movs	r3, #3
 800c308:	e00f      	b.n	800c32a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2220      	movs	r2, #32
 800c30e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2220      	movs	r2, #32
 800c316:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2200      	movs	r2, #0
 800c31e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2200      	movs	r2, #0
 800c324:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c328:	2300      	movs	r3, #0
}
 800c32a:	4618      	mov	r0, r3
 800c32c:	3710      	adds	r7, #16
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}

0800c332 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c332:	b580      	push	{r7, lr}
 800c334:	b09c      	sub	sp, #112	; 0x70
 800c336:	af00      	add	r7, sp, #0
 800c338:	60f8      	str	r0, [r7, #12]
 800c33a:	60b9      	str	r1, [r7, #8]
 800c33c:	603b      	str	r3, [r7, #0]
 800c33e:	4613      	mov	r3, r2
 800c340:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c342:	e0a9      	b.n	800c498 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c344:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c34a:	f000 80a5 	beq.w	800c498 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c34e:	f7f6 fcbf 	bl	8002cd0 <HAL_GetTick>
 800c352:	4602      	mov	r2, r0
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	1ad3      	subs	r3, r2, r3
 800c358:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c35a:	429a      	cmp	r2, r3
 800c35c:	d302      	bcc.n	800c364 <UART_WaitOnFlagUntilTimeout+0x32>
 800c35e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c360:	2b00      	cmp	r3, #0
 800c362:	d140      	bne.n	800c3e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c36a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c36c:	e853 3f00 	ldrex	r3, [r3]
 800c370:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c374:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c378:	667b      	str	r3, [r7, #100]	; 0x64
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	461a      	mov	r2, r3
 800c380:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c382:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c384:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c386:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c388:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c38a:	e841 2300 	strex	r3, r2, [r1]
 800c38e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c390:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c392:	2b00      	cmp	r3, #0
 800c394:	d1e6      	bne.n	800c364 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	3308      	adds	r3, #8
 800c39c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c39e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3a0:	e853 3f00 	ldrex	r3, [r3]
 800c3a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3a8:	f023 0301 	bic.w	r3, r3, #1
 800c3ac:	663b      	str	r3, [r7, #96]	; 0x60
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	3308      	adds	r3, #8
 800c3b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c3b6:	64ba      	str	r2, [r7, #72]	; 0x48
 800c3b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c3bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c3be:	e841 2300 	strex	r3, r2, [r1]
 800c3c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c3c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d1e5      	bne.n	800c396 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	2220      	movs	r2, #32
 800c3ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	2220      	movs	r2, #32
 800c3d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	2200      	movs	r2, #0
 800c3de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c3e2:	2303      	movs	r3, #3
 800c3e4:	e069      	b.n	800c4ba <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	f003 0304 	and.w	r3, r3, #4
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d051      	beq.n	800c498 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	69db      	ldr	r3, [r3, #28]
 800c3fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c3fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c402:	d149      	bne.n	800c498 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c40c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c416:	e853 3f00 	ldrex	r3, [r3]
 800c41a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c41e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c422:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	461a      	mov	r2, r3
 800c42a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c42c:	637b      	str	r3, [r7, #52]	; 0x34
 800c42e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c430:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c432:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c434:	e841 2300 	strex	r3, r2, [r1]
 800c438:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d1e6      	bne.n	800c40e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	3308      	adds	r3, #8
 800c446:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c448:	697b      	ldr	r3, [r7, #20]
 800c44a:	e853 3f00 	ldrex	r3, [r3]
 800c44e:	613b      	str	r3, [r7, #16]
   return(result);
 800c450:	693b      	ldr	r3, [r7, #16]
 800c452:	f023 0301 	bic.w	r3, r3, #1
 800c456:	66bb      	str	r3, [r7, #104]	; 0x68
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	3308      	adds	r3, #8
 800c45e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c460:	623a      	str	r2, [r7, #32]
 800c462:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c464:	69f9      	ldr	r1, [r7, #28]
 800c466:	6a3a      	ldr	r2, [r7, #32]
 800c468:	e841 2300 	strex	r3, r2, [r1]
 800c46c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c46e:	69bb      	ldr	r3, [r7, #24]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d1e5      	bne.n	800c440 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	2220      	movs	r2, #32
 800c478:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	2220      	movs	r2, #32
 800c480:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	2220      	movs	r2, #32
 800c488:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	2200      	movs	r2, #0
 800c490:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c494:	2303      	movs	r3, #3
 800c496:	e010      	b.n	800c4ba <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	69da      	ldr	r2, [r3, #28]
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	4013      	ands	r3, r2
 800c4a2:	68ba      	ldr	r2, [r7, #8]
 800c4a4:	429a      	cmp	r2, r3
 800c4a6:	bf0c      	ite	eq
 800c4a8:	2301      	moveq	r3, #1
 800c4aa:	2300      	movne	r3, #0
 800c4ac:	b2db      	uxtb	r3, r3
 800c4ae:	461a      	mov	r2, r3
 800c4b0:	79fb      	ldrb	r3, [r7, #7]
 800c4b2:	429a      	cmp	r2, r3
 800c4b4:	f43f af46 	beq.w	800c344 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c4b8:	2300      	movs	r3, #0
}
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	3770      	adds	r7, #112	; 0x70
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd80      	pop	{r7, pc}
	...

0800c4c4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b098      	sub	sp, #96	; 0x60
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	60f8      	str	r0, [r7, #12]
 800c4cc:	60b9      	str	r1, [r7, #8]
 800c4ce:	4613      	mov	r3, r2
 800c4d0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint16_t nbByte = Size;
 800c4d2:	88fb      	ldrh	r3, [r7, #6]
 800c4d4:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

  huart->pRxBuffPtr = pData;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	68ba      	ldr	r2, [r7, #8]
 800c4dc:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	88fa      	ldrh	r2, [r7, #6]
 800c4e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	2222      	movs	r2, #34	; 0x22
 800c4f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d074      	beq.n	800c5e8 <UART_Start_Receive_DMA+0x124>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c502:	4a66      	ldr	r2, [pc, #408]	; (800c69c <UART_Start_Receive_DMA+0x1d8>)
 800c504:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c50a:	4a65      	ldr	r2, [pc, #404]	; (800c6a0 <UART_Start_Receive_DMA+0x1dc>)
 800c50c:	665a      	str	r2, [r3, #100]	; 0x64

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c512:	4a64      	ldr	r2, [pc, #400]	; (800c6a4 <UART_Start_Receive_DMA+0x1e0>)
 800c514:	669a      	str	r2, [r3, #104]	; 0x68

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c51a:	2200      	movs	r2, #0
 800c51c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, so nbByte should be equal to Size * 2 */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	689b      	ldr	r3, [r3, #8]
 800c522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c526:	d107      	bne.n	800c538 <UART_Start_Receive_DMA+0x74>
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	691b      	ldr	r3, [r3, #16]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d103      	bne.n	800c538 <UART_Start_Receive_DMA+0x74>
    {
      nbByte = Size * 2U;
 800c530:	88fb      	ldrh	r3, [r7, #6]
 800c532:	005b      	lsls	r3, r3, #1
 800c534:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    }

    /* Check linked list mode */
    if ((huart->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c53c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c53e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c542:	2b00      	cmp	r3, #0
 800c544:	d02e      	beq.n	800c5a4 <UART_Start_Receive_DMA+0xe0>
    {
      if ((huart->hdmarx->LinkedListQueue != NULL) && (huart->hdmarx->LinkedListQueue->Head != NULL))
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c54a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d025      	beq.n	800c59c <UART_Start_Receive_DMA+0xd8>
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d01f      	beq.n	800c59c <UART_Start_Receive_DMA+0xd8>
      {
        /* Set DMA data size */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800c568:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
          (uint32_t)&huart->Instance->RDR;
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	f103 0224 	add.w	r2, r3, #36	; 0x24
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c576:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)huart->pRxBuffPtr;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	611a      	str	r2, [r3, #16]

        /* Enable the UART receive DMA channel */
        status = HAL_DMAEx_List_Start_IT(huart->hdmarx);
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c58e:	4618      	mov	r0, r3
 800c590:	f7f8 ff35 	bl	80053fe <HAL_DMAEx_List_Start_IT>
 800c594:	4603      	mov	r3, r0
 800c596:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c59a:	e013      	b.n	800c5c4 <UART_Start_Receive_DMA+0x100>
      }
      else
      {
        /* Update status */
        status = HAL_ERROR;
 800c59c:	2301      	movs	r3, #1
 800c59e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c5a2:	e00f      	b.n	800c5c4 <UART_Start_Receive_DMA+0x100>
      }
    }
    else
    {
      /* Enable the UART receive DMA channel */
      status = HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, nbByte);
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	3324      	adds	r3, #36	; 0x24
 800c5ae:	4619      	mov	r1, r3
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5b4:	461a      	mov	r2, r3
 800c5b6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800c5ba:	f7f8 fe9b 	bl	80052f4 <HAL_DMA_Start_IT>
 800c5be:	4603      	mov	r3, r0
 800c5c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }

    if (status != HAL_OK)
 800c5c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d00d      	beq.n	800c5e8 <UART_Start_Receive_DMA+0x124>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	2210      	movs	r2, #16
 800c5d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	2220      	movs	r2, #32
 800c5e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	e055      	b.n	800c694 <UART_Start_Receive_DMA+0x1d0>
    }
  }
  __HAL_UNLOCK(huart);
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	691b      	ldr	r3, [r3, #16]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d018      	beq.n	800c62a <UART_Start_Receive_DMA+0x166>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c600:	e853 3f00 	ldrex	r3, [r3]
 800c604:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c60c:	65bb      	str	r3, [r7, #88]	; 0x58
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	461a      	mov	r2, r3
 800c614:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c616:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c618:	64ba      	str	r2, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c61a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c61c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c61e:	e841 2300 	strex	r3, r2, [r1]
 800c622:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c626:	2b00      	cmp	r3, #0
 800c628:	d1e6      	bne.n	800c5f8 <UART_Start_Receive_DMA+0x134>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	3308      	adds	r3, #8
 800c630:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c634:	e853 3f00 	ldrex	r3, [r3]
 800c638:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c63c:	f043 0301 	orr.w	r3, r3, #1
 800c640:	657b      	str	r3, [r7, #84]	; 0x54
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	3308      	adds	r3, #8
 800c648:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c64a:	63ba      	str	r2, [r7, #56]	; 0x38
 800c64c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c64e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c650:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c652:	e841 2300 	strex	r3, r2, [r1]
 800c656:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d1e5      	bne.n	800c62a <UART_Start_Receive_DMA+0x166>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	3308      	adds	r3, #8
 800c664:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c666:	69bb      	ldr	r3, [r7, #24]
 800c668:	e853 3f00 	ldrex	r3, [r3]
 800c66c:	617b      	str	r3, [r7, #20]
   return(result);
 800c66e:	697b      	ldr	r3, [r7, #20]
 800c670:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c674:	653b      	str	r3, [r7, #80]	; 0x50
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	3308      	adds	r3, #8
 800c67c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c67e:	627a      	str	r2, [r7, #36]	; 0x24
 800c680:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c682:	6a39      	ldr	r1, [r7, #32]
 800c684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c686:	e841 2300 	strex	r3, r2, [r1]
 800c68a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c68c:	69fb      	ldr	r3, [r7, #28]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d1e5      	bne.n	800c65e <UART_Start_Receive_DMA+0x19a>

  return HAL_OK;
 800c692:	2300      	movs	r3, #0
}
 800c694:	4618      	mov	r0, r3
 800c696:	3760      	adds	r7, #96	; 0x60
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}
 800c69c:	0800c7f7 	.word	0x0800c7f7
 800c6a0:	0800c8e3 	.word	0x0800c8e3
 800c6a4:	0800c91b 	.word	0x0800c91b

0800c6a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c6a8:	b480      	push	{r7}
 800c6aa:	b08f      	sub	sp, #60	; 0x3c
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6b6:	6a3b      	ldr	r3, [r7, #32]
 800c6b8:	e853 3f00 	ldrex	r3, [r3]
 800c6bc:	61fb      	str	r3, [r7, #28]
   return(result);
 800c6be:	69fb      	ldr	r3, [r7, #28]
 800c6c0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c6c4:	637b      	str	r3, [r7, #52]	; 0x34
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	461a      	mov	r2, r3
 800c6cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c6d0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c6d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6d6:	e841 2300 	strex	r3, r2, [r1]
 800c6da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d1e6      	bne.n	800c6b0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	3308      	adds	r3, #8
 800c6e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	e853 3f00 	ldrex	r3, [r3]
 800c6f0:	60bb      	str	r3, [r7, #8]
   return(result);
 800c6f2:	68bb      	ldr	r3, [r7, #8]
 800c6f4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c6f8:	633b      	str	r3, [r7, #48]	; 0x30
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	3308      	adds	r3, #8
 800c700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c702:	61ba      	str	r2, [r7, #24]
 800c704:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c706:	6979      	ldr	r1, [r7, #20]
 800c708:	69ba      	ldr	r2, [r7, #24]
 800c70a:	e841 2300 	strex	r3, r2, [r1]
 800c70e:	613b      	str	r3, [r7, #16]
   return(result);
 800c710:	693b      	ldr	r3, [r7, #16]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d1e5      	bne.n	800c6e2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	2220      	movs	r2, #32
 800c71a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800c71e:	bf00      	nop
 800c720:	373c      	adds	r7, #60	; 0x3c
 800c722:	46bd      	mov	sp, r7
 800c724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c728:	4770      	bx	lr

0800c72a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c72a:	b480      	push	{r7}
 800c72c:	b095      	sub	sp, #84	; 0x54
 800c72e:	af00      	add	r7, sp, #0
 800c730:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c73a:	e853 3f00 	ldrex	r3, [r3]
 800c73e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c742:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c746:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	461a      	mov	r2, r3
 800c74e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c750:	643b      	str	r3, [r7, #64]	; 0x40
 800c752:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c754:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c756:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c758:	e841 2300 	strex	r3, r2, [r1]
 800c75c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c760:	2b00      	cmp	r3, #0
 800c762:	d1e6      	bne.n	800c732 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	3308      	adds	r3, #8
 800c76a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c76c:	6a3b      	ldr	r3, [r7, #32]
 800c76e:	e853 3f00 	ldrex	r3, [r3]
 800c772:	61fb      	str	r3, [r7, #28]
   return(result);
 800c774:	69fb      	ldr	r3, [r7, #28]
 800c776:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c77a:	f023 0301 	bic.w	r3, r3, #1
 800c77e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	3308      	adds	r3, #8
 800c786:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c788:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c78a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c78c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c78e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c790:	e841 2300 	strex	r3, r2, [r1]
 800c794:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d1e3      	bne.n	800c764 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7a0:	2b01      	cmp	r3, #1
 800c7a2:	d118      	bne.n	800c7d6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	e853 3f00 	ldrex	r3, [r3]
 800c7b0:	60bb      	str	r3, [r7, #8]
   return(result);
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	f023 0310 	bic.w	r3, r3, #16
 800c7b8:	647b      	str	r3, [r7, #68]	; 0x44
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	461a      	mov	r2, r3
 800c7c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7c2:	61bb      	str	r3, [r7, #24]
 800c7c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7c6:	6979      	ldr	r1, [r7, #20]
 800c7c8:	69ba      	ldr	r2, [r7, #24]
 800c7ca:	e841 2300 	strex	r3, r2, [r1]
 800c7ce:	613b      	str	r3, [r7, #16]
   return(result);
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d1e6      	bne.n	800c7a4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2220      	movs	r2, #32
 800c7da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	671a      	str	r2, [r3, #112]	; 0x70
}
 800c7ea:	bf00      	nop
 800c7ec:	3754      	adds	r7, #84	; 0x54
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f4:	4770      	bx	lr

0800c7f6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c7f6:	b580      	push	{r7, lr}
 800c7f8:	b096      	sub	sp, #88	; 0x58
 800c7fa:	af00      	add	r7, sp, #0
 800c7fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c802:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c808:	2b81      	cmp	r3, #129	; 0x81
 800c80a:	d057      	beq.n	800c8bc <UART_DMAReceiveCplt+0xc6>
  {
    huart->RxXferCount = 0U;
 800c80c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c80e:	2200      	movs	r2, #0
 800c810:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c814:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c81a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c81c:	e853 3f00 	ldrex	r3, [r3]
 800c820:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c824:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c828:	653b      	str	r3, [r7, #80]	; 0x50
 800c82a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	461a      	mov	r2, r3
 800c830:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c832:	647b      	str	r3, [r7, #68]	; 0x44
 800c834:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c836:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c838:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c83a:	e841 2300 	strex	r3, r2, [r1]
 800c83e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c842:	2b00      	cmp	r3, #0
 800c844:	d1e6      	bne.n	800c814 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c846:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	3308      	adds	r3, #8
 800c84c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c850:	e853 3f00 	ldrex	r3, [r3]
 800c854:	623b      	str	r3, [r7, #32]
   return(result);
 800c856:	6a3b      	ldr	r3, [r7, #32]
 800c858:	f023 0301 	bic.w	r3, r3, #1
 800c85c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c85e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	3308      	adds	r3, #8
 800c864:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c866:	633a      	str	r2, [r7, #48]	; 0x30
 800c868:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c86a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c86c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c86e:	e841 2300 	strex	r3, r2, [r1]
 800c872:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c876:	2b00      	cmp	r3, #0
 800c878:	d1e5      	bne.n	800c846 <UART_DMAReceiveCplt+0x50>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c87a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c87c:	2220      	movs	r2, #32
 800c87e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c884:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c886:	2b01      	cmp	r3, #1
 800c888:	d118      	bne.n	800c8bc <UART_DMAReceiveCplt+0xc6>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c88a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c890:	693b      	ldr	r3, [r7, #16]
 800c892:	e853 3f00 	ldrex	r3, [r3]
 800c896:	60fb      	str	r3, [r7, #12]
   return(result);
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	f023 0310 	bic.w	r3, r3, #16
 800c89e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c8a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	461a      	mov	r2, r3
 800c8a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8a8:	61fb      	str	r3, [r7, #28]
 800c8aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8ac:	69b9      	ldr	r1, [r7, #24]
 800c8ae:	69fa      	ldr	r2, [r7, #28]
 800c8b0:	e841 2300 	strex	r3, r2, [r1]
 800c8b4:	617b      	str	r3, [r7, #20]
   return(result);
 800c8b6:	697b      	ldr	r3, [r7, #20]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d1e6      	bne.n	800c88a <UART_DMAReceiveCplt+0x94>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c8be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8c0:	2b01      	cmp	r3, #1
 800c8c2:	d107      	bne.n	800c8d4 <UART_DMAReceiveCplt+0xde>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c8c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c8c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c8ca:	4619      	mov	r1, r3
 800c8cc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c8ce:	f7ff fa95 	bl	800bdfc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c8d2:	e002      	b.n	800c8da <UART_DMAReceiveCplt+0xe4>
    HAL_UART_RxCpltCallback(huart);
 800c8d4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c8d6:	f7ff fa73 	bl	800bdc0 <HAL_UART_RxCpltCallback>
}
 800c8da:	bf00      	nop
 800c8dc:	3758      	adds	r7, #88	; 0x58
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}

0800c8e2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c8e2:	b580      	push	{r7, lr}
 800c8e4:	b084      	sub	sp, #16
 800c8e6:	af00      	add	r7, sp, #0
 800c8e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c8ee:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8f4:	2b01      	cmp	r3, #1
 800c8f6:	d109      	bne.n	800c90c <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c8fe:	085b      	lsrs	r3, r3, #1
 800c900:	b29b      	uxth	r3, r3
 800c902:	4619      	mov	r1, r3
 800c904:	68f8      	ldr	r0, [r7, #12]
 800c906:	f7ff fa79 	bl	800bdfc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c90a:	e002      	b.n	800c912 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800c90c:	68f8      	ldr	r0, [r7, #12]
 800c90e:	f7ff fa61 	bl	800bdd4 <HAL_UART_RxHalfCpltCallback>
}
 800c912:	bf00      	nop
 800c914:	3710      	adds	r7, #16
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}

0800c91a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c91a:	b580      	push	{r7, lr}
 800c91c:	b086      	sub	sp, #24
 800c91e:	af00      	add	r7, sp, #0
 800c920:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c926:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c928:	697b      	ldr	r3, [r7, #20]
 800c92a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c92e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c930:	697b      	ldr	r3, [r7, #20]
 800c932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c936:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c938:	697b      	ldr	r3, [r7, #20]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	689b      	ldr	r3, [r3, #8]
 800c93e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c942:	2b80      	cmp	r3, #128	; 0x80
 800c944:	d109      	bne.n	800c95a <UART_DMAError+0x40>
 800c946:	693b      	ldr	r3, [r7, #16]
 800c948:	2b21      	cmp	r3, #33	; 0x21
 800c94a:	d106      	bne.n	800c95a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c94c:	697b      	ldr	r3, [r7, #20]
 800c94e:	2200      	movs	r2, #0
 800c950:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800c954:	6978      	ldr	r0, [r7, #20]
 800c956:	f7ff fea7 	bl	800c6a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	689b      	ldr	r3, [r3, #8]
 800c960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c964:	2b40      	cmp	r3, #64	; 0x40
 800c966:	d109      	bne.n	800c97c <UART_DMAError+0x62>
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	2b22      	cmp	r3, #34	; 0x22
 800c96c:	d106      	bne.n	800c97c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c96e:	697b      	ldr	r3, [r7, #20]
 800c970:	2200      	movs	r2, #0
 800c972:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800c976:	6978      	ldr	r0, [r7, #20]
 800c978:	f7ff fed7 	bl	800c72a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c97c:	697b      	ldr	r3, [r7, #20]
 800c97e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c982:	f043 0210 	orr.w	r2, r3, #16
 800c986:	697b      	ldr	r3, [r7, #20]
 800c988:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c98c:	6978      	ldr	r0, [r7, #20]
 800c98e:	f7ff fa2b 	bl	800bde8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c992:	bf00      	nop
 800c994:	3718      	adds	r7, #24
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}

0800c99a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c99a:	b480      	push	{r7}
 800c99c:	b08f      	sub	sp, #60	; 0x3c
 800c99e:	af00      	add	r7, sp, #0
 800c9a0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c9a8:	2b21      	cmp	r3, #33	; 0x21
 800c9aa:	d14c      	bne.n	800ca46 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c9b2:	b29b      	uxth	r3, r3
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d132      	bne.n	800ca1e <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9be:	6a3b      	ldr	r3, [r7, #32]
 800c9c0:	e853 3f00 	ldrex	r3, [r3]
 800c9c4:	61fb      	str	r3, [r7, #28]
   return(result);
 800c9c6:	69fb      	ldr	r3, [r7, #28]
 800c9c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c9cc:	637b      	str	r3, [r7, #52]	; 0x34
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	461a      	mov	r2, r3
 800c9d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c9d8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c9dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9de:	e841 2300 	strex	r3, r2, [r1]
 800c9e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d1e6      	bne.n	800c9b8 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	e853 3f00 	ldrex	r3, [r3]
 800c9f6:	60bb      	str	r3, [r7, #8]
   return(result);
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9fe:	633b      	str	r3, [r7, #48]	; 0x30
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	461a      	mov	r2, r3
 800ca06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca08:	61bb      	str	r3, [r7, #24]
 800ca0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca0c:	6979      	ldr	r1, [r7, #20]
 800ca0e:	69ba      	ldr	r2, [r7, #24]
 800ca10:	e841 2300 	strex	r3, r2, [r1]
 800ca14:	613b      	str	r3, [r7, #16]
   return(result);
 800ca16:	693b      	ldr	r3, [r7, #16]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d1e6      	bne.n	800c9ea <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800ca1c:	e013      	b.n	800ca46 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca22:	781a      	ldrb	r2, [r3, #0]
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca2e:	1c5a      	adds	r2, r3, #1
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ca3a:	b29b      	uxth	r3, r3
 800ca3c:	3b01      	subs	r3, #1
 800ca3e:	b29a      	uxth	r2, r3
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800ca46:	bf00      	nop
 800ca48:	373c      	adds	r7, #60	; 0x3c
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca50:	4770      	bx	lr

0800ca52 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ca52:	b480      	push	{r7}
 800ca54:	b091      	sub	sp, #68	; 0x44
 800ca56:	af00      	add	r7, sp, #0
 800ca58:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ca60:	2b21      	cmp	r3, #33	; 0x21
 800ca62:	d151      	bne.n	800cb08 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ca6a:	b29b      	uxth	r3, r3
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d132      	bne.n	800cad6 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca78:	e853 3f00 	ldrex	r3, [r3]
 800ca7c:	623b      	str	r3, [r7, #32]
   return(result);
 800ca7e:	6a3b      	ldr	r3, [r7, #32]
 800ca80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ca84:	63bb      	str	r3, [r7, #56]	; 0x38
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	461a      	mov	r2, r3
 800ca8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca8e:	633b      	str	r3, [r7, #48]	; 0x30
 800ca90:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ca94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca96:	e841 2300 	strex	r3, r2, [r1]
 800ca9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ca9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d1e6      	bne.n	800ca70 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caa8:	693b      	ldr	r3, [r7, #16]
 800caaa:	e853 3f00 	ldrex	r3, [r3]
 800caae:	60fb      	str	r3, [r7, #12]
   return(result);
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cab6:	637b      	str	r3, [r7, #52]	; 0x34
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	461a      	mov	r2, r3
 800cabe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cac0:	61fb      	str	r3, [r7, #28]
 800cac2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cac4:	69b9      	ldr	r1, [r7, #24]
 800cac6:	69fa      	ldr	r2, [r7, #28]
 800cac8:	e841 2300 	strex	r3, r2, [r1]
 800cacc:	617b      	str	r3, [r7, #20]
   return(result);
 800cace:	697b      	ldr	r3, [r7, #20]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d1e6      	bne.n	800caa2 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800cad4:	e018      	b.n	800cb08 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cada:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800cadc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cade:	881b      	ldrh	r3, [r3, #0]
 800cae0:	461a      	mov	r2, r3
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800caea:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800caf0:	1c9a      	adds	r2, r3, #2
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cafc:	b29b      	uxth	r3, r3
 800cafe:	3b01      	subs	r3, #1
 800cb00:	b29a      	uxth	r2, r3
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800cb08:	bf00      	nop
 800cb0a:	3744      	adds	r7, #68	; 0x44
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb12:	4770      	bx	lr

0800cb14 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cb14:	b480      	push	{r7}
 800cb16:	b091      	sub	sp, #68	; 0x44
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb22:	2b21      	cmp	r3, #33	; 0x21
 800cb24:	d160      	bne.n	800cbe8 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cb2c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800cb2e:	e057      	b.n	800cbe0 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cb36:	b29b      	uxth	r3, r3
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d133      	bne.n	800cba4 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	3308      	adds	r3, #8
 800cb42:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb46:	e853 3f00 	ldrex	r3, [r3]
 800cb4a:	623b      	str	r3, [r7, #32]
   return(result);
 800cb4c:	6a3b      	ldr	r3, [r7, #32]
 800cb4e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800cb52:	63bb      	str	r3, [r7, #56]	; 0x38
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	3308      	adds	r3, #8
 800cb5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb5c:	633a      	str	r2, [r7, #48]	; 0x30
 800cb5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cb62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb64:	e841 2300 	strex	r3, r2, [r1]
 800cb68:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cb6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d1e5      	bne.n	800cb3c <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb76:	693b      	ldr	r3, [r7, #16]
 800cb78:	e853 3f00 	ldrex	r3, [r3]
 800cb7c:	60fb      	str	r3, [r7, #12]
   return(result);
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb84:	637b      	str	r3, [r7, #52]	; 0x34
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	461a      	mov	r2, r3
 800cb8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb8e:	61fb      	str	r3, [r7, #28]
 800cb90:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb92:	69b9      	ldr	r1, [r7, #24]
 800cb94:	69fa      	ldr	r2, [r7, #28]
 800cb96:	e841 2300 	strex	r3, r2, [r1]
 800cb9a:	617b      	str	r3, [r7, #20]
   return(result);
 800cb9c:	697b      	ldr	r3, [r7, #20]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d1e6      	bne.n	800cb70 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800cba2:	e021      	b.n	800cbe8 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	69db      	ldr	r3, [r3, #28]
 800cbaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d013      	beq.n	800cbda <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbb6:	781a      	ldrb	r2, [r3, #0]
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbc2:	1c5a      	adds	r2, r3, #1
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cbce:	b29b      	uxth	r3, r3
 800cbd0:	3b01      	subs	r3, #1
 800cbd2:	b29a      	uxth	r2, r3
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800cbda:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cbdc:	3b01      	subs	r3, #1
 800cbde:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800cbe0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d1a4      	bne.n	800cb30 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800cbe6:	e7ff      	b.n	800cbe8 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800cbe8:	bf00      	nop
 800cbea:	3744      	adds	r7, #68	; 0x44
 800cbec:	46bd      	mov	sp, r7
 800cbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf2:	4770      	bx	lr

0800cbf4 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cbf4:	b480      	push	{r7}
 800cbf6:	b091      	sub	sp, #68	; 0x44
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc02:	2b21      	cmp	r3, #33	; 0x21
 800cc04:	d165      	bne.n	800ccd2 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cc0c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800cc0e:	e05c      	b.n	800ccca <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cc16:	b29b      	uxth	r3, r3
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d133      	bne.n	800cc84 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	3308      	adds	r3, #8
 800cc22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc24:	6a3b      	ldr	r3, [r7, #32]
 800cc26:	e853 3f00 	ldrex	r3, [r3]
 800cc2a:	61fb      	str	r3, [r7, #28]
   return(result);
 800cc2c:	69fb      	ldr	r3, [r7, #28]
 800cc2e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800cc32:	637b      	str	r3, [r7, #52]	; 0x34
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	3308      	adds	r3, #8
 800cc3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cc3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cc42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc44:	e841 2300 	strex	r3, r2, [r1]
 800cc48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cc4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d1e5      	bne.n	800cc1c <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	e853 3f00 	ldrex	r3, [r3]
 800cc5c:	60bb      	str	r3, [r7, #8]
   return(result);
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc64:	633b      	str	r3, [r7, #48]	; 0x30
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	461a      	mov	r2, r3
 800cc6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc6e:	61bb      	str	r3, [r7, #24]
 800cc70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc72:	6979      	ldr	r1, [r7, #20]
 800cc74:	69ba      	ldr	r2, [r7, #24]
 800cc76:	e841 2300 	strex	r3, r2, [r1]
 800cc7a:	613b      	str	r3, [r7, #16]
   return(result);
 800cc7c:	693b      	ldr	r3, [r7, #16]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d1e6      	bne.n	800cc50 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800cc82:	e026      	b.n	800ccd2 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	69db      	ldr	r3, [r3, #28]
 800cc8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d018      	beq.n	800ccc4 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc96:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800cc98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc9a:	881b      	ldrh	r3, [r3, #0]
 800cc9c:	461a      	mov	r2, r3
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cca6:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ccac:	1c9a      	adds	r2, r3, #2
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ccb8:	b29b      	uxth	r3, r3
 800ccba:	3b01      	subs	r3, #1
 800ccbc:	b29a      	uxth	r2, r3
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800ccc4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ccc6:	3b01      	subs	r3, #1
 800ccc8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ccca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d19f      	bne.n	800cc10 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800ccd0:	e7ff      	b.n	800ccd2 <UART_TxISR_16BIT_FIFOEN+0xde>
 800ccd2:	bf00      	nop
 800ccd4:	3744      	adds	r7, #68	; 0x44
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccdc:	4770      	bx	lr

0800ccde <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ccde:	b480      	push	{r7}
 800cce0:	b085      	sub	sp, #20
 800cce2:	af00      	add	r7, sp, #0
 800cce4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ccec:	2b01      	cmp	r3, #1
 800ccee:	d101      	bne.n	800ccf4 <HAL_UARTEx_DisableFifoMode+0x16>
 800ccf0:	2302      	movs	r3, #2
 800ccf2:	e027      	b.n	800cd44 <HAL_UARTEx_DisableFifoMode+0x66>
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2201      	movs	r2, #1
 800ccf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2224      	movs	r2, #36	; 0x24
 800cd00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	681a      	ldr	r2, [r3, #0]
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	f022 0201 	bic.w	r2, r2, #1
 800cd1a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cd22:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2200      	movs	r2, #0
 800cd28:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	68fa      	ldr	r2, [r7, #12]
 800cd30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	2220      	movs	r2, #32
 800cd36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cd42:	2300      	movs	r3, #0
}
 800cd44:	4618      	mov	r0, r3
 800cd46:	3714      	adds	r7, #20
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4e:	4770      	bx	lr

0800cd50 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b084      	sub	sp, #16
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
 800cd58:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cd60:	2b01      	cmp	r3, #1
 800cd62:	d101      	bne.n	800cd68 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cd64:	2302      	movs	r3, #2
 800cd66:	e02d      	b.n	800cdc4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2201      	movs	r2, #1
 800cd6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2224      	movs	r2, #36	; 0x24
 800cd74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	681a      	ldr	r2, [r3, #0]
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	f022 0201 	bic.w	r2, r2, #1
 800cd8e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	689b      	ldr	r3, [r3, #8]
 800cd96:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	683a      	ldr	r2, [r7, #0]
 800cda0:	430a      	orrs	r2, r1
 800cda2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cda4:	6878      	ldr	r0, [r7, #4]
 800cda6:	f000 f84f 	bl	800ce48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	68fa      	ldr	r2, [r7, #12]
 800cdb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2220      	movs	r2, #32
 800cdb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cdc2:	2300      	movs	r3, #0
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	3710      	adds	r7, #16
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bd80      	pop	{r7, pc}

0800cdcc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b084      	sub	sp, #16
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
 800cdd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cddc:	2b01      	cmp	r3, #1
 800cdde:	d101      	bne.n	800cde4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cde0:	2302      	movs	r3, #2
 800cde2:	e02d      	b.n	800ce40 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2201      	movs	r2, #1
 800cde8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2224      	movs	r2, #36	; 0x24
 800cdf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	681a      	ldr	r2, [r3, #0]
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	f022 0201 	bic.w	r2, r2, #1
 800ce0a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	689b      	ldr	r3, [r3, #8]
 800ce12:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	683a      	ldr	r2, [r7, #0]
 800ce1c:	430a      	orrs	r2, r1
 800ce1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ce20:	6878      	ldr	r0, [r7, #4]
 800ce22:	f000 f811 	bl	800ce48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	68fa      	ldr	r2, [r7, #12]
 800ce2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	2220      	movs	r2, #32
 800ce32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2200      	movs	r2, #0
 800ce3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ce3e:	2300      	movs	r3, #0
}
 800ce40:	4618      	mov	r0, r3
 800ce42:	3710      	adds	r7, #16
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}

0800ce48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ce48:	b480      	push	{r7}
 800ce4a:	b085      	sub	sp, #20
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d108      	bne.n	800ce6a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2201      	movs	r2, #1
 800ce5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2201      	movs	r2, #1
 800ce64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ce68:	e031      	b.n	800cece <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ce6a:	2308      	movs	r3, #8
 800ce6c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ce6e:	2308      	movs	r3, #8
 800ce70:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	689b      	ldr	r3, [r3, #8]
 800ce78:	0e5b      	lsrs	r3, r3, #25
 800ce7a:	b2db      	uxtb	r3, r3
 800ce7c:	f003 0307 	and.w	r3, r3, #7
 800ce80:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	689b      	ldr	r3, [r3, #8]
 800ce88:	0f5b      	lsrs	r3, r3, #29
 800ce8a:	b2db      	uxtb	r3, r3
 800ce8c:	f003 0307 	and.w	r3, r3, #7
 800ce90:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ce92:	7bbb      	ldrb	r3, [r7, #14]
 800ce94:	7b3a      	ldrb	r2, [r7, #12]
 800ce96:	4911      	ldr	r1, [pc, #68]	; (800cedc <UARTEx_SetNbDataToProcess+0x94>)
 800ce98:	5c8a      	ldrb	r2, [r1, r2]
 800ce9a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ce9e:	7b3a      	ldrb	r2, [r7, #12]
 800cea0:	490f      	ldr	r1, [pc, #60]	; (800cee0 <UARTEx_SetNbDataToProcess+0x98>)
 800cea2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cea4:	fb93 f3f2 	sdiv	r3, r3, r2
 800cea8:	b29a      	uxth	r2, r3
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ceb0:	7bfb      	ldrb	r3, [r7, #15]
 800ceb2:	7b7a      	ldrb	r2, [r7, #13]
 800ceb4:	4909      	ldr	r1, [pc, #36]	; (800cedc <UARTEx_SetNbDataToProcess+0x94>)
 800ceb6:	5c8a      	ldrb	r2, [r1, r2]
 800ceb8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cebc:	7b7a      	ldrb	r2, [r7, #13]
 800cebe:	4908      	ldr	r1, [pc, #32]	; (800cee0 <UARTEx_SetNbDataToProcess+0x98>)
 800cec0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cec2:	fb93 f3f2 	sdiv	r3, r3, r2
 800cec6:	b29a      	uxth	r2, r3
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cece:	bf00      	nop
 800ced0:	3714      	adds	r7, #20
 800ced2:	46bd      	mov	sp, r7
 800ced4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced8:	4770      	bx	lr
 800ceda:	bf00      	nop
 800cedc:	0800d0f8 	.word	0x0800d0f8
 800cee0:	0800d100 	.word	0x0800d100

0800cee4 <__libc_init_array>:
 800cee4:	b570      	push	{r4, r5, r6, lr}
 800cee6:	4d0d      	ldr	r5, [pc, #52]	; (800cf1c <__libc_init_array+0x38>)
 800cee8:	2600      	movs	r6, #0
 800ceea:	4c0d      	ldr	r4, [pc, #52]	; (800cf20 <__libc_init_array+0x3c>)
 800ceec:	1b64      	subs	r4, r4, r5
 800ceee:	10a4      	asrs	r4, r4, #2
 800cef0:	42a6      	cmp	r6, r4
 800cef2:	d109      	bne.n	800cf08 <__libc_init_array+0x24>
 800cef4:	4d0b      	ldr	r5, [pc, #44]	; (800cf24 <__libc_init_array+0x40>)
 800cef6:	2600      	movs	r6, #0
 800cef8:	4c0b      	ldr	r4, [pc, #44]	; (800cf28 <__libc_init_array+0x44>)
 800cefa:	f000 f827 	bl	800cf4c <_init>
 800cefe:	1b64      	subs	r4, r4, r5
 800cf00:	10a4      	asrs	r4, r4, #2
 800cf02:	42a6      	cmp	r6, r4
 800cf04:	d105      	bne.n	800cf12 <__libc_init_array+0x2e>
 800cf06:	bd70      	pop	{r4, r5, r6, pc}
 800cf08:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf0c:	3601      	adds	r6, #1
 800cf0e:	4798      	blx	r3
 800cf10:	e7ee      	b.n	800cef0 <__libc_init_array+0xc>
 800cf12:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf16:	3601      	adds	r6, #1
 800cf18:	4798      	blx	r3
 800cf1a:	e7f2      	b.n	800cf02 <__libc_init_array+0x1e>
 800cf1c:	0800d110 	.word	0x0800d110
 800cf20:	0800d110 	.word	0x0800d110
 800cf24:	0800d110 	.word	0x0800d110
 800cf28:	0800d114 	.word	0x0800d114

0800cf2c <memset>:
 800cf2c:	4402      	add	r2, r0
 800cf2e:	4603      	mov	r3, r0
 800cf30:	4293      	cmp	r3, r2
 800cf32:	d100      	bne.n	800cf36 <memset+0xa>
 800cf34:	4770      	bx	lr
 800cf36:	f803 1b01 	strb.w	r1, [r3], #1
 800cf3a:	e7f9      	b.n	800cf30 <memset+0x4>

0800cf3c <strcpy>:
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf42:	f803 2b01 	strb.w	r2, [r3], #1
 800cf46:	2a00      	cmp	r2, #0
 800cf48:	d1f9      	bne.n	800cf3e <strcpy+0x2>
 800cf4a:	4770      	bx	lr

0800cf4c <_init>:
 800cf4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf4e:	bf00      	nop
 800cf50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf52:	bc08      	pop	{r3}
 800cf54:	469e      	mov	lr, r3
 800cf56:	4770      	bx	lr

0800cf58 <_fini>:
 800cf58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf5a:	bf00      	nop
 800cf5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf5e:	bc08      	pop	{r3}
 800cf60:	469e      	mov	lr, r3
 800cf62:	4770      	bx	lr
