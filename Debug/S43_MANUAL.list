
S43_MANUAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dfb0  08000238  08000238  00010238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  0800e1e8  0800e1e8  0001e1e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e388  0800e388  0001e388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e390  0800e390  0001e390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e394  0800e394  0001e394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000115  20000000  0800e398  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000720  20000118  0800e4ad  00020118  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000838  0800e4ad  00020838  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020115  2**0
                  CONTENTS, READONLY
 10 .debug_info   00024880  00000000  00000000  0002014b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003779  00000000  00000000  000449cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001d68  00000000  00000000  00048148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001c20  00000000  00000000  00049eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037541  00000000  00000000  0004bad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002520d  00000000  00000000  00083011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00168507  00000000  00000000  000a821e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00210725  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008248  00000000  00000000  00210778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000118 	.word	0x20000118
 8000254:	00000000 	.word	0x00000000
 8000258:	0800e1d0 	.word	0x0800e1d0

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	2000011c 	.word	0x2000011c
 8000274:	0800e1d0 	.word	0x0800e1d0

08000278 <__aeabi_drsub>:
 8000278:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800027c:	e002      	b.n	8000284 <__adddf3>
 800027e:	bf00      	nop

08000280 <__aeabi_dsub>:
 8000280:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000284 <__adddf3>:
 8000284:	b530      	push	{r4, r5, lr}
 8000286:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800028a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800028e:	ea94 0f05 	teq	r4, r5
 8000292:	bf08      	it	eq
 8000294:	ea90 0f02 	teqeq	r0, r2
 8000298:	bf1f      	itttt	ne
 800029a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800029e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002a2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002a6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002aa:	f000 80e2 	beq.w	8000472 <__adddf3+0x1ee>
 80002ae:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002b2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002b6:	bfb8      	it	lt
 80002b8:	426d      	neglt	r5, r5
 80002ba:	dd0c      	ble.n	80002d6 <__adddf3+0x52>
 80002bc:	442c      	add	r4, r5
 80002be:	ea80 0202 	eor.w	r2, r0, r2
 80002c2:	ea81 0303 	eor.w	r3, r1, r3
 80002c6:	ea82 0000 	eor.w	r0, r2, r0
 80002ca:	ea83 0101 	eor.w	r1, r3, r1
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	2d36      	cmp	r5, #54	; 0x36
 80002d8:	bf88      	it	hi
 80002da:	bd30      	pophi	{r4, r5, pc}
 80002dc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002e4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ec:	d002      	beq.n	80002f4 <__adddf3+0x70>
 80002ee:	4240      	negs	r0, r0
 80002f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002fc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000300:	d002      	beq.n	8000308 <__adddf3+0x84>
 8000302:	4252      	negs	r2, r2
 8000304:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000308:	ea94 0f05 	teq	r4, r5
 800030c:	f000 80a7 	beq.w	800045e <__adddf3+0x1da>
 8000310:	f1a4 0401 	sub.w	r4, r4, #1
 8000314:	f1d5 0e20 	rsbs	lr, r5, #32
 8000318:	db0d      	blt.n	8000336 <__adddf3+0xb2>
 800031a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800031e:	fa22 f205 	lsr.w	r2, r2, r5
 8000322:	1880      	adds	r0, r0, r2
 8000324:	f141 0100 	adc.w	r1, r1, #0
 8000328:	fa03 f20e 	lsl.w	r2, r3, lr
 800032c:	1880      	adds	r0, r0, r2
 800032e:	fa43 f305 	asr.w	r3, r3, r5
 8000332:	4159      	adcs	r1, r3
 8000334:	e00e      	b.n	8000354 <__adddf3+0xd0>
 8000336:	f1a5 0520 	sub.w	r5, r5, #32
 800033a:	f10e 0e20 	add.w	lr, lr, #32
 800033e:	2a01      	cmp	r2, #1
 8000340:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000344:	bf28      	it	cs
 8000346:	f04c 0c02 	orrcs.w	ip, ip, #2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	18c0      	adds	r0, r0, r3
 8000350:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000354:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000358:	d507      	bpl.n	800036a <__adddf3+0xe6>
 800035a:	f04f 0e00 	mov.w	lr, #0
 800035e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000362:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000366:	eb6e 0101 	sbc.w	r1, lr, r1
 800036a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800036e:	d31b      	bcc.n	80003a8 <__adddf3+0x124>
 8000370:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000374:	d30c      	bcc.n	8000390 <__adddf3+0x10c>
 8000376:	0849      	lsrs	r1, r1, #1
 8000378:	ea5f 0030 	movs.w	r0, r0, rrx
 800037c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000380:	f104 0401 	add.w	r4, r4, #1
 8000384:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000388:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800038c:	f080 809a 	bcs.w	80004c4 <__adddf3+0x240>
 8000390:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000394:	bf08      	it	eq
 8000396:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800039a:	f150 0000 	adcs.w	r0, r0, #0
 800039e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003a2:	ea41 0105 	orr.w	r1, r1, r5
 80003a6:	bd30      	pop	{r4, r5, pc}
 80003a8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ac:	4140      	adcs	r0, r0
 80003ae:	eb41 0101 	adc.w	r1, r1, r1
 80003b2:	3c01      	subs	r4, #1
 80003b4:	bf28      	it	cs
 80003b6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003ba:	d2e9      	bcs.n	8000390 <__adddf3+0x10c>
 80003bc:	f091 0f00 	teq	r1, #0
 80003c0:	bf04      	itt	eq
 80003c2:	4601      	moveq	r1, r0
 80003c4:	2000      	moveq	r0, #0
 80003c6:	fab1 f381 	clz	r3, r1
 80003ca:	bf08      	it	eq
 80003cc:	3320      	addeq	r3, #32
 80003ce:	f1a3 030b 	sub.w	r3, r3, #11
 80003d2:	f1b3 0220 	subs.w	r2, r3, #32
 80003d6:	da0c      	bge.n	80003f2 <__adddf3+0x16e>
 80003d8:	320c      	adds	r2, #12
 80003da:	dd08      	ble.n	80003ee <__adddf3+0x16a>
 80003dc:	f102 0c14 	add.w	ip, r2, #20
 80003e0:	f1c2 020c 	rsb	r2, r2, #12
 80003e4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ec:	e00c      	b.n	8000408 <__adddf3+0x184>
 80003ee:	f102 0214 	add.w	r2, r2, #20
 80003f2:	bfd8      	it	le
 80003f4:	f1c2 0c20 	rsble	ip, r2, #32
 80003f8:	fa01 f102 	lsl.w	r1, r1, r2
 80003fc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000400:	bfdc      	itt	le
 8000402:	ea41 010c 	orrle.w	r1, r1, ip
 8000406:	4090      	lslle	r0, r2
 8000408:	1ae4      	subs	r4, r4, r3
 800040a:	bfa2      	ittt	ge
 800040c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000410:	4329      	orrge	r1, r5
 8000412:	bd30      	popge	{r4, r5, pc}
 8000414:	ea6f 0404 	mvn.w	r4, r4
 8000418:	3c1f      	subs	r4, #31
 800041a:	da1c      	bge.n	8000456 <__adddf3+0x1d2>
 800041c:	340c      	adds	r4, #12
 800041e:	dc0e      	bgt.n	800043e <__adddf3+0x1ba>
 8000420:	f104 0414 	add.w	r4, r4, #20
 8000424:	f1c4 0220 	rsb	r2, r4, #32
 8000428:	fa20 f004 	lsr.w	r0, r0, r4
 800042c:	fa01 f302 	lsl.w	r3, r1, r2
 8000430:	ea40 0003 	orr.w	r0, r0, r3
 8000434:	fa21 f304 	lsr.w	r3, r1, r4
 8000438:	ea45 0103 	orr.w	r1, r5, r3
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	f1c4 040c 	rsb	r4, r4, #12
 8000442:	f1c4 0220 	rsb	r2, r4, #32
 8000446:	fa20 f002 	lsr.w	r0, r0, r2
 800044a:	fa01 f304 	lsl.w	r3, r1, r4
 800044e:	ea40 0003 	orr.w	r0, r0, r3
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	fa21 f004 	lsr.w	r0, r1, r4
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	f094 0f00 	teq	r4, #0
 8000462:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000466:	bf06      	itte	eq
 8000468:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800046c:	3401      	addeq	r4, #1
 800046e:	3d01      	subne	r5, #1
 8000470:	e74e      	b.n	8000310 <__adddf3+0x8c>
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf18      	it	ne
 8000478:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800047c:	d029      	beq.n	80004d2 <__adddf3+0x24e>
 800047e:	ea94 0f05 	teq	r4, r5
 8000482:	bf08      	it	eq
 8000484:	ea90 0f02 	teqeq	r0, r2
 8000488:	d005      	beq.n	8000496 <__adddf3+0x212>
 800048a:	ea54 0c00 	orrs.w	ip, r4, r0
 800048e:	bf04      	itt	eq
 8000490:	4619      	moveq	r1, r3
 8000492:	4610      	moveq	r0, r2
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	ea91 0f03 	teq	r1, r3
 800049a:	bf1e      	ittt	ne
 800049c:	2100      	movne	r1, #0
 800049e:	2000      	movne	r0, #0
 80004a0:	bd30      	popne	{r4, r5, pc}
 80004a2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004a6:	d105      	bne.n	80004b4 <__adddf3+0x230>
 80004a8:	0040      	lsls	r0, r0, #1
 80004aa:	4149      	adcs	r1, r1
 80004ac:	bf28      	it	cs
 80004ae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004b2:	bd30      	pop	{r4, r5, pc}
 80004b4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b8:	bf3c      	itt	cc
 80004ba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004be:	bd30      	popcc	{r4, r5, pc}
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004cc:	f04f 0000 	mov.w	r0, #0
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d6:	bf1a      	itte	ne
 80004d8:	4619      	movne	r1, r3
 80004da:	4610      	movne	r0, r2
 80004dc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e0:	bf1c      	itt	ne
 80004e2:	460b      	movne	r3, r1
 80004e4:	4602      	movne	r2, r0
 80004e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ea:	bf06      	itte	eq
 80004ec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f0:	ea91 0f03 	teqeq	r1, r3
 80004f4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	bf00      	nop

080004fc <__aeabi_ui2d>:
 80004fc:	f090 0f00 	teq	r0, #0
 8000500:	bf04      	itt	eq
 8000502:	2100      	moveq	r1, #0
 8000504:	4770      	bxeq	lr
 8000506:	b530      	push	{r4, r5, lr}
 8000508:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000510:	f04f 0500 	mov.w	r5, #0
 8000514:	f04f 0100 	mov.w	r1, #0
 8000518:	e750      	b.n	80003bc <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_i2d>:
 800051c:	f090 0f00 	teq	r0, #0
 8000520:	bf04      	itt	eq
 8000522:	2100      	moveq	r1, #0
 8000524:	4770      	bxeq	lr
 8000526:	b530      	push	{r4, r5, lr}
 8000528:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800052c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000530:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000534:	bf48      	it	mi
 8000536:	4240      	negmi	r0, r0
 8000538:	f04f 0100 	mov.w	r1, #0
 800053c:	e73e      	b.n	80003bc <__adddf3+0x138>
 800053e:	bf00      	nop

08000540 <__aeabi_f2d>:
 8000540:	0042      	lsls	r2, r0, #1
 8000542:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000546:	ea4f 0131 	mov.w	r1, r1, rrx
 800054a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800054e:	bf1f      	itttt	ne
 8000550:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000554:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000558:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800055c:	4770      	bxne	lr
 800055e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000562:	bf08      	it	eq
 8000564:	4770      	bxeq	lr
 8000566:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800056a:	bf04      	itt	eq
 800056c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e71c      	b.n	80003bc <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aed8 	beq.w	800036a <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6bd      	b.n	800036a <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__aeabi_d2f>:
 8000a14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a1c:	bf24      	itt	cs
 8000a1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a26:	d90d      	bls.n	8000a44 <__aeabi_d2f+0x30>
 8000a28:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a34:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a3c:	bf08      	it	eq
 8000a3e:	f020 0001 	biceq.w	r0, r0, #1
 8000a42:	4770      	bx	lr
 8000a44:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a48:	d121      	bne.n	8000a8e <__aeabi_d2f+0x7a>
 8000a4a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a4e:	bfbc      	itt	lt
 8000a50:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a54:	4770      	bxlt	lr
 8000a56:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a5e:	f1c2 0218 	rsb	r2, r2, #24
 8000a62:	f1c2 0c20 	rsb	ip, r2, #32
 8000a66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a6e:	bf18      	it	ne
 8000a70:	f040 0001 	orrne.w	r0, r0, #1
 8000a74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a80:	ea40 000c 	orr.w	r0, r0, ip
 8000a84:	fa23 f302 	lsr.w	r3, r3, r2
 8000a88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a8c:	e7cc      	b.n	8000a28 <__aeabi_d2f+0x14>
 8000a8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a92:	d107      	bne.n	8000aa4 <__aeabi_d2f+0x90>
 8000a94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a98:	bf1e      	ittt	ne
 8000a9a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a9e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aa2:	4770      	bxne	lr
 8000aa4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_uldivmod>:
 8000ab4:	b953      	cbnz	r3, 8000acc <__aeabi_uldivmod+0x18>
 8000ab6:	b94a      	cbnz	r2, 8000acc <__aeabi_uldivmod+0x18>
 8000ab8:	2900      	cmp	r1, #0
 8000aba:	bf08      	it	eq
 8000abc:	2800      	cmpeq	r0, #0
 8000abe:	bf1c      	itt	ne
 8000ac0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ac4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac8:	f000 b982 	b.w	8000dd0 <__aeabi_idiv0>
 8000acc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ad4:	f000 f806 	bl	8000ae4 <__udivmoddi4>
 8000ad8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000adc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae0:	b004      	add	sp, #16
 8000ae2:	4770      	bx	lr

08000ae4 <__udivmoddi4>:
 8000ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ae8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000aea:	4604      	mov	r4, r0
 8000aec:	460f      	mov	r7, r1
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d148      	bne.n	8000b84 <__udivmoddi4+0xa0>
 8000af2:	428a      	cmp	r2, r1
 8000af4:	4694      	mov	ip, r2
 8000af6:	d961      	bls.n	8000bbc <__udivmoddi4+0xd8>
 8000af8:	fab2 f382 	clz	r3, r2
 8000afc:	b143      	cbz	r3, 8000b10 <__udivmoddi4+0x2c>
 8000afe:	f1c3 0120 	rsb	r1, r3, #32
 8000b02:	409f      	lsls	r7, r3
 8000b04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b08:	409c      	lsls	r4, r3
 8000b0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000b0e:	430f      	orrs	r7, r1
 8000b10:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000b14:	fa1f fe8c 	uxth.w	lr, ip
 8000b18:	0c22      	lsrs	r2, r4, #16
 8000b1a:	fbb7 f6f1 	udiv	r6, r7, r1
 8000b1e:	fb01 7716 	mls	r7, r1, r6, r7
 8000b22:	fb06 f00e 	mul.w	r0, r6, lr
 8000b26:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b2a:	4290      	cmp	r0, r2
 8000b2c:	d908      	bls.n	8000b40 <__udivmoddi4+0x5c>
 8000b2e:	eb1c 0202 	adds.w	r2, ip, r2
 8000b32:	f106 37ff 	add.w	r7, r6, #4294967295
 8000b36:	d202      	bcs.n	8000b3e <__udivmoddi4+0x5a>
 8000b38:	4290      	cmp	r0, r2
 8000b3a:	f200 8137 	bhi.w	8000dac <__udivmoddi4+0x2c8>
 8000b3e:	463e      	mov	r6, r7
 8000b40:	1a12      	subs	r2, r2, r0
 8000b42:	b2a4      	uxth	r4, r4
 8000b44:	fbb2 f0f1 	udiv	r0, r2, r1
 8000b48:	fb01 2210 	mls	r2, r1, r0, r2
 8000b4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b50:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b54:	45a6      	cmp	lr, r4
 8000b56:	d908      	bls.n	8000b6a <__udivmoddi4+0x86>
 8000b58:	eb1c 0404 	adds.w	r4, ip, r4
 8000b5c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b60:	d202      	bcs.n	8000b68 <__udivmoddi4+0x84>
 8000b62:	45a6      	cmp	lr, r4
 8000b64:	f200 811c 	bhi.w	8000da0 <__udivmoddi4+0x2bc>
 8000b68:	4610      	mov	r0, r2
 8000b6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b6e:	eba4 040e 	sub.w	r4, r4, lr
 8000b72:	2600      	movs	r6, #0
 8000b74:	b11d      	cbz	r5, 8000b7e <__udivmoddi4+0x9a>
 8000b76:	40dc      	lsrs	r4, r3
 8000b78:	2300      	movs	r3, #0
 8000b7a:	e9c5 4300 	strd	r4, r3, [r5]
 8000b7e:	4631      	mov	r1, r6
 8000b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b84:	428b      	cmp	r3, r1
 8000b86:	d909      	bls.n	8000b9c <__udivmoddi4+0xb8>
 8000b88:	2d00      	cmp	r5, #0
 8000b8a:	f000 80fd 	beq.w	8000d88 <__udivmoddi4+0x2a4>
 8000b8e:	2600      	movs	r6, #0
 8000b90:	e9c5 0100 	strd	r0, r1, [r5]
 8000b94:	4630      	mov	r0, r6
 8000b96:	4631      	mov	r1, r6
 8000b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b9c:	fab3 f683 	clz	r6, r3
 8000ba0:	2e00      	cmp	r6, #0
 8000ba2:	d14b      	bne.n	8000c3c <__udivmoddi4+0x158>
 8000ba4:	428b      	cmp	r3, r1
 8000ba6:	f0c0 80f2 	bcc.w	8000d8e <__udivmoddi4+0x2aa>
 8000baa:	4282      	cmp	r2, r0
 8000bac:	f240 80ef 	bls.w	8000d8e <__udivmoddi4+0x2aa>
 8000bb0:	4630      	mov	r0, r6
 8000bb2:	2d00      	cmp	r5, #0
 8000bb4:	d0e3      	beq.n	8000b7e <__udivmoddi4+0x9a>
 8000bb6:	e9c5 4700 	strd	r4, r7, [r5]
 8000bba:	e7e0      	b.n	8000b7e <__udivmoddi4+0x9a>
 8000bbc:	b902      	cbnz	r2, 8000bc0 <__udivmoddi4+0xdc>
 8000bbe:	deff      	udf	#255	; 0xff
 8000bc0:	fab2 f382 	clz	r3, r2
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	f040 809d 	bne.w	8000d04 <__udivmoddi4+0x220>
 8000bca:	1a89      	subs	r1, r1, r2
 8000bcc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000bd0:	b297      	uxth	r7, r2
 8000bd2:	2601      	movs	r6, #1
 8000bd4:	0c20      	lsrs	r0, r4, #16
 8000bd6:	fbb1 f2fe 	udiv	r2, r1, lr
 8000bda:	fb0e 1112 	mls	r1, lr, r2, r1
 8000bde:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000be2:	fb07 f002 	mul.w	r0, r7, r2
 8000be6:	4288      	cmp	r0, r1
 8000be8:	d90f      	bls.n	8000c0a <__udivmoddi4+0x126>
 8000bea:	eb1c 0101 	adds.w	r1, ip, r1
 8000bee:	f102 38ff 	add.w	r8, r2, #4294967295
 8000bf2:	bf2c      	ite	cs
 8000bf4:	f04f 0901 	movcs.w	r9, #1
 8000bf8:	f04f 0900 	movcc.w	r9, #0
 8000bfc:	4288      	cmp	r0, r1
 8000bfe:	d903      	bls.n	8000c08 <__udivmoddi4+0x124>
 8000c00:	f1b9 0f00 	cmp.w	r9, #0
 8000c04:	f000 80cf 	beq.w	8000da6 <__udivmoddi4+0x2c2>
 8000c08:	4642      	mov	r2, r8
 8000c0a:	1a09      	subs	r1, r1, r0
 8000c0c:	b2a4      	uxth	r4, r4
 8000c0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c16:	fb00 f707 	mul.w	r7, r0, r7
 8000c1a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c1e:	42a7      	cmp	r7, r4
 8000c20:	d908      	bls.n	8000c34 <__udivmoddi4+0x150>
 8000c22:	eb1c 0404 	adds.w	r4, ip, r4
 8000c26:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c2a:	d202      	bcs.n	8000c32 <__udivmoddi4+0x14e>
 8000c2c:	42a7      	cmp	r7, r4
 8000c2e:	f200 80b4 	bhi.w	8000d9a <__udivmoddi4+0x2b6>
 8000c32:	4608      	mov	r0, r1
 8000c34:	1be4      	subs	r4, r4, r7
 8000c36:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000c3a:	e79b      	b.n	8000b74 <__udivmoddi4+0x90>
 8000c3c:	f1c6 0720 	rsb	r7, r6, #32
 8000c40:	40b3      	lsls	r3, r6
 8000c42:	fa01 f406 	lsl.w	r4, r1, r6
 8000c46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c4a:	40f9      	lsrs	r1, r7
 8000c4c:	40b2      	lsls	r2, r6
 8000c4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c52:	fa20 f307 	lsr.w	r3, r0, r7
 8000c56:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c5a:	431c      	orrs	r4, r3
 8000c5c:	fa1f fe8c 	uxth.w	lr, ip
 8000c60:	fa00 f306 	lsl.w	r3, r0, r6
 8000c64:	0c20      	lsrs	r0, r4, #16
 8000c66:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c6a:	fb09 1118 	mls	r1, r9, r8, r1
 8000c6e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c72:	fb08 f00e 	mul.w	r0, r8, lr
 8000c76:	4288      	cmp	r0, r1
 8000c78:	d90f      	bls.n	8000c9a <__udivmoddi4+0x1b6>
 8000c7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c7e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c82:	bf2c      	ite	cs
 8000c84:	f04f 0b01 	movcs.w	fp, #1
 8000c88:	f04f 0b00 	movcc.w	fp, #0
 8000c8c:	4288      	cmp	r0, r1
 8000c8e:	d903      	bls.n	8000c98 <__udivmoddi4+0x1b4>
 8000c90:	f1bb 0f00 	cmp.w	fp, #0
 8000c94:	f000 808d 	beq.w	8000db2 <__udivmoddi4+0x2ce>
 8000c98:	46d0      	mov	r8, sl
 8000c9a:	1a09      	subs	r1, r1, r0
 8000c9c:	b2a4      	uxth	r4, r4
 8000c9e:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ca2:	fb09 1110 	mls	r1, r9, r0, r1
 8000ca6:	fb00 fe0e 	mul.w	lr, r0, lr
 8000caa:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cae:	458e      	cmp	lr, r1
 8000cb0:	d907      	bls.n	8000cc2 <__udivmoddi4+0x1de>
 8000cb2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cba:	d201      	bcs.n	8000cc0 <__udivmoddi4+0x1dc>
 8000cbc:	458e      	cmp	lr, r1
 8000cbe:	d87f      	bhi.n	8000dc0 <__udivmoddi4+0x2dc>
 8000cc0:	4620      	mov	r0, r4
 8000cc2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cc6:	eba1 010e 	sub.w	r1, r1, lr
 8000cca:	fba0 9802 	umull	r9, r8, r0, r2
 8000cce:	4541      	cmp	r1, r8
 8000cd0:	464c      	mov	r4, r9
 8000cd2:	46c6      	mov	lr, r8
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0x1f8>
 8000cd6:	d106      	bne.n	8000ce6 <__udivmoddi4+0x202>
 8000cd8:	454b      	cmp	r3, r9
 8000cda:	d204      	bcs.n	8000ce6 <__udivmoddi4+0x202>
 8000cdc:	3801      	subs	r0, #1
 8000cde:	ebb9 0402 	subs.w	r4, r9, r2
 8000ce2:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d070      	beq.n	8000dcc <__udivmoddi4+0x2e8>
 8000cea:	1b1a      	subs	r2, r3, r4
 8000cec:	eb61 010e 	sbc.w	r1, r1, lr
 8000cf0:	fa22 f306 	lsr.w	r3, r2, r6
 8000cf4:	fa01 f707 	lsl.w	r7, r1, r7
 8000cf8:	40f1      	lsrs	r1, r6
 8000cfa:	2600      	movs	r6, #0
 8000cfc:	431f      	orrs	r7, r3
 8000cfe:	e9c5 7100 	strd	r7, r1, [r5]
 8000d02:	e73c      	b.n	8000b7e <__udivmoddi4+0x9a>
 8000d04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d08:	f1c3 0020 	rsb	r0, r3, #32
 8000d0c:	fa01 f203 	lsl.w	r2, r1, r3
 8000d10:	fa21 f600 	lsr.w	r6, r1, r0
 8000d14:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d18:	fa24 f100 	lsr.w	r1, r4, r0
 8000d1c:	fa1f f78c 	uxth.w	r7, ip
 8000d20:	409c      	lsls	r4, r3
 8000d22:	4311      	orrs	r1, r2
 8000d24:	fbb6 f0fe 	udiv	r0, r6, lr
 8000d28:	0c0a      	lsrs	r2, r1, #16
 8000d2a:	fb0e 6610 	mls	r6, lr, r0, r6
 8000d2e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000d32:	fb00 f607 	mul.w	r6, r0, r7
 8000d36:	4296      	cmp	r6, r2
 8000d38:	d90e      	bls.n	8000d58 <__udivmoddi4+0x274>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d42:	bf2c      	ite	cs
 8000d44:	f04f 0901 	movcs.w	r9, #1
 8000d48:	f04f 0900 	movcc.w	r9, #0
 8000d4c:	4296      	cmp	r6, r2
 8000d4e:	d902      	bls.n	8000d56 <__udivmoddi4+0x272>
 8000d50:	f1b9 0f00 	cmp.w	r9, #0
 8000d54:	d031      	beq.n	8000dba <__udivmoddi4+0x2d6>
 8000d56:	4640      	mov	r0, r8
 8000d58:	1b92      	subs	r2, r2, r6
 8000d5a:	b289      	uxth	r1, r1
 8000d5c:	fbb2 f6fe 	udiv	r6, r2, lr
 8000d60:	fb0e 2216 	mls	r2, lr, r6, r2
 8000d64:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000d68:	fb06 f207 	mul.w	r2, r6, r7
 8000d6c:	428a      	cmp	r2, r1
 8000d6e:	d907      	bls.n	8000d80 <__udivmoddi4+0x29c>
 8000d70:	eb1c 0101 	adds.w	r1, ip, r1
 8000d74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d78:	d201      	bcs.n	8000d7e <__udivmoddi4+0x29a>
 8000d7a:	428a      	cmp	r2, r1
 8000d7c:	d823      	bhi.n	8000dc6 <__udivmoddi4+0x2e2>
 8000d7e:	4646      	mov	r6, r8
 8000d80:	1a89      	subs	r1, r1, r2
 8000d82:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d86:	e725      	b.n	8000bd4 <__udivmoddi4+0xf0>
 8000d88:	462e      	mov	r6, r5
 8000d8a:	4628      	mov	r0, r5
 8000d8c:	e6f7      	b.n	8000b7e <__udivmoddi4+0x9a>
 8000d8e:	1a84      	subs	r4, r0, r2
 8000d90:	eb61 0303 	sbc.w	r3, r1, r3
 8000d94:	2001      	movs	r0, #1
 8000d96:	461f      	mov	r7, r3
 8000d98:	e70b      	b.n	8000bb2 <__udivmoddi4+0xce>
 8000d9a:	4464      	add	r4, ip
 8000d9c:	3802      	subs	r0, #2
 8000d9e:	e749      	b.n	8000c34 <__udivmoddi4+0x150>
 8000da0:	4464      	add	r4, ip
 8000da2:	3802      	subs	r0, #2
 8000da4:	e6e1      	b.n	8000b6a <__udivmoddi4+0x86>
 8000da6:	3a02      	subs	r2, #2
 8000da8:	4461      	add	r1, ip
 8000daa:	e72e      	b.n	8000c0a <__udivmoddi4+0x126>
 8000dac:	3e02      	subs	r6, #2
 8000dae:	4462      	add	r2, ip
 8000db0:	e6c6      	b.n	8000b40 <__udivmoddi4+0x5c>
 8000db2:	f1a8 0802 	sub.w	r8, r8, #2
 8000db6:	4461      	add	r1, ip
 8000db8:	e76f      	b.n	8000c9a <__udivmoddi4+0x1b6>
 8000dba:	3802      	subs	r0, #2
 8000dbc:	4462      	add	r2, ip
 8000dbe:	e7cb      	b.n	8000d58 <__udivmoddi4+0x274>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	4461      	add	r1, ip
 8000dc4:	e77d      	b.n	8000cc2 <__udivmoddi4+0x1de>
 8000dc6:	3e02      	subs	r6, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	e7d9      	b.n	8000d80 <__udivmoddi4+0x29c>
 8000dcc:	462e      	mov	r6, r5
 8000dce:	e6d6      	b.n	8000b7e <__udivmoddi4+0x9a>

08000dd0 <__aeabi_idiv0>:
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop

08000dd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b088      	sub	sp, #32
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dda:	f001 fea9 	bl	8002b30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dde:	f000 f929 	bl	8001034 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000de2:	f000 f988 	bl	80010f6 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000de6:	f000 fbb7 	bl	8001558 <MX_GPIO_Init>
  MX_UART4_Init();
 8000dea:	f000 fb69 	bl	80014c0 <MX_UART4_Init>
  MX_I2C1_Init();
 8000dee:	f000 fa13 	bl	8001218 <MX_I2C1_Init>
  MX_ADC4_Init();
 8000df2:	f000 f987 	bl	8001104 <MX_ADC4_Init>
  MX_I2C2_Init();
 8000df6:	f000 fa4f 	bl	8001298 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000dfa:	f000 faa1 	bl	8001340 <MX_SPI1_Init>
  MX_GPDMA1_Init();
 8000dfe:	f000 f9eb 	bl	80011d8 <MX_GPDMA1_Init>
  MX_TIM4_Init();
 8000e02:	f000 fb0d 	bl	8001420 <MX_TIM4_Init>
  MX_ICACHE_Init();
 8000e06:	f000 fa87 	bl	8001318 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  /*Init serial rx buffer with DMA*/
  HAL_UART_Receive_DMA(&huart4, (uint8_t *)uart_rx_buf, (UART_RX_IDX_MAX + 1));
 8000e0a:	2280      	movs	r2, #128	; 0x80
 8000e0c:	4977      	ldr	r1, [pc, #476]	; (8000fec <main+0x218>)
 8000e0e:	4878      	ldr	r0, [pc, #480]	; (8000ff0 <main+0x21c>)
 8000e10:	f00b fdb0 	bl	800c974 <HAL_UART_Receive_DMA>

  /* Perform ADC calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc4, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 8000e14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4876      	ldr	r0, [pc, #472]	; (8000ff4 <main+0x220>)
 8000e1c:	f004 f858 	bl	8004ed0 <HAL_ADCEx_Calibration_Start>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <main+0x56>
   {
     /* Calibration Error */
     Error_Handler();
 8000e26:	f001 fab3 	bl	8002390 <Error_Handler>
   }

  /*---------------- Configure MAX77874 Buck Converter --------------------------------------*/

  configure_MAX77874_buck_conv();
 8000e2a:	f000 ff63 	bl	8001cf4 <configure_MAX77874_buck_conv>

  /*---------------- Initialize Bluetooth BM78 module -------------------------------------- */
  HAL_GPIO_WritePin(GPIOC, SW_BTN_Pin, GPIO_PIN_SET); // SW_BTN
 8000e2e:	2201      	movs	r2, #1
 8000e30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e34:	4870      	ldr	r0, [pc, #448]	; (8000ff8 <main+0x224>)
 8000e36:	f005 fe17 	bl	8006a68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, WAKE_UP_Pin, GPIO_PIN_SET); // WAKE_UP pin
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e40:	486d      	ldr	r0, [pc, #436]	; (8000ff8 <main+0x224>)
 8000e42:	f005 fe11 	bl	8006a68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, RST_Pin, GPIO_PIN_SET); // RST pin
 8000e46:	2201      	movs	r2, #1
 8000e48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e4c:	486a      	ldr	r0, [pc, #424]	; (8000ff8 <main+0x224>)
 8000e4e:	f005 fe0b 	bl	8006a68 <HAL_GPIO_WritePin>

  HAL_Delay(100);
 8000e52:	2064      	movs	r0, #100	; 0x64
 8000e54:	f001 fef0 	bl	8002c38 <HAL_Delay>

  /*---------------- Chip select pin SS of SPI1 and SPI2 is high ----------------------------*/
  HAL_GPIO_WritePin(GPIOA, SPI1_SS_Pin, GPIO_PIN_SET); // SPI1_SS
 8000e58:	2201      	movs	r2, #1
 8000e5a:	2110      	movs	r1, #16
 8000e5c:	4867      	ldr	r0, [pc, #412]	; (8000ffc <main+0x228>)
 8000e5e:	f005 fe03 	bl	8006a68 <HAL_GPIO_WritePin>
  data_written_spi[2] = 0xFF;
  data_written_spi[3] = 0xFF;
  data_written_spi[4] = 0xFF;
*/

  HAL_Delay(1);
 8000e62:	2001      	movs	r0, #1
 8000e64:	f001 fee8 	bl	8002c38 <HAL_Delay>
  // redistribute
  // Put SS LOW. Activate SPI device.
  HAL_GPIO_WritePin(GPIOA, SPI1_SS_Pin, GPIO_PIN_RESET);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2110      	movs	r1, #16
 8000e6c:	4863      	ldr	r0, [pc, #396]	; (8000ffc <main+0x228>)
 8000e6e:	f005 fdfb 	bl	8006a68 <HAL_GPIO_WritePin>

  // Send data
  HAL_SPI_Transmit(&hspi1, data_written_spi, 5, 1000);
 8000e72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e76:	2205      	movs	r2, #5
 8000e78:	4961      	ldr	r1, [pc, #388]	; (8001000 <main+0x22c>)
 8000e7a:	4862      	ldr	r0, [pc, #392]	; (8001004 <main+0x230>)
 8000e7c:	f00a faf6 	bl	800b46c <HAL_SPI_Transmit>

  // Bring SS HIGH. Deactivate SPI device.
  HAL_GPIO_WritePin(GPIOA, SPI1_SS_Pin, GPIO_PIN_SET);
 8000e80:	2201      	movs	r2, #1
 8000e82:	2110      	movs	r1, #16
 8000e84:	485d      	ldr	r0, [pc, #372]	; (8000ffc <main+0x228>)
 8000e86:	f005 fdef 	bl	8006a68 <HAL_GPIO_WritePin>

  HAL_Delay(1);
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	f001 fed4 	bl	8002c38 <HAL_Delay>

  /*---------------- set all the select pins ------------------------------------------------*/
  for (int i=0; i<5; i++)
 8000e90:	2300      	movs	r3, #0
 8000e92:	61bb      	str	r3, [r7, #24]
 8000e94:	e00c      	b.n	8000eb0 <main+0xdc>
  {
	  HAL_GPIO_WritePin(GPIOE, select_pins_MUX_1[i], GPIO_PIN_RESET);
 8000e96:	4a5c      	ldr	r2, [pc, #368]	; (8001008 <main+0x234>)
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4859      	ldr	r0, [pc, #356]	; (800100c <main+0x238>)
 8000ea6:	f005 fddf 	bl	8006a68 <HAL_GPIO_WritePin>
  for (int i=0; i<5; i++)
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	3301      	adds	r3, #1
 8000eae:	61bb      	str	r3, [r7, #24]
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	ddef      	ble.n	8000e96 <main+0xc2>
  }
  for (int i=0; i<3; i++)
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
 8000eba:	e00c      	b.n	8000ed6 <main+0x102>
  {
	  HAL_GPIO_WritePin(GPIOD, select_pins_MUX_2[i], GPIO_PIN_RESET);
 8000ebc:	4a54      	ldr	r2, [pc, #336]	; (8001010 <main+0x23c>)
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4852      	ldr	r0, [pc, #328]	; (8001014 <main+0x240>)
 8000ecc:	f005 fdcc 	bl	8006a68 <HAL_GPIO_WritePin>
  for (int i=0; i<3; i++)
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	617b      	str	r3, [r7, #20]
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	ddef      	ble.n	8000ebc <main+0xe8>
  }

  for(int i=0; i<NUMBER_OF_SENSORS; i++){
 8000edc:	2300      	movs	r3, #0
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	e007      	b.n	8000ef2 <main+0x11e>
  	  modules_state[i] = 1;
 8000ee2:	4a4d      	ldr	r2, [pc, #308]	; (8001018 <main+0x244>)
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	2201      	movs	r2, #1
 8000eea:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<NUMBER_OF_SENSORS; i++){
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	613b      	str	r3, [r7, #16]
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	2b1e      	cmp	r3, #30
 8000ef6:	ddf4      	ble.n	8000ee2 <main+0x10e>
    }

  /*--------------- start the timer ---------------------------------------------------------*/
  /*## Start the Input Capture in interrupt mode ##########################*/
  if(HAL_TIM_Base_Start_IT(&htim4) != HAL_OK)
 8000ef8:	4848      	ldr	r0, [pc, #288]	; (800101c <main+0x248>)
 8000efa:	f00a fe4b 	bl	800bb94 <HAL_TIM_Base_Start_IT>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <main+0x134>
  {
    /* Starting Error */
    Error_Handler();
 8000f04:	f001 fa44 	bl	8002390 <Error_Handler>
  }
  old_time = HAL_GetTick();
 8000f08:	f001 fe8a 	bl	8002c20 <HAL_GetTick>
 8000f0c:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// loop to create the pressure map

	  read_all_sensors();
 8000f0e:	f000 fc0f 	bl	8001730 <read_all_sensors>

	  create_pressure_map(pressure_map);
 8000f12:	4843      	ldr	r0, [pc, #268]	; (8001020 <main+0x24c>)
 8000f14:	f000 fc80 	bl	8001818 <create_pressure_map>

	  for(int i=0; i<NUMBER_OF_SENSORS; i++){
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	e016      	b.n	8000f4c <main+0x178>
		  average_pressure_map[i] = average_pressure_map[i] + pressure_map[i];
 8000f1e:	4a41      	ldr	r2, [pc, #260]	; (8001024 <main+0x250>)
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	4413      	add	r3, r2
 8000f26:	ed93 7a00 	vldr	s14, [r3]
 8000f2a:	4a3d      	ldr	r2, [pc, #244]	; (8001020 <main+0x24c>)
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	4413      	add	r3, r2
 8000f32:	edd3 7a00 	vldr	s15, [r3]
 8000f36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f3a:	4a3a      	ldr	r2, [pc, #232]	; (8001024 <main+0x250>)
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	4413      	add	r3, r2
 8000f42:	edc3 7a00 	vstr	s15, [r3]
	  for(int i=0; i<NUMBER_OF_SENSORS; i++){
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	2b1e      	cmp	r3, #30
 8000f50:	dde5      	ble.n	8000f1e <main+0x14a>
	  }
	  counter_average++;
 8000f52:	4b35      	ldr	r3, [pc, #212]	; (8001028 <main+0x254>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	3301      	adds	r3, #1
 8000f58:	4a33      	ldr	r2, [pc, #204]	; (8001028 <main+0x254>)
 8000f5a:	6013      	str	r3, [r2, #0]

	  if (autocontrol) {
 8000f5c:	4b33      	ldr	r3, [pc, #204]	; (800102c <main+0x258>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d00a      	beq.n	8000f7a <main+0x1a6>
		  if(autocontrol_timeout){
 8000f64:	4b32      	ldr	r3, [pc, #200]	; (8001030 <main+0x25c>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d007      	beq.n	8000f7e <main+0x1aa>
			  valves_autocontrol();
 8000f6e:	f001 f99f 	bl	80022b0 <valves_autocontrol>
			  autocontrol_timeout = 0;
 8000f72:	4b2f      	ldr	r3, [pc, #188]	; (8001030 <main+0x25c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	701a      	strb	r2, [r3, #0]
 8000f78:	e001      	b.n	8000f7e <main+0x1aa>
		  }
	  } else {
		  write2SPI();
 8000f7a:	f000 fef5 	bl	8001d68 <write2SPI>
	  }

	  // use pressure_map and Bluetooth to send data to PC

	  send_to_uart(pressure_map);
 8000f7e:	4828      	ldr	r0, [pc, #160]	; (8001020 <main+0x24c>)
 8000f80:	f000 fd8a 	bl	8001a98 <send_to_uart>
	  read_uart();
 8000f84:	f000 fdb8 	bl	8001af8 <read_uart>

	  // set all the select pins
	  for (int i=0; i<5; i++)
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	e00c      	b.n	8000fa8 <main+0x1d4>
	  {
		  HAL_GPIO_WritePin(GPIOE, select_pins_MUX_1[i], GPIO_PIN_RESET);
 8000f8e:	4a1e      	ldr	r2, [pc, #120]	; (8001008 <main+0x234>)
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	2200      	movs	r2, #0
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	481b      	ldr	r0, [pc, #108]	; (800100c <main+0x238>)
 8000f9e:	f005 fd63 	bl	8006a68 <HAL_GPIO_WritePin>
	  for (int i=0; i<5; i++)
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	2b04      	cmp	r3, #4
 8000fac:	ddef      	ble.n	8000f8e <main+0x1ba>
	  }
	  for (int i=0; i<3; i++)
 8000fae:	2300      	movs	r3, #0
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	e00c      	b.n	8000fce <main+0x1fa>
	  {
		  HAL_GPIO_WritePin(GPIOD, select_pins_MUX_2[i], GPIO_PIN_RESET);
 8000fb4:	4a16      	ldr	r2, [pc, #88]	; (8001010 <main+0x23c>)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4814      	ldr	r0, [pc, #80]	; (8001014 <main+0x240>)
 8000fc4:	f005 fd50 	bl	8006a68 <HAL_GPIO_WritePin>
	  for (int i=0; i<3; i++)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	607b      	str	r3, [r7, #4]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	ddef      	ble.n	8000fb4 <main+0x1e0>
	  }

	  //wait
	  do {
		  new_time = HAL_GetTick();
 8000fd4:	f001 fe24 	bl	8002c20 <HAL_GetTick>
 8000fd8:	6038      	str	r0, [r7, #0]
	  }	while ((new_time-old_time) < 10); //100Hz
 8000fda:	683a      	ldr	r2, [r7, #0]
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	2b09      	cmp	r3, #9
 8000fe2:	d9f7      	bls.n	8000fd4 <main+0x200>
	  old_time = new_time;
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	61fb      	str	r3, [r7, #28]
	  read_all_sensors();
 8000fe8:	e791      	b.n	8000f0e <main+0x13a>
 8000fea:	bf00      	nop
 8000fec:	200004f4 	.word	0x200004f4
 8000ff0:	20000334 	.word	0x20000334
 8000ff4:	20000134 	.word	0x20000134
 8000ff8:	42020800 	.word	0x42020800
 8000ffc:	42020000 	.word	0x42020000
 8001000:	20000000 	.word	0x20000000
 8001004:	20000258 	.word	0x20000258
 8001008:	0800e1e8 	.word	0x0800e1e8
 800100c:	42021000 	.word	0x42021000
 8001010:	0800e1fc 	.word	0x0800e1fc
 8001014:	42020c00 	.word	0x42020c00
 8001018:	200006ec 	.word	0x200006ec
 800101c:	200002e8 	.word	0x200002e8
 8001020:	20000578 	.word	0x20000578
 8001024:	200005f4 	.word	0x200005f4
 8001028:	20000714 	.word	0x20000714
 800102c:	20000575 	.word	0x20000575
 8001030:	20000574 	.word	0x20000574

08001034 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b09e      	sub	sp, #120	; 0x78
 8001038:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103a:	f107 0318 	add.w	r3, r7, #24
 800103e:	2260      	movs	r2, #96	; 0x60
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f00d f8bc 	bl	800e1c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001048:	463b      	mov	r3, r7
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
 8001054:	611a      	str	r2, [r3, #16]
 8001056:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001058:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 800105c:	f006 f966 	bl	800732c <HAL_PWREx_ControlVoltageScaling>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <SystemClock_Config+0x36>
  {
    Error_Handler();
 8001066:	f001 f993 	bl	8002390 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 800106a:	2312      	movs	r3, #18
 800106c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800106e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001074:	2310      	movs	r3, #16
 8001076:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001078:	2301      	movs	r3, #1
 800107a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800107c:	2310      	movs	r3, #16
 800107e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8001080:	2300      	movs	r3, #0
 8001082:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001084:	2302      	movs	r3, #2
 8001086:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001088:	2301      	movs	r3, #1
 800108a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 800108c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001090:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8001092:	2303      	movs	r3, #3
 8001094:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001096:	2308      	movs	r3, #8
 8001098:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 800109a:	2302      	movs	r3, #2
 800109c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800109e:	2302      	movs	r3, #2
 80010a0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 80010a2:	2301      	movs	r3, #1
 80010a4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80010a6:	230c      	movs	r3, #12
 80010a8:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ae:	f107 0318 	add.w	r3, r7, #24
 80010b2:	4618      	mov	r0, r3
 80010b4:	f006 f9ec 	bl	8007490 <HAL_RCC_OscConfig>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80010be:	f001 f967 	bl	8002390 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c2:	231f      	movs	r3, #31
 80010c4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c6:	2303      	movs	r3, #3
 80010c8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 80010ca:	230a      	movs	r3, #10
 80010cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010da:	463b      	mov	r3, r7
 80010dc:	2100      	movs	r1, #0
 80010de:	4618      	mov	r0, r3
 80010e0:	f007 f8ac 	bl	800823c <HAL_RCC_ClockConfig>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <SystemClock_Config+0xba>
  {
    Error_Handler();
 80010ea:	f001 f951 	bl	8002390 <Error_Handler>
  }
}
 80010ee:	bf00      	nop
 80010f0:	3778      	adds	r7, #120	; 0x78
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 80010fa:	f006 f9b9 	bl	8007470 <HAL_PWREx_DisableUCPDDeadBattery>
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b088      	sub	sp, #32
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800110a:	463b      	mov	r3, r7
 800110c:	2220      	movs	r2, #32
 800110e:	2100      	movs	r1, #0
 8001110:	4618      	mov	r0, r3
 8001112:	f00d f855 	bl	800e1c0 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8001116:	4b2d      	ldr	r3, [pc, #180]	; (80011cc <MX_ADC4_Init+0xc8>)
 8001118:	4a2d      	ldr	r2, [pc, #180]	; (80011d0 <MX_ADC4_Init+0xcc>)
 800111a:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800111c:	4b2b      	ldr	r3, [pc, #172]	; (80011cc <MX_ADC4_Init+0xc8>)
 800111e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001122:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8001124:	4b29      	ldr	r3, [pc, #164]	; (80011cc <MX_ADC4_Init+0xc8>)
 8001126:	2204      	movs	r2, #4
 8001128:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800112a:	4b28      	ldr	r3, [pc, #160]	; (80011cc <MX_ADC4_Init+0xc8>)
 800112c:	2200      	movs	r2, #0
 800112e:	615a      	str	r2, [r3, #20]
  hadc4.Init.ScanConvMode = ADC4_SCAN_DISABLE;
 8001130:	4b26      	ldr	r3, [pc, #152]	; (80011cc <MX_ADC4_Init+0xc8>)
 8001132:	2200      	movs	r2, #0
 8001134:	611a      	str	r2, [r3, #16]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001136:	4b25      	ldr	r3, [pc, #148]	; (80011cc <MX_ADC4_Init+0xc8>)
 8001138:	2204      	movs	r2, #4
 800113a:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoPowerOff = ADC_LOW_POWER_NONE;
 800113c:	4b23      	ldr	r3, [pc, #140]	; (80011cc <MX_ADC4_Init+0xc8>)
 800113e:	2200      	movs	r2, #0
 8001140:	621a      	str	r2, [r3, #32]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8001142:	4b22      	ldr	r3, [pc, #136]	; (80011cc <MX_ADC4_Init+0xc8>)
 8001144:	2200      	movs	r2, #0
 8001146:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8001148:	4b20      	ldr	r3, [pc, #128]	; (80011cc <MX_ADC4_Init+0xc8>)
 800114a:	2200      	movs	r2, #0
 800114c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.NbrOfConversion = 1;
 8001150:	4b1e      	ldr	r3, [pc, #120]	; (80011cc <MX_ADC4_Init+0xc8>)
 8001152:	2201      	movs	r2, #1
 8001154:	629a      	str	r2, [r3, #40]	; 0x28
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001156:	4b1d      	ldr	r3, [pc, #116]	; (80011cc <MX_ADC4_Init+0xc8>)
 8001158:	2200      	movs	r2, #0
 800115a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800115c:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <MX_ADC4_Init+0xc8>)
 800115e:	2200      	movs	r2, #0
 8001160:	639a      	str	r2, [r3, #56]	; 0x38
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8001162:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <MX_ADC4_Init+0xc8>)
 8001164:	2200      	movs	r2, #0
 8001166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc4.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800116a:	4b18      	ldr	r3, [pc, #96]	; (80011cc <MX_ADC4_Init+0xc8>)
 800116c:	2200      	movs	r2, #0
 800116e:	669a      	str	r2, [r3, #104]	; 0x68
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001170:	4b16      	ldr	r3, [pc, #88]	; (80011cc <MX_ADC4_Init+0xc8>)
 8001172:	2200      	movs	r2, #0
 8001174:	645a      	str	r2, [r3, #68]	; 0x44
  hadc4.Init.SamplingTimeCommon1 = ADC4_SAMPLETIME_79CYCLES_5;
 8001176:	4b15      	ldr	r3, [pc, #84]	; (80011cc <MX_ADC4_Init+0xc8>)
 8001178:	2206      	movs	r2, #6
 800117a:	649a      	str	r2, [r3, #72]	; 0x48
  hadc4.Init.SamplingTimeCommon2 = ADC4_SAMPLETIME_1CYCLE_5;
 800117c:	4b13      	ldr	r3, [pc, #76]	; (80011cc <MX_ADC4_Init+0xc8>)
 800117e:	2200      	movs	r2, #0
 8001180:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc4.Init.OversamplingMode = DISABLE;
 8001182:	4b12      	ldr	r3, [pc, #72]	; (80011cc <MX_ADC4_Init+0xc8>)
 8001184:	2200      	movs	r2, #0
 8001186:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800118a:	4810      	ldr	r0, [pc, #64]	; (80011cc <MX_ADC4_Init+0xc8>)
 800118c:	f002 f8d6 	bl	800333c <HAL_ADC_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_ADC4_Init+0x96>
  {
    Error_Handler();
 8001196:	f001 f8fb 	bl	8002390 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800119a:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <MX_ADC4_Init+0xd0>)
 800119c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_1;
 800119e:	2300      	movs	r3, #0
 80011a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC4_SAMPLINGTIME_COMMON_1;
 80011a2:	2300      	movs	r3, #0
 80011a4:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011a6:	2304      	movs	r3, #4
 80011a8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80011ae:	463b      	mov	r3, r7
 80011b0:	4619      	mov	r1, r3
 80011b2:	4806      	ldr	r0, [pc, #24]	; (80011cc <MX_ADC4_Init+0xc8>)
 80011b4:	f002 ff58 	bl	8004068 <HAL_ADC_ConfigChannel>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_ADC4_Init+0xbe>
  {
    Error_Handler();
 80011be:	f001 f8e7 	bl	8002390 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80011c2:	bf00      	nop
 80011c4:	3720      	adds	r7, #32
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000134 	.word	0x20000134
 80011d0:	46021000 	.word	0x46021000
 80011d4:	0c000008 	.word	0x0c000008

080011d8 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80011de:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <MX_GPDMA1_Init+0x3c>)
 80011e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011e4:	4a0b      	ldr	r2, [pc, #44]	; (8001214 <MX_GPDMA1_Init+0x3c>)
 80011e6:	f043 0301 	orr.w	r3, r3, #1
 80011ea:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <MX_GPDMA1_Init+0x3c>)
 80011f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011f4:	f003 0301 	and.w	r3, r3, #1
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2100      	movs	r1, #0
 8001200:	201d      	movs	r0, #29
 8001202:	f003 ffcc 	bl	800519e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8001206:	201d      	movs	r0, #29
 8001208:	f003 ffe3 	bl	80051d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	46020c00 	.word	0x46020c00

08001218 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800121c:	4b1b      	ldr	r3, [pc, #108]	; (800128c <MX_I2C1_Init+0x74>)
 800121e:	4a1c      	ldr	r2, [pc, #112]	; (8001290 <MX_I2C1_Init+0x78>)
 8001220:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8001222:	4b1a      	ldr	r3, [pc, #104]	; (800128c <MX_I2C1_Init+0x74>)
 8001224:	4a1b      	ldr	r2, [pc, #108]	; (8001294 <MX_I2C1_Init+0x7c>)
 8001226:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001228:	4b18      	ldr	r3, [pc, #96]	; (800128c <MX_I2C1_Init+0x74>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800122e:	4b17      	ldr	r3, [pc, #92]	; (800128c <MX_I2C1_Init+0x74>)
 8001230:	2201      	movs	r2, #1
 8001232:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001234:	4b15      	ldr	r3, [pc, #84]	; (800128c <MX_I2C1_Init+0x74>)
 8001236:	2200      	movs	r2, #0
 8001238:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800123a:	4b14      	ldr	r3, [pc, #80]	; (800128c <MX_I2C1_Init+0x74>)
 800123c:	2200      	movs	r2, #0
 800123e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <MX_I2C1_Init+0x74>)
 8001242:	2200      	movs	r2, #0
 8001244:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001246:	4b11      	ldr	r3, [pc, #68]	; (800128c <MX_I2C1_Init+0x74>)
 8001248:	2200      	movs	r2, #0
 800124a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800124c:	4b0f      	ldr	r3, [pc, #60]	; (800128c <MX_I2C1_Init+0x74>)
 800124e:	2200      	movs	r2, #0
 8001250:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001252:	480e      	ldr	r0, [pc, #56]	; (800128c <MX_I2C1_Init+0x74>)
 8001254:	f005 fc20 	bl	8006a98 <HAL_I2C_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800125e:	f001 f897 	bl	8002390 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001262:	2100      	movs	r1, #0
 8001264:	4809      	ldr	r0, [pc, #36]	; (800128c <MX_I2C1_Init+0x74>)
 8001266:	f005 ff99 	bl	800719c <HAL_I2CEx_ConfigAnalogFilter>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001270:	f001 f88e 	bl	8002390 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001274:	2100      	movs	r1, #0
 8001276:	4805      	ldr	r0, [pc, #20]	; (800128c <MX_I2C1_Init+0x74>)
 8001278:	f005 ffdb 	bl	8007232 <HAL_I2CEx_ConfigDigitalFilter>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001282:	f001 f885 	bl	8002390 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200001c0 	.word	0x200001c0
 8001290:	40005400 	.word	0x40005400
 8001294:	00303d5b 	.word	0x00303d5b

08001298 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800129c:	4b1b      	ldr	r3, [pc, #108]	; (800130c <MX_I2C2_Init+0x74>)
 800129e:	4a1c      	ldr	r2, [pc, #112]	; (8001310 <MX_I2C2_Init+0x78>)
 80012a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 80012a2:	4b1a      	ldr	r3, [pc, #104]	; (800130c <MX_I2C2_Init+0x74>)
 80012a4:	4a1b      	ldr	r2, [pc, #108]	; (8001314 <MX_I2C2_Init+0x7c>)
 80012a6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80012a8:	4b18      	ldr	r3, [pc, #96]	; (800130c <MX_I2C2_Init+0x74>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012ae:	4b17      	ldr	r3, [pc, #92]	; (800130c <MX_I2C2_Init+0x74>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012b4:	4b15      	ldr	r3, [pc, #84]	; (800130c <MX_I2C2_Init+0x74>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80012ba:	4b14      	ldr	r3, [pc, #80]	; (800130c <MX_I2C2_Init+0x74>)
 80012bc:	2200      	movs	r2, #0
 80012be:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <MX_I2C2_Init+0x74>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012c6:	4b11      	ldr	r3, [pc, #68]	; (800130c <MX_I2C2_Init+0x74>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012cc:	4b0f      	ldr	r3, [pc, #60]	; (800130c <MX_I2C2_Init+0x74>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80012d2:	480e      	ldr	r0, [pc, #56]	; (800130c <MX_I2C2_Init+0x74>)
 80012d4:	f005 fbe0 	bl	8006a98 <HAL_I2C_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80012de:	f001 f857 	bl	8002390 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012e2:	2100      	movs	r1, #0
 80012e4:	4809      	ldr	r0, [pc, #36]	; (800130c <MX_I2C2_Init+0x74>)
 80012e6:	f005 ff59 	bl	800719c <HAL_I2CEx_ConfigAnalogFilter>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80012f0:	f001 f84e 	bl	8002390 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80012f4:	2100      	movs	r1, #0
 80012f6:	4805      	ldr	r0, [pc, #20]	; (800130c <MX_I2C2_Init+0x74>)
 80012f8:	f005 ff9b 	bl	8007232 <HAL_I2CEx_ConfigDigitalFilter>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001302:	f001 f845 	bl	8002390 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	2000020c 	.word	0x2000020c
 8001310:	40005800 	.word	0x40005800
 8001314:	00303d5b 	.word	0x00303d5b

08001318 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800131c:	2000      	movs	r0, #0
 800131e:	f005 ffd5 	bl	80072cc <HAL_ICACHE_ConfigAssociativityMode>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001328:	f001 f832 	bl	8002390 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800132c:	f005 ffee 	bl	800730c <HAL_ICACHE_Enable>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8001336:	f001 f82b 	bl	8002390 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001350:	4b31      	ldr	r3, [pc, #196]	; (8001418 <MX_SPI1_Init+0xd8>)
 8001352:	4a32      	ldr	r2, [pc, #200]	; (800141c <MX_SPI1_Init+0xdc>)
 8001354:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001356:	4b30      	ldr	r3, [pc, #192]	; (8001418 <MX_SPI1_Init+0xd8>)
 8001358:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800135c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 800135e:	4b2e      	ldr	r3, [pc, #184]	; (8001418 <MX_SPI1_Init+0xd8>)
 8001360:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001364:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001366:	4b2c      	ldr	r3, [pc, #176]	; (8001418 <MX_SPI1_Init+0xd8>)
 8001368:	2207      	movs	r2, #7
 800136a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800136c:	4b2a      	ldr	r3, [pc, #168]	; (8001418 <MX_SPI1_Init+0xd8>)
 800136e:	2200      	movs	r2, #0
 8001370:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001372:	4b29      	ldr	r3, [pc, #164]	; (8001418 <MX_SPI1_Init+0xd8>)
 8001374:	2200      	movs	r2, #0
 8001376:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001378:	4b27      	ldr	r3, [pc, #156]	; (8001418 <MX_SPI1_Init+0xd8>)
 800137a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800137e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001380:	4b25      	ldr	r3, [pc, #148]	; (8001418 <MX_SPI1_Init+0xd8>)
 8001382:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001386:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001388:	4b23      	ldr	r3, [pc, #140]	; (8001418 <MX_SPI1_Init+0xd8>)
 800138a:	2200      	movs	r2, #0
 800138c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800138e:	4b22      	ldr	r3, [pc, #136]	; (8001418 <MX_SPI1_Init+0xd8>)
 8001390:	2200      	movs	r2, #0
 8001392:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001394:	4b20      	ldr	r3, [pc, #128]	; (8001418 <MX_SPI1_Init+0xd8>)
 8001396:	2200      	movs	r2, #0
 8001398:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 800139a:	4b1f      	ldr	r3, [pc, #124]	; (8001418 <MX_SPI1_Init+0xd8>)
 800139c:	2207      	movs	r2, #7
 800139e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013a0:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <MX_SPI1_Init+0xd8>)
 80013a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013a6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80013a8:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <MX_SPI1_Init+0xd8>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80013ae:	4b1a      	ldr	r3, [pc, #104]	; (8001418 <MX_SPI1_Init+0xd8>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80013b4:	4b18      	ldr	r3, [pc, #96]	; (8001418 <MX_SPI1_Init+0xd8>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80013ba:	4b17      	ldr	r3, [pc, #92]	; (8001418 <MX_SPI1_Init+0xd8>)
 80013bc:	2200      	movs	r2, #0
 80013be:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80013c0:	4b15      	ldr	r3, [pc, #84]	; (8001418 <MX_SPI1_Init+0xd8>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80013c6:	4b14      	ldr	r3, [pc, #80]	; (8001418 <MX_SPI1_Init+0xd8>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80013cc:	4b12      	ldr	r3, [pc, #72]	; (8001418 <MX_SPI1_Init+0xd8>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80013d2:	4b11      	ldr	r3, [pc, #68]	; (8001418 <MX_SPI1_Init+0xd8>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80013d8:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <MX_SPI1_Init+0xd8>)
 80013da:	2200      	movs	r2, #0
 80013dc:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013de:	480e      	ldr	r0, [pc, #56]	; (8001418 <MX_SPI1_Init+0xd8>)
 80013e0:	f009 ff4c 	bl	800b27c <HAL_SPI_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_SPI1_Init+0xae>
  {
    Error_Handler();
 80013ea:	f000 ffd1 	bl	8002390 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80013ee:	2300      	movs	r3, #0
 80013f0:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 80013f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80013f6:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80013f8:	2300      	movs	r3, #0
 80013fa:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80013fc:	1d3b      	adds	r3, r7, #4
 80013fe:	4619      	mov	r1, r3
 8001400:	4805      	ldr	r0, [pc, #20]	; (8001418 <MX_SPI1_Init+0xd8>)
 8001402:	f00a fb2e 	bl	800ba62 <HAL_SPIEx_SetConfigAutonomousMode>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_SPI1_Init+0xd0>
  {
    Error_Handler();
 800140c:	f000 ffc0 	bl	8002390 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001410:	bf00      	nop
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000258 	.word	0x20000258
 800141c:	40013000 	.word	0x40013000

08001420 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b088      	sub	sp, #32
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001426:	f107 0310 	add.w	r3, r7, #16
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001434:	1d3b      	adds	r3, r7, #4
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800143e:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <MX_TIM4_Init+0x98>)
 8001440:	4a1e      	ldr	r2, [pc, #120]	; (80014bc <MX_TIM4_Init+0x9c>)
 8001442:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1000;
 8001444:	4b1c      	ldr	r3, [pc, #112]	; (80014b8 <MX_TIM4_Init+0x98>)
 8001446:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800144a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800144c:	4b1a      	ldr	r3, [pc, #104]	; (80014b8 <MX_TIM4_Init+0x98>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 32000;
 8001452:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <MX_TIM4_Init+0x98>)
 8001454:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001458:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800145a:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <MX_TIM4_Init+0x98>)
 800145c:	2200      	movs	r2, #0
 800145e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001460:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <MX_TIM4_Init+0x98>)
 8001462:	2280      	movs	r2, #128	; 0x80
 8001464:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001466:	4814      	ldr	r0, [pc, #80]	; (80014b8 <MX_TIM4_Init+0x98>)
 8001468:	f00a fb3c 	bl	800bae4 <HAL_TIM_Base_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001472:	f000 ff8d 	bl	8002390 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001476:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800147a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800147c:	f107 0310 	add.w	r3, r7, #16
 8001480:	4619      	mov	r1, r3
 8001482:	480d      	ldr	r0, [pc, #52]	; (80014b8 <MX_TIM4_Init+0x98>)
 8001484:	f00a fda6 	bl	800bfd4 <HAL_TIM_ConfigClockSource>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 800148e:	f000 ff7f 	bl	8002390 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001492:	2300      	movs	r3, #0
 8001494:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	4619      	mov	r1, r3
 800149e:	4806      	ldr	r0, [pc, #24]	; (80014b8 <MX_TIM4_Init+0x98>)
 80014a0:	f00b f858 	bl	800c554 <HAL_TIMEx_MasterConfigSynchronization>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80014aa:	f000 ff71 	bl	8002390 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80014ae:	bf00      	nop
 80014b0:	3720      	adds	r7, #32
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	200002e8 	.word	0x200002e8
 80014bc:	40000800 	.word	0x40000800

080014c0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80014c4:	4b22      	ldr	r3, [pc, #136]	; (8001550 <MX_UART4_Init+0x90>)
 80014c6:	4a23      	ldr	r2, [pc, #140]	; (8001554 <MX_UART4_Init+0x94>)
 80014c8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80014ca:	4b21      	ldr	r3, [pc, #132]	; (8001550 <MX_UART4_Init+0x90>)
 80014cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014d0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80014d2:	4b1f      	ldr	r3, [pc, #124]	; (8001550 <MX_UART4_Init+0x90>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80014d8:	4b1d      	ldr	r3, [pc, #116]	; (8001550 <MX_UART4_Init+0x90>)
 80014da:	2200      	movs	r2, #0
 80014dc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80014de:	4b1c      	ldr	r3, [pc, #112]	; (8001550 <MX_UART4_Init+0x90>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80014e4:	4b1a      	ldr	r3, [pc, #104]	; (8001550 <MX_UART4_Init+0x90>)
 80014e6:	220c      	movs	r2, #12
 80014e8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ea:	4b19      	ldr	r3, [pc, #100]	; (8001550 <MX_UART4_Init+0x90>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f0:	4b17      	ldr	r3, [pc, #92]	; (8001550 <MX_UART4_Init+0x90>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014f6:	4b16      	ldr	r3, [pc, #88]	; (8001550 <MX_UART4_Init+0x90>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014fc:	4b14      	ldr	r3, [pc, #80]	; (8001550 <MX_UART4_Init+0x90>)
 80014fe:	2200      	movs	r2, #0
 8001500:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001502:	4b13      	ldr	r3, [pc, #76]	; (8001550 <MX_UART4_Init+0x90>)
 8001504:	2200      	movs	r2, #0
 8001506:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001508:	4811      	ldr	r0, [pc, #68]	; (8001550 <MX_UART4_Init+0x90>)
 800150a:	f00b f92b 	bl	800c764 <HAL_UART_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001514:	f000 ff3c 	bl	8002390 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001518:	2100      	movs	r1, #0
 800151a:	480d      	ldr	r0, [pc, #52]	; (8001550 <MX_UART4_Init+0x90>)
 800151c:	f00c fd61 	bl	800dfe2 <HAL_UARTEx_SetTxFifoThreshold>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001526:	f000 ff33 	bl	8002390 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800152a:	2100      	movs	r1, #0
 800152c:	4808      	ldr	r0, [pc, #32]	; (8001550 <MX_UART4_Init+0x90>)
 800152e:	f00c fd96 	bl	800e05e <HAL_UARTEx_SetRxFifoThreshold>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001538:	f000 ff2a 	bl	8002390 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800153c:	4804      	ldr	r0, [pc, #16]	; (8001550 <MX_UART4_Init+0x90>)
 800153e:	f00c fd17 	bl	800df70 <HAL_UARTEx_DisableFifoMode>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001548:	f000 ff22 	bl	8002390 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000334 	.word	0x20000334
 8001554:	40004c00 	.word	0x40004c00

08001558 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08c      	sub	sp, #48	; 0x30
 800155c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155e:	f107 031c 	add.w	r3, r7, #28
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	609a      	str	r2, [r3, #8]
 800156a:	60da      	str	r2, [r3, #12]
 800156c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800156e:	4b6b      	ldr	r3, [pc, #428]	; (800171c <MX_GPIO_Init+0x1c4>)
 8001570:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001574:	4a69      	ldr	r2, [pc, #420]	; (800171c <MX_GPIO_Init+0x1c4>)
 8001576:	f043 0310 	orr.w	r3, r3, #16
 800157a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800157e:	4b67      	ldr	r3, [pc, #412]	; (800171c <MX_GPIO_Init+0x1c4>)
 8001580:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001584:	f003 0310 	and.w	r3, r3, #16
 8001588:	61bb      	str	r3, [r7, #24]
 800158a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800158c:	4b63      	ldr	r3, [pc, #396]	; (800171c <MX_GPIO_Init+0x1c4>)
 800158e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001592:	4a62      	ldr	r2, [pc, #392]	; (800171c <MX_GPIO_Init+0x1c4>)
 8001594:	f043 0302 	orr.w	r3, r3, #2
 8001598:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800159c:	4b5f      	ldr	r3, [pc, #380]	; (800171c <MX_GPIO_Init+0x1c4>)
 800159e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	617b      	str	r3, [r7, #20]
 80015a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015aa:	4b5c      	ldr	r3, [pc, #368]	; (800171c <MX_GPIO_Init+0x1c4>)
 80015ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015b0:	4a5a      	ldr	r2, [pc, #360]	; (800171c <MX_GPIO_Init+0x1c4>)
 80015b2:	f043 0308 	orr.w	r3, r3, #8
 80015b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80015ba:	4b58      	ldr	r3, [pc, #352]	; (800171c <MX_GPIO_Init+0x1c4>)
 80015bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015c0:	f003 0308 	and.w	r3, r3, #8
 80015c4:	613b      	str	r3, [r7, #16]
 80015c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c8:	4b54      	ldr	r3, [pc, #336]	; (800171c <MX_GPIO_Init+0x1c4>)
 80015ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015ce:	4a53      	ldr	r2, [pc, #332]	; (800171c <MX_GPIO_Init+0x1c4>)
 80015d0:	f043 0304 	orr.w	r3, r3, #4
 80015d4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80015d8:	4b50      	ldr	r3, [pc, #320]	; (800171c <MX_GPIO_Init+0x1c4>)
 80015da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015de:	f003 0304 	and.w	r3, r3, #4
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e6:	4b4d      	ldr	r3, [pc, #308]	; (800171c <MX_GPIO_Init+0x1c4>)
 80015e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015ec:	4a4b      	ldr	r2, [pc, #300]	; (800171c <MX_GPIO_Init+0x1c4>)
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80015f6:	4b49      	ldr	r3, [pc, #292]	; (800171c <MX_GPIO_Init+0x1c4>)
 80015f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001604:	4b45      	ldr	r3, [pc, #276]	; (800171c <MX_GPIO_Init+0x1c4>)
 8001606:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800160a:	4a44      	ldr	r2, [pc, #272]	; (800171c <MX_GPIO_Init+0x1c4>)
 800160c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001610:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001614:	4b41      	ldr	r3, [pc, #260]	; (800171c <MX_GPIO_Init+0x1c4>)
 8001616:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800161a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800161e:	607b      	str	r3, [r7, #4]
 8001620:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001622:	4b3e      	ldr	r3, [pc, #248]	; (800171c <MX_GPIO_Init+0x1c4>)
 8001624:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001628:	4a3c      	ldr	r2, [pc, #240]	; (800171c <MX_GPIO_Init+0x1c4>)
 800162a:	f043 0320 	orr.w	r3, r3, #32
 800162e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001632:	4b3a      	ldr	r3, [pc, #232]	; (800171c <MX_GPIO_Init+0x1c4>)
 8001634:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001638:	f003 0320 	and.w	r3, r3, #32
 800163c:	603b      	str	r3, [r7, #0]
 800163e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, A4_MUX_Pin|A2_MUX_Pin|A0_MUX_Pin|A3_MUX_Pin
 8001640:	2200      	movs	r2, #0
 8001642:	f24b 11be 	movw	r1, #45502	; 0xb1be
 8001646:	4836      	ldr	r0, [pc, #216]	; (8001720 <MX_GPIO_Init+0x1c8>)
 8001648:	f005 fa0e 	bl	8006a68 <HAL_GPIO_WritePin>
                          |A1_MUX_Pin|DVS_Pin|MODE_Pin|EN_MAX77874_Pin
                          |RIN_N_Pin|WD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_1_Pin|LED_2_Pin|LED_3_Pin|MA2_Pin
 800164c:	2200      	movs	r2, #0
 800164e:	21fe      	movs	r1, #254	; 0xfe
 8001650:	4834      	ldr	r0, [pc, #208]	; (8001724 <MX_GPIO_Init+0x1cc>)
 8001652:	f005 fa09 	bl	8006a68 <HAL_GPIO_WritePin>
                          |MA0_Pin|MA1_Pin|NA0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RST_Pin|WAKE_UP_Pin|SW_BTN_Pin, GPIO_PIN_RESET);
 8001656:	2200      	movs	r2, #0
 8001658:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 800165c:	4832      	ldr	r0, [pc, #200]	; (8001728 <MX_GPIO_Init+0x1d0>)
 800165e:	f005 fa03 	bl	8006a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_SS_GPIO_Port, SPI1_SS_Pin, GPIO_PIN_SET);
 8001662:	2201      	movs	r2, #1
 8001664:	2110      	movs	r1, #16
 8001666:	4831      	ldr	r0, [pc, #196]	; (800172c <MX_GPIO_Init+0x1d4>)
 8001668:	f005 f9fe 	bl	8006a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A4_MUX_Pin A2_MUX_Pin A0_MUX_Pin A3_MUX_Pin
                           A1_MUX_Pin DVS_Pin MODE_Pin EN_MAX77874_Pin
                           RIN_N_Pin WD_Pin */
  GPIO_InitStruct.Pin = A4_MUX_Pin|A2_MUX_Pin|A0_MUX_Pin|A3_MUX_Pin
 800166c:	f24b 13be 	movw	r3, #45502	; 0xb1be
 8001670:	61fb      	str	r3, [r7, #28]
                          |A1_MUX_Pin|DVS_Pin|MODE_Pin|EN_MAX77874_Pin
                          |RIN_N_Pin|WD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001672:	2301      	movs	r3, #1
 8001674:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167a:	2300      	movs	r3, #0
 800167c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800167e:	f107 031c 	add.w	r3, r7, #28
 8001682:	4619      	mov	r1, r3
 8001684:	4826      	ldr	r0, [pc, #152]	; (8001720 <MX_GPIO_Init+0x1c8>)
 8001686:	f005 f817 	bl	80066b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin MA2_Pin
                           MA0_Pin MA1_Pin NA0_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|MA2_Pin
 800168a:	23fe      	movs	r3, #254	; 0xfe
 800168c:	61fb      	str	r3, [r7, #28]
                          |MA0_Pin|MA1_Pin|NA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168e:	2301      	movs	r3, #1
 8001690:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001696:	2300      	movs	r3, #0
 8001698:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800169a:	f107 031c 	add.w	r3, r7, #28
 800169e:	4619      	mov	r1, r3
 80016a0:	4820      	ldr	r0, [pc, #128]	; (8001724 <MX_GPIO_Init+0x1cc>)
 80016a2:	f005 f809 	bl	80066b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_Pin WAKE_UP_Pin SW_BTN_Pin */
  GPIO_InitStruct.Pin = RST_Pin|WAKE_UP_Pin|SW_BTN_Pin;
 80016a6:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 80016aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ac:	2301      	movs	r3, #1
 80016ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b4:	2300      	movs	r3, #0
 80016b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b8:	f107 031c 	add.w	r3, r7, #28
 80016bc:	4619      	mov	r1, r3
 80016be:	481a      	ldr	r0, [pc, #104]	; (8001728 <MX_GPIO_Init+0x1d0>)
 80016c0:	f004 fffa 	bl	80066b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016c4:	2304      	movs	r3, #4
 80016c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016c8:	2303      	movs	r3, #3
 80016ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016d0:	f107 031c 	add.w	r3, r7, #28
 80016d4:	4619      	mov	r1, r3
 80016d6:	4814      	ldr	r0, [pc, #80]	; (8001728 <MX_GPIO_Init+0x1d0>)
 80016d8:	f004 ffee 	bl	80066b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SYS_FLT_Pin ROUT_N_Pin PWR_FLT_Pin */
  GPIO_InitStruct.Pin = SYS_FLT_Pin|ROUT_N_Pin|PWR_FLT_Pin;
 80016dc:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 80016e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e2:	2300      	movs	r3, #0
 80016e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016ea:	f107 031c 	add.w	r3, r7, #28
 80016ee:	4619      	mov	r1, r3
 80016f0:	480b      	ldr	r0, [pc, #44]	; (8001720 <MX_GPIO_Init+0x1c8>)
 80016f2:	f004 ffe1 	bl	80066b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_SS_Pin */
  GPIO_InitStruct.Pin = SPI1_SS_Pin;
 80016f6:	2310      	movs	r3, #16
 80016f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fa:	2301      	movs	r3, #1
 80016fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001702:	2300      	movs	r3, #0
 8001704:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_SS_GPIO_Port, &GPIO_InitStruct);
 8001706:	f107 031c 	add.w	r3, r7, #28
 800170a:	4619      	mov	r1, r3
 800170c:	4807      	ldr	r0, [pc, #28]	; (800172c <MX_GPIO_Init+0x1d4>)
 800170e:	f004 ffd3 	bl	80066b8 <HAL_GPIO_Init>

}
 8001712:	bf00      	nop
 8001714:	3730      	adds	r7, #48	; 0x30
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	46020c00 	.word	0x46020c00
 8001720:	42021000 	.word	0x42021000
 8001724:	42020c00 	.word	0x42020c00
 8001728:	42020800 	.word	0x42020800
 800172c:	42020000 	.word	0x42020000

08001730 <read_all_sensors>:
/*------------- CUSTOM MADE FUNCTIONS -----------------------------------------------------*/
/*-----------------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------------*/


void read_all_sensors(){
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0

  int index = -1;
 8001736:	f04f 33ff 	mov.w	r3, #4294967295
 800173a:	60fb      	str	r3, [r7, #12]
  uint32_t old_timeAD, new_timeAD;
  for (int i=0; i<(NUMBER_OF_SENSORS+1); i++)
 800173c:	2300      	movs	r3, #0
 800173e:	60bb      	str	r3, [r7, #8]
 8001740:	e05c      	b.n	80017fc <read_all_sensors+0xcc>
  {
	  // choose multiplexer
	  if(i<28){
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	2b1b      	cmp	r3, #27
 8001746:	dc22      	bgt.n	800178e <read_all_sensors+0x5e>

		  HAL_GPIO_WritePin(GPIOD, NA0_Pin, GPIO_PIN_RESET); // choose multiplexer MUX_1
 8001748:	2200      	movs	r2, #0
 800174a:	2180      	movs	r1, #128	; 0x80
 800174c:	482f      	ldr	r0, [pc, #188]	; (800180c <read_all_sensors+0xdc>)
 800174e:	f005 f98b 	bl	8006a68 <HAL_GPIO_WritePin>

		  if((i+4) < 12) {
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	2b07      	cmp	r3, #7
 8001756:	dc09      	bgt.n	800176c <read_all_sensors+0x3c>
			  select_mux_1_pin(i+4);
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	b29b      	uxth	r3, r3
 800175c:	3304      	adds	r3, #4
 800175e:	b29b      	uxth	r3, r3
 8001760:	4618      	mov	r0, r3
 8001762:	f000 fa5f 	bl	8001c24 <select_mux_1_pin>
			  index++;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	3301      	adds	r3, #1
 800176a:	60fb      	str	r3, [r7, #12]
		  }
		  if((i+4) == 12) continue;
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	2b08      	cmp	r3, #8
 8001770:	d03e      	beq.n	80017f0 <read_all_sensors+0xc0>
		  if((i+4) > 12) {
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	2b08      	cmp	r3, #8
 8001776:	dd19      	ble.n	80017ac <read_all_sensors+0x7c>
			  select_mux_1_pin(i+4);
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	b29b      	uxth	r3, r3
 800177c:	3304      	adds	r3, #4
 800177e:	b29b      	uxth	r3, r3
 8001780:	4618      	mov	r0, r3
 8001782:	f000 fa4f 	bl	8001c24 <select_mux_1_pin>
			  index++;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	3301      	adds	r3, #1
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	e00e      	b.n	80017ac <read_all_sensors+0x7c>
		  }

	  }
	  else{

		  HAL_GPIO_WritePin(GPIOD, NA0_Pin, GPIO_PIN_SET);   // choose multiplexer MUX_2
 800178e:	2201      	movs	r2, #1
 8001790:	2180      	movs	r1, #128	; 0x80
 8001792:	481e      	ldr	r0, [pc, #120]	; (800180c <read_all_sensors+0xdc>)
 8001794:	f005 f968 	bl	8006a68 <HAL_GPIO_WritePin>

		  select_mux_2_pin(i-28);  // select one mux pin at a time
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	b29b      	uxth	r3, r3
 800179c:	3b1c      	subs	r3, #28
 800179e:	b29b      	uxth	r3, r3
 80017a0:	4618      	mov	r0, r3
 80017a2:	f000 fa73 	bl	8001c8c <select_mux_2_pin>
		  index++;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	3301      	adds	r3, #1
 80017aa:	60fb      	str	r3, [r7, #12]
	  }
	  old_timeAD = HAL_GetTick();
 80017ac:	f001 fa38 	bl	8002c20 <HAL_GetTick>
 80017b0:	6078      	str	r0, [r7, #4]
#warning Attention au timing


	  do {
	 	  new_timeAD = HAL_GetTick();
 80017b2:	f001 fa35 	bl	8002c20 <HAL_GetTick>
 80017b6:	6038      	str	r0, [r7, #0]
	  }	while ((new_timeAD-old_timeAD) < 10);
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b09      	cmp	r3, #9
 80017c0:	d9f7      	bls.n	80017b2 <read_all_sensors+0x82>

	  HAL_ADC_Start(&hadc4); // start the ADC
 80017c2:	4813      	ldr	r0, [pc, #76]	; (8001810 <read_all_sensors+0xe0>)
 80017c4:	f002 f8b4 	bl	8003930 <HAL_ADC_Start>

	  HAL_ADC_PollForConversion(&hadc4, 1000);  // poll for conversion
 80017c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017cc:	4810      	ldr	r0, [pc, #64]	; (8001810 <read_all_sensors+0xe0>)
 80017ce:	f002 f957 	bl	8003a80 <HAL_ADC_PollForConversion>

	  if((i+4) == 12) continue;
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	2b08      	cmp	r3, #8
 80017d6:	d00d      	beq.n	80017f4 <read_all_sensors+0xc4>
	  else{
		  value_adc[index] = HAL_ADC_GetValue(&hadc4);  // store adc value in value
 80017d8:	480d      	ldr	r0, [pc, #52]	; (8001810 <read_all_sensors+0xe0>)
 80017da:	f002 fa37 	bl	8003c4c <HAL_ADC_GetValue>
 80017de:	4602      	mov	r2, r0
 80017e0:	490c      	ldr	r1, [pc, #48]	; (8001814 <read_all_sensors+0xe4>)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  }

	  HAL_ADC_Stop(&hadc4);
 80017e8:	4809      	ldr	r0, [pc, #36]	; (8001810 <read_all_sensors+0xe0>)
 80017ea:	f002 f915 	bl	8003a18 <HAL_ADC_Stop>
 80017ee:	e002      	b.n	80017f6 <read_all_sensors+0xc6>
		  if((i+4) == 12) continue;
 80017f0:	bf00      	nop
 80017f2:	e000      	b.n	80017f6 <read_all_sensors+0xc6>
	  if((i+4) == 12) continue;
 80017f4:	bf00      	nop
  for (int i=0; i<(NUMBER_OF_SENSORS+1); i++)
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	3301      	adds	r3, #1
 80017fa:	60bb      	str	r3, [r7, #8]
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	2b1f      	cmp	r3, #31
 8001800:	dd9f      	ble.n	8001742 <read_all_sensors+0x12>
  }

}
 8001802:	bf00      	nop
 8001804:	bf00      	nop
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	42020c00 	.word	0x42020c00
 8001810:	20000134 	.word	0x20000134
 8001814:	20000478 	.word	0x20000478

08001818 <create_pressure_map>:

void create_pressure_map(float* map)
{
 8001818:	b590      	push	{r4, r7, lr}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
	static float analog_vol[NUMBER_OF_SENSORS];
	// calibration curves, slope & bias



	for(i=0; i<NUMBER_OF_SENSORS; i++){
 8001820:	2300      	movs	r3, #0
 8001822:	73fb      	strb	r3, [r7, #15]
 8001824:	e02d      	b.n	8001882 <create_pressure_map+0x6a>
		analog_vol[i] = value_adc[Mes2Sensor[i+1]-1] * 3.3 / 4095.0;
 8001826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800182a:	3301      	adds	r3, #1
 800182c:	4a3e      	ldr	r2, [pc, #248]	; (8001928 <create_pressure_map+0x110>)
 800182e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001832:	3b01      	subs	r3, #1
 8001834:	4a3d      	ldr	r2, [pc, #244]	; (800192c <create_pressure_map+0x114>)
 8001836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800183a:	4618      	mov	r0, r3
 800183c:	f7fe fe5e 	bl	80004fc <__aeabi_ui2d>
 8001840:	a333      	add	r3, pc, #204	; (adr r3, 8001910 <create_pressure_map+0xf8>)
 8001842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001846:	f7fe fed3 	bl	80005f0 <__aeabi_dmul>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	4610      	mov	r0, r2
 8001850:	4619      	mov	r1, r3
 8001852:	a331      	add	r3, pc, #196	; (adr r3, 8001918 <create_pressure_map+0x100>)
 8001854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001858:	f7fe fff4 	bl	8000844 <__aeabi_ddiv>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8001864:	4610      	mov	r0, r2
 8001866:	4619      	mov	r1, r3
 8001868:	f7ff f8d4 	bl	8000a14 <__aeabi_d2f>
 800186c:	4602      	mov	r2, r0
 800186e:	4930      	ldr	r1, [pc, #192]	; (8001930 <create_pressure_map+0x118>)
 8001870:	00a3      	lsls	r3, r4, #2
 8001872:	440b      	add	r3, r1
 8001874:	601a      	str	r2, [r3, #0]
	for(i=0; i<NUMBER_OF_SENSORS; i++){
 8001876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187a:	b2db      	uxtb	r3, r3
 800187c:	3301      	adds	r3, #1
 800187e:	b2db      	uxtb	r3, r3
 8001880:	73fb      	strb	r3, [r7, #15]
 8001882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001886:	2b1e      	cmp	r3, #30
 8001888:	ddcd      	ble.n	8001826 <create_pressure_map+0xe>
	}

	// calculate force according to calibration curves
	for(i=0; i<NUMBER_OF_SENSORS; i++){
 800188a:	2300      	movs	r3, #0
 800188c:	73fb      	strb	r3, [r7, #15]
 800188e:	e036      	b.n	80018fe <create_pressure_map+0xe6>
		map[i] = 0.1*(slope[i+1] * analog_vol[i] + bias[i+1]);
 8001890:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001894:	3301      	adds	r3, #1
 8001896:	4a27      	ldr	r2, [pc, #156]	; (8001934 <create_pressure_map+0x11c>)
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4413      	add	r3, r2
 800189c:	ed93 7a00 	vldr	s14, [r3]
 80018a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018a4:	4a22      	ldr	r2, [pc, #136]	; (8001930 <create_pressure_map+0x118>)
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	edd3 7a00 	vldr	s15, [r3]
 80018ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018b6:	3301      	adds	r3, #1
 80018b8:	4a1f      	ldr	r2, [pc, #124]	; (8001938 <create_pressure_map+0x120>)
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	edd3 7a00 	vldr	s15, [r3]
 80018c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018c6:	ee17 0a90 	vmov	r0, s15
 80018ca:	f7fe fe39 	bl	8000540 <__aeabi_f2d>
 80018ce:	a314      	add	r3, pc, #80	; (adr r3, 8001920 <create_pressure_map+0x108>)
 80018d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d4:	f7fe fe8c 	bl	80005f0 <__aeabi_dmul>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4610      	mov	r0, r2
 80018de:	4619      	mov	r1, r3
 80018e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	18d4      	adds	r4, r2, r3
 80018ea:	f7ff f893 	bl	8000a14 <__aeabi_d2f>
 80018ee:	4603      	mov	r3, r0
 80018f0:	6023      	str	r3, [r4, #0]
	for(i=0; i<NUMBER_OF_SENSORS; i++){
 80018f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	3301      	adds	r3, #1
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	73fb      	strb	r3, [r7, #15]
 80018fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001902:	2b1e      	cmp	r3, #30
 8001904:	ddc4      	ble.n	8001890 <create_pressure_map+0x78>
		//map[i] = analog_vol[i];
	}
}
 8001906:	bf00      	nop
 8001908:	bf00      	nop
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	bd90      	pop	{r4, r7, pc}
 8001910:	66666666 	.word	0x66666666
 8001914:	400a6666 	.word	0x400a6666
 8001918:	00000000 	.word	0x00000000
 800191c:	40affe00 	.word	0x40affe00
 8001920:	9999999a 	.word	0x9999999a
 8001924:	3fb99999 	.word	0x3fb99999
 8001928:	0800e248 	.word	0x0800e248
 800192c:	20000478 	.word	0x20000478
 8001930:	2000072c 	.word	0x2000072c
 8001934:	2000008c 	.word	0x2000008c
 8001938:	20000010 	.word	0x20000010

0800193c <set_valve>:

void set_valve (uint8_t numv)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	71fb      	strb	r3, [r7, #7]
	int16_t i;
	int16_t num;
	if (numv == 0) {
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d112      	bne.n	8001972 <set_valve+0x36>
		for (i = 0; i < 5; i++) data_written_spi[i] = 0xFF;
 800194c:	2300      	movs	r3, #0
 800194e:	81fb      	strh	r3, [r7, #14]
 8001950:	e00a      	b.n	8001968 <set_valve+0x2c>
 8001952:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001956:	4a22      	ldr	r2, [pc, #136]	; (80019e0 <set_valve+0xa4>)
 8001958:	21ff      	movs	r1, #255	; 0xff
 800195a:	54d1      	strb	r1, [r2, r3]
 800195c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001960:	b29b      	uxth	r3, r3
 8001962:	3301      	adds	r3, #1
 8001964:	b29b      	uxth	r3, r3
 8001966:	81fb      	strh	r3, [r7, #14]
 8001968:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800196c:	2b04      	cmp	r3, #4
 800196e:	ddf0      	ble.n	8001952 <set_valve+0x16>
	tmp[0] = 'S';
	tmp[1] = numv + '0';
	tmp[2] = '\n';
	HAL_UART_Transmit_IT(&huart4, (uint8_t*) tmp, 3);
	*/
}
 8001970:	e02f      	b.n	80019d2 <set_valve+0x96>
		num = valve2SPIbit[numv] - 1;
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	4a1b      	ldr	r2, [pc, #108]	; (80019e4 <set_valve+0xa8>)
 8001976:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800197a:	3b01      	subs	r3, #1
 800197c:	b29b      	uxth	r3, r3
 800197e:	81bb      	strh	r3, [r7, #12]
		for (i = 0; i < 5; i++){
 8001980:	2300      	movs	r3, #0
 8001982:	81fb      	strh	r3, [r7, #14]
 8001984:	e021      	b.n	80019ca <set_valve+0x8e>
			if ((num >= 0) && (num <= 7)){
 8001986:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800198a:	2b00      	cmp	r3, #0
 800198c:	db13      	blt.n	80019b6 <set_valve+0x7a>
 800198e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001992:	2b07      	cmp	r3, #7
 8001994:	dc0f      	bgt.n	80019b6 <set_valve+0x7a>
				data_written_spi[i] |= (1U << num);
 8001996:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800199a:	4a11      	ldr	r2, [pc, #68]	; (80019e0 <set_valve+0xa4>)
 800199c:	5cd1      	ldrb	r1, [r2, r3]
 800199e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80019a2:	2201      	movs	r2, #1
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019ae:	430a      	orrs	r2, r1
 80019b0:	b2d1      	uxtb	r1, r2
 80019b2:	4a0b      	ldr	r2, [pc, #44]	; (80019e0 <set_valve+0xa4>)
 80019b4:	54d1      	strb	r1, [r2, r3]
			num -= 8;
 80019b6:	89bb      	ldrh	r3, [r7, #12]
 80019b8:	3b08      	subs	r3, #8
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	81bb      	strh	r3, [r7, #12]
		for (i = 0; i < 5; i++){
 80019be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	3301      	adds	r3, #1
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	81fb      	strh	r3, [r7, #14]
 80019ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	ddd9      	ble.n	8001986 <set_valve+0x4a>
}
 80019d2:	bf00      	nop
 80019d4:	3714      	adds	r7, #20
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	20000000 	.word	0x20000000
 80019e4:	0800e208 	.word	0x0800e208

080019e8 <clear_valve>:

void clear_valve (uint8_t numv)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	71fb      	strb	r3, [r7, #7]
	int16_t i;
	int16_t num;
	if (numv == 0) {
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d112      	bne.n	8001a1e <clear_valve+0x36>
		for (i = 0; i < 5; i++) data_written_spi[i] = 0;
 80019f8:	2300      	movs	r3, #0
 80019fa:	81fb      	strh	r3, [r7, #14]
 80019fc:	e00a      	b.n	8001a14 <clear_valve+0x2c>
 80019fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a02:	4a23      	ldr	r2, [pc, #140]	; (8001a90 <clear_valve+0xa8>)
 8001a04:	2100      	movs	r1, #0
 8001a06:	54d1      	strb	r1, [r2, r3]
 8001a08:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	3301      	adds	r3, #1
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	81fb      	strh	r3, [r7, #14]
 8001a14:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a18:	2b04      	cmp	r3, #4
 8001a1a:	ddf0      	ble.n	80019fe <clear_valve+0x16>
	tmp[0] = 'C';
	tmp[1] = numv + '0';
	tmp[2] = '\n';
	HAL_UART_Transmit_IT(&huart4, (uint8_t*) tmp, 3);
	*/
}
 8001a1c:	e031      	b.n	8001a82 <clear_valve+0x9a>
		num = valve2SPIbit[numv] - 1;
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	4a1c      	ldr	r2, [pc, #112]	; (8001a94 <clear_valve+0xac>)
 8001a22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	81bb      	strh	r3, [r7, #12]
		for (i = 0; i < 5; i++){
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	81fb      	strh	r3, [r7, #14]
 8001a30:	e023      	b.n	8001a7a <clear_valve+0x92>
			if ((num >= 0) && (num <= 7)){
 8001a32:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	db15      	blt.n	8001a66 <clear_valve+0x7e>
 8001a3a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001a3e:	2b07      	cmp	r3, #7
 8001a40:	dc11      	bgt.n	8001a66 <clear_valve+0x7e>
				data_written_spi[i] &= ~(1U << num );
 8001a42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a46:	4a12      	ldr	r2, [pc, #72]	; (8001a90 <clear_valve+0xa8>)
 8001a48:	5cd1      	ldrb	r1, [r2, r3]
 8001a4a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	43db      	mvns	r3, r3
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a5e:	400a      	ands	r2, r1
 8001a60:	b2d1      	uxtb	r1, r2
 8001a62:	4a0b      	ldr	r2, [pc, #44]	; (8001a90 <clear_valve+0xa8>)
 8001a64:	54d1      	strb	r1, [r2, r3]
			num -= 8;
 8001a66:	89bb      	ldrh	r3, [r7, #12]
 8001a68:	3b08      	subs	r3, #8
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	81bb      	strh	r3, [r7, #12]
		for (i = 0; i < 5; i++){
 8001a6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	3301      	adds	r3, #1
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	81fb      	strh	r3, [r7, #14]
 8001a7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a7e:	2b04      	cmp	r3, #4
 8001a80:	ddd7      	ble.n	8001a32 <clear_valve+0x4a>
}
 8001a82:	bf00      	nop
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	20000000 	.word	0x20000000
 8001a94:	0800e208 	.word	0x0800e208

08001a98 <send_to_uart>:

void send_to_uart(float *pres_map)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
    //uint8_t buffer[sizeof(float)*NUMBER_OF_SENSORS];
	uint8_t i;
	static float tmp[NUMBER_OF_SENSORS+2];
	tmp[0] = START_BIT;
 8001aa0:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <send_to_uart+0x50>)
 8001aa2:	4a12      	ldr	r2, [pc, #72]	; (8001aec <send_to_uart+0x54>)
 8001aa4:	601a      	str	r2, [r3, #0]
	for (i=0;i<NUMBER_OF_SENSORS;i++) tmp[i+1] = pres_map[i];
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	73fb      	strb	r3, [r7, #15]
 8001aaa:	e00d      	b.n	8001ac8 <send_to_uart+0x30>
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	441a      	add	r2, r3
 8001ab4:	7bfb      	ldrb	r3, [r7, #15]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	6812      	ldr	r2, [r2, #0]
 8001aba:	490b      	ldr	r1, [pc, #44]	; (8001ae8 <send_to_uart+0x50>)
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	440b      	add	r3, r1
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	73fb      	strb	r3, [r7, #15]
 8001ac8:	7bfb      	ldrb	r3, [r7, #15]
 8001aca:	2b1e      	cmp	r3, #30
 8001acc:	d9ee      	bls.n	8001aac <send_to_uart+0x14>
	//for (i=0;i<5;i++) tmp[i+NUMBER_OF_SENSORS+1] = data_written_spi[i];
	tmp[NUMBER_OF_SENSORS+1] = STOP_BIT;
 8001ace:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <send_to_uart+0x50>)
 8001ad0:	4a07      	ldr	r2, [pc, #28]	; (8001af0 <send_to_uart+0x58>)
 8001ad2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    HAL_UART_Transmit_IT(&huart4, (uint8_t*) tmp, sizeof(float)*(NUMBER_OF_SENSORS+2));
 8001ad6:	2284      	movs	r2, #132	; 0x84
 8001ad8:	4903      	ldr	r1, [pc, #12]	; (8001ae8 <send_to_uart+0x50>)
 8001ada:	4806      	ldr	r0, [pc, #24]	; (8001af4 <send_to_uart+0x5c>)
 8001adc:	f00a fe92 	bl	800c804 <HAL_UART_Transmit_IT>
//	HAL_UART_Transmit_IT(&huart4, (uint8_t*) tmp, 10);
}
 8001ae0:	bf00      	nop
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	200007a8 	.word	0x200007a8
 8001aec:	4673fc00 	.word	0x4673fc00
 8001af0:	46755000 	.word	0x46755000
 8001af4:	20000334 	.word	0x20000334

08001af8 <read_uart>:

void read_uart(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
	static uint8_t uart_rx_state = 0; //machine d'état pour la réception des commandes
	static uint8_t num = 0; //number of the actuator to be set, cleared
	static char action = 0;

	char last_char;
	if (huart4.hdmarx!=NULL) {
 8001afe:	4b41      	ldr	r3, [pc, #260]	; (8001c04 <read_uart+0x10c>)
 8001b00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d072      	beq.n	8001bec <read_uart+0xf4>
		uint16_t usart4_dma_ndtr;
		usart4_dma_ndtr = huart4.hdmarx->Instance->CBR1;
 8001b06:	4b3f      	ldr	r3, [pc, #252]	; (8001c04 <read_uart+0x10c>)
 8001b08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b0e:	80fb      	strh	r3, [r7, #6]
		sbuf_write += ((usart4_dma_ndtr_old - usart4_dma_ndtr) & UART_RX_IDX_MAX);
 8001b10:	4b3d      	ldr	r3, [pc, #244]	; (8001c08 <read_uart+0x110>)
 8001b12:	881a      	ldrh	r2, [r3, #0]
 8001b14:	88fb      	ldrh	r3, [r7, #6]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	4b3a      	ldr	r3, [pc, #232]	; (8001c0c <read_uart+0x114>)
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	4413      	add	r3, r2
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	4b38      	ldr	r3, [pc, #224]	; (8001c0c <read_uart+0x114>)
 8001b2a:	801a      	strh	r2, [r3, #0]
		usart4_dma_ndtr_old = usart4_dma_ndtr;
 8001b2c:	4a36      	ldr	r2, [pc, #216]	; (8001c08 <read_uart+0x110>)
 8001b2e:	88fb      	ldrh	r3, [r7, #6]
 8001b30:	8013      	strh	r3, [r2, #0]
	}
	while ((uint16_t)(sbuf_write - sbuf_read) > 0){
 8001b32:	e05b      	b.n	8001bec <read_uart+0xf4>
		last_char = uart_rx_buf[sbuf_read & UART_RX_IDX_MAX];
 8001b34:	4b36      	ldr	r3, [pc, #216]	; (8001c10 <read_uart+0x118>)
 8001b36:	881b      	ldrh	r3, [r3, #0]
 8001b38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b3c:	4a35      	ldr	r2, [pc, #212]	; (8001c14 <read_uart+0x11c>)
 8001b3e:	5cd3      	ldrb	r3, [r2, r3]
 8001b40:	717b      	strb	r3, [r7, #5]
		sbuf_read++;
 8001b42:	4b33      	ldr	r3, [pc, #204]	; (8001c10 <read_uart+0x118>)
 8001b44:	881b      	ldrh	r3, [r3, #0]
 8001b46:	3301      	adds	r3, #1
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	4b31      	ldr	r3, [pc, #196]	; (8001c10 <read_uart+0x118>)
 8001b4c:	801a      	strh	r2, [r3, #0]
		switch (uart_rx_state) {
 8001b4e:	4b32      	ldr	r3, [pc, #200]	; (8001c18 <read_uart+0x120>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d002      	beq.n	8001b5c <read_uart+0x64>
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d013      	beq.n	8001b82 <read_uart+0x8a>
 8001b5a:	e047      	b.n	8001bec <read_uart+0xf4>
			case 0:
				//synchronisation
				if ((last_char == 'S')||(last_char == 'C')) {
 8001b5c:	797b      	ldrb	r3, [r7, #5]
 8001b5e:	2b53      	cmp	r3, #83	; 0x53
 8001b60:	d002      	beq.n	8001b68 <read_uart+0x70>
 8001b62:	797b      	ldrb	r3, [r7, #5]
 8001b64:	2b43      	cmp	r3, #67	; 0x43
 8001b66:	d141      	bne.n	8001bec <read_uart+0xf4>
					uart_rx_state++;
 8001b68:	4b2b      	ldr	r3, [pc, #172]	; (8001c18 <read_uart+0x120>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	b2da      	uxtb	r2, r3
 8001b70:	4b29      	ldr	r3, [pc, #164]	; (8001c18 <read_uart+0x120>)
 8001b72:	701a      	strb	r2, [r3, #0]
					num = 0;
 8001b74:	4b29      	ldr	r3, [pc, #164]	; (8001c1c <read_uart+0x124>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	701a      	strb	r2, [r3, #0]
					action = last_char;
 8001b7a:	4a29      	ldr	r2, [pc, #164]	; (8001c20 <read_uart+0x128>)
 8001b7c:	797b      	ldrb	r3, [r7, #5]
 8001b7e:	7013      	strb	r3, [r2, #0]
				}
				break;
 8001b80:	e034      	b.n	8001bec <read_uart+0xf4>
			case 1:
				//lecture de la data
				if ((last_char == '\n')||(last_char == '\r')) {
 8001b82:	797b      	ldrb	r3, [r7, #5]
 8001b84:	2b0a      	cmp	r3, #10
 8001b86:	d002      	beq.n	8001b8e <read_uart+0x96>
 8001b88:	797b      	ldrb	r3, [r7, #5]
 8001b8a:	2b0d      	cmp	r3, #13
 8001b8c:	d115      	bne.n	8001bba <read_uart+0xc2>
					switch (action) {
 8001b8e:	4b24      	ldr	r3, [pc, #144]	; (8001c20 <read_uart+0x128>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	2b43      	cmp	r3, #67	; 0x43
 8001b94:	d007      	beq.n	8001ba6 <read_uart+0xae>
 8001b96:	2b53      	cmp	r3, #83	; 0x53
 8001b98:	d10b      	bne.n	8001bb2 <read_uart+0xba>
						case 'S':
							set_valve(num);
 8001b9a:	4b20      	ldr	r3, [pc, #128]	; (8001c1c <read_uart+0x124>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff fecc 	bl	800193c <set_valve>
							break;
 8001ba4:	e005      	b.n	8001bb2 <read_uart+0xba>
						case 'C':
							clear_valve(num);
 8001ba6:	4b1d      	ldr	r3, [pc, #116]	; (8001c1c <read_uart+0x124>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff ff1c 	bl	80019e8 <clear_valve>
							break;
 8001bb0:	bf00      	nop
					}
					uart_rx_state = 0;
 8001bb2:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <read_uart+0x120>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	701a      	strb	r2, [r3, #0]
 8001bb8:	e017      	b.n	8001bea <read_uart+0xf2>
				} else {
					//si on a un mauvais caractère, il faut revenir à l'état de sync
					if ((last_char < '0') || (last_char > '9')) {
 8001bba:	797b      	ldrb	r3, [r7, #5]
 8001bbc:	2b2f      	cmp	r3, #47	; 0x2f
 8001bbe:	d902      	bls.n	8001bc6 <read_uart+0xce>
 8001bc0:	797b      	ldrb	r3, [r7, #5]
 8001bc2:	2b39      	cmp	r3, #57	; 0x39
 8001bc4:	d903      	bls.n	8001bce <read_uart+0xd6>
						uart_rx_state = 0;
 8001bc6:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <read_uart+0x120>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	701a      	strb	r2, [r3, #0]
 8001bcc:	e00d      	b.n	8001bea <read_uart+0xf2>
					} else {
						num = num * 10 + last_char - '0';
 8001bce:	4b13      	ldr	r3, [pc, #76]	; (8001c1c <read_uart+0x124>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	0092      	lsls	r2, r2, #2
 8001bd6:	4413      	add	r3, r2
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	797b      	ldrb	r3, [r7, #5]
 8001bde:	4413      	add	r3, r2
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	3b30      	subs	r3, #48	; 0x30
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	4b0d      	ldr	r3, [pc, #52]	; (8001c1c <read_uart+0x124>)
 8001be8:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 8001bea:	bf00      	nop
	while ((uint16_t)(sbuf_write - sbuf_read) > 0){
 8001bec:	4b07      	ldr	r3, [pc, #28]	; (8001c0c <read_uart+0x114>)
 8001bee:	881a      	ldrh	r2, [r3, #0]
 8001bf0:	4b07      	ldr	r3, [pc, #28]	; (8001c10 <read_uart+0x118>)
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d19d      	bne.n	8001b34 <read_uart+0x3c>
		}
	}
}
 8001bf8:	bf00      	nop
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000334 	.word	0x20000334
 8001c08:	20000108 	.word	0x20000108
 8001c0c:	2000082c 	.word	0x2000082c
 8001c10:	2000082e 	.word	0x2000082e
 8001c14:	200004f4 	.word	0x200004f4
 8001c18:	20000830 	.word	0x20000830
 8001c1c:	20000831 	.word	0x20000831
 8001c20:	20000832 	.word	0x20000832

08001c24 <select_mux_1_pin>:


void select_mux_1_pin(uint16_t pin)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	80fb      	strh	r3, [r7, #6]

	  for (int j=0; j<5; j++)
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	e01f      	b.n	8001c74 <select_mux_1_pin+0x50>
	  {
		if (pin & (1<<j))
 8001c34:	88fa      	ldrh	r2, [r7, #6]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	fa42 f303 	asr.w	r3, r2, r3
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d00a      	beq.n	8001c5a <select_mux_1_pin+0x36>
		  HAL_GPIO_WritePin(GPIOE, select_pins_MUX_1[j], GPIO_PIN_SET);
 8001c44:	4a0f      	ldr	r2, [pc, #60]	; (8001c84 <select_mux_1_pin+0x60>)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	2201      	movs	r2, #1
 8001c50:	4619      	mov	r1, r3
 8001c52:	480d      	ldr	r0, [pc, #52]	; (8001c88 <select_mux_1_pin+0x64>)
 8001c54:	f004 ff08 	bl	8006a68 <HAL_GPIO_WritePin>
 8001c58:	e009      	b.n	8001c6e <select_mux_1_pin+0x4a>
		else
		  HAL_GPIO_WritePin(GPIOE, select_pins_MUX_1[j], GPIO_PIN_RESET);
 8001c5a:	4a0a      	ldr	r2, [pc, #40]	; (8001c84 <select_mux_1_pin+0x60>)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	2200      	movs	r2, #0
 8001c66:	4619      	mov	r1, r3
 8001c68:	4807      	ldr	r0, [pc, #28]	; (8001c88 <select_mux_1_pin+0x64>)
 8001c6a:	f004 fefd 	bl	8006a68 <HAL_GPIO_WritePin>
	  for (int j=0; j<5; j++)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	3301      	adds	r3, #1
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2b04      	cmp	r3, #4
 8001c78:	dddc      	ble.n	8001c34 <select_mux_1_pin+0x10>
	  }

}
 8001c7a:	bf00      	nop
 8001c7c:	bf00      	nop
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	0800e1e8 	.word	0x0800e1e8
 8001c88:	42021000 	.word	0x42021000

08001c8c <select_mux_2_pin>:

void select_mux_2_pin(uint16_t pin)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	80fb      	strh	r3, [r7, #6]

	  for (int j=0; j<3; j++)
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	e01f      	b.n	8001cdc <select_mux_2_pin+0x50>
	  {
		if (pin & (1<<j))
 8001c9c:	88fa      	ldrh	r2, [r7, #6]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	fa42 f303 	asr.w	r3, r2, r3
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d00a      	beq.n	8001cc2 <select_mux_2_pin+0x36>
		  HAL_GPIO_WritePin(GPIOD, select_pins_MUX_2[j], GPIO_PIN_SET);
 8001cac:	4a0f      	ldr	r2, [pc, #60]	; (8001cec <select_mux_2_pin+0x60>)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	4619      	mov	r1, r3
 8001cba:	480d      	ldr	r0, [pc, #52]	; (8001cf0 <select_mux_2_pin+0x64>)
 8001cbc:	f004 fed4 	bl	8006a68 <HAL_GPIO_WritePin>
 8001cc0:	e009      	b.n	8001cd6 <select_mux_2_pin+0x4a>
		else
		  HAL_GPIO_WritePin(GPIOD, select_pins_MUX_2[j], GPIO_PIN_RESET);
 8001cc2:	4a0a      	ldr	r2, [pc, #40]	; (8001cec <select_mux_2_pin+0x60>)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	2200      	movs	r2, #0
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4807      	ldr	r0, [pc, #28]	; (8001cf0 <select_mux_2_pin+0x64>)
 8001cd2:	f004 fec9 	bl	8006a68 <HAL_GPIO_WritePin>
	  for (int j=0; j<3; j++)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	dddc      	ble.n	8001c9c <select_mux_2_pin+0x10>
	  }

}
 8001ce2:	bf00      	nop
 8001ce4:	bf00      	nop
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	0800e1fc 	.word	0x0800e1fc
 8001cf0:	42020c00 	.word	0x42020c00

08001cf4 <configure_MAX77874_buck_conv>:


/*---------------- Configure MAX77874 Buck Converter --------------------------------------*/

void    configure_MAX77874_buck_conv()
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af02      	add	r7, sp, #8

	  uint8_t i2c_data[2];

	  HAL_GPIO_WritePin(GPIOE, DVS_Pin, GPIO_PIN_RESET); // Set Dynamic Voltage Selection DVS to LOW
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d00:	4817      	ldr	r0, [pc, #92]	; (8001d60 <configure_MAX77874_buck_conv+0x6c>)
 8001d02:	f004 feb1 	bl	8006a68 <HAL_GPIO_WritePin>

	  i2c_data[0] = 0x11;          // BUCK0CNFG1 address
 8001d06:	2311      	movs	r3, #17
 8001d08:	713b      	strb	r3, [r7, #4]
	  i2c_data[1] = 0b11000010;    // 8bit data, 40mV/usec ramp rate
 8001d0a:	23c2      	movs	r3, #194	; 0xc2
 8001d0c:	717b      	strb	r3, [r7, #5]

	  HAL_I2C_Master_Transmit(&hi2c1, MAX77874_BUCK_CONV_WRITE_ADDRESS, i2c_data, 2, 100); // Enable warm startup ramp rate
 8001d0e:	1d3a      	adds	r2, r7, #4
 8001d10:	2364      	movs	r3, #100	; 0x64
 8001d12:	9300      	str	r3, [sp, #0]
 8001d14:	2302      	movs	r3, #2
 8001d16:	21c2      	movs	r1, #194	; 0xc2
 8001d18:	4812      	ldr	r0, [pc, #72]	; (8001d64 <configure_MAX77874_buck_conv+0x70>)
 8001d1a:	f004 ff4d 	bl	8006bb8 <HAL_I2C_Master_Transmit>
	  HAL_Delay(500);
 8001d1e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d22:	f000 ff89 	bl	8002c38 <HAL_Delay>

	  i2c_data[0] = 0x21;          // I2C_SDO_VOUT address
 8001d26:	2321      	movs	r3, #33	; 0x21
 8001d28:	713b      	strb	r3, [r7, #4]
	  i2c_data[1] = 70;          // Vout = 0.25V + 5mV*i2c_data[1]
 8001d2a:	2346      	movs	r3, #70	; 0x46
 8001d2c:	717b      	strb	r3, [r7, #5]

	  HAL_I2C_Master_Transmit(&hi2c1, MAX77874_BUCK_CONV_WRITE_ADDRESS, i2c_data, 2, 100); // Select Output Voltage
 8001d2e:	1d3a      	adds	r2, r7, #4
 8001d30:	2364      	movs	r3, #100	; 0x64
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	2302      	movs	r3, #2
 8001d36:	21c2      	movs	r1, #194	; 0xc2
 8001d38:	480a      	ldr	r0, [pc, #40]	; (8001d64 <configure_MAX77874_buck_conv+0x70>)
 8001d3a:	f004 ff3d 	bl	8006bb8 <HAL_I2C_Master_Transmit>
	  HAL_Delay(500);
 8001d3e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d42:	f000 ff79 	bl	8002c38 <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOE, EN_MAX77874_Pin, GPIO_PIN_SET); // Enable converter. Set Pin EN to HIGH
 8001d46:	2201      	movs	r2, #1
 8001d48:	2180      	movs	r1, #128	; 0x80
 8001d4a:	4805      	ldr	r0, [pc, #20]	; (8001d60 <configure_MAX77874_buck_conv+0x6c>)
 8001d4c:	f004 fe8c 	bl	8006a68 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 8001d50:	2001      	movs	r0, #1
 8001d52:	f000 ff71 	bl	8002c38 <HAL_Delay>

}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	42021000 	.word	0x42021000
 8001d64:	200001c0 	.word	0x200001c0

08001d68 <write2SPI>:

void write2SPI(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
	// send data through SPI to control all the modules
	// Put SS LOW. Activate SPI device.
	HAL_GPIO_WritePin(GPIOA, SPI1_SS_Pin, GPIO_PIN_RESET);
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	2110      	movs	r1, #16
 8001d70:	4808      	ldr	r0, [pc, #32]	; (8001d94 <write2SPI+0x2c>)
 8001d72:	f004 fe79 	bl	8006a68 <HAL_GPIO_WritePin>

	// Send data
	HAL_SPI_Transmit(&hspi1, data_written_spi, 5, 1000);
 8001d76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d7a:	2205      	movs	r2, #5
 8001d7c:	4906      	ldr	r1, [pc, #24]	; (8001d98 <write2SPI+0x30>)
 8001d7e:	4807      	ldr	r0, [pc, #28]	; (8001d9c <write2SPI+0x34>)
 8001d80:	f009 fb74 	bl	800b46c <HAL_SPI_Transmit>

	// Bring SS HIGH. Deactivate SPI device.
	HAL_GPIO_WritePin(GPIOA, SPI1_SS_Pin, GPIO_PIN_SET);
 8001d84:	2201      	movs	r2, #1
 8001d86:	2110      	movs	r1, #16
 8001d88:	4802      	ldr	r0, [pc, #8]	; (8001d94 <write2SPI+0x2c>)
 8001d8a:	f004 fe6d 	bl	8006a68 <HAL_GPIO_WritePin>
}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	42020000 	.word	0x42020000
 8001d98:	20000000 	.word	0x20000000
 8001d9c:	20000258 	.word	0x20000258

08001da0 <find_high_pressure_spots>:


void find_high_pressure_spots()
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0

	float temp = 0;
 8001da6:	f04f 0300 	mov.w	r3, #0
 8001daa:	603b      	str	r3, [r7, #0]

	// find two highest pressure spots
	max_1 = average_pressure_map[0];
 8001dac:	4b3c      	ldr	r3, [pc, #240]	; (8001ea0 <find_high_pressure_spots+0x100>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a3c      	ldr	r2, [pc, #240]	; (8001ea4 <find_high_pressure_spots+0x104>)
 8001db2:	6013      	str	r3, [r2, #0]
	max_2 = average_pressure_map[1];
 8001db4:	4b3a      	ldr	r3, [pc, #232]	; (8001ea0 <find_high_pressure_spots+0x100>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	4a3b      	ldr	r2, [pc, #236]	; (8001ea8 <find_high_pressure_spots+0x108>)
 8001dba:	6013      	str	r3, [r2, #0]

	index_max_1 = 0;
 8001dbc:	4b3b      	ldr	r3, [pc, #236]	; (8001eac <find_high_pressure_spots+0x10c>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
	index_max_2 = 1;
 8001dc2:	4b3b      	ldr	r3, [pc, #236]	; (8001eb0 <find_high_pressure_spots+0x110>)
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]

	if(max_1 < max_2){
 8001dc8:	4b36      	ldr	r3, [pc, #216]	; (8001ea4 <find_high_pressure_spots+0x104>)
 8001dca:	ed93 7a00 	vldr	s14, [r3]
 8001dce:	4b36      	ldr	r3, [pc, #216]	; (8001ea8 <find_high_pressure_spots+0x108>)
 8001dd0:	edd3 7a00 	vldr	s15, [r3]
 8001dd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ddc:	d509      	bpl.n	8001df2 <find_high_pressure_spots+0x52>
		temp = max_1;
 8001dde:	4b31      	ldr	r3, [pc, #196]	; (8001ea4 <find_high_pressure_spots+0x104>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	603b      	str	r3, [r7, #0]
		max_1 = max_2;
 8001de4:	4b30      	ldr	r3, [pc, #192]	; (8001ea8 <find_high_pressure_spots+0x108>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a2e      	ldr	r2, [pc, #184]	; (8001ea4 <find_high_pressure_spots+0x104>)
 8001dea:	6013      	str	r3, [r2, #0]
		max_2 = temp;
 8001dec:	4a2e      	ldr	r2, [pc, #184]	; (8001ea8 <find_high_pressure_spots+0x108>)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	6013      	str	r3, [r2, #0]
	}

	for(int i=2; i<NUMBER_OF_SENSORS; i++){
 8001df2:	2302      	movs	r3, #2
 8001df4:	607b      	str	r3, [r7, #4]
 8001df6:	e049      	b.n	8001e8c <find_high_pressure_spots+0xec>
		if(average_pressure_map[i] > max_1){
 8001df8:	4a29      	ldr	r2, [pc, #164]	; (8001ea0 <find_high_pressure_spots+0x100>)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	ed93 7a00 	vldr	s14, [r3]
 8001e04:	4b27      	ldr	r3, [pc, #156]	; (8001ea4 <find_high_pressure_spots+0x104>)
 8001e06:	edd3 7a00 	vldr	s15, [r3]
 8001e0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e12:	dd12      	ble.n	8001e3a <find_high_pressure_spots+0x9a>
			max_2 = max_1;
 8001e14:	4b23      	ldr	r3, [pc, #140]	; (8001ea4 <find_high_pressure_spots+0x104>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a23      	ldr	r2, [pc, #140]	; (8001ea8 <find_high_pressure_spots+0x108>)
 8001e1a:	6013      	str	r3, [r2, #0]
			max_1 = average_pressure_map[i];
 8001e1c:	4a20      	ldr	r2, [pc, #128]	; (8001ea0 <find_high_pressure_spots+0x100>)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a1f      	ldr	r2, [pc, #124]	; (8001ea4 <find_high_pressure_spots+0x104>)
 8001e28:	6013      	str	r3, [r2, #0]
			index_max_2 = index_max_1;
 8001e2a:	4b20      	ldr	r3, [pc, #128]	; (8001eac <find_high_pressure_spots+0x10c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a20      	ldr	r2, [pc, #128]	; (8001eb0 <find_high_pressure_spots+0x110>)
 8001e30:	6013      	str	r3, [r2, #0]
			index_max_1 = i;
 8001e32:	4a1e      	ldr	r2, [pc, #120]	; (8001eac <find_high_pressure_spots+0x10c>)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6013      	str	r3, [r2, #0]
 8001e38:	e025      	b.n	8001e86 <find_high_pressure_spots+0xe6>
		}
		else if(average_pressure_map[i]> max_2 && average_pressure_map[i] != max_1){
 8001e3a:	4a19      	ldr	r2, [pc, #100]	; (8001ea0 <find_high_pressure_spots+0x100>)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	ed93 7a00 	vldr	s14, [r3]
 8001e46:	4b18      	ldr	r3, [pc, #96]	; (8001ea8 <find_high_pressure_spots+0x108>)
 8001e48:	edd3 7a00 	vldr	s15, [r3]
 8001e4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e54:	dd17      	ble.n	8001e86 <find_high_pressure_spots+0xe6>
 8001e56:	4a12      	ldr	r2, [pc, #72]	; (8001ea0 <find_high_pressure_spots+0x100>)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	ed93 7a00 	vldr	s14, [r3]
 8001e62:	4b10      	ldr	r3, [pc, #64]	; (8001ea4 <find_high_pressure_spots+0x104>)
 8001e64:	edd3 7a00 	vldr	s15, [r3]
 8001e68:	eeb4 7a67 	vcmp.f32	s14, s15
 8001e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e70:	d009      	beq.n	8001e86 <find_high_pressure_spots+0xe6>
			max_2 = average_pressure_map[i];
 8001e72:	4a0b      	ldr	r2, [pc, #44]	; (8001ea0 <find_high_pressure_spots+0x100>)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ea8 <find_high_pressure_spots+0x108>)
 8001e7e:	6013      	str	r3, [r2, #0]
			index_max_2 = i;
 8001e80:	4a0b      	ldr	r2, [pc, #44]	; (8001eb0 <find_high_pressure_spots+0x110>)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6013      	str	r3, [r2, #0]
	for(int i=2; i<NUMBER_OF_SENSORS; i++){
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	607b      	str	r3, [r7, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b1e      	cmp	r3, #30
 8001e90:	ddb2      	ble.n	8001df8 <find_high_pressure_spots+0x58>
		}
	}

}
 8001e92:	bf00      	nop
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	200005f4 	.word	0x200005f4
 8001ea4:	2000070c 	.word	0x2000070c
 8001ea8:	20000710 	.word	0x20000710
 8001eac:	20000718 	.word	0x20000718
 8001eb0:	2000071c 	.word	0x2000071c

08001eb4 <control_valves>:

void control_valves(int m, int n){
 8001eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001eb8:	b0a3      	sub	sp, #140	; 0x8c
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	64f8      	str	r0, [r7, #76]	; 0x4c
 8001ebe:	64b9      	str	r1, [r7, #72]	; 0x48

	int   flag           = 0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	int   array_index[4] = {};
 8001ec6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001eca:	2300      	movs	r3, #0
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	6053      	str	r3, [r2, #4]
 8001ed0:	6093      	str	r3, [r2, #8]
 8001ed2:	60d3      	str	r3, [r2, #12]
	float array[4];
	float a              = 0;
 8001ed4:	f04f 0300 	mov.w	r3, #0
 8001ed8:	677b      	str	r3, [r7, #116]	; 0x74
	int   b              = 0;
 8001eda:	2300      	movs	r3, #0
 8001edc:	673b      	str	r3, [r7, #112]	; 0x70

    // Are there any modules already OFF??
	if(counter_modules_off == 0){ //NO, turn off the two highest PP modules
 8001ede:	4b5e      	ldr	r3, [pc, #376]	; (8002058 <control_valves+0x1a4>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d160      	bne.n	8001fa8 <control_valves+0xf4>
		modules_state[m] = 0;
 8001ee6:	4a5d      	ldr	r2, [pc, #372]	; (800205c <control_valves+0x1a8>)
 8001ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001eea:	441a      	add	r2, r3
 8001eec:	2300      	movs	r3, #0
 8001eee:	7013      	strb	r3, [r2, #0]
		modules_state[n] = 0;
 8001ef0:	4a5a      	ldr	r2, [pc, #360]	; (800205c <control_valves+0x1a8>)
 8001ef2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ef4:	441a      	add	r2, r3
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	7013      	strb	r3, [r2, #0]

		// set modules state on 64bit UL to zero
		modules_state_uint &= ~(1ULL << m);
 8001efa:	f04f 0201 	mov.w	r2, #1
 8001efe:	f04f 0300 	mov.w	r3, #0
 8001f02:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8001f04:	f1a4 0120 	sub.w	r1, r4, #32
 8001f08:	f1c4 0020 	rsb	r0, r4, #32
 8001f0c:	fa03 f904 	lsl.w	r9, r3, r4
 8001f10:	fa02 f101 	lsl.w	r1, r2, r1
 8001f14:	ea49 0901 	orr.w	r9, r9, r1
 8001f18:	fa22 f000 	lsr.w	r0, r2, r0
 8001f1c:	ea49 0900 	orr.w	r9, r9, r0
 8001f20:	fa02 f804 	lsl.w	r8, r2, r4
 8001f24:	ea6f 0308 	mvn.w	r3, r8
 8001f28:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f2a:	ea6f 0309 	mvn.w	r3, r9
 8001f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f30:	4b4b      	ldr	r3, [pc, #300]	; (8002060 <control_valves+0x1ac>)
 8001f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f36:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001f3a:	4641      	mov	r1, r8
 8001f3c:	4011      	ands	r1, r2
 8001f3e:	6339      	str	r1, [r7, #48]	; 0x30
 8001f40:	4649      	mov	r1, r9
 8001f42:	4019      	ands	r1, r3
 8001f44:	6379      	str	r1, [r7, #52]	; 0x34
 8001f46:	4b46      	ldr	r3, [pc, #280]	; (8002060 <control_valves+0x1ac>)
 8001f48:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8001f4c:	e9c3 1200 	strd	r1, r2, [r3]
		modules_state_uint &= ~(1ULL << n);
 8001f50:	f04f 0201 	mov.w	r2, #1
 8001f54:	f04f 0300 	mov.w	r3, #0
 8001f58:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8001f5a:	f1a4 0120 	sub.w	r1, r4, #32
 8001f5e:	f1c4 0020 	rsb	r0, r4, #32
 8001f62:	fa03 fb04 	lsl.w	fp, r3, r4
 8001f66:	fa02 f101 	lsl.w	r1, r2, r1
 8001f6a:	ea4b 0b01 	orr.w	fp, fp, r1
 8001f6e:	fa22 f000 	lsr.w	r0, r2, r0
 8001f72:	ea4b 0b00 	orr.w	fp, fp, r0
 8001f76:	fa02 fa04 	lsl.w	sl, r2, r4
 8001f7a:	ea6f 030a 	mvn.w	r3, sl
 8001f7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f80:	ea6f 030b 	mvn.w	r3, fp
 8001f84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f86:	4b36      	ldr	r3, [pc, #216]	; (8002060 <control_valves+0x1ac>)
 8001f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001f90:	4641      	mov	r1, r8
 8001f92:	4011      	ands	r1, r2
 8001f94:	6239      	str	r1, [r7, #32]
 8001f96:	4649      	mov	r1, r9
 8001f98:	4019      	ands	r1, r3
 8001f9a:	6279      	str	r1, [r7, #36]	; 0x24
 8001f9c:	4b30      	ldr	r3, [pc, #192]	; (8002060 <control_valves+0x1ac>)
 8001f9e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001fa2:	e9c3 1200 	strd	r1, r2, [r3]
 8001fa6:	e02c      	b.n	8002002 <control_valves+0x14e>
	}
	else if(counter_modules_off == 2){ // YES, find their indexes
 8001fa8:	4b2b      	ldr	r3, [pc, #172]	; (8002058 <control_valves+0x1a4>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d128      	bne.n	8002002 <control_valves+0x14e>
		for(int j; j<NUMBER_OF_SENSORS; j++){
 8001fb0:	e023      	b.n	8001ffa <control_valves+0x146>
			if(modules_state[j] == 0){
 8001fb2:	4a2a      	ldr	r2, [pc, #168]	; (800205c <control_valves+0x1a8>)
 8001fb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fb8:	4413      	add	r3, r2
 8001fba:	f993 3000 	ldrsb.w	r3, [r3]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d116      	bne.n	8001ff0 <control_valves+0x13c>
				if(flag == 0){
 8001fc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d107      	bne.n	8001fda <control_valves+0x126>
					flag = 1;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
					index_max_1_previous = j;
 8001fd0:	4a24      	ldr	r2, [pc, #144]	; (8002064 <control_valves+0x1b0>)
 8001fd2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fd6:	6013      	str	r3, [r2, #0]
 8001fd8:	e00a      	b.n	8001ff0 <control_valves+0x13c>

				}
				else if(flag == 1){
 8001fda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d106      	bne.n	8001ff0 <control_valves+0x13c>
					flag = 2;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
					index_max_2_previous = j;
 8001fe8:	4a1f      	ldr	r2, [pc, #124]	; (8002068 <control_valves+0x1b4>)
 8001fea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fee:	6013      	str	r3, [r2, #0]
		for(int j; j<NUMBER_OF_SENSORS; j++){
 8001ff0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001ffa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ffe:	2b1e      	cmp	r3, #30
 8002000:	ddd7      	ble.n	8001fb2 <control_valves+0xfe>
			}
		}
	}

	// array includes the two previous and two current high PP spots
	array[0] = previous_pressure_map[index_max_1_previous];
 8002002:	4b18      	ldr	r3, [pc, #96]	; (8002064 <control_valves+0x1b0>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a19      	ldr	r2, [pc, #100]	; (800206c <control_valves+0x1b8>)
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	653b      	str	r3, [r7, #80]	; 0x50
	array[1] = previous_pressure_map[index_max_2_previous];
 8002010:	4b15      	ldr	r3, [pc, #84]	; (8002068 <control_valves+0x1b4>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a15      	ldr	r2, [pc, #84]	; (800206c <control_valves+0x1b8>)
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	657b      	str	r3, [r7, #84]	; 0x54
	array[2] = average_pressure_map[m];
 800201e:	4a14      	ldr	r2, [pc, #80]	; (8002070 <control_valves+0x1bc>)
 8002020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4413      	add	r3, r2
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	65bb      	str	r3, [r7, #88]	; 0x58
	array[3] = average_pressure_map[n];
 800202a:	4a11      	ldr	r2, [pc, #68]	; (8002070 <control_valves+0x1bc>)
 800202c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	65fb      	str	r3, [r7, #92]	; 0x5c

	array_index[0] = index_max_1_previous;
 8002036:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <control_valves+0x1b0>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	663b      	str	r3, [r7, #96]	; 0x60
	array_index[1] = index_max_2_previous;
 800203c:	4b0a      	ldr	r3, [pc, #40]	; (8002068 <control_valves+0x1b4>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	667b      	str	r3, [r7, #100]	; 0x64
	array_index[2] = m;
 8002042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002044:	66bb      	str	r3, [r7, #104]	; 0x68
	array_index[3] = n;
 8002046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002048:	66fb      	str	r3, [r7, #108]	; 0x6c

	// descending sorting of array and changing place of array_index elements accordingly
	for(int i=0; i<4; i++){
 800204a:	2300      	movs	r3, #0
 800204c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800204e:	e075      	b.n	800213c <control_valves+0x288>
		for(int j=i+1; j<4; j++){
 8002050:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002052:	3301      	adds	r3, #1
 8002054:	67bb      	str	r3, [r7, #120]	; 0x78
 8002056:	e06b      	b.n	8002130 <control_valves+0x27c>
 8002058:	20000728 	.word	0x20000728
 800205c:	200006ec 	.word	0x200006ec
 8002060:	20000008 	.word	0x20000008
 8002064:	20000720 	.word	0x20000720
 8002068:	20000724 	.word	0x20000724
 800206c:	20000670 	.word	0x20000670
 8002070:	200005f4 	.word	0x200005f4
			if(array[i] < array[j]){
 8002074:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	3340      	adds	r3, #64	; 0x40
 800207a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800207e:	4413      	add	r3, r2
 8002080:	3b38      	subs	r3, #56	; 0x38
 8002082:	ed93 7a00 	vldr	s14, [r3]
 8002086:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	3340      	adds	r3, #64	; 0x40
 800208c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002090:	4413      	add	r3, r2
 8002092:	3b38      	subs	r3, #56	; 0x38
 8002094:	edd3 7a00 	vldr	s15, [r3]
 8002098:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800209c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a0:	d543      	bpl.n	800212a <control_valves+0x276>
				a = array[i];
 80020a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	3340      	adds	r3, #64	; 0x40
 80020a8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80020ac:	4413      	add	r3, r2
 80020ae:	3b38      	subs	r3, #56	; 0x38
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	677b      	str	r3, [r7, #116]	; 0x74
				array[i] = array[j];
 80020b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	3340      	adds	r3, #64	; 0x40
 80020ba:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80020be:	4413      	add	r3, r2
 80020c0:	3b38      	subs	r3, #56	; 0x38
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	3340      	adds	r3, #64	; 0x40
 80020ca:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80020ce:	440b      	add	r3, r1
 80020d0:	3b38      	subs	r3, #56	; 0x38
 80020d2:	601a      	str	r2, [r3, #0]
				array[j] = a;
 80020d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	3340      	adds	r3, #64	; 0x40
 80020da:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80020de:	4413      	add	r3, r2
 80020e0:	3b38      	subs	r3, #56	; 0x38
 80020e2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80020e4:	601a      	str	r2, [r3, #0]

				b = array_index[i];
 80020e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	3340      	adds	r3, #64	; 0x40
 80020ec:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80020f0:	4413      	add	r3, r2
 80020f2:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80020f6:	673b      	str	r3, [r7, #112]	; 0x70
				array_index[i] = array_index[j];
 80020f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	3340      	adds	r3, #64	; 0x40
 80020fe:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002102:	4413      	add	r3, r2
 8002104:	f853 2c28 	ldr.w	r2, [r3, #-40]
 8002108:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	3340      	adds	r3, #64	; 0x40
 800210e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002112:	440b      	add	r3, r1
 8002114:	f843 2c28 	str.w	r2, [r3, #-40]
				array_index[j] = b;
 8002118:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	3340      	adds	r3, #64	; 0x40
 800211e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002122:	4413      	add	r3, r2
 8002124:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002126:	f843 2c28 	str.w	r2, [r3, #-40]
		for(int j=i+1; j<4; j++){
 800212a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800212c:	3301      	adds	r3, #1
 800212e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002130:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002132:	2b03      	cmp	r3, #3
 8002134:	dd9e      	ble.n	8002074 <control_valves+0x1c0>
	for(int i=0; i<4; i++){
 8002136:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002138:	3301      	adds	r3, #1
 800213a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800213c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800213e:	2b03      	cmp	r3, #3
 8002140:	dd86      	ble.n	8002050 <control_valves+0x19c>
			}
		}
	}

	// set modules state on 64bit UL to one, close two lowest pressure modules
	modules_state_uint = 0xFFFFFFFFFF;
 8002142:	4957      	ldr	r1, [pc, #348]	; (80022a0 <control_valves+0x3ec>)
 8002144:	f04f 32ff 	mov.w	r2, #4294967295
 8002148:	f04f 03ff 	mov.w	r3, #255	; 0xff
 800214c:	e9c1 2300 	strd	r2, r3, [r1]

	// set modules state on 64bit UL to zero, open two high pressure modules
	modules_state_uint &= ~(1ULL << valve2SPIbit[array_index[0]]);
 8002150:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002152:	4a54      	ldr	r2, [pc, #336]	; (80022a4 <control_valves+0x3f0>)
 8002154:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002158:	461c      	mov	r4, r3
 800215a:	f04f 0201 	mov.w	r2, #1
 800215e:	f04f 0300 	mov.w	r3, #0
 8002162:	f1a4 0120 	sub.w	r1, r4, #32
 8002166:	f1c4 0c20 	rsb	ip, r4, #32
 800216a:	fa03 f004 	lsl.w	r0, r3, r4
 800216e:	6478      	str	r0, [r7, #68]	; 0x44
 8002170:	fa02 f101 	lsl.w	r1, r2, r1
 8002174:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002176:	4308      	orrs	r0, r1
 8002178:	6478      	str	r0, [r7, #68]	; 0x44
 800217a:	fa22 fc0c 	lsr.w	ip, r2, ip
 800217e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002180:	ea41 010c 	orr.w	r1, r1, ip
 8002184:	6479      	str	r1, [r7, #68]	; 0x44
 8002186:	fa02 f304 	lsl.w	r3, r2, r4
 800218a:	643b      	str	r3, [r7, #64]	; 0x40
 800218c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8002190:	460b      	mov	r3, r1
 8002192:	43db      	mvns	r3, r3
 8002194:	61bb      	str	r3, [r7, #24]
 8002196:	4613      	mov	r3, r2
 8002198:	43db      	mvns	r3, r3
 800219a:	61fb      	str	r3, [r7, #28]
 800219c:	4b40      	ldr	r3, [pc, #256]	; (80022a0 <control_valves+0x3ec>)
 800219e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a2:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80021a6:	4641      	mov	r1, r8
 80021a8:	4011      	ands	r1, r2
 80021aa:	6139      	str	r1, [r7, #16]
 80021ac:	4649      	mov	r1, r9
 80021ae:	4019      	ands	r1, r3
 80021b0:	6179      	str	r1, [r7, #20]
 80021b2:	4b3b      	ldr	r3, [pc, #236]	; (80022a0 <control_valves+0x3ec>)
 80021b4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80021b8:	e9c3 1200 	strd	r1, r2, [r3]
	modules_state_uint &= ~(1ULL << valve2SPIbit[array_index[1]]);
 80021bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021be:	4a39      	ldr	r2, [pc, #228]	; (80022a4 <control_valves+0x3f0>)
 80021c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021c4:	4619      	mov	r1, r3
 80021c6:	f04f 0201 	mov.w	r2, #1
 80021ca:	f04f 0300 	mov.w	r3, #0
 80021ce:	f1a1 0420 	sub.w	r4, r1, #32
 80021d2:	f1c1 0020 	rsb	r0, r1, #32
 80021d6:	fa03 f601 	lsl.w	r6, r3, r1
 80021da:	fa02 f404 	lsl.w	r4, r2, r4
 80021de:	4326      	orrs	r6, r4
 80021e0:	fa22 f000 	lsr.w	r0, r2, r0
 80021e4:	4306      	orrs	r6, r0
 80021e6:	fa02 f501 	lsl.w	r5, r2, r1
 80021ea:	43eb      	mvns	r3, r5
 80021ec:	60bb      	str	r3, [r7, #8]
 80021ee:	43f3      	mvns	r3, r6
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	4b2b      	ldr	r3, [pc, #172]	; (80022a0 <control_valves+0x3ec>)
 80021f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80021fc:	4621      	mov	r1, r4
 80021fe:	4011      	ands	r1, r2
 8002200:	6039      	str	r1, [r7, #0]
 8002202:	4629      	mov	r1, r5
 8002204:	4019      	ands	r1, r3
 8002206:	6079      	str	r1, [r7, #4]
 8002208:	4b25      	ldr	r3, [pc, #148]	; (80022a0 <control_valves+0x3ec>)
 800220a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800220e:	e9c3 1200 	strd	r1, r2, [r3]

   // split the module_state_uint in 5 8bit uint
    data_written_spi[0] = (modules_state_uint & 0x00000000ffULL)      ;
 8002212:	4b23      	ldr	r3, [pc, #140]	; (80022a0 <control_valves+0x3ec>)
 8002214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	4b23      	ldr	r3, [pc, #140]	; (80022a8 <control_valves+0x3f4>)
 800221c:	701a      	strb	r2, [r3, #0]
    data_written_spi[1] = (modules_state_uint & 0x000000ff00ULL) >>  8;
 800221e:	4b20      	ldr	r3, [pc, #128]	; (80022a0 <control_valves+0x3ec>)
 8002220:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002224:	f04f 0200 	mov.w	r2, #0
 8002228:	f04f 0300 	mov.w	r3, #0
 800222c:	0a02      	lsrs	r2, r0, #8
 800222e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002232:	0a0b      	lsrs	r3, r1, #8
 8002234:	b2d2      	uxtb	r2, r2
 8002236:	4b1c      	ldr	r3, [pc, #112]	; (80022a8 <control_valves+0x3f4>)
 8002238:	705a      	strb	r2, [r3, #1]
    data_written_spi[2] = (modules_state_uint & 0x0000ff0000ULL) >> 16;
 800223a:	4b19      	ldr	r3, [pc, #100]	; (80022a0 <control_valves+0x3ec>)
 800223c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002240:	f04f 0200 	mov.w	r2, #0
 8002244:	f04f 0300 	mov.w	r3, #0
 8002248:	0c02      	lsrs	r2, r0, #16
 800224a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800224e:	0c0b      	lsrs	r3, r1, #16
 8002250:	b2d2      	uxtb	r2, r2
 8002252:	4b15      	ldr	r3, [pc, #84]	; (80022a8 <control_valves+0x3f4>)
 8002254:	709a      	strb	r2, [r3, #2]
    data_written_spi[3] = (modules_state_uint & 0x00ff000000ULL) >> 24;
 8002256:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <control_valves+0x3ec>)
 8002258:	e9d3 0100 	ldrd	r0, r1, [r3]
 800225c:	f04f 0200 	mov.w	r2, #0
 8002260:	f04f 0300 	mov.w	r3, #0
 8002264:	0e02      	lsrs	r2, r0, #24
 8002266:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800226a:	0e0b      	lsrs	r3, r1, #24
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	4b0e      	ldr	r3, [pc, #56]	; (80022a8 <control_valves+0x3f4>)
 8002270:	70da      	strb	r2, [r3, #3]
    data_written_spi[4] = (modules_state_uint & 0xff00000000ULL) >> 32;
 8002272:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <control_valves+0x3ec>)
 8002274:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002278:	f04f 0200 	mov.w	r2, #0
 800227c:	f04f 0300 	mov.w	r3, #0
 8002280:	000a      	movs	r2, r1
 8002282:	2300      	movs	r3, #0
 8002284:	b2d2      	uxtb	r2, r2
 8002286:	4b08      	ldr	r3, [pc, #32]	; (80022a8 <control_valves+0x3f4>)
 8002288:	711a      	strb	r2, [r3, #4]

	/*-------- CHOOSE MODULES STATE WITH THESE BYTES ------------------*/

    write2SPI();
 800228a:	f7ff fd6d 	bl	8001d68 <write2SPI>

    counter_modules_off = 2;
 800228e:	4b07      	ldr	r3, [pc, #28]	; (80022ac <control_valves+0x3f8>)
 8002290:	2202      	movs	r2, #2
 8002292:	601a      	str	r2, [r3, #0]
}
 8002294:	bf00      	nop
 8002296:	378c      	adds	r7, #140	; 0x8c
 8002298:	46bd      	mov	sp, r7
 800229a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800229e:	bf00      	nop
 80022a0:	20000008 	.word	0x20000008
 80022a4:	0800e208 	.word	0x0800e208
 80022a8:	20000000 	.word	0x20000000
 80022ac:	20000728 	.word	0x20000728

080022b0 <valves_autocontrol>:

void valves_autocontrol()
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
	for(int i=0; i<NUMBER_OF_SENSORS; i++){
 80022b6:	2300      	movs	r3, #0
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	e016      	b.n	80022ea <valves_autocontrol+0x3a>
		average_pressure_map[i] = average_pressure_map[i]/counter_average;
 80022bc:	4a27      	ldr	r2, [pc, #156]	; (800235c <valves_autocontrol+0xac>)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4413      	add	r3, r2
 80022c4:	edd3 6a00 	vldr	s13, [r3]
 80022c8:	4b25      	ldr	r3, [pc, #148]	; (8002360 <valves_autocontrol+0xb0>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	ee07 3a90 	vmov	s15, r3
 80022d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022d8:	4a20      	ldr	r2, [pc, #128]	; (800235c <valves_autocontrol+0xac>)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<NUMBER_OF_SENSORS; i++){
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	3301      	adds	r3, #1
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2b1e      	cmp	r3, #30
 80022ee:	dde5      	ble.n	80022bc <valves_autocontrol+0xc>
	}

	find_high_pressure_spots();
 80022f0:	f7ff fd56 	bl	8001da0 <find_high_pressure_spots>

	control_valves(index_max_1, index_max_2);
 80022f4:	4b1b      	ldr	r3, [pc, #108]	; (8002364 <valves_autocontrol+0xb4>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a1b      	ldr	r2, [pc, #108]	; (8002368 <valves_autocontrol+0xb8>)
 80022fa:	6812      	ldr	r2, [r2, #0]
 80022fc:	4611      	mov	r1, r2
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff fdd8 	bl	8001eb4 <control_valves>

	for(int i=0; i<NUMBER_OF_SENSORS; i++){
 8002304:	2300      	movs	r3, #0
 8002306:	60bb      	str	r3, [r7, #8]
 8002308:	e00c      	b.n	8002324 <valves_autocontrol+0x74>
		previous_pressure_map[i] = average_pressure_map[i];
 800230a:	4a14      	ldr	r2, [pc, #80]	; (800235c <valves_autocontrol+0xac>)
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	4915      	ldr	r1, [pc, #84]	; (800236c <valves_autocontrol+0xbc>)
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	440b      	add	r3, r1
 800231c:	601a      	str	r2, [r3, #0]
	for(int i=0; i<NUMBER_OF_SENSORS; i++){
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	3301      	adds	r3, #1
 8002322:	60bb      	str	r3, [r7, #8]
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	2b1e      	cmp	r3, #30
 8002328:	ddef      	ble.n	800230a <valves_autocontrol+0x5a>
	}
	counter_average = 0;
 800232a:	4b0d      	ldr	r3, [pc, #52]	; (8002360 <valves_autocontrol+0xb0>)
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]

	for(int i=0; i<NUMBER_OF_SENSORS; i++){
 8002330:	2300      	movs	r3, #0
 8002332:	607b      	str	r3, [r7, #4]
 8002334:	e009      	b.n	800234a <valves_autocontrol+0x9a>
		average_pressure_map[i] = 0.0;
 8002336:	4a09      	ldr	r2, [pc, #36]	; (800235c <valves_autocontrol+0xac>)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4413      	add	r3, r2
 800233e:	f04f 0200 	mov.w	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
	for(int i=0; i<NUMBER_OF_SENSORS; i++){
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3301      	adds	r3, #1
 8002348:	607b      	str	r3, [r7, #4]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2b1e      	cmp	r3, #30
 800234e:	ddf2      	ble.n	8002336 <valves_autocontrol+0x86>
	}
}
 8002350:	bf00      	nop
 8002352:	bf00      	nop
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	200005f4 	.word	0x200005f4
 8002360:	20000714 	.word	0x20000714
 8002364:	20000718 	.word	0x20000718
 8002368:	2000071c 	.word	0x2000071c
 800236c:	20000670 	.word	0x20000670

08002370 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
	autocontrol_timeout = 1;
 8002378:	4b04      	ldr	r3, [pc, #16]	; (800238c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800237a:	2201      	movs	r2, #1
 800237c:	701a      	strb	r2, [r3, #0]
}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	20000574 	.word	0x20000574

08002390 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002394:	b672      	cpsid	i
}
 8002396:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002398:	e7fe      	b.n	8002398 <Error_Handler+0x8>
	...

0800239c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80023a2:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <HAL_MspInit+0x34>)
 80023a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023a8:	4a09      	ldr	r2, [pc, #36]	; (80023d0 <HAL_MspInit+0x34>)
 80023aa:	f043 0304 	orr.w	r3, r3, #4
 80023ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80023b2:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <HAL_MspInit+0x34>)
 80023b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	607b      	str	r3, [r7, #4]
 80023be:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  HAL_PWREx_EnableVddA();
 80023c0:	f005 f846 	bl	8007450 <HAL_PWREx_EnableVddA>
  HAL_PWREx_EnableVddIO2();
 80023c4:	f005 f834 	bl	8007430 <HAL_PWREx_EnableVddIO2>
  /* USER CODE END MspInit 1 */
}
 80023c8:	bf00      	nop
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	46020c00 	.word	0x46020c00

080023d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b0be      	sub	sp, #248	; 0xf8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023dc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	609a      	str	r2, [r3, #8]
 80023e8:	60da      	str	r2, [r3, #12]
 80023ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023ec:	f107 0318 	add.w	r3, r7, #24
 80023f0:	22c8      	movs	r2, #200	; 0xc8
 80023f2:	2100      	movs	r1, #0
 80023f4:	4618      	mov	r0, r3
 80023f6:	f00b fee3 	bl	800e1c0 <memset>
  if(hadc->Instance==ADC4)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a37      	ldr	r2, [pc, #220]	; (80024dc <HAL_ADC_MspInit+0x108>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d167      	bne.n	80024d4 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8002404:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002408:	f04f 0300 	mov.w	r3, #0
 800240c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8002410:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002414:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002418:	f107 0318 	add.w	r3, r7, #24
 800241c:	4618      	mov	r0, r3
 800241e:	f006 fae3 	bl	80089e8 <HAL_RCCEx_PeriphCLKConfig>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8002428:	f7ff ffb2 	bl	8002390 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC4_CLK_ENABLE();
 800242c:	4b2c      	ldr	r3, [pc, #176]	; (80024e0 <HAL_ADC_MspInit+0x10c>)
 800242e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002432:	4a2b      	ldr	r2, [pc, #172]	; (80024e0 <HAL_ADC_MspInit+0x10c>)
 8002434:	f043 0320 	orr.w	r3, r3, #32
 8002438:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800243c:	4b28      	ldr	r3, [pc, #160]	; (80024e0 <HAL_ADC_MspInit+0x10c>)
 800243e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002442:	f003 0320 	and.w	r3, r3, #32
 8002446:	617b      	str	r3, [r7, #20]
 8002448:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800244a:	4b25      	ldr	r3, [pc, #148]	; (80024e0 <HAL_ADC_MspInit+0x10c>)
 800244c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002450:	4a23      	ldr	r2, [pc, #140]	; (80024e0 <HAL_ADC_MspInit+0x10c>)
 8002452:	f043 0304 	orr.w	r3, r3, #4
 8002456:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800245a:	4b21      	ldr	r3, [pc, #132]	; (80024e0 <HAL_ADC_MspInit+0x10c>)
 800245c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	613b      	str	r3, [r7, #16]
 8002466:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002468:	4b1d      	ldr	r3, [pc, #116]	; (80024e0 <HAL_ADC_MspInit+0x10c>)
 800246a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800246e:	4a1c      	ldr	r2, [pc, #112]	; (80024e0 <HAL_ADC_MspInit+0x10c>)
 8002470:	f043 0320 	orr.w	r3, r3, #32
 8002474:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002478:	4b19      	ldr	r3, [pc, #100]	; (80024e0 <HAL_ADC_MspInit+0x10c>)
 800247a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800247e:	f003 0320 	and.w	r3, r3, #32
 8002482:	60fb      	str	r3, [r7, #12]
 8002484:	68fb      	ldr	r3, [r7, #12]
    /**ADC4 GPIO Configuration
    PC2     ------> ADC4_IN3
    PC5     ------> ADC4_IN23
    PF14     ------> ADC4_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 8002486:	2324      	movs	r3, #36	; 0x24
 8002488:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800248c:	2303      	movs	r3, #3
 800248e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002492:	2300      	movs	r3, #0
 8002494:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002498:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800249c:	4619      	mov	r1, r3
 800249e:	4811      	ldr	r0, [pc, #68]	; (80024e4 <HAL_ADC_MspInit+0x110>)
 80024a0:	f004 f90a 	bl	80066b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IMON_Pin;
 80024a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80024a8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024ac:	2303      	movs	r3, #3
 80024ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b2:	2300      	movs	r3, #0
 80024b4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(IMON_GPIO_Port, &GPIO_InitStruct);
 80024b8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80024bc:	4619      	mov	r1, r3
 80024be:	480a      	ldr	r0, [pc, #40]	; (80024e8 <HAL_ADC_MspInit+0x114>)
 80024c0:	f004 f8fa 	bl	80066b8 <HAL_GPIO_Init>

    /* ADC4 interrupt Init */
    HAL_NVIC_SetPriority(ADC4_IRQn, 0, 0);
 80024c4:	2200      	movs	r2, #0
 80024c6:	2100      	movs	r1, #0
 80024c8:	2071      	movs	r0, #113	; 0x71
 80024ca:	f002 fe68 	bl	800519e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC4_IRQn);
 80024ce:	2071      	movs	r0, #113	; 0x71
 80024d0:	f002 fe7f 	bl	80051d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 80024d4:	bf00      	nop
 80024d6:	37f8      	adds	r7, #248	; 0xf8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	46021000 	.word	0x46021000
 80024e0:	46020c00 	.word	0x46020c00
 80024e4:	42020800 	.word	0x42020800
 80024e8:	42021400 	.word	0x42021400

080024ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b0be      	sub	sp, #248	; 0xf8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	605a      	str	r2, [r3, #4]
 80024fe:	609a      	str	r2, [r3, #8]
 8002500:	60da      	str	r2, [r3, #12]
 8002502:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002504:	f107 0318 	add.w	r3, r7, #24
 8002508:	22c8      	movs	r2, #200	; 0xc8
 800250a:	2100      	movs	r1, #0
 800250c:	4618      	mov	r0, r3
 800250e:	f00b fe57 	bl	800e1c0 <memset>
  if(hi2c->Instance==I2C1)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a4d      	ldr	r2, [pc, #308]	; (800264c <HAL_I2C_MspInit+0x160>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d146      	bne.n	80025aa <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800251c:	f04f 0240 	mov.w	r2, #64	; 0x40
 8002520:	f04f 0300 	mov.w	r3, #0
 8002524:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002528:	2300      	movs	r3, #0
 800252a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800252e:	f107 0318 	add.w	r3, r7, #24
 8002532:	4618      	mov	r0, r3
 8002534:	f006 fa58 	bl	80089e8 <HAL_RCCEx_PeriphCLKConfig>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800253e:	f7ff ff27 	bl	8002390 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002542:	4b43      	ldr	r3, [pc, #268]	; (8002650 <HAL_I2C_MspInit+0x164>)
 8002544:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002548:	4a41      	ldr	r2, [pc, #260]	; (8002650 <HAL_I2C_MspInit+0x164>)
 800254a:	f043 0302 	orr.w	r3, r3, #2
 800254e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002552:	4b3f      	ldr	r3, [pc, #252]	; (8002650 <HAL_I2C_MspInit+0x164>)
 8002554:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	617b      	str	r3, [r7, #20]
 800255e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB3 (JTDO/TRACESWO)     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_3;
 8002560:	2348      	movs	r3, #72	; 0x48
 8002562:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002566:	2312      	movs	r3, #18
 8002568:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256c:	2300      	movs	r3, #0
 800256e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002572:	2300      	movs	r3, #0
 8002574:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002578:	2304      	movs	r3, #4
 800257a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800257e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002582:	4619      	mov	r1, r3
 8002584:	4833      	ldr	r0, [pc, #204]	; (8002654 <HAL_I2C_MspInit+0x168>)
 8002586:	f004 f897 	bl	80066b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800258a:	4b31      	ldr	r3, [pc, #196]	; (8002650 <HAL_I2C_MspInit+0x164>)
 800258c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002590:	4a2f      	ldr	r2, [pc, #188]	; (8002650 <HAL_I2C_MspInit+0x164>)
 8002592:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002596:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800259a:	4b2d      	ldr	r3, [pc, #180]	; (8002650 <HAL_I2C_MspInit+0x164>)
 800259c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80025a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025a4:	613b      	str	r3, [r7, #16]
 80025a6:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80025a8:	e04b      	b.n	8002642 <HAL_I2C_MspInit+0x156>
  else if(hi2c->Instance==I2C2)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a2a      	ldr	r2, [pc, #168]	; (8002658 <HAL_I2C_MspInit+0x16c>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d146      	bne.n	8002642 <HAL_I2C_MspInit+0x156>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80025b4:	f04f 0280 	mov.w	r2, #128	; 0x80
 80025b8:	f04f 0300 	mov.w	r3, #0
 80025bc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80025c0:	2300      	movs	r3, #0
 80025c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025c6:	f107 0318 	add.w	r3, r7, #24
 80025ca:	4618      	mov	r0, r3
 80025cc:	f006 fa0c 	bl	80089e8 <HAL_RCCEx_PeriphCLKConfig>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <HAL_I2C_MspInit+0xee>
      Error_Handler();
 80025d6:	f7ff fedb 	bl	8002390 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025da:	4b1d      	ldr	r3, [pc, #116]	; (8002650 <HAL_I2C_MspInit+0x164>)
 80025dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025e0:	4a1b      	ldr	r2, [pc, #108]	; (8002650 <HAL_I2C_MspInit+0x164>)
 80025e2:	f043 0302 	orr.w	r3, r3, #2
 80025e6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80025ea:	4b19      	ldr	r3, [pc, #100]	; (8002650 <HAL_I2C_MspInit+0x164>)
 80025ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	60fb      	str	r3, [r7, #12]
 80025f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_11;
 80025f8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80025fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002600:	2312      	movs	r3, #18
 8002602:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002606:	2300      	movs	r3, #0
 8002608:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260c:	2300      	movs	r3, #0
 800260e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002612:	2304      	movs	r3, #4
 8002614:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002618:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800261c:	4619      	mov	r1, r3
 800261e:	480d      	ldr	r0, [pc, #52]	; (8002654 <HAL_I2C_MspInit+0x168>)
 8002620:	f004 f84a 	bl	80066b8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002624:	4b0a      	ldr	r3, [pc, #40]	; (8002650 <HAL_I2C_MspInit+0x164>)
 8002626:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800262a:	4a09      	ldr	r2, [pc, #36]	; (8002650 <HAL_I2C_MspInit+0x164>)
 800262c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002630:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002634:	4b06      	ldr	r3, [pc, #24]	; (8002650 <HAL_I2C_MspInit+0x164>)
 8002636:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800263a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800263e:	60bb      	str	r3, [r7, #8]
 8002640:	68bb      	ldr	r3, [r7, #8]
}
 8002642:	bf00      	nop
 8002644:	37f8      	adds	r7, #248	; 0xf8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40005400 	.word	0x40005400
 8002650:	46020c00 	.word	0x46020c00
 8002654:	42020400 	.word	0x42020400
 8002658:	40005800 	.word	0x40005800

0800265c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b0bc      	sub	sp, #240	; 0xf0
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002664:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	605a      	str	r2, [r3, #4]
 800266e:	609a      	str	r2, [r3, #8]
 8002670:	60da      	str	r2, [r3, #12]
 8002672:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002674:	f107 0310 	add.w	r3, r7, #16
 8002678:	22c8      	movs	r2, #200	; 0xc8
 800267a:	2100      	movs	r1, #0
 800267c:	4618      	mov	r0, r3
 800267e:	f00b fd9f 	bl	800e1c0 <memset>
  if(hspi->Instance==SPI1)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a27      	ldr	r2, [pc, #156]	; (8002724 <HAL_SPI_MspInit+0xc8>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d146      	bne.n	800271a <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800268c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002690:	f04f 0300 	mov.w	r3, #0
 8002694:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8002698:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800269c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026a0:	f107 0310 	add.w	r3, r7, #16
 80026a4:	4618      	mov	r0, r3
 80026a6:	f006 f99f 	bl	80089e8 <HAL_RCCEx_PeriphCLKConfig>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 80026b0:	f7ff fe6e 	bl	8002390 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80026b4:	4b1c      	ldr	r3, [pc, #112]	; (8002728 <HAL_SPI_MspInit+0xcc>)
 80026b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80026ba:	4a1b      	ldr	r2, [pc, #108]	; (8002728 <HAL_SPI_MspInit+0xcc>)
 80026bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026c0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80026c4:	4b18      	ldr	r3, [pc, #96]	; (8002728 <HAL_SPI_MspInit+0xcc>)
 80026c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80026ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d2:	4b15      	ldr	r3, [pc, #84]	; (8002728 <HAL_SPI_MspInit+0xcc>)
 80026d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026d8:	4a13      	ldr	r2, [pc, #76]	; (8002728 <HAL_SPI_MspInit+0xcc>)
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80026e2:	4b11      	ldr	r3, [pc, #68]	; (8002728 <HAL_SPI_MspInit+0xcc>)
 80026e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	60bb      	str	r3, [r7, #8]
 80026ee:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5;
 80026f0:	23a0      	movs	r3, #160	; 0xa0
 80026f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f6:	2302      	movs	r3, #2
 80026f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fc:	2300      	movs	r3, #0
 80026fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002702:	2300      	movs	r3, #0
 8002704:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002708:	2305      	movs	r3, #5
 800270a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800270e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002712:	4619      	mov	r1, r3
 8002714:	4805      	ldr	r0, [pc, #20]	; (800272c <HAL_SPI_MspInit+0xd0>)
 8002716:	f003 ffcf 	bl	80066b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800271a:	bf00      	nop
 800271c:	37f0      	adds	r7, #240	; 0xf0
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40013000 	.word	0x40013000
 8002728:	46020c00 	.word	0x46020c00
 800272c:	42020000 	.word	0x42020000

08002730 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a0e      	ldr	r2, [pc, #56]	; (8002778 <HAL_TIM_Base_MspInit+0x48>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d116      	bne.n	8002770 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002742:	4b0e      	ldr	r3, [pc, #56]	; (800277c <HAL_TIM_Base_MspInit+0x4c>)
 8002744:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002748:	4a0c      	ldr	r2, [pc, #48]	; (800277c <HAL_TIM_Base_MspInit+0x4c>)
 800274a:	f043 0304 	orr.w	r3, r3, #4
 800274e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002752:	4b0a      	ldr	r3, [pc, #40]	; (800277c <HAL_TIM_Base_MspInit+0x4c>)
 8002754:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002760:	2200      	movs	r2, #0
 8002762:	2100      	movs	r1, #0
 8002764:	202f      	movs	r0, #47	; 0x2f
 8002766:	f002 fd1a 	bl	800519e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800276a:	202f      	movs	r0, #47	; 0x2f
 800276c:	f002 fd31 	bl	80051d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002770:	bf00      	nop
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40000800 	.word	0x40000800
 800277c:	46020c00 	.word	0x46020c00

08002780 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b0d6      	sub	sp, #344	; 0x158
 8002784:	af00      	add	r7, sp, #0
 8002786:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800278a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800278e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002790:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	605a      	str	r2, [r3, #4]
 800279a:	609a      	str	r2, [r3, #8]
 800279c:	60da      	str	r2, [r3, #12]
 800279e:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027a0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80027a4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80027a8:	4618      	mov	r0, r3
 80027aa:	23c8      	movs	r3, #200	; 0xc8
 80027ac:	461a      	mov	r2, r3
 80027ae:	2100      	movs	r1, #0
 80027b0:	f00b fd06 	bl	800e1c0 <memset>
  if(huart->Instance==UART4)
 80027b4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80027b8:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a7a      	ldr	r2, [pc, #488]	; (80029ac <HAL_UART_MspInit+0x22c>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	f040 80ed 	bne.w	80029a2 <HAL_UART_MspInit+0x222>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80027c8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80027cc:	f5a3 71a4 	sub.w	r1, r3, #328	; 0x148
 80027d0:	f04f 0208 	mov.w	r2, #8
 80027d4:	f04f 0300 	mov.w	r3, #0
 80027d8:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80027dc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80027e0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80027e4:	2200      	movs	r2, #0
 80027e6:	65da      	str	r2, [r3, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027e8:	f107 0310 	add.w	r3, r7, #16
 80027ec:	4618      	mov	r0, r3
 80027ee:	f006 f8fb 	bl	80089e8 <HAL_RCCEx_PeriphCLKConfig>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
 80027f8:	f7ff fdca 	bl	8002390 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80027fc:	4b6c      	ldr	r3, [pc, #432]	; (80029b0 <HAL_UART_MspInit+0x230>)
 80027fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002802:	4a6b      	ldr	r2, [pc, #428]	; (80029b0 <HAL_UART_MspInit+0x230>)
 8002804:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002808:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800280c:	4b68      	ldr	r3, [pc, #416]	; (80029b0 <HAL_UART_MspInit+0x230>)
 800280e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002812:	f403 2200 	and.w	r2, r3, #524288	; 0x80000
 8002816:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800281a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002824:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002828:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800282a:	4b61      	ldr	r3, [pc, #388]	; (80029b0 <HAL_UART_MspInit+0x230>)
 800282c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002830:	4a5f      	ldr	r2, [pc, #380]	; (80029b0 <HAL_UART_MspInit+0x230>)
 8002832:	f043 0301 	orr.w	r3, r3, #1
 8002836:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800283a:	4b5d      	ldr	r3, [pc, #372]	; (80029b0 <HAL_UART_MspInit+0x230>)
 800283c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002840:	f003 0201 	and.w	r2, r3, #1
 8002844:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002848:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002852:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002856:	681b      	ldr	r3, [r3, #0]
    /**UART4 GPIO Configuration
    PA1     ------> UART4_RX
    PA0     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8002858:	2303      	movs	r3, #3
 800285a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285e:	2302      	movs	r3, #2
 8002860:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002864:	2300      	movs	r3, #0
 8002866:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800286a:	2300      	movs	r3, #0
 800286c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002870:	2308      	movs	r3, #8
 8002872:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002876:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800287a:	4619      	mov	r1, r3
 800287c:	484d      	ldr	r0, [pc, #308]	; (80029b4 <HAL_UART_MspInit+0x234>)
 800287e:	f003 ff1b 	bl	80066b8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* GPDMA1_REQUEST_UART4_RX Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8002882:	2321      	movs	r3, #33	; 0x21
 8002884:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    NodeConfig.Init.Request = GPDMA1_REQUEST_UART4_RX;
 8002888:	231e      	movs	r3, #30
 800288a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800288e:	2300      	movs	r3, #0
 8002890:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002894:	2300      	movs	r3, #0
 8002896:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 800289a:	2300      	movs	r3, #0
 800289c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 80028a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80028a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 80028a8:	2300      	movs	r3, #0
 80028aa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 80028ae:	2300      	movs	r3, #0
 80028b0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    NodeConfig.Init.SrcBurstLength = 1;
 80028b4:	2301      	movs	r3, #1
 80028b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    NodeConfig.Init.DestBurstLength = 1;
 80028ba:	2301      	movs	r3, #1
 80028bc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80028c0:	2300      	movs	r3, #0
 80028c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80028c6:	2300      	movs	r3, #0
 80028c8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    NodeConfig.Init.Mode = DMA_NORMAL;
 80028cc:	2300      	movs	r3, #0
 80028ce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 80028d2:	2300      	movs	r3, #0
 80028d4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80028d8:	2300      	movs	r3, #0
 80028da:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80028de:	2300      	movs	r3, #0
 80028e0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 80028e4:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80028e8:	4933      	ldr	r1, [pc, #204]	; (80029b8 <HAL_UART_MspInit+0x238>)
 80028ea:	4618      	mov	r0, r3
 80028ec:	f003 f928 	bl	8005b40 <HAL_DMAEx_List_BuildNode>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <HAL_UART_MspInit+0x17a>
    {
      Error_Handler();
 80028f6:	f7ff fd4b 	bl	8002390 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 80028fa:	4a2f      	ldr	r2, [pc, #188]	; (80029b8 <HAL_UART_MspInit+0x238>)
 80028fc:	2100      	movs	r1, #0
 80028fe:	482f      	ldr	r0, [pc, #188]	; (80029bc <HAL_UART_MspInit+0x23c>)
 8002900:	f003 f934 	bl	8005b6c <HAL_DMAEx_List_InsertNode>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <HAL_UART_MspInit+0x18e>
    {
      Error_Handler();
 800290a:	f7ff fd41 	bl	8002390 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 800290e:	482b      	ldr	r0, [pc, #172]	; (80029bc <HAL_UART_MspInit+0x23c>)
 8002910:	f003 f9f5 	bl	8005cfe <HAL_DMAEx_List_SetCircularMode>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <HAL_UART_MspInit+0x19e>
    {
      Error_Handler();
 800291a:	f7ff fd39 	bl	8002390 <Error_Handler>
    }

    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 800291e:	4b28      	ldr	r3, [pc, #160]	; (80029c0 <HAL_UART_MspInit+0x240>)
 8002920:	4a28      	ldr	r2, [pc, #160]	; (80029c4 <HAL_UART_MspInit+0x244>)
 8002922:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8002924:	4b26      	ldr	r3, [pc, #152]	; (80029c0 <HAL_UART_MspInit+0x240>)
 8002926:	2200      	movs	r2, #0
 8002928:	639a      	str	r2, [r3, #56]	; 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 800292a:	4b25      	ldr	r3, [pc, #148]	; (80029c0 <HAL_UART_MspInit+0x240>)
 800292c:	2200      	movs	r2, #0
 800292e:	63da      	str	r2, [r3, #60]	; 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8002930:	4b23      	ldr	r3, [pc, #140]	; (80029c0 <HAL_UART_MspInit+0x240>)
 8002932:	2200      	movs	r2, #0
 8002934:	641a      	str	r2, [r3, #64]	; 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002936:	4b22      	ldr	r3, [pc, #136]	; (80029c0 <HAL_UART_MspInit+0x240>)
 8002938:	2200      	movs	r2, #0
 800293a:	645a      	str	r2, [r3, #68]	; 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 800293c:	4b20      	ldr	r3, [pc, #128]	; (80029c0 <HAL_UART_MspInit+0x240>)
 800293e:	2281      	movs	r2, #129	; 0x81
 8002940:	649a      	str	r2, [r3, #72]	; 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8002942:	481f      	ldr	r0, [pc, #124]	; (80029c0 <HAL_UART_MspInit+0x240>)
 8002944:	f002 ff3a 	bl	80057bc <HAL_DMAEx_List_Init>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <HAL_UART_MspInit+0x1d2>
    {
      Error_Handler();
 800294e:	f7ff fd1f 	bl	8002390 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 8002952:	491a      	ldr	r1, [pc, #104]	; (80029bc <HAL_UART_MspInit+0x23c>)
 8002954:	481a      	ldr	r0, [pc, #104]	; (80029c0 <HAL_UART_MspInit+0x240>)
 8002956:	f003 fa33 	bl	8005dc0 <HAL_DMAEx_List_LinkQ>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <HAL_UART_MspInit+0x1e4>
    {
      Error_Handler();
 8002960:	f7ff fd16 	bl	8002390 <Error_Handler>
    }

    __HAL_LINKDMA(huart, hdmarx, handle_GPDMA1_Channel0);
 8002964:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002968:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a14      	ldr	r2, [pc, #80]	; (80029c0 <HAL_UART_MspInit+0x240>)
 8002970:	67da      	str	r2, [r3, #124]	; 0x7c
 8002972:	4a13      	ldr	r2, [pc, #76]	; (80029c0 <HAL_UART_MspInit+0x240>)
 8002974:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002978:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	65d3      	str	r3, [r2, #92]	; 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002980:	2110      	movs	r1, #16
 8002982:	480f      	ldr	r0, [pc, #60]	; (80029c0 <HAL_UART_MspInit+0x240>)
 8002984:	f002 feb8 	bl	80056f8 <HAL_DMA_ConfigChannelAttributes>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <HAL_UART_MspInit+0x212>
    {
      Error_Handler();
 800298e:	f7ff fcff 	bl	8002390 <Error_Handler>
    }

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002992:	2200      	movs	r2, #0
 8002994:	2100      	movs	r1, #0
 8002996:	2040      	movs	r0, #64	; 0x40
 8002998:	f002 fc01 	bl	800519e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800299c:	2040      	movs	r0, #64	; 0x40
 800299e:	f002 fc18 	bl	80051d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80029a2:	bf00      	nop
 80029a4:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40004c00 	.word	0x40004c00
 80029b0:	46020c00 	.word	0x46020c00
 80029b4:	42020000 	.word	0x42020000
 80029b8:	200003c4 	.word	0x200003c4
 80029bc:	200003e8 	.word	0x200003e8
 80029c0:	20000400 	.word	0x20000400
 80029c4:	40020050 	.word	0x40020050

080029c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029cc:	e7fe      	b.n	80029cc <NMI_Handler+0x4>

080029ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029ce:	b480      	push	{r7}
 80029d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029d2:	e7fe      	b.n	80029d2 <HardFault_Handler+0x4>

080029d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029d8:	e7fe      	b.n	80029d8 <MemManage_Handler+0x4>

080029da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029da:	b480      	push	{r7}
 80029dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029de:	e7fe      	b.n	80029de <BusFault_Handler+0x4>

080029e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029e4:	e7fe      	b.n	80029e4 <UsageFault_Handler+0x4>

080029e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029e6:	b480      	push	{r7}
 80029e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029ea:	bf00      	nop
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029f8:	bf00      	nop
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a02:	b480      	push	{r7}
 8002a04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a06:	bf00      	nop
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a14:	f000 f8f0 	bl	8002bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a18:	bf00      	nop
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8002a20:	4802      	ldr	r0, [pc, #8]	; (8002a2c <GPDMA1_Channel0_IRQHandler+0x10>)
 8002a22:	f002 fcf5 	bl	8005410 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8002a26:	bf00      	nop
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	20000400 	.word	0x20000400

08002a30 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002a34:	4802      	ldr	r0, [pc, #8]	; (8002a40 <TIM4_IRQHandler+0x10>)
 8002a36:	f009 f94d 	bl	800bcd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002a3a:	bf00      	nop
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	200002e8 	.word	0x200002e8

08002a44 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002a48:	4802      	ldr	r0, [pc, #8]	; (8002a54 <UART4_IRQHandler+0x10>)
 8002a4a:	f009 fff1 	bl	800ca30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002a4e:	bf00      	nop
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	20000334 	.word	0x20000334

08002a58 <ADC4_IRQHandler>:

/**
  * @brief This function handles ADC4 (12bits) global interrupt.
  */
void ADC4_IRQHandler(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC4_IRQn 0 */

  /* USER CODE END ADC4_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc4);
 8002a5c:	4802      	ldr	r0, [pc, #8]	; (8002a68 <ADC4_IRQHandler+0x10>)
 8002a5e:	f001 f903 	bl	8003c68 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC4_IRQn 1 */

  /* USER CODE END ADC4_IRQn 1 */
}
 8002a62:	bf00      	nop
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	20000134 	.word	0x20000134

08002a6c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002a70:	4b18      	ldr	r3, [pc, #96]	; (8002ad4 <SystemInit+0x68>)
 8002a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a76:	4a17      	ldr	r2, [pc, #92]	; (8002ad4 <SystemInit+0x68>)
 8002a78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8002a80:	4b15      	ldr	r3, [pc, #84]	; (8002ad8 <SystemInit+0x6c>)
 8002a82:	2201      	movs	r2, #1
 8002a84:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002a86:	4b14      	ldr	r3, [pc, #80]	; (8002ad8 <SystemInit+0x6c>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002a8c:	4b12      	ldr	r3, [pc, #72]	; (8002ad8 <SystemInit+0x6c>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8002a92:	4b11      	ldr	r3, [pc, #68]	; (8002ad8 <SystemInit+0x6c>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8002a98:	4b0f      	ldr	r3, [pc, #60]	; (8002ad8 <SystemInit+0x6c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a0e      	ldr	r2, [pc, #56]	; (8002ad8 <SystemInit+0x6c>)
 8002a9e:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002aa2:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002aa6:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8002aa8:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <SystemInit+0x6c>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002aae:	4b0a      	ldr	r3, [pc, #40]	; (8002ad8 <SystemInit+0x6c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a09      	ldr	r2, [pc, #36]	; (8002ad8 <SystemInit+0x6c>)
 8002ab4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ab8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002aba:	4b07      	ldr	r3, [pc, #28]	; (8002ad8 <SystemInit+0x6c>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ac0:	4b04      	ldr	r3, [pc, #16]	; (8002ad4 <SystemInit+0x68>)
 8002ac2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ac6:	609a      	str	r2, [r3, #8]
  #endif
}
 8002ac8:	bf00      	nop
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	e000ed00 	.word	0xe000ed00
 8002ad8:	46020c00 	.word	0x46020c00

08002adc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002adc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b14 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002ae0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002ae2:	e003      	b.n	8002aec <LoopCopyDataInit>

08002ae4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002ae4:	4b0c      	ldr	r3, [pc, #48]	; (8002b18 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002ae6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002ae8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002aea:	3104      	adds	r1, #4

08002aec <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002aec:	480b      	ldr	r0, [pc, #44]	; (8002b1c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002aee:	4b0c      	ldr	r3, [pc, #48]	; (8002b20 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002af0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002af2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002af4:	d3f6      	bcc.n	8002ae4 <CopyDataInit>
	ldr	r2, =_sbss
 8002af6:	4a0b      	ldr	r2, [pc, #44]	; (8002b24 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002af8:	e002      	b.n	8002b00 <LoopFillZerobss>

08002afa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002afa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002afc:	f842 3b04 	str.w	r3, [r2], #4

08002b00 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002b00:	4b09      	ldr	r3, [pc, #36]	; (8002b28 <LoopForever+0x16>)
	cmp	r2, r3
 8002b02:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002b04:	d3f9      	bcc.n	8002afa <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b06:	f7ff ffb1 	bl	8002a6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b0a:	f00b fb35 	bl	800e178 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b0e:	f7fe f961 	bl	8000dd4 <main>

08002b12 <LoopForever>:

LoopForever:
    b LoopForever
 8002b12:	e7fe      	b.n	8002b12 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002b14:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8002b18:	0800e398 	.word	0x0800e398
	ldr	r0, =_sdata
 8002b1c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002b20:	20000115 	.word	0x20000115
	ldr	r2, =_sbss
 8002b24:	20000118 	.word	0x20000118
	ldr	r3, = _ebss
 8002b28:	20000838 	.word	0x20000838

08002b2c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b2c:	e7fe      	b.n	8002b2c <ADC1_IRQHandler>
	...

08002b30 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b34:	4b11      	ldr	r3, [pc, #68]	; (8002b7c <HAL_Init+0x4c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a10      	ldr	r2, [pc, #64]	; (8002b7c <HAL_Init+0x4c>)
 8002b3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b40:	2003      	movs	r0, #3
 8002b42:	f002 fb21 	bl	8005188 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002b46:	f005 fd6b 	bl	8008620 <HAL_RCC_GetSysClockFreq>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	4b0c      	ldr	r3, [pc, #48]	; (8002b80 <HAL_Init+0x50>)
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	f003 030f 	and.w	r3, r3, #15
 8002b54:	490b      	ldr	r1, [pc, #44]	; (8002b84 <HAL_Init+0x54>)
 8002b56:	5ccb      	ldrb	r3, [r1, r3]
 8002b58:	fa22 f303 	lsr.w	r3, r2, r3
 8002b5c:	4a0a      	ldr	r2, [pc, #40]	; (8002b88 <HAL_Init+0x58>)
 8002b5e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b60:	200f      	movs	r0, #15
 8002b62:	f000 f813 	bl	8002b8c <HAL_InitTick>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e002      	b.n	8002b76 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002b70:	f7ff fc14 	bl	800239c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40022000 	.word	0x40022000
 8002b80:	46020c00 	.word	0x46020c00
 8002b84:	0800e288 	.word	0x0800e288
 8002b88:	2000010c 	.word	0x2000010c

08002b8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002b94:	4b15      	ldr	r3, [pc, #84]	; (8002bec <HAL_InitTick+0x60>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e021      	b.n	8002be4 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002ba0:	4b13      	ldr	r3, [pc, #76]	; (8002bf0 <HAL_InitTick+0x64>)
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	4b11      	ldr	r3, [pc, #68]	; (8002bec <HAL_InitTick+0x60>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	4619      	mov	r1, r3
 8002baa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f002 fb19 	bl	80051ee <HAL_SYSTICK_Config>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e00e      	b.n	8002be4 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b0f      	cmp	r3, #15
 8002bca:	d80a      	bhi.n	8002be2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bcc:	2200      	movs	r2, #0
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bd4:	f002 fae3 	bl	800519e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bd8:	4a06      	ldr	r2, [pc, #24]	; (8002bf4 <HAL_InitTick+0x68>)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
 8002be0:	e000      	b.n	8002be4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	20000114 	.word	0x20000114
 8002bf0:	2000010c 	.word	0x2000010c
 8002bf4:	20000110 	.word	0x20000110

08002bf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002bfc:	4b06      	ldr	r3, [pc, #24]	; (8002c18 <HAL_IncTick+0x20>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	461a      	mov	r2, r3
 8002c02:	4b06      	ldr	r3, [pc, #24]	; (8002c1c <HAL_IncTick+0x24>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4413      	add	r3, r2
 8002c08:	4a04      	ldr	r2, [pc, #16]	; (8002c1c <HAL_IncTick+0x24>)
 8002c0a:	6013      	str	r3, [r2, #0]
}
 8002c0c:	bf00      	nop
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	20000114 	.word	0x20000114
 8002c1c:	20000834 	.word	0x20000834

08002c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  return uwTick;
 8002c24:	4b03      	ldr	r3, [pc, #12]	; (8002c34 <HAL_GetTick+0x14>)
 8002c26:	681b      	ldr	r3, [r3, #0]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	20000834 	.word	0x20000834

08002c38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c40:	f7ff ffee 	bl	8002c20 <HAL_GetTick>
 8002c44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c50:	d005      	beq.n	8002c5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c52:	4b0a      	ldr	r3, [pc, #40]	; (8002c7c <HAL_Delay+0x44>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	461a      	mov	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c5e:	bf00      	nop
 8002c60:	f7ff ffde 	bl	8002c20 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d8f7      	bhi.n	8002c60 <HAL_Delay+0x28>
  {
  }
}
 8002c70:	bf00      	nop
 8002c72:	bf00      	nop
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20000114 	.word	0x20000114

08002c80 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  return ((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 8002c84:	4b04      	ldr	r3, [pc, #16]	; (8002c98 <HAL_GetREVID+0x18>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	0c1b      	lsrs	r3, r3, #16
 8002c8a:	b29b      	uxth	r3, r3
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	e0044000 	.word	0xe0044000

08002c9c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	601a      	str	r2, [r3, #0]
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
 8002cca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	601a      	str	r2, [r3, #0]
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b087      	sub	sp, #28
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
 8002d10:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	3360      	adds	r3, #96	; 0x60
 8002d16:	461a      	mov	r2, r3
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	4413      	add	r3, r2
 8002d1e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	f003 4178 	and.w	r1, r3, #4160749568	; 0xf8000000
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	430b      	orrs	r3, r1
 8002d34:	431a      	orrs	r2, r3
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 8002d3a:	bf00      	nop
 8002d3c:	371c      	adds	r7, #28
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b087      	sub	sp, #28
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	60f8      	str	r0, [r7, #12]
 8002d4e:	60b9      	str	r1, [r7, #8]
 8002d50:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	3360      	adds	r3, #96	; 0x60
 8002d56:	461a      	mov	r2, r3
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	601a      	str	r2, [r3, #0]
}
 8002d70:	bf00      	nop
 8002d72:	371c      	adds	r7, #28
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b087      	sub	sp, #28
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	3360      	adds	r3, #96	; 0x60
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4413      	add	r3, r2
 8002d94:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	431a      	orrs	r2, r3
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	601a      	str	r2, [r3, #0]
}
 8002da6:	bf00      	nop
 8002da8:	371c      	adds	r7, #28
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
 8002dba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002dc4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	2a00      	cmp	r2, #0
 8002ddc:	d002      	beq.n	8002de4 <LL_ADC_SetGainCompensation+0x32>
 8002dde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002de2:	e000      	b.n	8002de6 <LL_ADC_SetGainCompensation+0x34>
 8002de4:	2200      	movs	r2, #0
 8002de6:	431a      	orrs	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	671a      	str	r2, [r3, #112]	; 0x70
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	695a      	ldr	r2, [r3, #20]
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f003 0304 	and.w	r3, r3, #4
 8002e0e:	2107      	movs	r1, #7
 8002e10:	fa01 f303 	lsl.w	r3, r1, r3
 8002e14:	43db      	mvns	r3, r3
 8002e16:	401a      	ands	r2, r3
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	f003 0304 	and.w	r3, r3, #4
 8002e1e:	6879      	ldr	r1, [r7, #4]
 8002e20:	fa01 f303 	lsl.w	r3, r1, r3
 8002e24:	431a      	orrs	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002e2a:	bf00      	nop
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002e36:	b480      	push	{r7}
 8002e38:	b083      	sub	sp, #12
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e000      	b.n	8002e50 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b089      	sub	sp, #36	; 0x24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	4a2b      	ldr	r2, [pc, #172]	; (8002f18 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d020      	beq.n	8002eb2 <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	3330      	adds	r3, #48	; 0x30
 8002e74:	461a      	mov	r2, r3
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	0a1b      	lsrs	r3, r3, #8
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	f003 030c 	and.w	r3, r3, #12
 8002e80:	4413      	add	r3, r2
 8002e82:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	f003 031f 	and.w	r3, r3, #31
 8002e8e:	211f      	movs	r1, #31
 8002e90:	fa01 f303 	lsl.w	r3, r1, r3
 8002e94:	43db      	mvns	r3, r3
 8002e96:	401a      	ands	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	0e9b      	lsrs	r3, r3, #26
 8002e9c:	f003 011f 	and.w	r1, r3, #31
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	f003 031f 	and.w	r3, r3, #31
 8002ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8002eb0:	e02b      	b.n	8002f0a <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	f003 031f 	and.w	r3, r3, #31
 8002ebc:	210f      	movs	r1, #15
 8002ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	401a      	ands	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d104      	bne.n	8002eda <LL_ADC_REG_SetSequencerRanks+0x7e>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	0e9b      	lsrs	r3, r3, #26
 8002ed4:	f003 031f 	and.w	r3, r3, #31
 8002ed8:	e010      	b.n	8002efc <LL_ADC_REG_SetSequencerRanks+0xa0>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	fa93 f3a3 	rbit	r3, r3
 8002ee4:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <LL_ADC_REG_SetSequencerRanks+0x98>
  {
    return 32U;
 8002ef0:	2320      	movs	r3, #32
 8002ef2:	e003      	b.n	8002efc <LL_ADC_REG_SetSequencerRanks+0xa0>
  }
  return __builtin_clz(value);
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	fab3 f383 	clz	r3, r3
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	68b9      	ldr	r1, [r7, #8]
 8002efe:	f001 011f 	and.w	r1, r1, #31
 8002f02:	408b      	lsls	r3, r1
 8002f04:	431a      	orrs	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f0a:	bf00      	nop
 8002f0c:	3724      	adds	r7, #36	; 0x24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	46021000 	.word	0x46021000

08002f1c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b087      	sub	sp, #28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d107      	bne.n	8002f40 <LL_ADC_REG_SetSequencerChAdd+0x24>
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	0e9b      	lsrs	r3, r3, #26
 8002f34:	f003 031f 	and.w	r3, r3, #31
 8002f38:	2201      	movs	r2, #1
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3e:	e015      	b.n	8002f6c <LL_ADC_REG_SetSequencerChAdd+0x50>
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	fa93 f3a3 	rbit	r3, r3
 8002f4a:	60fb      	str	r3, [r7, #12]
  return result;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8002f56:	2320      	movs	r3, #32
 8002f58:	e003      	b.n	8002f62 <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	fab3 f383 	clz	r3, r3
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	f003 031f 	and.w	r3, r3, #31
 8002f66:	2201      	movs	r2, #1
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002f70:	431a      	orrs	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f76:	bf00      	nop
 8002f78:	371c      	adds	r7, #28
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b083      	sub	sp, #12
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
 8002f8a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	0e9b      	lsrs	r3, r3, #26
 8002f94:	f003 031f 	and.w	r3, r3, #31
 8002f98:	2101      	movs	r1, #1
 8002f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f9e:	43db      	mvns	r3, r3
 8002fa0:	401a      	ands	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b083      	sub	sp, #12
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	f003 0303 	and.w	r3, r3, #3
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b083      	sub	sp, #12
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fda:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e000      	b.n	8002fe8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b08d      	sub	sp, #52	; 0x34
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	4a3c      	ldr	r2, [pc, #240]	; (80030f4 <LL_ADC_SetChannelSamplingTime+0x100>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d042      	beq.n	800308e <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d104      	bne.n	800301c <LL_ADC_SetChannelSamplingTime+0x28>
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	0e9b      	lsrs	r3, r3, #26
 8003016:	f003 021f 	and.w	r2, r3, #31
 800301a:	e011      	b.n	8003040 <LL_ADC_SetChannelSamplingTime+0x4c>
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003020:	6a3b      	ldr	r3, [r7, #32]
 8003022:	fa93 f3a3 	rbit	r3, r3
 8003026:	61fb      	str	r3, [r7, #28]
  return result;
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8003032:	2320      	movs	r3, #32
 8003034:	e003      	b.n	800303e <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	fab3 f383 	clz	r3, r3
 800303c:	b2db      	uxtb	r3, r3
 800303e:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	0e5b      	lsrs	r3, r3, #25
 8003044:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8003048:	460b      	mov	r3, r1
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	440b      	add	r3, r1
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	1ad2      	subs	r2, r2, r3
 8003052:	4613      	mov	r3, r2
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	4413      	add	r3, r2
 8003058:	62fb      	str	r3, [r7, #44]	; 0x2c
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	3314      	adds	r3, #20
 800305e:	461a      	mov	r2, r3
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	0e5b      	lsrs	r3, r3, #25
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	f003 0304 	and.w	r3, r3, #4
 800306a:	4413      	add	r3, r2
 800306c:	62bb      	str	r3, [r7, #40]	; 0x28
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 800306e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	2107      	movs	r1, #7
 8003074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003076:	fa01 f303 	lsl.w	r3, r1, r3
 800307a:	43db      	mvns	r3, r3
 800307c:	401a      	ands	r2, r3
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003082:	fa01 f303 	lsl.w	r3, r1, r3
 8003086:	431a      	orrs	r2, r3
 8003088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308a:	601a      	str	r2, [r3, #0]
               ADC4_SAMPLING_TIME_CH_MASK,
               ((1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel)) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)                  \
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 800308c:	e02c      	b.n	80030e8 <LL_ADC_SetChannelSamplingTime+0xf4>
    MODIFY_REG(ADCx->SMPR1,
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	b2da      	uxtb	r2, r3
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d108      	bne.n	80030b0 <LL_ADC_SetChannelSamplingTime+0xbc>
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	0e9b      	lsrs	r3, r3, #26
 80030a2:	f003 031f 	and.w	r3, r3, #31
 80030a6:	2101      	movs	r1, #1
 80030a8:	fa01 f303 	lsl.w	r3, r1, r3
 80030ac:	021b      	lsls	r3, r3, #8
 80030ae:	e014      	b.n	80030da <LL_ADC_SetChannelSamplingTime+0xe6>
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	fa93 f3a3 	rbit	r3, r3
 80030ba:	613b      	str	r3, [r7, #16]
  return result;
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <LL_ADC_SetChannelSamplingTime+0xd6>
    return 32U;
 80030c6:	2320      	movs	r3, #32
 80030c8:	e003      	b.n	80030d2 <LL_ADC_SetChannelSamplingTime+0xde>
  return __builtin_clz(value);
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	fab3 f383 	clz	r3, r3
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	4619      	mov	r1, r3
 80030d4:	2301      	movs	r3, #1
 80030d6:	408b      	lsls	r3, r1
 80030d8:	021b      	lsls	r3, r3, #8
 80030da:	6879      	ldr	r1, [r7, #4]
 80030dc:	400b      	ands	r3, r1
 80030de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030e2:	431a      	orrs	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	615a      	str	r2, [r3, #20]
}
 80030e8:	bf00      	nop
 80030ea:	3734      	adds	r7, #52	; 0x34
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	46021000 	.word	0x46021000

080030f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003110:	43db      	mvns	r3, r3
 8003112:	401a      	ands	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f003 0318 	and.w	r3, r3, #24
 800311a:	4908      	ldr	r1, [pc, #32]	; (800313c <LL_ADC_SetChannelSingleDiff+0x44>)
 800311c:	40d9      	lsrs	r1, r3
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	400b      	ands	r3, r1
 8003122:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003126:	431a      	orrs	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800312e:	bf00      	nop
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	000fffff 	.word	0x000fffff

08003140 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003150:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	6093      	str	r3, [r2, #8]
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003174:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003178:	d101      	bne.n	800317e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800317a:	2301      	movs	r3, #1
 800317c:	e000      	b.n	8003180 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800319c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	609a      	str	r2, [r3, #8]
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031c8:	d101      	bne.n	80031ce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80031ca:	2301      	movs	r3, #1
 80031cc:	e000      	b.n	80031d0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80031ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031f0:	f043 0201 	orr.w	r2, r3, #1
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	609a      	str	r2, [r3, #8]
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADDIS);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003214:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003218:	f043 0202 	orr.w	r2, r3, #2
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	609a      	str	r2, [r3, #8]
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	2b01      	cmp	r3, #1
 800323e:	d101      	bne.n	8003244 <LL_ADC_IsEnabled+0x18>
 8003240:	2301      	movs	r3, #1
 8003242:	e000      	b.n	8003246 <LL_ADC_IsEnabled+0x1a>
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr

08003252 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003252:	b480      	push	{r7}
 8003254:	b083      	sub	sp, #12
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b02      	cmp	r3, #2
 8003264:	d101      	bne.n	800326a <LL_ADC_IsDisableOngoing+0x18>
 8003266:	2301      	movs	r3, #1
 8003268:	e000      	b.n	800326c <LL_ADC_IsDisableOngoing+0x1a>
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003288:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800328c:	f043 0204 	orr.w	r2, r3, #4
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	609a      	str	r2, [r3, #8]
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80032b4:	f043 0210 	orr.w	r2, r3, #16
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b04      	cmp	r3, #4
 80032da:	d101      	bne.n	80032e0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80032dc:	2301      	movs	r3, #1
 80032de:	e000      	b.n	80032e2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr

080032ee <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b083      	sub	sp, #12
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_JADSTP);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032fe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003302:	f043 0220 	orr.w	r2, r3, #32
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	609a      	str	r2, [r3, #8]
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr

08003316 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003316:	b480      	push	{r7}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 0308 	and.w	r3, r3, #8
 8003326:	2b08      	cmp	r3, #8
 8003328:	d101      	bne.n	800332e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800332a:	2301      	movs	r3, #1
 800332c:	e000      	b.n	8003330 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b08a      	sub	sp, #40	; 0x28
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003344:	2300      	movs	r3, #0
 8003346:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 800334a:	2300      	movs	r3, #0
 800334c:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 800334e:	2300      	movs	r3, #0
 8003350:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e2e3      	b.n	8003924 <HAL_ADC_Init+0x5e8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d003      	beq.n	800336c <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a92      	ldr	r2, [pc, #584]	; (80035b4 <HAL_ADC_Init+0x278>)
 800336a:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003370:	2b00      	cmp	r3, #0
 8003372:	d109      	bne.n	8003388 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f7ff f82d 	bl	80023d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff fee9 	bl	8003164 <LL_ADC_IsDeepPowerDownEnabled>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d004      	beq.n	80033a2 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff fecf 	bl	8003140 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7ff ff04 	bl	80031b4 <LL_ADC_IsInternalRegulatorEnabled>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d115      	bne.n	80033de <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7ff fee8 	bl	800318c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033bc:	4b7e      	ldr	r3, [pc, #504]	; (80035b8 <HAL_ADC_Init+0x27c>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	099b      	lsrs	r3, r3, #6
 80033c2:	4a7e      	ldr	r2, [pc, #504]	; (80035bc <HAL_ADC_Init+0x280>)
 80033c4:	fba2 2303 	umull	r2, r3, r2, r3
 80033c8:	099b      	lsrs	r3, r3, #6
 80033ca:	3301      	adds	r3, #1
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80033d0:	e002      	b.n	80033d8 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	3b01      	subs	r3, #1
 80033d6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1f9      	bne.n	80033d2 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7ff fee6 	bl	80031b4 <LL_ADC_IsInternalRegulatorEnabled>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10e      	bne.n	800340c <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033f2:	f043 0210 	orr.w	r2, r3, #16
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033fe:	f043 0201 	orr.w	r2, r3, #1
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff ff59 	bl	80032c8 <LL_ADC_REG_IsConversionOngoing>
 8003416:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800341c:	f003 0310 	and.w	r3, r3, #16
 8003420:	2b00      	cmp	r3, #0
 8003422:	f040 8274 	bne.w	800390e <HAL_ADC_Init+0x5d2>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2b00      	cmp	r3, #0
 800342a:	f040 8270 	bne.w	800390e <HAL_ADC_Init+0x5d2>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003432:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003436:	f043 0202 	orr.w	r2, r3, #2
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f7ff fef2 	bl	800322c <LL_ADC_IsEnabled>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d14e      	bne.n	80034ec <HAL_ADC_Init+0x1b0>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a58      	ldr	r2, [pc, #352]	; (80035b4 <HAL_ADC_Init+0x278>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d028      	beq.n	80034aa <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a58      	ldr	r2, [pc, #352]	; (80035c0 <HAL_ADC_Init+0x284>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d109      	bne.n	8003476 <HAL_ADC_Init+0x13a>
 8003462:	4857      	ldr	r0, [pc, #348]	; (80035c0 <HAL_ADC_Init+0x284>)
 8003464:	f7ff fee2 	bl	800322c <LL_ADC_IsEnabled>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	bf0c      	ite	eq
 800346e:	2301      	moveq	r3, #1
 8003470:	2300      	movne	r3, #0
 8003472:	b2db      	uxtb	r3, r3
 8003474:	e008      	b.n	8003488 <HAL_ADC_Init+0x14c>
 8003476:	484f      	ldr	r0, [pc, #316]	; (80035b4 <HAL_ADC_Init+0x278>)
 8003478:	f7ff fed8 	bl	800322c <LL_ADC_IsEnabled>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	bf0c      	ite	eq
 8003482:	2301      	moveq	r3, #1
 8003484:	2300      	movne	r3, #0
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b00      	cmp	r3, #0
 800348a:	d02f      	beq.n	80034ec <HAL_ADC_Init+0x1b0>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a4b      	ldr	r2, [pc, #300]	; (80035c0 <HAL_ADC_Init+0x284>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d101      	bne.n	800349a <HAL_ADC_Init+0x15e>
 8003496:	4a4b      	ldr	r2, [pc, #300]	; (80035c4 <HAL_ADC_Init+0x288>)
 8003498:	e000      	b.n	800349c <HAL_ADC_Init+0x160>
 800349a:	4a4b      	ldr	r2, [pc, #300]	; (80035c8 <HAL_ADC_Init+0x28c>)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	4619      	mov	r1, r3
 80034a2:	4610      	mov	r0, r2
 80034a4:	f7ff fbfa 	bl	8002c9c <LL_ADC_SetCommonClock>
 80034a8:	e020      	b.n	80034ec <HAL_ADC_Init+0x1b0>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        MODIFY_REG(hadc->Instance->CFGR1,
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	f023 010c 	bic.w	r1, r3, #12
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034bc:	4293      	cmp	r3, r2
 80034be:	d005      	beq.n	80034cc <HAL_ADC_Init+0x190>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	3b01      	subs	r3, #1
 80034c6:	f003 030c 	and.w	r3, r3, #12
 80034ca:	e000      	b.n	80034ce <HAL_ADC_Init+0x192>
 80034cc:	230c      	movs	r3, #12
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6812      	ldr	r2, [r2, #0]
 80034d2:	430b      	orrs	r3, r1
 80034d4:	60d3      	str	r3, [r2, #12]
                   ADC_CFGR1_RES,
                   __LL_ADC_RESOLUTION_ADC1_TO_ADC4(hadc->Init.Resolution));   /* Convert resolution for the ADC4 */

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 80034d6:	4b3c      	ldr	r3, [pc, #240]	; (80035c8 <HAL_ADC_Init+0x28c>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80034e6:	4938      	ldr	r1, [pc, #224]	; (80035c8 <HAL_ADC_Init+0x28c>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a30      	ldr	r2, [pc, #192]	; (80035b4 <HAL_ADC_Init+0x278>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d010      	beq.n	8003518 <HAL_ADC_Init+0x1dc>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034fc:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003502:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8003508:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003510:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8003512:	4313      	orrs	r3, r2
 8003514:	623b      	str	r3, [r7, #32]
 8003516:	e030      	b.n	800357a <HAL_ADC_Init+0x23e>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	7f1b      	ldrb	r3, [r3, #28]
 800351c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003524:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003526:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800352c:	2a00      	cmp	r2, #0
 800352e:	d002      	beq.n	8003536 <HAL_ADC_Init+0x1fa>
 8003530:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003534:	e000      	b.n	8003538 <HAL_ADC_Init+0x1fc>
 8003536:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003538:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 800353e:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	2b00      	cmp	r3, #0
 8003546:	da04      	bge.n	8003552 <HAL_ADC_Init+0x216>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003550:	e001      	b.n	8003556 <HAL_ADC_Init+0x21a>
 8003552:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 8003556:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4918      	ldr	r1, [pc, #96]	; (80035c0 <HAL_ADC_Init+0x284>)
 800355e:	428b      	cmp	r3, r1
 8003560:	d103      	bne.n	800356a <HAL_ADC_Init+0x22e>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003568:	e003      	b.n	8003572 <HAL_ADC_Init+0x236>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003570:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8003572:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003574:	6a3a      	ldr	r2, [r7, #32]
 8003576:	4313      	orrs	r3, r2
 8003578:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003580:	2b01      	cmp	r3, #1
 8003582:	d12f      	bne.n	80035e4 <HAL_ADC_Init+0x2a8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a0a      	ldr	r2, [pc, #40]	; (80035b4 <HAL_ADC_Init+0x278>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d007      	beq.n	800359e <HAL_ADC_Init+0x262>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003592:	3b01      	subs	r3, #1
 8003594:	045b      	lsls	r3, r3, #17
 8003596:	6a3a      	ldr	r2, [r7, #32]
 8003598:	4313      	orrs	r3, r2
 800359a:	623b      	str	r3, [r7, #32]
 800359c:	e022      	b.n	80035e4 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d111      	bne.n	80035cc <HAL_ADC_Init+0x290>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80035a8:	6a3b      	ldr	r3, [r7, #32]
 80035aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ae:	623b      	str	r3, [r7, #32]
 80035b0:	e018      	b.n	80035e4 <HAL_ADC_Init+0x2a8>
 80035b2:	bf00      	nop
 80035b4:	46021000 	.word	0x46021000
 80035b8:	2000010c 	.word	0x2000010c
 80035bc:	053e2d63 	.word	0x053e2d63
 80035c0:	42028000 	.word	0x42028000
 80035c4:	42028308 	.word	0x42028308
 80035c8:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035d0:	f043 0220 	orr.w	r2, r3, #32
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035dc:	f043 0201 	orr.w	r2, r3, #1
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a93      	ldr	r2, [pc, #588]	; (8003838 <HAL_ADC_Init+0x4fc>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d018      	beq.n	8003620 <HAL_ADC_Init+0x2e4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d009      	beq.n	800360a <HAL_ADC_Init+0x2ce>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035fa:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003602:	4313      	orrs	r3, r2
 8003604:	6a3a      	ldr	r2, [r7, #32]
 8003606:	4313      	orrs	r3, r2
 8003608:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68da      	ldr	r2, [r3, #12]
 8003610:	4b8a      	ldr	r3, [pc, #552]	; (800383c <HAL_ADC_Init+0x500>)
 8003612:	4013      	ands	r3, r2
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	6812      	ldr	r2, [r2, #0]
 8003618:	6a39      	ldr	r1, [r7, #32]
 800361a:	430b      	orrs	r3, r1
 800361c:	60d3      	str	r3, [r2, #12]
 800361e:	e033      	b.n	8003688 <HAL_ADC_Init+0x34c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003624:	2b00      	cmp	r3, #0
 8003626:	d009      	beq.n	800363c <HAL_ADC_Init+0x300>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800362c:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003634:	4313      	orrs	r3, r2
 8003636:	6a3a      	ldr	r2, [r7, #32]
 8003638:	4313      	orrs	r3, r2
 800363a:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	f423 33bf 	bic.w	r3, r3, #97792	; 0x17e00
 8003646:	f423 73f9 	bic.w	r3, r3, #498	; 0x1f2
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	6812      	ldr	r2, [r2, #0]
 800364e:	6a39      	ldr	r1, [r7, #32]
 8003650:	430b      	orrs	r3, r1
 8003652:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN   |
                 ADC4_CFGR1_SCANDIR |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d008      	beq.n	800366e <HAL_ADC_Init+0x332>
      {
        SET_BIT(hadc->Instance->PW, hadc->Init.LowPowerAutoPowerOff);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a1a      	ldr	r2, [r3, #32]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	430a      	orrs	r2, r1
 800366c:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003672:	2b00      	cmp	r3, #0
 8003674:	d008      	beq.n	8003688 <HAL_ADC_Init+0x34c>
      {
        SET_BIT(hadc->Instance->PW, hadc->Init.VrefProtection);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	430a      	orrs	r2, r1
 8003686:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a6a      	ldr	r2, [pc, #424]	; (8003838 <HAL_ADC_Init+0x4fc>)
 800368e:	4293      	cmp	r3, r2
 8003690:	f000 8093 	beq.w	80037ba <HAL_ADC_Init+0x47e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4618      	mov	r0, r3
 800369a:	f7ff fe15 	bl	80032c8 <LL_ADC_REG_IsConversionOngoing>
 800369e:	6138      	str	r0, [r7, #16]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7ff fe36 	bl	8003316 <LL_ADC_INJ_IsConversionOngoing>
 80036aa:	60f8      	str	r0, [r7, #12]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d161      	bne.n	8003776 <HAL_ADC_Init+0x43a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d15e      	bne.n	8003776 <HAL_ADC_Init+0x43a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	7f1b      	ldrb	r3, [r3, #28]
 80036bc:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	495f      	ldr	r1, [pc, #380]	; (8003840 <HAL_ADC_Init+0x504>)
 80036c4:	428b      	cmp	r3, r1
 80036c6:	d102      	bne.n	80036ce <HAL_ADC_Init+0x392>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036cc:	e002      	b.n	80036d4 <HAL_ADC_Init+0x398>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d2:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80036d4:	4313      	orrs	r3, r2
 80036d6:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036e2:	f023 0303 	bic.w	r3, r3, #3
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6812      	ldr	r2, [r2, #0]
 80036ea:	6a39      	ldr	r1, [r7, #32]
 80036ec:	430b      	orrs	r3, r1
 80036ee:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d007      	beq.n	8003708 <HAL_ADC_Init+0x3cc>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	4619      	mov	r1, r3
 8003702:	4610      	mov	r0, r2
 8003704:	f7ff fb55 	bl	8002db2 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800370e:	2b01      	cmp	r3, #1
 8003710:	d11e      	bne.n	8003750 <HAL_ADC_Init+0x414>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003716:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	691a      	ldr	r2, [r3, #16]
 800371e:	4b49      	ldr	r3, [pc, #292]	; (8003844 <HAL_ADC_Init+0x508>)
 8003720:	4013      	ands	r3, r2
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003726:	0411      	lsls	r1, r2, #16
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800372c:	4311      	orrs	r1, r2
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8003732:	4311      	orrs	r1, r2
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8003738:	4311      	orrs	r1, r2
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800373e:	0892      	lsrs	r2, r2, #2
 8003740:	430a      	orrs	r2, r1
 8003742:	431a      	orrs	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f042 0201 	orr.w	r2, r2, #1
 800374c:	611a      	str	r2, [r3, #16]
 800374e:	e007      	b.n	8003760 <HAL_ADC_Init+0x424>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	691a      	ldr	r2, [r3, #16]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 0201 	bic.w	r2, r2, #1
 800375e:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d10c      	bne.n	8003798 <HAL_ADC_Init+0x45c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003784:	f023 010f 	bic.w	r1, r3, #15
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378c:	1e5a      	subs	r2, r3, #1
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	631a      	str	r2, [r3, #48]	; 0x30
 8003796:	e007      	b.n	80037a8 <HAL_ADC_Init+0x46c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 020f 	bic.w	r2, r2, #15
 80037a6:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037ac:	f023 0303 	bic.w	r3, r3, #3
 80037b0:	f043 0201 	orr.w	r2, r3, #1
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80037b8:	e0b2      	b.n	8003920 <HAL_ADC_Init+0x5e4>
      /*  - oversampling enable                                                 */
      /*  - oversampling ratio                                                  */
      /*  - oversampling shift                                                  */
      /*  - oversampling discontinuous mode (triggered mode)                    */
      /*  - trigger frequency mode                                              */
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                   hadc->Init.Oversampling.RightBitShift |
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80037c2:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.TriggeredMode |
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                   hadc->Init.Oversampling.RightBitShift |
 80037c8:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                   hadc->Init.Oversampling.TriggeredMode |
 80037ce:	4313      	orrs	r3, r2
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80037d0:	69fa      	ldr	r2, [r7, #28]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	61fb      	str	r3, [r7, #28]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d103      	bne.n	80037e8 <HAL_ADC_Init+0x4ac>
      {
        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	f043 0301 	orr.w	r3, r3, #1
 80037e6:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	691a      	ldr	r2, [r3, #16]
 80037ee:	4b16      	ldr	r3, [pc, #88]	; (8003848 <HAL_ADC_Init+0x50c>)
 80037f0:	4013      	ands	r3, r2
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	6812      	ldr	r2, [r2, #0]
 80037f6:	69f9      	ldr	r1, [r7, #28]
 80037f8:	430b      	orrs	r3, r1
 80037fa:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6818      	ldr	r0, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003804:	461a      	mov	r2, r3
 8003806:	2100      	movs	r1, #0
 8003808:	f7ff faf6 	bl	8002df8 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6818      	ldr	r0, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003814:	461a      	mov	r2, r3
 8003816:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 800381a:	f7ff faed 	bl	8002df8 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d112      	bne.n	800384c <HAL_ADC_Init+0x510>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f062 020f 	orn	r2, r2, #15
 8003834:	629a      	str	r2, [r3, #40]	; 0x28
 8003836:	e044      	b.n	80038c2 <HAL_ADC_Init+0x586>
 8003838:	46021000 	.word	0x46021000
 800383c:	fff0c013 	.word	0xfff0c013
 8003840:	42028000 	.word	0x42028000
 8003844:	fc00f81e 	.word	0xfc00f81e
 8003848:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003854:	d135      	bne.n	80038c2 <HAL_ADC_Init+0x586>
      {
        /* Count number of ranks available in HAL ADC handle variable */
        uint32_t ADCGroupRegularSequencerRanksCount;

        /* Parse all ranks from 1 to 8 */
        for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL);                    \
 8003856:	2300      	movs	r3, #0
 8003858:	61bb      	str	r3, [r7, #24]
 800385a:	e00d      	b.n	8003878 <HAL_ADC_Init+0x53c>
             ADCGroupRegularSequencerRanksCount++)
        {
          /* Check each sequencer rank until value of end of sequence */
          if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	fa22 f303 	lsr.w	r3, r2, r3
 800386a:	f003 030f 	and.w	r3, r3, #15
 800386e:	2b0f      	cmp	r3, #15
 8003870:	d006      	beq.n	8003880 <HAL_ADC_Init+0x544>
             ADCGroupRegularSequencerRanksCount++)
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	3301      	adds	r3, #1
 8003876:	61bb      	str	r3, [r7, #24]
        for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL);                    \
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	2b07      	cmp	r3, #7
 800387c:	d9ee      	bls.n	800385c <HAL_ADC_Init+0x520>
 800387e:	e000      	b.n	8003882 <HAL_ADC_Init+0x546>
              ADC_CHSELR_SQ1)
          {
            break;
 8003880:	bf00      	nop
          }
        }

        if (ADCGroupRegularSequencerRanksCount == 1UL)
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d108      	bne.n	800389a <HAL_ADC_Init+0x55e>
        {
          /* Set ADC group regular sequencer:                                   */
          /* Set sequencer scan length by clearing ranks above rank 1           */
          /* and do not modify rank 1 value.                                    */
          SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f062 020f 	orn	r2, r2, #15
 8003896:	629a      	str	r2, [r3, #40]	; 0x28
 8003898:	e013      	b.n	80038c2 <HAL_ADC_Init+0x586>
          /*          therefore after the first call of "HAL_ADC_Init()",        */
          /*          each rank corresponding to parameter "NbrOfConversion"    */
          /*          must be set using "HAL_ADC_ConfigChannel()".              */
          /*  - Set sequencer scan length by clearing ranks above maximum rank  */
          /*    and do not modify other ranks value.                            */
          MODIFY_REG(hadc->Instance->CHSELR,
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a4:	3b01      	subs	r3, #1
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	f003 031c 	and.w	r3, r3, #28
 80038ac:	f06f 020f 	mvn.w	r2, #15
 80038b0:	fa02 f103 	lsl.w	r1, r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68da      	ldr	r2, [r3, #12]
 80038c8:	4b18      	ldr	r3, [pc, #96]	; (800392c <HAL_ADC_Init+0x5f0>)
 80038ca:	4013      	ands	r3, r2
 80038cc:	6a3a      	ldr	r2, [r7, #32]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d10b      	bne.n	80038ea <HAL_ADC_Init+0x5ae>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038dc:	f023 0303 	bic.w	r3, r3, #3
 80038e0:	f043 0201 	orr.w	r2, r3, #1
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80038e8:	e01a      	b.n	8003920 <HAL_ADC_Init+0x5e4>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038ee:	f023 0312 	bic.w	r3, r3, #18
 80038f2:	f043 0210 	orr.w	r2, r3, #16
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038fe:	f043 0201 	orr.w	r2, r3, #1
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800390c:	e008      	b.n	8003920 <HAL_ADC_Init+0x5e4>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003912:	f043 0210 	orr.w	r2, r3, #16
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 8003920:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003924:	4618      	mov	r0, r3
 8003926:	3728      	adds	r7, #40	; 0x28
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	833ffff3 	.word	0x833ffff3

08003930 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4618      	mov	r0, r3
 800393e:	f7ff fcc3 	bl	80032c8 <LL_ADC_REG_IsConversionOngoing>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d15d      	bne.n	8003a04 <HAL_ADC_Start+0xd4>
  {
    __HAL_LOCK(hadc);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800394e:	2b01      	cmp	r3, #1
 8003950:	d101      	bne.n	8003956 <HAL_ADC_Start+0x26>
 8003952:	2302      	movs	r3, #2
 8003954:	e059      	b.n	8003a0a <HAL_ADC_Start+0xda>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f001 f9ac 	bl	8004cbc <ADC_Enable>
 8003964:	4603      	mov	r3, r0
 8003966:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003968:	7bfb      	ldrb	r3, [r7, #15]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d145      	bne.n	80039fa <HAL_ADC_Start+0xca>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003972:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003976:	f023 0301 	bic.w	r3, r3, #1
 800397a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	679a      	str	r2, [r3, #120]	; 0x78
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a23      	ldr	r2, [pc, #140]	; (8003a14 <HAL_ADC_Start+0xe4>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d011      	beq.n	80039b0 <HAL_ADC_Start+0x80>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */
        /* Set ADC error code */
        /* Check if a conversion is on going on ADC group injected */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003990:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003998:	d106      	bne.n	80039a8 <HAL_ADC_Start+0x78>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800399e:	f023 0206 	bic.w	r2, r3, #6
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	67da      	str	r2, [r3, #124]	; 0x7c
 80039a6:	e006      	b.n	80039b6 <HAL_ADC_Start+0x86>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	67da      	str	r2, [r3, #124]	; 0x7c
 80039ae:	e002      	b.n	80039b6 <HAL_ADC_Start+0x86>
      }
      else
      {
        /* Set ADC error code */
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	67da      	str	r2, [r3, #124]	; 0x7c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	221c      	movs	r2, #28
 80039bc:	601a      	str	r2, [r3, #0]

      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */

      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a12      	ldr	r2, [pc, #72]	; (8003a14 <HAL_ADC_Start+0xe4>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d00e      	beq.n	80039ee <HAL_ADC_Start+0xbe>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }

        }
#else
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_JAUTO) != 0UL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d007      	beq.n	80039ee <HAL_ADC_Start+0xbe>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039e2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80039e6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	679a      	str	r2, [r3, #120]	; 0x78
        }
#endif /* ADC_MULTIMODE_SUPPORT */
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7ff fc40 	bl	8003278 <LL_ADC_REG_StartConversion>
 80039f8:	e006      	b.n	8003a08 <HAL_ADC_Start+0xd8>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8003a02:	e001      	b.n	8003a08 <HAL_ADC_Start+0xd8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003a04:	2302      	movs	r3, #2
 8003a06:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8003a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	46021000 	.word	0x46021000

08003a18 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d101      	bne.n	8003a2e <HAL_ADC_Stop+0x16>
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	e023      	b.n	8003a76 <HAL_ADC_Stop+0x5e>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003a36:	2103      	movs	r1, #3
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f001 f883 	bl	8004b44 <ADC_ConversionStop>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003a42:	7bfb      	ldrb	r3, [r7, #15]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d111      	bne.n	8003a6c <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f001 f9a3 	bl	8004d94 <ADC_Disable>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003a52:	7bfb      	ldrb	r3, [r7, #15]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d109      	bne.n	8003a6c <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a5c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003a60:	f023 0301 	bic.w	r3, r3, #1
 8003a64:	f043 0201 	orr.w	r2, r3, #1
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	679a      	str	r2, [r3, #120]	; 0x78
                        HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return tmp_hal_status;
 8003a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
	...

08003a80 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	2b08      	cmp	r3, #8
 8003a90:	d102      	bne.n	8003a98 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8003a92:	2308      	movs	r3, #8
 8003a94:	617b      	str	r3, [r7, #20]
 8003a96:	e027      	b.n	8003ae8 <HAL_ADC_PollForConversion+0x68>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */

    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a6a      	ldr	r2, [pc, #424]	; (8003c48 <HAL_ADC_PollForConversion+0x1c8>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d011      	beq.n	8003ac6 <HAL_ADC_PollForConversion+0x46>
          tmp_flag_end = (ADC_FLAG_EOC);
        }
      }
#else
      /* Check ADC DMA mode */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT_0) != 0UL)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d007      	beq.n	8003ac0 <HAL_ADC_PollForConversion+0x40>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ab4:	f043 0220 	orr.w	r2, r3, #32
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	679a      	str	r2, [r3, #120]	; 0x78
        return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e0be      	b.n	8003c3e <HAL_ADC_PollForConversion+0x1be>
      }
      else
      {
        tmp_flag_end = (ADC_FLAG_EOC);
 8003ac0:	2304      	movs	r3, #4
 8003ac2:	617b      	str	r3, [r7, #20]
 8003ac4:	e010      	b.n	8003ae8 <HAL_ADC_PollForConversion+0x68>
      }
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      if ((hadc->Instance->CFGR1 & ADC4_CFGR1_DMAEN) != 0UL)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d007      	beq.n	8003ae4 <HAL_ADC_PollForConversion+0x64>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ad8:	f043 0220 	orr.w	r2, r3, #32
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	679a      	str	r2, [r3, #120]	; 0x78
        return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e0ac      	b.n	8003c3e <HAL_ADC_PollForConversion+0x1be>
      }
      else
      {
        tmp_flag_end = (ADC_FLAG_EOC);
 8003ae4:	2304      	movs	r3, #4
 8003ae6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003ae8:	f7ff f89a 	bl	8002c20 <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003aee:	e021      	b.n	8003b34 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af6:	d01d      	beq.n	8003b34 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003af8:	f7ff f892 	bl	8002c20 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	683a      	ldr	r2, [r7, #0]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d302      	bcc.n	8003b0e <HAL_ADC_PollForConversion+0x8e>
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d112      	bne.n	8003b34 <HAL_ADC_PollForConversion+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	4013      	ands	r3, r2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d10b      	bne.n	8003b34 <HAL_ADC_PollForConversion+0xb4>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b20:	f043 0204 	orr.w	r2, r3, #4
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	679a      	str	r2, [r3, #120]	; 0x78

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e084      	b.n	8003c3e <HAL_ADC_PollForConversion+0x1be>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0d6      	beq.n	8003af0 <HAL_ADC_PollForConversion+0x70>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b46:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7ff f96f 	bl	8002e36 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d06e      	beq.n	8003c3c <HAL_ADC_PollForConversion+0x1bc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d169      	bne.n	8003c3c <HAL_ADC_PollForConversion+0x1bc>
     )
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a36      	ldr	r2, [pc, #216]	; (8003c48 <HAL_ADC_PollForConversion+0x1c8>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d02e      	beq.n	8003bd0 <HAL_ADC_PollForConversion+0x150>
    {
      /* Check whether end of sequence is reached */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0308 	and.w	r3, r3, #8
 8003b7c:	2b08      	cmp	r3, #8
 8003b7e:	d111      	bne.n	8003ba4 <HAL_ADC_PollForConversion+0x124>
      {
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	679a      	str	r2, [r3, #120]	; 0x78

        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d105      	bne.n	8003ba4 <HAL_ADC_PollForConversion+0x124>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b9c:	f043 0201 	orr.w	r2, r3, #1
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	679a      	str	r2, [r3, #120]	; 0x78
        tmp_adc_master = ADC_MASTER_REGISTER(hadc);
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
      }
#else
      /* Retrieve handle ADC CFGR register */
      tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */
      /* Clear polled flag */
      if (tmp_flag_end == ADC_FLAG_EOS)
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	2b08      	cmp	r3, #8
 8003bb0:	d104      	bne.n	8003bbc <HAL_ADC_PollForConversion+0x13c>
      {
        __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2208      	movs	r2, #8
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	e03f      	b.n	8003c3c <HAL_ADC_PollForConversion+0x1bc>
      else
      {
        /* Clear end of conversion EOC flag of regular group if low power feature */
        /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
        /* until data register is read using function HAL_ADC_GetValue().         */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_AUTDLY) == 0UL)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d13a      	bne.n	8003c3c <HAL_ADC_PollForConversion+0x1bc>
        {
          __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	220c      	movs	r2, #12
 8003bcc:	601a      	str	r2, [r3, #0]
 8003bce:	e035      	b.n	8003c3c <HAL_ADC_PollForConversion+0x1bc>
      }
    }
    else
    {
      /* Check whether end of sequence is reached */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0308 	and.w	r3, r3, #8
 8003bda:	2b08      	cmp	r3, #8
 8003bdc:	d126      	bne.n	8003c2c <HAL_ADC_PollForConversion+0x1ac>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
        /* ADSTART==0 (no conversion on going)                                  */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7ff fb70 	bl	80032c8 <LL_ADC_REG_IsConversionOngoing>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d112      	bne.n	8003c14 <HAL_ADC_PollForConversion+0x194>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in          */
          /* HAL_Start_IT(), but is not disabled here because can be used       */
          /* by overrun IRQ process below.                                      */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 020c 	bic.w	r2, r2, #12
 8003bfc:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c06:	f023 0301 	bic.w	r3, r3, #1
 8003c0a:	f043 0201 	orr.w	r2, r3, #1
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	679a      	str	r2, [r3, #120]	; 0x78
 8003c12:	e00b      	b.n	8003c2c <HAL_ADC_PollForConversion+0x1ac>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c18:	f043 0220 	orr.w	r2, r3, #32
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c24:	f043 0201 	orr.w	r2, r3, #1
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	67da      	str	r2, [r3, #124]	; 0x7c
      }

      /* Clear end of conversion flag of regular group if low power feature       */
      /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
      /* until data register is read using function HAL_ADC_GetValue().           */
      if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	7f1b      	ldrb	r3, [r3, #28]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d103      	bne.n	8003c3c <HAL_ADC_PollForConversion+0x1bc>
      {
        /* Clear regular group conversion flag */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	220c      	movs	r2, #12
 8003c3a:	601a      	str	r2, [r3, #0]
      }

    }
  }

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3718      	adds	r7, #24
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	46021000 	.word	0x46021000

08003c4c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
	...

08003c68 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b088      	sub	sp, #32
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003c70:	2300      	movs	r3, #0
 8003c72:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d017      	beq.n	8003cbe <HAL_ADC_IRQHandler+0x56>
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	f003 0302 	and.w	r3, r3, #2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d012      	beq.n	8003cbe <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c9c:	f003 0310 	and.w	r3, r3, #16
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d105      	bne.n	8003cb0 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ca8:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	679a      	str	r2, [r3, #120]	; 0x78

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f001 f98f 	bl	8004fd4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	f003 0304 	and.w	r3, r3, #4
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d004      	beq.n	8003cd2 <HAL_ADC_IRQHandler+0x6a>
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	f003 0304 	and.w	r3, r3, #4
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10b      	bne.n	8003cea <HAL_ADC_IRQHandler+0x82>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f000 80a4 	beq.w	8003e26 <HAL_ADC_IRQHandler+0x1be>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f003 0308 	and.w	r3, r3, #8
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f000 809e 	beq.w	8003e26 <HAL_ADC_IRQHandler+0x1be>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cee:	f003 0310 	and.w	r3, r3, #16
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d105      	bne.n	8003d02 <HAL_ADC_IRQHandler+0x9a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cfa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	679a      	str	r2, [r3, #120]	; 0x78
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a3d      	ldr	r2, [pc, #244]	; (8003dfc <HAL_ADC_IRQHandler+0x194>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d047      	beq.n	8003d9c <HAL_ADC_IRQHandler+0x134>
    {
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7ff f890 	bl	8002e36 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d07d      	beq.n	8003e18 <HAL_ADC_IRQHandler+0x1b0>
          /* else need to check Master ADC CONT bit */
          tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
          tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
        }
#else
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Carry on if continuous mode is disabled */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d174      	bne.n	8003e18 <HAL_ADC_IRQHandler+0x1b0>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0308 	and.w	r3, r3, #8
 8003d38:	2b08      	cmp	r3, #8
 8003d3a:	d16d      	bne.n	8003e18 <HAL_ADC_IRQHandler+0x1b0>
          {
            /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
            /* ADSTART==0 (no conversion on going)                              */
            if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7ff fac1 	bl	80032c8 <LL_ADC_REG_IsConversionOngoing>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d11a      	bne.n	8003d82 <HAL_ADC_IRQHandler+0x11a>
            {
              /* Disable ADC end of sequence conversion interrupt */
              /* Note: Overrun interrupt was enabled with EOC interrupt in      */
              /* HAL_Start_IT(), but is not disabled here because can be used   */
              /* by overrun IRQ process below.                                  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685a      	ldr	r2, [r3, #4]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 020c 	bic.w	r2, r2, #12
 8003d5a:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	679a      	str	r2, [r3, #120]	; 0x78

              if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d151      	bne.n	8003e18 <HAL_ADC_IRQHandler+0x1b0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d78:	f043 0201 	orr.w	r2, r3, #1
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	679a      	str	r2, [r3, #120]	; 0x78
 8003d80:	e04a      	b.n	8003e18 <HAL_ADC_IRQHandler+0x1b0>
              }
            }
            else
            {
              /* Change ADC state to error state */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d86:	f043 0210 	orr.w	r2, r3, #16
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	679a      	str	r2, [r3, #120]	; 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d92:	f043 0201 	orr.w	r2, r3, #1
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	67da      	str	r2, [r3, #124]	; 0x7c
 8003d9a:	e03d      	b.n	8003e18 <HAL_ADC_IRQHandler+0x1b0>
    else
    {
      /* Determine whether any further conversion upcoming on group regular     */
      /* by external trigger, continuous mode or scan sequence on going         */
      /* to disable interruption.                                               */
      if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff f848 	bl	8002e36 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d035      	beq.n	8003e18 <HAL_ADC_IRQHandler+0x1b0>
          && (hadc->Init.ContinuousConvMode == DISABLE)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d130      	bne.n	8003e18 <HAL_ADC_IRQHandler+0x1b0>
         )
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0308 	and.w	r3, r3, #8
 8003dc0:	2b08      	cmp	r3, #8
 8003dc2:	d129      	bne.n	8003e18 <HAL_ADC_IRQHandler+0x1b0>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
          /* ADSTART==0 (no conversion on going)                                */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7ff fa7d 	bl	80032c8 <LL_ADC_REG_IsConversionOngoing>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d115      	bne.n	8003e00 <HAL_ADC_IRQHandler+0x198>
          {
            /* Disable ADC end of single conversion interrupt on group regular */
            /* Note: Overrun interrupt was enabled with EOC interrupt in        */
            /* HAL_Start_IT(), but is not disabled here because can be used     */
            /* by overrun IRQ process below.                                    */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 020c 	bic.w	r2, r2, #12
 8003de2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY, HAL_ADC_STATE_READY);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003de8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dec:	f023 0301 	bic.w	r3, r3, #1
 8003df0:	f043 0201 	orr.w	r2, r3, #1
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	679a      	str	r2, [r3, #120]	; 0x78
 8003df8:	e00e      	b.n	8003e18 <HAL_ADC_IRQHandler+0x1b0>
 8003dfa:	bf00      	nop
 8003dfc:	46021000 	.word	0x46021000
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e04:	f043 0220 	orr.w	r2, r3, #32
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	679a      	str	r2, [r3, #120]	; 0x78

            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e10:	f043 0201 	orr.w	r2, r3, #1
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	67da      	str	r2, [r3, #124]	; 0x7c
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 f907 	bl	800402c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	220c      	movs	r2, #12
 8003e24:	601a      	str	r2, [r3, #0]
  }

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a7f      	ldr	r2, [pc, #508]	; (8004028 <HAL_ADC_IRQHandler+0x3c0>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d06f      	beq.n	8003f10 <HAL_ADC_IRQHandler+0x2a8>
  {
    /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	f003 0320 	and.w	r3, r3, #32
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d004      	beq.n	8003e44 <HAL_ADC_IRQHandler+0x1dc>
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	f003 0320 	and.w	r3, r3, #32
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d109      	bne.n	8003e58 <HAL_ADC_IRQHandler+0x1f0>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d060      	beq.n	8003f10 <HAL_ADC_IRQHandler+0x2a8>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d05b      	beq.n	8003f10 <HAL_ADC_IRQHandler+0x2a8>
    {
      /* Update state machine on conversion status if not in error state */
      if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e5c:	f003 0310 	and.w	r3, r3, #16
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d105      	bne.n	8003e70 <HAL_ADC_IRQHandler+0x208>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e68:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Retrieve ADC configuration */
      tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7ff f8aa 	bl	8002fce <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003e7a:	60f8      	str	r0, [r7, #12]
      tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7fe ffd8 	bl	8002e36 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003e86:	60b8      	str	r0, [r7, #8]
      {
        tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	613b      	str	r3, [r7, #16]
      /* Disable interruption if no further conversion upcoming by injected     */
      /* external trigger or by automatic injected conversion with regular      */
      /* group having no further conversion upcoming (same conditions as        */
      /* regular group interruption disabling above),                           */
      /* and if injected scan sequence is completed.                            */
      if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d035      	beq.n	8003f02 <HAL_ADC_IRQHandler+0x29a>
      {
        if ((READ_BIT(tmp_cfgr, ADC_CFGR1_JAUTO) == 0UL) ||
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d007      	beq.n	8003eb0 <HAL_ADC_IRQHandler+0x248>
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d02d      	beq.n	8003f02 <HAL_ADC_IRQHandler+0x29a>
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
             (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) == 0UL)))
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d128      	bne.n	8003f02 <HAL_ADC_IRQHandler+0x29a>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eba:	2b40      	cmp	r3, #64	; 0x40
 8003ebc:	d121      	bne.n	8003f02 <HAL_ADC_IRQHandler+0x29a>
            /* Therefore, state of HAL ADC injected group is kept to busy.        */
            /* No ADC_CFGR1_JQM for STM32U5                                       */

            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7ff fa27 	bl	8003316 <LL_ADC_INJ_IsConversionOngoing>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d119      	bne.n	8003f02 <HAL_ADC_IRQHandler+0x29a>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003edc:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ee2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	679a      	str	r2, [r3, #120]	; 0x78

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d105      	bne.n	8003f02 <HAL_ADC_IRQHandler+0x29a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003efa:	f043 0201 	orr.w	r2, r3, #1
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	679a      	str	r2, [r3, #120]	; 0x78
                interruption has been triggered by end of conversion or end of
                sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f001 f848 	bl	8004f98 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2260      	movs	r2, #96	; 0x60
 8003f0e:	601a      	str	r2, [r3, #0]
    }
  } /* Specific ADC1 or ADC2 only */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d011      	beq.n	8003f3e <HAL_ADC_IRQHandler+0x2d6>
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00c      	beq.n	8003f3e <HAL_ADC_IRQHandler+0x2d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f28:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 f885 	bl	8004040 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2280      	movs	r2, #128	; 0x80
 8003f3c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d012      	beq.n	8003f6e <HAL_ADC_IRQHandler+0x306>
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00d      	beq.n	8003f6e <HAL_ADC_IRQHandler+0x306>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f56:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f001 f824 	bl	8004fac <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f6c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d012      	beq.n	8003f9e <HAL_ADC_IRQHandler+0x336>
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00d      	beq.n	8003f9e <HAL_ADC_IRQHandler+0x336>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f86:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f001 f816 	bl	8004fc0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f9c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	f003 0310 	and.w	r3, r3, #16
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d03a      	beq.n	800401e <HAL_ADC_IRQHandler+0x3b6>
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	f003 0310 	and.w	r3, r3, #16
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d035      	beq.n	800401e <HAL_ADC_IRQHandler+0x3b6>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d102      	bne.n	8003fc0 <HAL_ADC_IRQHandler+0x358>
    {
      overrun_error = 1UL;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	61fb      	str	r3, [r7, #28]
 8003fbe:	e018      	b.n	8003ff2 <HAL_ADC_IRQHandler+0x38a>
    }
    else
    {
      /* Check DMA configuration */
      if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a18      	ldr	r2, [pc, #96]	; (8004028 <HAL_ADC_IRQHandler+0x3c0>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d009      	beq.n	8003fde <HAL_ADC_IRQHandler+0x376>
            overrun_error = 1UL;
          }
        }
#else
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMNGT) != 0UL)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	f003 0303 	and.w	r3, r3, #3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00c      	beq.n	8003ff2 <HAL_ADC_IRQHandler+0x38a>
        {
          overrun_error = 1UL;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	61fb      	str	r3, [r7, #28]
 8003fdc:	e009      	b.n	8003ff2 <HAL_ADC_IRQHandler+0x38a>
#endif /* ADC_MULTIMODE_SUPPORT */
      }
      else
      {
        /* Check DMA configuration */
        if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE_ADC4)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fe ffe5 	bl	8002fb2 <LL_ADC_REG_GetDMATransfer>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <HAL_ADC_IRQHandler+0x38a>
        {
          overrun_error = 1UL;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d10e      	bne.n	8004016 <HAL_ADC_IRQHandler+0x3ae>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ffc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	679a      	str	r2, [r3, #120]	; 0x78

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004008:	f043 0202 	orr.w	r2, r3, #2
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	67da      	str	r2, [r3, #124]	; 0x7c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 f81f 	bl	8004054 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2210      	movs	r2, #16
 800401c:	601a      	str	r2, [r3, #0]
  }

}
 800401e:	bf00      	nop
 8004020:	3720      	adds	r7, #32
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	46021000 	.word	0x46021000

0800402c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b0a4      	sub	sp, #144	; 0x90
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004072:	2300      	movs	r3, #0
 8004074:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004078:	2300      	movs	r3, #0
 800407a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a94      	ldr	r2, [pc, #592]	; (80042d4 <HAL_ADC_ConfigChannel+0x26c>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d103      	bne.n	800408e <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004094:	2b01      	cmp	r3, #1
 8004096:	d102      	bne.n	800409e <HAL_ADC_ConfigChannel+0x36>
 8004098:	2302      	movs	r3, #2
 800409a:	f000 bd4b 	b.w	8004b34 <HAL_ADC_ConfigChannel+0xacc>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7ff f90c 	bl	80032c8 <LL_ADC_REG_IsConversionOngoing>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f040 852b 	bne.w	8004b0e <HAL_ADC_ConfigChannel+0xaa6>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a85      	ldr	r2, [pc, #532]	; (80042d4 <HAL_ADC_ConfigChannel+0x26c>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	f000 827f 	beq.w	80045c2 <HAL_ADC_ConfigChannel+0x55a>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d108      	bne.n	80040e2 <HAL_ADC_ConfigChannel+0x7a>
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	0e9b      	lsrs	r3, r3, #26
 80040d6:	f003 031f 	and.w	r3, r3, #31
 80040da:	2201      	movs	r2, #1
 80040dc:	fa02 f303 	lsl.w	r3, r2, r3
 80040e0:	e016      	b.n	8004110 <HAL_ADC_ConfigChannel+0xa8>
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040ea:	fa93 f3a3 	rbit	r3, r3
 80040ee:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80040f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040f2:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80040f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <HAL_ADC_ConfigChannel+0x96>
    return 32U;
 80040fa:	2320      	movs	r3, #32
 80040fc:	e003      	b.n	8004106 <HAL_ADC_ConfigChannel+0x9e>
  return __builtin_clz(value);
 80040fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004100:	fab3 f383 	clz	r3, r3
 8004104:	b2db      	uxtb	r3, r3
 8004106:	f003 031f 	and.w	r3, r3, #31
 800410a:	2201      	movs	r2, #1
 800410c:	fa02 f303 	lsl.w	r3, r2, r3
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	6812      	ldr	r2, [r2, #0]
 8004114:	69d1      	ldr	r1, [r2, #28]
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	6812      	ldr	r2, [r2, #0]
 800411a:	430b      	orrs	r3, r1
 800411c:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6818      	ldr	r0, [r3, #0]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	6859      	ldr	r1, [r3, #4]
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	461a      	mov	r2, r3
 800412c:	f7fe fe96 	bl	8002e5c <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4618      	mov	r0, r3
 8004136:	f7ff f8c7 	bl	80032c8 <LL_ADC_REG_IsConversionOngoing>
 800413a:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f7ff f8e7 	bl	8003316 <LL_ADC_INJ_IsConversionOngoing>
 8004148:	67f8      	str	r0, [r7, #124]	; 0x7c
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800414a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800414e:	2b00      	cmp	r3, #0
 8004150:	f040 8087 	bne.w	8004262 <HAL_ADC_ConfigChannel+0x1fa>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004154:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004156:	2b00      	cmp	r3, #0
 8004158:	f040 8083 	bne.w	8004262 <HAL_ADC_ConfigChannel+0x1fa>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6818      	ldr	r0, [r3, #0]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	6819      	ldr	r1, [r3, #0]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	461a      	mov	r2, r3
 800416a:	f7fe ff43 	bl	8002ff4 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	695a      	ldr	r2, [r3, #20]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	089b      	lsrs	r3, r3, #2
 800417a:	f003 0303 	and.w	r3, r3, #3
 800417e:	005b      	lsls	r3, r3, #1
 8004180:	fa02 f303 	lsl.w	r3, r2, r3
 8004184:	67bb      	str	r3, [r7, #120]	; 0x78

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	2b04      	cmp	r3, #4
 800418c:	d021      	beq.n	80041d2 <HAL_ADC_ConfigChannel+0x16a>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6818      	ldr	r0, [r3, #0]
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	6919      	ldr	r1, [r3, #16]
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800419c:	f7fe fdb2 	bl	8002d04 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6818      	ldr	r0, [r3, #0]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	6919      	ldr	r1, [r3, #16]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	69db      	ldr	r3, [r3, #28]
 80041ac:	461a      	mov	r2, r3
 80041ae:	f7fe fdca 	bl	8002d46 <LL_ADC_SetOffsetSign>
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,                  \
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6818      	ldr	r0, [r3, #0]
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	6919      	ldr	r1, [r3, #16]
                                           (pConfig->OffsetSignedSaturation == ENABLE)             \
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	7e5b      	ldrb	r3, [r3, #25]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,                  \
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d102      	bne.n	80041c8 <HAL_ADC_ConfigChannel+0x160>
 80041c2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80041c6:	e000      	b.n	80041ca <HAL_ADC_ConfigChannel+0x162>
 80041c8:	2300      	movs	r3, #0
 80041ca:	461a      	mov	r2, r3
 80041cc:	f7fe fdd6 	bl	8002d7c <LL_ADC_SetOffsetSignedSaturation>
 80041d0:	e047      	b.n	8004262 <HAL_ADC_ConfigChannel+0x1fa>
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
            If this is the case, offset OFRx is disabled since
            pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041d8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	06db      	lsls	r3, r3, #27
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d107      	bne.n	80041f6 <HAL_ADC_ConfigChannel+0x18e>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSAT);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80041f4:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041fc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	06db      	lsls	r3, r3, #27
 8004206:	429a      	cmp	r2, r3
 8004208:	d107      	bne.n	800421a <HAL_ADC_ConfigChannel+0x1b2>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSAT);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8004218:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004220:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	06db      	lsls	r3, r3, #27
 800422a:	429a      	cmp	r2, r3
 800422c:	d107      	bne.n	800423e <HAL_ADC_ConfigChannel+0x1d6>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSAT);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800423c:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004244:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	06db      	lsls	r3, r3, #27
 800424e:	429a      	cmp	r2, r3
 8004250:	d107      	bne.n	8004262 <HAL_ADC_ConfigChannel+0x1fa>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSAT);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8004260:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4618      	mov	r0, r3
 8004268:	f7fe ffe0 	bl	800322c <LL_ADC_IsEnabled>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	f040 845a 	bne.w	8004b28 <HAL_ADC_ConfigChannel+0xac0>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6818      	ldr	r0, [r3, #0]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	6819      	ldr	r1, [r3, #0]
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	461a      	mov	r2, r3
 8004282:	f7fe ff39 	bl	80030f8 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800428e:	f040 80d9 	bne.w	8004444 <HAL_ADC_ConfigChannel+0x3dc>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10b      	bne.n	80042b6 <HAL_ADC_ConfigChannel+0x24e>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	0e9b      	lsrs	r3, r3, #26
 80042a4:	3301      	adds	r3, #1
 80042a6:	f003 031f 	and.w	r3, r3, #31
 80042aa:	2b09      	cmp	r3, #9
 80042ac:	bf94      	ite	ls
 80042ae:	2301      	movls	r3, #1
 80042b0:	2300      	movhi	r3, #0
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	e01c      	b.n	80042f0 <HAL_ADC_ConfigChannel+0x288>
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042be:	fa93 f3a3 	rbit	r3, r3
 80042c2:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80042c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042c6:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80042c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d104      	bne.n	80042d8 <HAL_ADC_ConfigChannel+0x270>
    return 32U;
 80042ce:	2320      	movs	r3, #32
 80042d0:	e006      	b.n	80042e0 <HAL_ADC_ConfigChannel+0x278>
 80042d2:	bf00      	nop
 80042d4:	46021000 	.word	0x46021000
  return __builtin_clz(value);
 80042d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042da:	fab3 f383 	clz	r3, r3
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	3301      	adds	r3, #1
 80042e2:	f003 031f 	and.w	r3, r3, #31
 80042e6:	2b09      	cmp	r3, #9
 80042e8:	bf94      	ite	ls
 80042ea:	2301      	movls	r3, #1
 80042ec:	2300      	movhi	r3, #0
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d04d      	beq.n	8004390 <HAL_ADC_ConfigChannel+0x328>
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d107      	bne.n	8004310 <HAL_ADC_ConfigChannel+0x2a8>
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	0e9b      	lsrs	r3, r3, #26
 8004306:	3301      	adds	r3, #1
 8004308:	069b      	lsls	r3, r3, #26
 800430a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800430e:	e015      	b.n	800433c <HAL_ADC_ConfigChannel+0x2d4>
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004316:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004318:	fa93 f3a3 	rbit	r3, r3
 800431c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800431e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004320:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <HAL_ADC_ConfigChannel+0x2c4>
    return 32U;
 8004328:	2320      	movs	r3, #32
 800432a:	e003      	b.n	8004334 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800432c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800432e:	fab3 f383 	clz	r3, r3
 8004332:	b2db      	uxtb	r3, r3
 8004334:	3301      	adds	r3, #1
 8004336:	069b      	lsls	r3, r3, #26
 8004338:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d109      	bne.n	800435c <HAL_ADC_ConfigChannel+0x2f4>
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	0e9b      	lsrs	r3, r3, #26
 800434e:	3301      	adds	r3, #1
 8004350:	f003 031f 	and.w	r3, r3, #31
 8004354:	2101      	movs	r1, #1
 8004356:	fa01 f303 	lsl.w	r3, r1, r3
 800435a:	e017      	b.n	800438c <HAL_ADC_ConfigChannel+0x324>
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004364:	fa93 f3a3 	rbit	r3, r3
 8004368:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800436a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800436c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800436e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004370:	2b00      	cmp	r3, #0
 8004372:	d101      	bne.n	8004378 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8004374:	2320      	movs	r3, #32
 8004376:	e003      	b.n	8004380 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8004378:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800437a:	fab3 f383 	clz	r3, r3
 800437e:	b2db      	uxtb	r3, r3
 8004380:	3301      	adds	r3, #1
 8004382:	f003 031f 	and.w	r3, r3, #31
 8004386:	2101      	movs	r1, #1
 8004388:	fa01 f303 	lsl.w	r3, r1, r3
 800438c:	4313      	orrs	r3, r2
 800438e:	e04e      	b.n	800442e <HAL_ADC_ConfigChannel+0x3c6>
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d107      	bne.n	80043ac <HAL_ADC_ConfigChannel+0x344>
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	0e9b      	lsrs	r3, r3, #26
 80043a2:	3301      	adds	r3, #1
 80043a4:	069b      	lsls	r3, r3, #26
 80043a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80043aa:	e015      	b.n	80043d8 <HAL_ADC_ConfigChannel+0x370>
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043b4:	fa93 f3a3 	rbit	r3, r3
 80043b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80043ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043bc:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80043be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d101      	bne.n	80043c8 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80043c4:	2320      	movs	r3, #32
 80043c6:	e003      	b.n	80043d0 <HAL_ADC_ConfigChannel+0x368>
  return __builtin_clz(value);
 80043c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043ca:	fab3 f383 	clz	r3, r3
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	3301      	adds	r3, #1
 80043d2:	069b      	lsls	r3, r3, #26
 80043d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d109      	bne.n	80043f8 <HAL_ADC_ConfigChannel+0x390>
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	0e9b      	lsrs	r3, r3, #26
 80043ea:	3301      	adds	r3, #1
 80043ec:	f003 031f 	and.w	r3, r3, #31
 80043f0:	2101      	movs	r1, #1
 80043f2:	fa01 f303 	lsl.w	r3, r1, r3
 80043f6:	e017      	b.n	8004428 <HAL_ADC_ConfigChannel+0x3c0>
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004400:	fa93 f3a3 	rbit	r3, r3
 8004404:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004408:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800440a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800440c:	2b00      	cmp	r3, #0
 800440e:	d101      	bne.n	8004414 <HAL_ADC_ConfigChannel+0x3ac>
    return 32U;
 8004410:	2320      	movs	r3, #32
 8004412:	e003      	b.n	800441c <HAL_ADC_ConfigChannel+0x3b4>
  return __builtin_clz(value);
 8004414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004416:	fab3 f383 	clz	r3, r3
 800441a:	b2db      	uxtb	r3, r3
 800441c:	3301      	adds	r3, #1
 800441e:	f003 031f 	and.w	r3, r3, #31
 8004422:	2101      	movs	r1, #1
 8004424:	fa01 f303 	lsl.w	r3, r1, r3
 8004428:	4313      	orrs	r3, r2
 800442a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800442e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6818      	ldr	r0, [r3, #0]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	461a      	mov	r2, r3
 800443c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8004440:	f7fe fdd8 	bl	8002ff4 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	f280 836d 	bge.w	8004b28 <HAL_ADC_ConfigChannel+0xac0>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a98      	ldr	r2, [pc, #608]	; (80046b4 <HAL_ADC_ConfigChannel+0x64c>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d101      	bne.n	800445c <HAL_ADC_ConfigChannel+0x3f4>
 8004458:	4b97      	ldr	r3, [pc, #604]	; (80046b8 <HAL_ADC_ConfigChannel+0x650>)
 800445a:	e000      	b.n	800445e <HAL_ADC_ConfigChannel+0x3f6>
 800445c:	4b97      	ldr	r3, [pc, #604]	; (80046bc <HAL_ADC_ConfigChannel+0x654>)
 800445e:	4618      	mov	r0, r3
 8004460:	f7fe fc42 	bl	8002ce8 <LL_ADC_GetCommonPathInternalCh>
 8004464:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a91      	ldr	r2, [pc, #580]	; (80046b4 <HAL_ADC_ConfigChannel+0x64c>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d109      	bne.n	8004486 <HAL_ADC_ConfigChannel+0x41e>
 8004472:	4890      	ldr	r0, [pc, #576]	; (80046b4 <HAL_ADC_ConfigChannel+0x64c>)
 8004474:	f7fe feda 	bl	800322c <LL_ADC_IsEnabled>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	bf0c      	ite	eq
 800447e:	2301      	moveq	r3, #1
 8004480:	2300      	movne	r3, #0
 8004482:	b2db      	uxtb	r3, r3
 8004484:	e008      	b.n	8004498 <HAL_ADC_ConfigChannel+0x430>
 8004486:	488e      	ldr	r0, [pc, #568]	; (80046c0 <HAL_ADC_ConfigChannel+0x658>)
 8004488:	f7fe fed0 	bl	800322c <LL_ADC_IsEnabled>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	bf0c      	ite	eq
 8004492:	2301      	moveq	r3, #1
 8004494:	2300      	movne	r3, #0
 8004496:	b2db      	uxtb	r3, r3
 8004498:	2b00      	cmp	r3, #0
 800449a:	f000 8088 	beq.w	80045ae <HAL_ADC_ConfigChannel+0x546>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a88      	ldr	r2, [pc, #544]	; (80046c4 <HAL_ADC_ConfigChannel+0x65c>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d132      	bne.n	800450e <HAL_ADC_ConfigChannel+0x4a6>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80044a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d12c      	bne.n	800450e <HAL_ADC_ConfigChannel+0x4a6>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a7e      	ldr	r2, [pc, #504]	; (80046b4 <HAL_ADC_ConfigChannel+0x64c>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d005      	beq.n	80044ca <HAL_ADC_ConfigChannel+0x462>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a7f      	ldr	r2, [pc, #508]	; (80046c0 <HAL_ADC_ConfigChannel+0x658>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	f040 832c 	bne.w	8004b22 <HAL_ADC_ConfigChannel+0xaba>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a79      	ldr	r2, [pc, #484]	; (80046b4 <HAL_ADC_ConfigChannel+0x64c>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d101      	bne.n	80044d8 <HAL_ADC_ConfigChannel+0x470>
 80044d4:	4a78      	ldr	r2, [pc, #480]	; (80046b8 <HAL_ADC_ConfigChannel+0x650>)
 80044d6:	e000      	b.n	80044da <HAL_ADC_ConfigChannel+0x472>
 80044d8:	4a78      	ldr	r2, [pc, #480]	; (80046bc <HAL_ADC_ConfigChannel+0x654>)
 80044da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80044e2:	4619      	mov	r1, r3
 80044e4:	4610      	mov	r0, r2
 80044e6:	f7fe fbec 	bl	8002cc2 <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80044ea:	4b77      	ldr	r3, [pc, #476]	; (80046c8 <HAL_ADC_ConfigChannel+0x660>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	099b      	lsrs	r3, r3, #6
 80044f0:	4a76      	ldr	r2, [pc, #472]	; (80046cc <HAL_ADC_ConfigChannel+0x664>)
 80044f2:	fba2 2303 	umull	r2, r3, r2, r3
 80044f6:	099b      	lsrs	r3, r3, #6
 80044f8:	3301      	adds	r3, #1
 80044fa:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 80044fc:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 80044fe:	e002      	b.n	8004506 <HAL_ADC_ConfigChannel+0x49e>
                {
                  wait_loop_index--;
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	3b01      	subs	r3, #1
 8004504:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1f9      	bne.n	8004500 <HAL_ADC_ConfigChannel+0x498>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800450c:	e309      	b.n	8004b22 <HAL_ADC_ConfigChannel+0xaba>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a6f      	ldr	r2, [pc, #444]	; (80046d0 <HAL_ADC_ConfigChannel+0x668>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d121      	bne.n	800455c <HAL_ADC_ConfigChannel+0x4f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004518:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800451c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8004520:	2b00      	cmp	r3, #0
 8004522:	d11b      	bne.n	800455c <HAL_ADC_ConfigChannel+0x4f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a62      	ldr	r2, [pc, #392]	; (80046b4 <HAL_ADC_ConfigChannel+0x64c>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d005      	beq.n	800453a <HAL_ADC_ConfigChannel+0x4d2>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a63      	ldr	r2, [pc, #396]	; (80046c0 <HAL_ADC_ConfigChannel+0x658>)
 8004534:	4293      	cmp	r3, r2
 8004536:	f040 82f6 	bne.w	8004b26 <HAL_ADC_ConfigChannel+0xabe>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a5d      	ldr	r2, [pc, #372]	; (80046b4 <HAL_ADC_ConfigChannel+0x64c>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d101      	bne.n	8004548 <HAL_ADC_ConfigChannel+0x4e0>
 8004544:	4a5c      	ldr	r2, [pc, #368]	; (80046b8 <HAL_ADC_ConfigChannel+0x650>)
 8004546:	e000      	b.n	800454a <HAL_ADC_ConfigChannel+0x4e2>
 8004548:	4a5c      	ldr	r2, [pc, #368]	; (80046bc <HAL_ADC_ConfigChannel+0x654>)
 800454a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800454e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004552:	4619      	mov	r1, r3
 8004554:	4610      	mov	r0, r2
 8004556:	f7fe fbb4 	bl	8002cc2 <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800455a:	e2e4      	b.n	8004b26 <HAL_ADC_ConfigChannel+0xabe>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a5c      	ldr	r2, [pc, #368]	; (80046d4 <HAL_ADC_ConfigChannel+0x66c>)
 8004562:	4293      	cmp	r3, r2
 8004564:	f040 82e0 	bne.w	8004b28 <HAL_ADC_ConfigChannel+0xac0>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004568:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800456c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004570:	2b00      	cmp	r3, #0
 8004572:	f040 82d9 	bne.w	8004b28 <HAL_ADC_ConfigChannel+0xac0>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a4e      	ldr	r2, [pc, #312]	; (80046b4 <HAL_ADC_ConfigChannel+0x64c>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d005      	beq.n	800458c <HAL_ADC_ConfigChannel+0x524>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a4e      	ldr	r2, [pc, #312]	; (80046c0 <HAL_ADC_ConfigChannel+0x658>)
 8004586:	4293      	cmp	r3, r2
 8004588:	f040 82ce 	bne.w	8004b28 <HAL_ADC_ConfigChannel+0xac0>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a48      	ldr	r2, [pc, #288]	; (80046b4 <HAL_ADC_ConfigChannel+0x64c>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d101      	bne.n	800459a <HAL_ADC_ConfigChannel+0x532>
 8004596:	4a48      	ldr	r2, [pc, #288]	; (80046b8 <HAL_ADC_ConfigChannel+0x650>)
 8004598:	e000      	b.n	800459c <HAL_ADC_ConfigChannel+0x534>
 800459a:	4a48      	ldr	r2, [pc, #288]	; (80046bc <HAL_ADC_ConfigChannel+0x654>)
 800459c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80045a4:	4619      	mov	r1, r3
 80045a6:	4610      	mov	r0, r2
 80045a8:	f7fe fb8b 	bl	8002cc2 <LL_ADC_SetCommonPathInternalCh>
 80045ac:	e2bc      	b.n	8004b28 <HAL_ADC_ConfigChannel+0xac0>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045b2:	f043 0220 	orr.w	r2, r3, #32
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	679a      	str	r2, [r3, #120]	; 0x78

            tmp_hal_status = HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80045c0:	e2b2      	b.n	8004b28 <HAL_ADC_ConfigChannel+0xac0>
      }
    }
    else
    {
      /* Remap Internal Channels for Cut1 vs Cut2 (or 4M) */
      tmp_channel = pConfig->Channel;
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
#if !defined (ADC2)
      if (HAL_GetREVID() == REV_ID_A) /* STM32U5 silicon Rev.A */
 80045ca:	f7fe fb59 	bl	8002c80 <HAL_GetREVID>
 80045ce:	4603      	mov	r3, r0
 80045d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045d4:	d130      	bne.n	8004638 <HAL_ADC_ConfigChannel+0x5d0>
      {
        if (pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a3f      	ldr	r2, [pc, #252]	; (80046d8 <HAL_ADC_ConfigChannel+0x670>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d103      	bne.n	80045e8 <HAL_ADC_ConfigChannel+0x580>
        {
          tmp_channel = (LL_ADC_CHANNEL_22 | ADC_CHANNEL_ID_INTERNAL_CH);
 80045e0:	4b3e      	ldr	r3, [pc, #248]	; (80046dc <HAL_ADC_ConfigChannel+0x674>)
 80045e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80045e6:	e027      	b.n	8004638 <HAL_ADC_ConfigChannel+0x5d0>
        }
        else if (pConfig->Channel == ADC4_CHANNEL_VBAT)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a3c      	ldr	r2, [pc, #240]	; (80046e0 <HAL_ADC_ConfigChannel+0x678>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d103      	bne.n	80045fa <HAL_ADC_ConfigChannel+0x592>
        {
          tmp_channel = (LL_ADC_CHANNEL_23 | ADC_CHANNEL_ID_INTERNAL_CH);
 80045f2:	4b3c      	ldr	r3, [pc, #240]	; (80046e4 <HAL_ADC_ConfigChannel+0x67c>)
 80045f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80045f8:	e01e      	b.n	8004638 <HAL_ADC_ConfigChannel+0x5d0>
        }
        else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a3a      	ldr	r2, [pc, #232]	; (80046e8 <HAL_ADC_ConfigChannel+0x680>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d103      	bne.n	800460c <HAL_ADC_ConfigChannel+0x5a4>
        {
          tmp_channel = (LL_ADC_CHANNEL_VREFINT | LL_ADC_CHANNEL_DIFFERENCIATION_VREFINT_VCORE);
 8004604:	4b39      	ldr	r3, [pc, #228]	; (80046ec <HAL_ADC_ConfigChannel+0x684>)
 8004606:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800460a:	e015      	b.n	8004638 <HAL_ADC_ConfigChannel+0x5d0>
        }
        else if (pConfig->Channel == ADC_CHANNEL_DAC1CH1_ADC4)
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a37      	ldr	r2, [pc, #220]	; (80046f0 <HAL_ADC_ConfigChannel+0x688>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d103      	bne.n	800461e <HAL_ADC_ConfigChannel+0x5b6>
        {
          tmp_channel = (LL_ADC_CHANNEL_20 | ADC_CHANNEL_ID_INTERNAL_CH);
 8004616:	4b37      	ldr	r3, [pc, #220]	; (80046f4 <HAL_ADC_ConfigChannel+0x68c>)
 8004618:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800461c:	e00c      	b.n	8004638 <HAL_ADC_ConfigChannel+0x5d0>
        }
        else if (pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a35      	ldr	r2, [pc, #212]	; (80046f8 <HAL_ADC_ConfigChannel+0x690>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d103      	bne.n	8004630 <HAL_ADC_ConfigChannel+0x5c8>
        {
          tmp_channel = (LL_ADC_CHANNEL_21 | ADC_CHANNEL_ID_INTERNAL_CH);
 8004628:	4b31      	ldr	r3, [pc, #196]	; (80046f0 <HAL_ADC_ConfigChannel+0x688>)
 800462a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800462e:	e003      	b.n	8004638 <HAL_ADC_ConfigChannel+0x5d0>
        }
        else
        {
          tmp_channel = pConfig->Channel;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	2b02      	cmp	r3, #2
 800463e:	f000 81a3 	beq.w	8004988 <HAL_ADC_ConfigChannel+0x920>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800464a:	d004      	beq.n	8004656 <HAL_ADC_ConfigChannel+0x5ee>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004650:	4a2a      	ldr	r2, [pc, #168]	; (80046fc <HAL_ADC_ConfigChannel+0x694>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d107      	bne.n	8004666 <HAL_ADC_ConfigChannel+0x5fe>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800465e:	4618      	mov	r0, r3
 8004660:	f7fe fc5c 	bl	8002f1c <LL_ADC_REG_SetSequencerChAdd>
 8004664:	e0c2      	b.n	80047ec <HAL_ADC_ConfigChannel+0x784>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f003 031f 	and.w	r3, r3, #31
 8004674:	210f      	movs	r1, #15
 8004676:	fa01 f303 	lsl.w	r3, r1, r3
 800467a:	43db      	mvns	r3, r3
 800467c:	401a      	ands	r2, r3
 800467e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004682:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d105      	bne.n	8004696 <HAL_ADC_ConfigChannel+0x62e>
 800468a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800468e:	0e9b      	lsrs	r3, r3, #26
 8004690:	f003 031f 	and.w	r3, r3, #31
 8004694:	e038      	b.n	8004708 <HAL_ADC_ConfigChannel+0x6a0>
 8004696:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800469a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800469c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469e:	fa93 f3a3 	rbit	r3, r3
 80046a2:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80046a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80046a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d128      	bne.n	8004700 <HAL_ADC_ConfigChannel+0x698>
    return 32U;
 80046ae:	2320      	movs	r3, #32
 80046b0:	e02a      	b.n	8004708 <HAL_ADC_ConfigChannel+0x6a0>
 80046b2:	bf00      	nop
 80046b4:	42028000 	.word	0x42028000
 80046b8:	42028308 	.word	0x42028308
 80046bc:	46021308 	.word	0x46021308
 80046c0:	46021000 	.word	0x46021000
 80046c4:	ce080000 	.word	0xce080000
 80046c8:	2000010c 	.word	0x2000010c
 80046cc:	053e2d63 	.word	0x053e2d63
 80046d0:	ca040000 	.word	0xca040000
 80046d4:	80000001 	.word	0x80000001
 80046d8:	b6002000 	.word	0xb6002000
 80046dc:	da400000 	.word	0xda400000
 80046e0:	ba004000 	.word	0xba004000
 80046e4:	de800000 	.word	0xde800000
 80046e8:	b2001000 	.word	0xb2001000
 80046ec:	81000001 	.word	0x81000001
 80046f0:	d6200000 	.word	0xd6200000
 80046f4:	d2100000 	.word	0xd2100000
 80046f8:	d7200000 	.word	0xd7200000
 80046fc:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8004700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004702:	fab3 f383 	clz	r3, r3
 8004706:	b2db      	uxtb	r3, r3
 8004708:	6839      	ldr	r1, [r7, #0]
 800470a:	6849      	ldr	r1, [r1, #4]
 800470c:	f001 011f 	and.w	r1, r1, #31
 8004710:	408b      	lsls	r3, r1
 8004712:	431a      	orrs	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	089b      	lsrs	r3, r3, #2
 8004720:	1c5a      	adds	r2, r3, #1
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004726:	429a      	cmp	r2, r3
 8004728:	d860      	bhi.n	80047ec <HAL_ADC_ConfigChannel+0x784>
          {
#if !defined (ADC2)
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 800472a:	f7fe faa9 	bl	8002c80 <HAL_GetREVID>
 800472e:	4603      	mov	r3, r0
 8004730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004734:	d851      	bhi.n	80047da <HAL_ADC_ConfigChannel+0x772>
            {
              if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) >= 20UL)
 8004736:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800473a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10a      	bne.n	8004758 <HAL_ADC_ConfigChannel+0x6f0>
 8004742:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004746:	0e9b      	lsrs	r3, r3, #26
 8004748:	f003 031f 	and.w	r3, r3, #31
 800474c:	2b13      	cmp	r3, #19
 800474e:	bf8c      	ite	hi
 8004750:	2301      	movhi	r3, #1
 8004752:	2300      	movls	r3, #0
 8004754:	b2db      	uxtb	r3, r3
 8004756:	e016      	b.n	8004786 <HAL_ADC_ConfigChannel+0x71e>
 8004758:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800475c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	fa93 f3a3 	rbit	r3, r3
 8004764:	61bb      	str	r3, [r7, #24]
  return result;
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800476a:	6a3b      	ldr	r3, [r7, #32]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d101      	bne.n	8004774 <HAL_ADC_ConfigChannel+0x70c>
    return 32U;
 8004770:	2320      	movs	r3, #32
 8004772:	e003      	b.n	800477c <HAL_ADC_ConfigChannel+0x714>
  return __builtin_clz(value);
 8004774:	6a3b      	ldr	r3, [r7, #32]
 8004776:	fab3 f383 	clz	r3, r3
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2b13      	cmp	r3, #19
 800477e:	bf8c      	ite	hi
 8004780:	2301      	movhi	r3, #1
 8004782:	2300      	movls	r3, #0
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b00      	cmp	r3, #0
 8004788:	d027      	beq.n	80047da <HAL_ADC_ConfigChannel+0x772>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
 800478a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800478e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d109      	bne.n	80047aa <HAL_ADC_ConfigChannel+0x742>
 8004796:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800479a:	0e9b      	lsrs	r3, r3, #26
 800479c:	f003 031f 	and.w	r3, r3, #31
 80047a0:	3b09      	subs	r3, #9
 80047a2:	2201      	movs	r2, #1
 80047a4:	fa02 f303 	lsl.w	r3, r2, r3
 80047a8:	e015      	b.n	80047d6 <HAL_ADC_ConfigChannel+0x76e>
 80047aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	fa93 f3a3 	rbit	r3, r3
 80047b6:	60fb      	str	r3, [r7, #12]
  return result;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d101      	bne.n	80047c6 <HAL_ADC_ConfigChannel+0x75e>
    return 32U;
 80047c2:	2320      	movs	r3, #32
 80047c4:	e003      	b.n	80047ce <HAL_ADC_ConfigChannel+0x766>
  return __builtin_clz(value);
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	fab3 f383 	clz	r3, r3
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	3b09      	subs	r3, #9
 80047d0:	2201      	movs	r2, #1
 80047d2:	fa02 f303 	lsl.w	r3, r2, r3
 80047d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6818      	ldr	r0, [r3, #0]
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80047e6:	4619      	mov	r1, r3
 80047e8:	f7fe fb38 	bl	8002e5c <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6818      	ldr	r0, [r3, #0]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	461a      	mov	r2, r3
 80047f6:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80047fa:	f7fe fbfb 	bl	8002ff4 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	f280 8190 	bge.w	8004b28 <HAL_ADC_ConfigChannel+0xac0>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a97      	ldr	r2, [pc, #604]	; (8004a6c <HAL_ADC_ConfigChannel+0xa04>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d101      	bne.n	8004816 <HAL_ADC_ConfigChannel+0x7ae>
 8004812:	4b97      	ldr	r3, [pc, #604]	; (8004a70 <HAL_ADC_ConfigChannel+0xa08>)
 8004814:	e000      	b.n	8004818 <HAL_ADC_ConfigChannel+0x7b0>
 8004816:	4b97      	ldr	r3, [pc, #604]	; (8004a74 <HAL_ADC_ConfigChannel+0xa0c>)
 8004818:	4618      	mov	r0, r3
 800481a:	f7fe fa65 	bl	8002ce8 <LL_ADC_GetCommonPathInternalCh>
 800481e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a94      	ldr	r2, [pc, #592]	; (8004a78 <HAL_ADC_ConfigChannel+0xa10>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d126      	bne.n	800487a <HAL_ADC_ConfigChannel+0x812>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800482c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004830:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d120      	bne.n	800487a <HAL_ADC_ConfigChannel+0x812>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a8b      	ldr	r2, [pc, #556]	; (8004a6c <HAL_ADC_ConfigChannel+0xa04>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d101      	bne.n	8004846 <HAL_ADC_ConfigChannel+0x7de>
 8004842:	4a8b      	ldr	r2, [pc, #556]	; (8004a70 <HAL_ADC_ConfigChannel+0xa08>)
 8004844:	e000      	b.n	8004848 <HAL_ADC_ConfigChannel+0x7e0>
 8004846:	4a8b      	ldr	r2, [pc, #556]	; (8004a74 <HAL_ADC_ConfigChannel+0xa0c>)
 8004848:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800484c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004850:	4619      	mov	r1, r3
 8004852:	4610      	mov	r0, r2
 8004854:	f7fe fa35 	bl	8002cc2 <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004858:	4b88      	ldr	r3, [pc, #544]	; (8004a7c <HAL_ADC_ConfigChannel+0xa14>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	099b      	lsrs	r3, r3, #6
 800485e:	4a88      	ldr	r2, [pc, #544]	; (8004a80 <HAL_ADC_ConfigChannel+0xa18>)
 8004860:	fba2 2303 	umull	r2, r3, r2, r3
 8004864:	099b      	lsrs	r3, r3, #6
 8004866:	005b      	lsls	r3, r3, #1
 8004868:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 800486a:	e002      	b.n	8004872 <HAL_ADC_ConfigChannel+0x80a>
            {
              wait_loop_index--;
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	3b01      	subs	r3, #1
 8004870:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1f9      	bne.n	800486c <HAL_ADC_ConfigChannel+0x804>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8004878:	e067      	b.n	800494a <HAL_ADC_ConfigChannel+0x8e2>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a81      	ldr	r2, [pc, #516]	; (8004a84 <HAL_ADC_ConfigChannel+0xa1c>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d116      	bne.n	80048b2 <HAL_ADC_ConfigChannel+0x84a>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004884:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004888:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 800488c:	2b00      	cmp	r3, #0
 800488e:	d110      	bne.n	80048b2 <HAL_ADC_ConfigChannel+0x84a>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a75      	ldr	r2, [pc, #468]	; (8004a6c <HAL_ADC_ConfigChannel+0xa04>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d101      	bne.n	800489e <HAL_ADC_ConfigChannel+0x836>
 800489a:	4a75      	ldr	r2, [pc, #468]	; (8004a70 <HAL_ADC_ConfigChannel+0xa08>)
 800489c:	e000      	b.n	80048a0 <HAL_ADC_ConfigChannel+0x838>
 800489e:	4a75      	ldr	r2, [pc, #468]	; (8004a74 <HAL_ADC_ConfigChannel+0xa0c>)
 80048a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80048a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048a8:	4619      	mov	r1, r3
 80048aa:	4610      	mov	r0, r2
 80048ac:	f7fe fa09 	bl	8002cc2 <LL_ADC_SetCommonPathInternalCh>
 80048b0:	e04b      	b.n	800494a <HAL_ADC_ConfigChannel+0x8e2>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a74      	ldr	r2, [pc, #464]	; (8004a88 <HAL_ADC_ConfigChannel+0xa20>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d116      	bne.n	80048ea <HAL_ADC_ConfigChannel+0x882>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80048bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80048c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d110      	bne.n	80048ea <HAL_ADC_ConfigChannel+0x882>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a67      	ldr	r2, [pc, #412]	; (8004a6c <HAL_ADC_ConfigChannel+0xa04>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d101      	bne.n	80048d6 <HAL_ADC_ConfigChannel+0x86e>
 80048d2:	4a67      	ldr	r2, [pc, #412]	; (8004a70 <HAL_ADC_ConfigChannel+0xa08>)
 80048d4:	e000      	b.n	80048d8 <HAL_ADC_ConfigChannel+0x870>
 80048d6:	4a67      	ldr	r2, [pc, #412]	; (8004a74 <HAL_ADC_ConfigChannel+0xa0c>)
 80048d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80048dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80048e0:	4619      	mov	r1, r3
 80048e2:	4610      	mov	r0, r2
 80048e4:	f7fe f9ed 	bl	8002cc2 <LL_ADC_SetCommonPathInternalCh>
 80048e8:	e02f      	b.n	800494a <HAL_ADC_ConfigChannel+0x8e2>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a67      	ldr	r2, [pc, #412]	; (8004a8c <HAL_ADC_ConfigChannel+0xa24>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d12a      	bne.n	800494a <HAL_ADC_ConfigChannel+0x8e2>
                   && ((tmp_config_internal_channel  & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80048f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80048f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d124      	bne.n	800494a <HAL_ADC_ConfigChannel+0x8e2>
          {
#if !defined (ADC2)
            if (ADC_VCORE_INSTANCE(hadc))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a62      	ldr	r2, [pc, #392]	; (8004a90 <HAL_ADC_ConfigChannel+0xa28>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d11f      	bne.n	800494a <HAL_ADC_ConfigChannel+0x8e2>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a57      	ldr	r2, [pc, #348]	; (8004a6c <HAL_ADC_ConfigChannel+0xa04>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d101      	bne.n	8004918 <HAL_ADC_ConfigChannel+0x8b0>
 8004914:	4a56      	ldr	r2, [pc, #344]	; (8004a70 <HAL_ADC_ConfigChannel+0xa08>)
 8004916:	e000      	b.n	800491a <HAL_ADC_ConfigChannel+0x8b2>
 8004918:	4a56      	ldr	r2, [pc, #344]	; (8004a74 <HAL_ADC_ConfigChannel+0xa0c>)
 800491a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800491e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004922:	4619      	mov	r1, r3
 8004924:	4610      	mov	r0, r2
 8004926:	f7fe f9cc 	bl	8002cc2 <LL_ADC_SetCommonPathInternalCh>
                                             LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
              if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 800492a:	f7fe f9a9 	bl	8002c80 <HAL_GetREVID>
 800492e:	4603      	mov	r3, r0
 8004930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004934:	d809      	bhi.n	800494a <HAL_ADC_ConfigChannel+0x8e2>
              {
                SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f042 0201 	orr.w	r2, r2, #1
 8004946:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            /* nothing to do */
          }
          /* If STM32U5 silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 800494a:	f7fe f999 	bl	8002c80 <HAL_GetREVID>
 800494e:	4603      	mov	r3, r0
 8004950:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004954:	f040 80e8 	bne.w	8004b28 <HAL_ADC_ConfigChannel+0xac0>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a4d      	ldr	r2, [pc, #308]	; (8004a94 <HAL_ADC_ConfigChannel+0xa2c>)
 800495e:	4293      	cmp	r3, r2
 8004960:	f040 80e2 	bne.w	8004b28 <HAL_ADC_ConfigChannel+0xac0>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004964:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004968:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800496c:	2b00      	cmp	r3, #0
 800496e:	f040 80db 	bne.w	8004b28 <HAL_ADC_ConfigChannel+0xac0>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f042 0201 	orr.w	r2, r2, #1
 8004982:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8004986:	e0cf      	b.n	8004b28 <HAL_ADC_ConfigChannel+0xac0>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004990:	d004      	beq.n	800499c <HAL_ADC_ConfigChannel+0x934>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004996:	4a40      	ldr	r2, [pc, #256]	; (8004a98 <HAL_ADC_ConfigChannel+0xa30>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d106      	bne.n	80049aa <HAL_ADC_ConfigChannel+0x942>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7fe faec 	bl	8002f82 <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f280 80ba 	bge.w	8004b28 <HAL_ADC_ConfigChannel+0xac0>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a2c      	ldr	r2, [pc, #176]	; (8004a6c <HAL_ADC_ConfigChannel+0xa04>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d101      	bne.n	80049c2 <HAL_ADC_ConfigChannel+0x95a>
 80049be:	4b2c      	ldr	r3, [pc, #176]	; (8004a70 <HAL_ADC_ConfigChannel+0xa08>)
 80049c0:	e000      	b.n	80049c4 <HAL_ADC_ConfigChannel+0x95c>
 80049c2:	4b2c      	ldr	r3, [pc, #176]	; (8004a74 <HAL_ADC_ConfigChannel+0xa0c>)
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7fe f98f 	bl	8002ce8 <LL_ADC_GetCommonPathInternalCh>
 80049ca:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a32      	ldr	r2, [pc, #200]	; (8004a9c <HAL_ADC_ConfigChannel+0xa34>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d110      	bne.n	80049fa <HAL_ADC_ConfigChannel+0x992>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a23      	ldr	r2, [pc, #140]	; (8004a6c <HAL_ADC_ConfigChannel+0xa04>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d101      	bne.n	80049e6 <HAL_ADC_ConfigChannel+0x97e>
 80049e2:	4a23      	ldr	r2, [pc, #140]	; (8004a70 <HAL_ADC_ConfigChannel+0xa08>)
 80049e4:	e000      	b.n	80049e8 <HAL_ADC_ConfigChannel+0x980>
 80049e6:	4a23      	ldr	r2, [pc, #140]	; (8004a74 <HAL_ADC_ConfigChannel+0xa0c>)
 80049e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049ec:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80049f0:	4619      	mov	r1, r3
 80049f2:	4610      	mov	r0, r2
 80049f4:	f7fe f965 	bl	8002cc2 <LL_ADC_SetCommonPathInternalCh>
 80049f8:	e06d      	b.n	8004ad6 <HAL_ADC_ConfigChannel+0xa6e>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a28      	ldr	r2, [pc, #160]	; (8004aa0 <HAL_ADC_ConfigChannel+0xa38>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d110      	bne.n	8004a26 <HAL_ADC_ConfigChannel+0x9be>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a18      	ldr	r2, [pc, #96]	; (8004a6c <HAL_ADC_ConfigChannel+0xa04>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d101      	bne.n	8004a12 <HAL_ADC_ConfigChannel+0x9aa>
 8004a0e:	4a18      	ldr	r2, [pc, #96]	; (8004a70 <HAL_ADC_ConfigChannel+0xa08>)
 8004a10:	e000      	b.n	8004a14 <HAL_ADC_ConfigChannel+0x9ac>
 8004a12:	4a18      	ldr	r2, [pc, #96]	; (8004a74 <HAL_ADC_ConfigChannel+0xa0c>)
 8004a14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	4610      	mov	r0, r2
 8004a20:	f7fe f94f 	bl	8002cc2 <LL_ADC_SetCommonPathInternalCh>
 8004a24:	e057      	b.n	8004ad6 <HAL_ADC_ConfigChannel+0xa6e>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a17      	ldr	r2, [pc, #92]	; (8004a88 <HAL_ADC_ConfigChannel+0xa20>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d110      	bne.n	8004a52 <HAL_ADC_ConfigChannel+0x9ea>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a0d      	ldr	r2, [pc, #52]	; (8004a6c <HAL_ADC_ConfigChannel+0xa04>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d101      	bne.n	8004a3e <HAL_ADC_ConfigChannel+0x9d6>
 8004a3a:	4a0d      	ldr	r2, [pc, #52]	; (8004a70 <HAL_ADC_ConfigChannel+0xa08>)
 8004a3c:	e000      	b.n	8004a40 <HAL_ADC_ConfigChannel+0x9d8>
 8004a3e:	4a0d      	ldr	r2, [pc, #52]	; (8004a74 <HAL_ADC_ConfigChannel+0xa0c>)
 8004a40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a44:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004a48:	4619      	mov	r1, r3
 8004a4a:	4610      	mov	r0, r2
 8004a4c:	f7fe f939 	bl	8002cc2 <LL_ADC_SetCommonPathInternalCh>
 8004a50:	e041      	b.n	8004ad6 <HAL_ADC_ConfigChannel+0xa6e>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a0d      	ldr	r2, [pc, #52]	; (8004a8c <HAL_ADC_ConfigChannel+0xa24>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d13c      	bne.n	8004ad6 <HAL_ADC_ConfigChannel+0xa6e>
          {
#if !defined (ADC2)
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a02      	ldr	r2, [pc, #8]	; (8004a6c <HAL_ADC_ConfigChannel+0xa04>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d11e      	bne.n	8004aa4 <HAL_ADC_ConfigChannel+0xa3c>
 8004a66:	4a02      	ldr	r2, [pc, #8]	; (8004a70 <HAL_ADC_ConfigChannel+0xa08>)
 8004a68:	e01d      	b.n	8004aa6 <HAL_ADC_ConfigChannel+0xa3e>
 8004a6a:	bf00      	nop
 8004a6c:	42028000 	.word	0x42028000
 8004a70:	42028308 	.word	0x42028308
 8004a74:	46021308 	.word	0x46021308
 8004a78:	b6002000 	.word	0xb6002000
 8004a7c:	2000010c 	.word	0x2000010c
 8004a80:	053e2d63 	.word	0x053e2d63
 8004a84:	ba004000 	.word	0xba004000
 8004a88:	80000001 	.word	0x80000001
 8004a8c:	b2001000 	.word	0xb2001000
 8004a90:	46021000 	.word	0x46021000
 8004a94:	d7200000 	.word	0xd7200000
 8004a98:	80000010 	.word	0x80000010
 8004a9c:	ce080000 	.word	0xce080000
 8004aa0:	ca040000 	.word	0xca040000
 8004aa4:	4a25      	ldr	r2, [pc, #148]	; (8004b3c <HAL_ADC_ConfigChannel+0xad4>)
 8004aa6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004aaa:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004aae:	4619      	mov	r1, r3
 8004ab0:	4610      	mov	r0, r2
 8004ab2:	f7fe f906 	bl	8002cc2 <LL_ADC_SetCommonPathInternalCh>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8004ab6:	f7fe f8e3 	bl	8002c80 <HAL_GetREVID>
 8004aba:	4603      	mov	r3, r0
 8004abc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ac0:	d809      	bhi.n	8004ad6 <HAL_ADC_ConfigChannel+0xa6e>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f042 0201 	orr.w	r2, r2, #1
 8004ad2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            /* nothing to do */
          }
          /* If STM32U5 2M silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 8004ad6:	f7fe f8d3 	bl	8002c80 <HAL_GetREVID>
 8004ada:	4603      	mov	r3, r0
 8004adc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ae0:	d122      	bne.n	8004b28 <HAL_ADC_ConfigChannel+0xac0>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a16      	ldr	r2, [pc, #88]	; (8004b40 <HAL_ADC_ConfigChannel+0xad8>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d11d      	bne.n	8004b28 <HAL_ADC_ConfigChannel+0xac0>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004aec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004af0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d117      	bne.n	8004b28 <HAL_ADC_ConfigChannel+0xac0>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f042 0201 	orr.w	r2, r2, #1
 8004b08:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8004b0c:	e00c      	b.n	8004b28 <HAL_ADC_ConfigChannel+0xac0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b12:	f043 0220 	orr.w	r2, r3, #32
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	679a      	str	r2, [r3, #120]	; 0x78
    tmp_hal_status = HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8004b20:	e002      	b.n	8004b28 <HAL_ADC_ConfigChannel+0xac0>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b22:	bf00      	nop
 8004b24:	e000      	b.n	8004b28 <HAL_ADC_ConfigChannel+0xac0>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b26:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return tmp_hal_status;
 8004b30:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3790      	adds	r7, #144	; 0x90
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	46021308 	.word	0x46021308
 8004b40:	d7200000 	.word	0xd7200000

08004b44 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b088      	sub	sp, #32
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t conversion_timeout_cpu_cycles = 0UL;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7fe fbb4 	bl	80032c8 <LL_ADC_REG_IsConversionOngoing>
 8004b60:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7fe fbd5 	bl	8003316 <LL_ADC_INJ_IsConversionOngoing>
 8004b6c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL) || (tmp_adc_is_conversion_on_going_injected != 0UL))
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d103      	bne.n	8004b7c <ADC_ConversionStop+0x38>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	f000 8099 	beq.w	8004cae <ADC_ConversionStop+0x16a>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR1 & ADC_CFGR1_JAUTO) != 0UL)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d02b      	beq.n	8004be2 <ADC_ConversionStop+0x9e>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d126      	bne.n	8004be2 <ADC_ConversionStop+0x9e>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	7f1b      	ldrb	r3, [r3, #28]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d122      	bne.n	8004be2 <ADC_ConversionStop+0x9e>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004ba0:	e014      	b.n	8004bcc <ADC_ConversionStop+0x88>
      {
        if (conversion_timeout_cpu_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	4a44      	ldr	r2, [pc, #272]	; (8004cb8 <ADC_ConversionStop+0x174>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d90d      	bls.n	8004bc6 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bae:	f043 0210 	orr.w	r2, r3, #16
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bba:	f043 0201 	orr.w	r2, r3, #1
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e074      	b.n	8004cb0 <ADC_ConversionStop+0x16c>
        }
        conversion_timeout_cpu_cycles++;
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	3301      	adds	r3, #1
 8004bca:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd6:	2b40      	cmp	r3, #64	; 0x40
 8004bd8:	d1e3      	bne.n	8004ba2 <ADC_ConversionStop+0x5e>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2240      	movs	r2, #64	; 0x40
 8004be0:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d014      	beq.n	8004c12 <ADC_ConversionStop+0xce>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7fe fb6b 	bl	80032c8 <LL_ADC_REG_IsConversionOngoing>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00c      	beq.n	8004c12 <ADC_ConversionStop+0xce>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7fe fb28 	bl	8003252 <LL_ADC_IsDisableOngoing>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d104      	bne.n	8004c12 <ADC_ConversionStop+0xce>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7fe fb47 	bl	80032a0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d014      	beq.n	8004c42 <ADC_ConversionStop+0xfe>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7fe fb7a 	bl	8003316 <LL_ADC_INJ_IsConversionOngoing>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00c      	beq.n	8004c42 <ADC_ConversionStop+0xfe>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7fe fb10 	bl	8003252 <LL_ADC_IsDisableOngoing>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d104      	bne.n	8004c42 <ADC_ConversionStop+0xfe>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7fe fb56 	bl	80032ee <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d005      	beq.n	8004c54 <ADC_ConversionStop+0x110>
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	2b03      	cmp	r3, #3
 8004c4c:	d105      	bne.n	8004c5a <ADC_ConversionStop+0x116>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_adc_cr_adstart_jadstart = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004c4e:	230c      	movs	r3, #12
 8004c50:	617b      	str	r3, [r7, #20]
        break;
 8004c52:	e005      	b.n	8004c60 <ADC_ConversionStop+0x11c>
      case ADC_INJECTED_GROUP:
        tmp_adc_cr_adstart_jadstart = ADC_CR_JADSTART;
 8004c54:	2308      	movs	r3, #8
 8004c56:	617b      	str	r3, [r7, #20]
        break;
 8004c58:	e002      	b.n	8004c60 <ADC_ConversionStop+0x11c>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_adc_cr_adstart_jadstart = ADC_CR_ADSTART;
 8004c5a:	2304      	movs	r3, #4
 8004c5c:	617b      	str	r3, [r7, #20]
        break;
 8004c5e:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004c60:	f7fd ffde 	bl	8002c20 <HAL_GetTick>
 8004c64:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_adc_cr_adstart_jadstart) != 0UL)
 8004c66:	e01b      	b.n	8004ca0 <ADC_ConversionStop+0x15c>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004c68:	f7fd ffda 	bl	8002c20 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b05      	cmp	r3, #5
 8004c74:	d914      	bls.n	8004ca0 <ADC_ConversionStop+0x15c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_adc_cr_adstart_jadstart) != 0UL)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	689a      	ldr	r2, [r3, #8]
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	4013      	ands	r3, r2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00d      	beq.n	8004ca0 <ADC_ConversionStop+0x15c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c88:	f043 0210 	orr.w	r2, r3, #16
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c94:	f043 0201 	orr.w	r2, r3, #1
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e007      	b.n	8004cb0 <ADC_ConversionStop+0x16c>
    while ((hadc->Instance->CR & tmp_adc_cr_adstart_jadstart) != 0UL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	689a      	ldr	r2, [r3, #8]
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	4013      	ands	r3, r2
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1dc      	bne.n	8004c68 <ADC_ConversionStop+0x124>
        }
      }
    }
  }

  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3720      	adds	r7, #32
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	000cdbff 	.word	0x000cdbff

08004cbc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f7fe faaf 	bl	800322c <LL_ADC_IsEnabled>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d156      	bne.n	8004d82 <ADC_Enable+0xc6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	689a      	ldr	r2, [r3, #8]
 8004cda:	4b2c      	ldr	r3, [pc, #176]	; (8004d8c <ADC_Enable+0xd0>)
 8004cdc:	4013      	ands	r3, r2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00d      	beq.n	8004cfe <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ce6:	f043 0210 	orr.w	r2, r3, #16
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	679a      	str	r2, [r3, #120]	; 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cf2:	f043 0201 	orr.w	r2, r3, #1
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e042      	b.n	8004d84 <ADC_Enable+0xc8>
    }

    LL_ADC_Enable(hadc->Instance);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7fe fa6a 	bl	80031dc <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a1b      	ldr	r3, [r3, #32]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d004      	beq.n	8004d1a <ADC_Enable+0x5e>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a1e      	ldr	r2, [pc, #120]	; (8004d90 <ADC_Enable+0xd4>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d033      	beq.n	8004d82 <ADC_Enable+0xc6>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004d1a:	f7fd ff81 	bl	8002c20 <HAL_GetTick>
 8004d1e:	60f8      	str	r0, [r7, #12]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004d20:	e028      	b.n	8004d74 <ADC_Enable+0xb8>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7fe fa80 	bl	800322c <LL_ADC_IsEnabled>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d104      	bne.n	8004d3c <ADC_Enable+0x80>
          {
            LL_ADC_Enable(hadc->Instance);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7fe fa50 	bl	80031dc <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004d3c:	f7fd ff70 	bl	8002c20 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d914      	bls.n	8004d74 <ADC_Enable+0xb8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d00d      	beq.n	8004d74 <ADC_Enable+0xb8>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d5c:	f043 0210 	orr.w	r2, r3, #16
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	679a      	str	r2, [r3, #120]	; 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d68:	f043 0201 	orr.w	r2, r3, #1
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	67da      	str	r2, [r3, #124]	; 0x7c

              return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e007      	b.n	8004d84 <ADC_Enable+0xc8>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d1cf      	bne.n	8004d22 <ADC_Enable+0x66>
        }
      }
    }
  }

  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3710      	adds	r7, #16
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	8000003f 	.word	0x8000003f
 8004d90:	46021000 	.word	0x46021000

08004d94 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7fe fa56 	bl	8003252 <LL_ADC_IsDisableOngoing>
 8004da6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7fe fa3d 	bl	800322c <LL_ADC_IsEnabled>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d047      	beq.n	8004e48 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d144      	bne.n	8004e48 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f003 030d 	and.w	r3, r3, #13
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d10c      	bne.n	8004de6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f7fe fa17 	bl	8003204 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2203      	movs	r2, #3
 8004ddc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004dde:	f7fd ff1f 	bl	8002c20 <HAL_GetTick>
 8004de2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004de4:	e029      	b.n	8004e3a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dea:	f043 0210 	orr.w	r2, r3, #16
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	679a      	str	r2, [r3, #120]	; 0x78
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004df6:	f043 0201 	orr.w	r2, r3, #1
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	67da      	str	r2, [r3, #124]	; 0x7c
      return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e023      	b.n	8004e4a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004e02:	f7fd ff0d 	bl	8002c20 <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d914      	bls.n	8004e3a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00d      	beq.n	8004e3a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e22:	f043 0210 	orr.w	r2, r3, #16
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e2e:	f043 0201 	orr.w	r2, r3, #1
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e007      	b.n	8004e4a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1dc      	bne.n	8004e02 <ADC_Disable+0x6e>
        }
      }
    }
  }

  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
	...

08004e54 <LL_ADC_StartCalibration>:
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a0f      	ldr	r2, [pc, #60]	; (8004ea0 <LL_ADC_StartCalibration+0x4c>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d00c      	beq.n	8004e80 <LL_ADC_StartCalibration+0x2c>
    MODIFY_REG(ADCx->CR,
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	689a      	ldr	r2, [r3, #8]
 8004e6a:	4b0e      	ldr	r3, [pc, #56]	; (8004ea4 <LL_ADC_StartCalibration+0x50>)
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	683a      	ldr	r2, [r7, #0]
 8004e70:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8004e74:	4313      	orrs	r3, r2
 8004e76:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	609a      	str	r2, [r3, #8]
}
 8004e7e:	e009      	b.n	8004e94 <LL_ADC_StartCalibration+0x40>
    MODIFY_REG(ADCx->CR,  ADC_CR_BITS_PROPERTY_RS,    ADC_CR_ADCAL);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004e8c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	609a      	str	r2, [r3, #8]
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr
 8004ea0:	46021000 	.word	0x46021000
 8004ea4:	7ffeffc0 	.word	0x7ffeffc0

08004ea8 <LL_ADC_IsCalibrationOnGoing>:
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004eb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ebc:	d101      	bne.n	8004ec2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e000      	b.n	8004ec4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b086      	sub	sp, #24
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004edc:	2300      	movs	r3, #0
 8004ede:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  __HAL_LOCK(hadc);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d101      	bne.n	8004eee <HAL_ADCEx_Calibration_Start+0x1e>
 8004eea:	2302      	movs	r3, #2
 8004eec:	e04d      	b.n	8004f8a <HAL_ADCEx_Calibration_Start+0xba>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f7ff ff4c 	bl	8004d94 <ADC_Disable>
 8004efc:	4603      	mov	r3, r0
 8004efe:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004f00:	7dfb      	ldrb	r3, [r7, #23]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d136      	bne.n	8004f74 <HAL_ADCEx_Calibration_Start+0xa4>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY, HAL_ADC_STATE_BUSY_INTERNAL);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f0a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004f0e:	f023 0302 	bic.w	r3, r3, #2
 8004f12:	f043 0202 	orr.w	r2, r3, #2
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	679a      	str	r2, [r3, #120]	; 0x78

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68b9      	ldr	r1, [r7, #8]
 8004f20:	4618      	mov	r0, r3
 8004f22:	f7ff ff97 	bl	8004e54 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004f26:	e014      	b.n	8004f52 <HAL_ADCEx_Calibration_Start+0x82>
    {
      wait_loop_index++;
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	4a18      	ldr	r2, [pc, #96]	; (8004f94 <HAL_ADCEx_Calibration_Start+0xc4>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d90d      	bls.n	8004f52 <HAL_ADCEx_Calibration_Start+0x82>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f3a:	f023 0312 	bic.w	r3, r3, #18
 8004f3e:	f043 0210 	orr.w	r2, r3, #16
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(hadc);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e01b      	b.n	8004f8a <HAL_ADCEx_Calibration_Start+0xba>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7ff ffa6 	bl	8004ea8 <LL_ADC_IsCalibrationOnGoing>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1e2      	bne.n	8004f28 <HAL_ADCEx_Calibration_Start+0x58>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f66:	f023 0303 	bic.w	r3, r3, #3
 8004f6a:	f043 0201 	orr.w	r2, r3, #1
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	679a      	str	r2, [r3, #120]	; 0x78
 8004f72:	e005      	b.n	8004f80 <HAL_ADCEx_Calibration_Start+0xb0>
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f78:	f043 0210 	orr.w	r2, r3, #16
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return tmp_hal_status;
 8004f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3718      	adds	r7, #24
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	555a95ff 	.word	0x555a95ff

08004f98 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004fdc:	bf00      	nop
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f003 0307 	and.w	r3, r3, #7
 8004ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ff8:	4b0c      	ldr	r3, [pc, #48]	; (800502c <__NVIC_SetPriorityGrouping+0x44>)
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005004:	4013      	ands	r3, r2
 8005006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005010:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800501a:	4a04      	ldr	r2, [pc, #16]	; (800502c <__NVIC_SetPriorityGrouping+0x44>)
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	60d3      	str	r3, [r2, #12]
}
 8005020:	bf00      	nop
 8005022:	3714      	adds	r7, #20
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr
 800502c:	e000ed00 	.word	0xe000ed00

08005030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005030:	b480      	push	{r7}
 8005032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005034:	4b04      	ldr	r3, [pc, #16]	; (8005048 <__NVIC_GetPriorityGrouping+0x18>)
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	0a1b      	lsrs	r3, r3, #8
 800503a:	f003 0307 	and.w	r3, r3, #7
}
 800503e:	4618      	mov	r0, r3
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr
 8005048:	e000ed00 	.word	0xe000ed00

0800504c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	4603      	mov	r3, r0
 8005054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800505a:	2b00      	cmp	r3, #0
 800505c:	db0b      	blt.n	8005076 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800505e:	79fb      	ldrb	r3, [r7, #7]
 8005060:	f003 021f 	and.w	r2, r3, #31
 8005064:	4907      	ldr	r1, [pc, #28]	; (8005084 <__NVIC_EnableIRQ+0x38>)
 8005066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800506a:	095b      	lsrs	r3, r3, #5
 800506c:	2001      	movs	r0, #1
 800506e:	fa00 f202 	lsl.w	r2, r0, r2
 8005072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005076:	bf00      	nop
 8005078:	370c      	adds	r7, #12
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	e000e100 	.word	0xe000e100

08005088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	4603      	mov	r3, r0
 8005090:	6039      	str	r1, [r7, #0]
 8005092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005098:	2b00      	cmp	r3, #0
 800509a:	db0a      	blt.n	80050b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	b2da      	uxtb	r2, r3
 80050a0:	490c      	ldr	r1, [pc, #48]	; (80050d4 <__NVIC_SetPriority+0x4c>)
 80050a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050a6:	0112      	lsls	r2, r2, #4
 80050a8:	b2d2      	uxtb	r2, r2
 80050aa:	440b      	add	r3, r1
 80050ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050b0:	e00a      	b.n	80050c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	b2da      	uxtb	r2, r3
 80050b6:	4908      	ldr	r1, [pc, #32]	; (80050d8 <__NVIC_SetPriority+0x50>)
 80050b8:	79fb      	ldrb	r3, [r7, #7]
 80050ba:	f003 030f 	and.w	r3, r3, #15
 80050be:	3b04      	subs	r3, #4
 80050c0:	0112      	lsls	r2, r2, #4
 80050c2:	b2d2      	uxtb	r2, r2
 80050c4:	440b      	add	r3, r1
 80050c6:	761a      	strb	r2, [r3, #24]
}
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr
 80050d4:	e000e100 	.word	0xe000e100
 80050d8:	e000ed00 	.word	0xe000ed00

080050dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050dc:	b480      	push	{r7}
 80050de:	b089      	sub	sp, #36	; 0x24
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f003 0307 	and.w	r3, r3, #7
 80050ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	f1c3 0307 	rsb	r3, r3, #7
 80050f6:	2b04      	cmp	r3, #4
 80050f8:	bf28      	it	cs
 80050fa:	2304      	movcs	r3, #4
 80050fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	3304      	adds	r3, #4
 8005102:	2b06      	cmp	r3, #6
 8005104:	d902      	bls.n	800510c <NVIC_EncodePriority+0x30>
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	3b03      	subs	r3, #3
 800510a:	e000      	b.n	800510e <NVIC_EncodePriority+0x32>
 800510c:	2300      	movs	r3, #0
 800510e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005110:	f04f 32ff 	mov.w	r2, #4294967295
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	fa02 f303 	lsl.w	r3, r2, r3
 800511a:	43da      	mvns	r2, r3
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	401a      	ands	r2, r3
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005124:	f04f 31ff 	mov.w	r1, #4294967295
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	fa01 f303 	lsl.w	r3, r1, r3
 800512e:	43d9      	mvns	r1, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005134:	4313      	orrs	r3, r2
         );
}
 8005136:	4618      	mov	r0, r3
 8005138:	3724      	adds	r7, #36	; 0x24
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
	...

08005144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	3b01      	subs	r3, #1
 8005150:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005154:	d301      	bcc.n	800515a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005156:	2301      	movs	r3, #1
 8005158:	e00f      	b.n	800517a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800515a:	4a0a      	ldr	r2, [pc, #40]	; (8005184 <SysTick_Config+0x40>)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	3b01      	subs	r3, #1
 8005160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005162:	210f      	movs	r1, #15
 8005164:	f04f 30ff 	mov.w	r0, #4294967295
 8005168:	f7ff ff8e 	bl	8005088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800516c:	4b05      	ldr	r3, [pc, #20]	; (8005184 <SysTick_Config+0x40>)
 800516e:	2200      	movs	r2, #0
 8005170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005172:	4b04      	ldr	r3, [pc, #16]	; (8005184 <SysTick_Config+0x40>)
 8005174:	2207      	movs	r2, #7
 8005176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3708      	adds	r7, #8
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	e000e010 	.word	0xe000e010

08005188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f7ff ff29 	bl	8004fe8 <__NVIC_SetPriorityGrouping>
}
 8005196:	bf00      	nop
 8005198:	3708      	adds	r7, #8
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800519e:	b580      	push	{r7, lr}
 80051a0:	b086      	sub	sp, #24
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	4603      	mov	r3, r0
 80051a6:	60b9      	str	r1, [r7, #8]
 80051a8:	607a      	str	r2, [r7, #4]
 80051aa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80051ac:	f7ff ff40 	bl	8005030 <__NVIC_GetPriorityGrouping>
 80051b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	68b9      	ldr	r1, [r7, #8]
 80051b6:	6978      	ldr	r0, [r7, #20]
 80051b8:	f7ff ff90 	bl	80050dc <NVIC_EncodePriority>
 80051bc:	4602      	mov	r2, r0
 80051be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051c2:	4611      	mov	r1, r2
 80051c4:	4618      	mov	r0, r3
 80051c6:	f7ff ff5f 	bl	8005088 <__NVIC_SetPriority>
}
 80051ca:	bf00      	nop
 80051cc:	3718      	adds	r7, #24
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b082      	sub	sp, #8
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	4603      	mov	r3, r0
 80051da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80051dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7ff ff33 	bl	800504c <__NVIC_EnableIRQ>
}
 80051e6:	bf00      	nop
 80051e8:	3708      	adds	r7, #8
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}

080051ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b082      	sub	sp, #8
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f7ff ffa4 	bl	8005144 <SysTick_Config>
 80051fc:	4603      	mov	r3, r0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3708      	adds	r7, #8
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b084      	sub	sp, #16
 800520a:	af00      	add	r7, sp, #0
 800520c:	60f8      	str	r0, [r7, #12]
 800520e:	60b9      	str	r1, [r7, #8]
 8005210:	607a      	str	r2, [r7, #4]
 8005212:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e04f      	b.n	80052be <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005224:	2b01      	cmp	r3, #1
 8005226:	d101      	bne.n	800522c <HAL_DMA_Start_IT+0x26>
 8005228:	2302      	movs	r3, #2
 800522a:	e048      	b.n	80052be <HAL_DMA_Start_IT+0xb8>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800523a:	b2db      	uxtb	r3, r3
 800523c:	2b01      	cmp	r3, #1
 800523e:	d136      	bne.n	80052ae <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2202      	movs	r2, #2
 8005244:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	68b9      	ldr	r1, [r7, #8]
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f000 fa8b 	bl	8005770 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	695a      	ldr	r2, [r3, #20]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 8005268:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800526e:	2b00      	cmp	r3, #0
 8005270:	d007      	beq.n	8005282 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	695a      	ldr	r2, [r3, #20]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005280:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005286:	2b00      	cmp	r3, #0
 8005288:	d007      	beq.n	800529a <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	695a      	ldr	r2, [r3, #20]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005298:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	695a      	ldr	r2, [r3, #20]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f042 0201 	orr.w	r2, r2, #1
 80052a8:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80052aa:	2300      	movs	r3, #0
 80052ac:	e007      	b.n	80052be <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2240      	movs	r2, #64	; 0x40
 80052b2:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b084      	sub	sp, #16
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 80052ce:	f7fd fca7 	bl	8002c20 <HAL_GetTick>
 80052d2:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d101      	bne.n	80052de <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e06b      	b.n	80053b6 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d008      	beq.n	80052fc <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2220      	movs	r2, #32
 80052ee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e05c      	b.n	80053b6 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	695a      	ldr	r2, [r3, #20]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f042 0204 	orr.w	r2, r2, #4
 800530a:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2205      	movs	r2, #5
 8005310:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8005314:	e020      	b.n	8005358 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8005316:	f7fd fc83 	bl	8002c20 <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	2b05      	cmp	r3, #5
 8005322:	d919      	bls.n	8005358 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005328:	f043 0210 	orr.w	r2, r3, #16
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2203      	movs	r2, #3
 8005334:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800533c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005340:	2b00      	cmp	r3, #0
 8005342:	d003      	beq.n	800534c <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005348:	2201      	movs	r2, #1
 800534a:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e02e      	b.n	80053b6 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d0d7      	beq.n	8005316 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	695a      	ldr	r2, [r3, #20]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f042 0202 	orr.w	r2, r2, #2
 8005374:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2204      	movs	r2, #4
 800537a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8005386:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005398:	2b00      	cmp	r3, #0
 800539a:	d007      	beq.n	80053ac <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053a0:	2201      	movs	r2, #1
 80053a2:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2200      	movs	r2, #0
 80053aa:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3710      	adds	r7, #16
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}

080053be <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80053be:	b480      	push	{r7}
 80053c0:	b083      	sub	sp, #12
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d101      	bne.n	80053d0 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e019      	b.n	8005404 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d004      	beq.n	80053e6 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2220      	movs	r2, #32
 80053e0:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e00e      	b.n	8005404 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2204      	movs	r2, #4
 80053ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	695b      	ldr	r3, [r3, #20]
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	6812      	ldr	r2, [r2, #0]
 80053f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80053fc:	f043 0304 	orr.w	r3, r3, #4
 8005400:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005420:	f023 030f 	bic.w	r3, r3, #15
 8005424:	60fb      	str	r3, [r7, #12]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800542e:	3b50      	subs	r3, #80	; 0x50
 8005430:	09db      	lsrs	r3, r3, #7
 8005432:	f003 031f 	and.w	r3, r3, #31
 8005436:	2201      	movs	r2, #1
 8005438:	fa02 f303 	lsl.w	r3, r2, r3
 800543c:	60bb      	str	r3, [r7, #8]

  /* Global Interrupt Flag management *********************************************************************************/
  if (IS_DMA_GLOBAL_ACTIVE_FLAG(p_dma_instance, global_it_flag) == 0U)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	68da      	ldr	r2, [r3, #12]
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	4013      	ands	r3, r2
 8005446:	2b00      	cmp	r3, #0
 8005448:	f000 8150 	beq.w	80056ec <HAL_DMA_IRQHandler+0x2dc>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005456:	2b00      	cmp	r3, #0
 8005458:	d011      	beq.n	800547e <HAL_DMA_IRQHandler+0x6e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00a      	beq.n	800547e <HAL_DMA_IRQHandler+0x6e>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005470:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005476:	f043 0201 	orr.w	r2, r3, #1
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005488:	2b00      	cmp	r3, #0
 800548a:	d011      	beq.n	80054b0 <HAL_DMA_IRQHandler+0xa0>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00a      	beq.n	80054b0 <HAL_DMA_IRQHandler+0xa0>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054a2:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a8:	f043 0202 	orr.w	r2, r3, #2
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d011      	beq.n	80054e2 <HAL_DMA_IRQHandler+0xd2>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	695b      	ldr	r3, [r3, #20]
 80054c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00a      	beq.n	80054e2 <HAL_DMA_IRQHandler+0xd2>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80054d4:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054da:	f043 0204 	orr.w	r2, r3, #4
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d011      	beq.n	8005514 <HAL_DMA_IRQHandler+0x104>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00a      	beq.n	8005514 <HAL_DMA_IRQHandler+0x104>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005506:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800550c:	f043 0208 	orr.w	r2, r3, #8
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800551e:	2b00      	cmp	r3, #0
 8005520:	d013      	beq.n	800554a <HAL_DMA_IRQHandler+0x13a>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00c      	beq.n	800554a <HAL_DMA_IRQHandler+0x13a>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005538:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800553e:	2b00      	cmp	r3, #0
 8005540:	d003      	beq.n	800554a <HAL_DMA_IRQHandler+0x13a>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d055      	beq.n	8005604 <HAL_DMA_IRQHandler+0x1f4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d04e      	beq.n	8005604 <HAL_DMA_IRQHandler+0x1f4>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800556e:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005576:	b2db      	uxtb	r3, r3
 8005578:	2b04      	cmp	r3, #4
 800557a:	d137      	bne.n	80055ec <HAL_DMA_IRQHandler+0x1dc>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	695a      	ldr	r2, [r3, #20]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800558a:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	695a      	ldr	r2, [r3, #20]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f042 0202 	orr.w	r2, r2, #2
 800559a:	615a      	str	r2, [r3, #20]

        if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d004      	beq.n	80055b4 <HAL_DMA_IRQHandler+0x1a4>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_ERROR;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2203      	movs	r2, #3
 80055ae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80055b2:	e003      	b.n	80055bc <HAL_DMA_IRQHandler+0x1ac>
        }
        else
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d003      	beq.n	80055d0 <HAL_DMA_IRQHandler+0x1c0>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055cc:	2201      	movs	r2, #1
 80055ce:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f000 8087 	beq.w	80056f0 <HAL_DMA_IRQHandler+0x2e0>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	4798      	blx	r3
        }

        return;
 80055ea:	e081      	b.n	80056f0 <HAL_DMA_IRQHandler+0x2e0>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2205      	movs	r2, #5
 80055f0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d003      	beq.n	8005604 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800560e:	2b00      	cmp	r3, #0
 8005610:	d039      	beq.n	8005686 <HAL_DMA_IRQHandler+0x276>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800561c:	2b00      	cmp	r3, #0
 800561e:	d032      	beq.n	8005686 <HAL_DMA_IRQHandler+0x276>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005628:	2b00      	cmp	r3, #0
 800562a:	d012      	beq.n	8005652 <HAL_DMA_IRQHandler+0x242>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005632:	2b00      	cmp	r3, #0
 8005634:	d116      	bne.n	8005664 <HAL_DMA_IRQHandler+0x254>
        {
          if (hdma->Instance->CBR1 == 0U)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800563c:	2b00      	cmp	r3, #0
 800563e:	d111      	bne.n	8005664 <HAL_DMA_IRQHandler+0x254>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800564c:	2201      	movs	r2, #1
 800564e:	731a      	strb	r2, [r3, #12]
 8005650:	e008      	b.n	8005664 <HAL_DMA_IRQHandler+0x254>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005658:	2b00      	cmp	r3, #0
 800565a:	d103      	bne.n	8005664 <HAL_DMA_IRQHandler+0x254>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f44f 7240 	mov.w	r2, #768	; 0x300
 800566c:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800567a:	2b00      	cmp	r3, #0
 800567c:	d003      	beq.n	8005686 <HAL_DMA_IRQHandler+0x276>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800568a:	2b00      	cmp	r3, #0
 800568c:	d031      	beq.n	80056f2 <HAL_DMA_IRQHandler+0x2e2>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	695a      	ldr	r2, [r3, #20]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f042 0202 	orr.w	r2, r2, #2
 800569c:	615a      	str	r2, [r3, #20]

    if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	695b      	ldr	r3, [r3, #20]
 80056a4:	f003 0301 	and.w	r3, r3, #1
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d004      	beq.n	80056b6 <HAL_DMA_IRQHandler+0x2a6>
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2203      	movs	r2, #3
 80056b0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80056b4:	e003      	b.n	80056be <HAL_DMA_IRQHandler+0x2ae>
    }
    else
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_READY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    }

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d003      	beq.n	80056d2 <HAL_DMA_IRQHandler+0x2c2>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056ce:	2201      	movs	r2, #1
 80056d0:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d007      	beq.n	80056f2 <HAL_DMA_IRQHandler+0x2e2>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	4798      	blx	r3
 80056ea:	e002      	b.n	80056f2 <HAL_DMA_IRQHandler+0x2e2>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 80056ec:	bf00      	nop
 80056ee:	e000      	b.n	80056f2 <HAL_DMA_IRQHandler+0x2e2>
        return;
 80056f0:	bf00      	nop
    }
  }
}
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d101      	bne.n	800570c <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e02b      	b.n	8005764 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005714:	f023 030f 	bic.w	r3, r3, #15
 8005718:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005722:	3b50      	subs	r3, #80	; 0x50
 8005724:	09db      	lsrs	r3, r3, #7
 8005726:	f003 031f 	and.w	r3, r3, #31
 800572a:	2201      	movs	r2, #1
 800572c:	fa02 f303 	lsl.w	r3, r2, r3
 8005730:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	f003 0310 	and.w	r3, r3, #16
 8005738:	2b00      	cmp	r3, #0
 800573a:	d012      	beq.n	8005762 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	f003 0311 	and.w	r3, r3, #17
 8005742:	2b11      	cmp	r3, #17
 8005744:	d106      	bne.n	8005754 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	685a      	ldr	r2, [r3, #4]
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	431a      	orrs	r2, r3
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	605a      	str	r2, [r3, #4]
 8005752:	e006      	b.n	8005762 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	685a      	ldr	r2, [r3, #4]
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	43db      	mvns	r3, r3
 800575c:	401a      	ands	r2, r3
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3714      	adds	r7, #20
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]
 800577c:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005784:	0c1b      	lsrs	r3, r3, #16
 8005786:	041b      	lsls	r3, r3, #16
 8005788:	683a      	ldr	r2, [r7, #0]
 800578a:	b291      	uxth	r1, r2
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	6812      	ldr	r2, [r2, #0]
 8005790:	430b      	orrs	r3, r1
 8005792:	6493      	str	r3, [r2, #72]	; 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 800579c:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	651a      	str	r2, [r3, #80]	; 0x50
}
 80057ae:	bf00      	nop
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
	...

080057bc <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80057c4:	f7fd fa2c 	bl	8002c20 <HAL_GetTick>
 80057c8:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d101      	bne.n	80057d4 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e0dc      	b.n	800598e <HAL_DMAEx_List_Init+0x1d2>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a6f      	ldr	r2, [pc, #444]	; (8005998 <HAL_DMAEx_List_Init+0x1dc>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	f000 809f 	beq.w	800591e <HAL_DMAEx_List_Init+0x162>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a6d      	ldr	r2, [pc, #436]	; (800599c <HAL_DMAEx_List_Init+0x1e0>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	f000 8099 	beq.w	800591e <HAL_DMAEx_List_Init+0x162>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a6b      	ldr	r2, [pc, #428]	; (80059a0 <HAL_DMAEx_List_Init+0x1e4>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	f000 8093 	beq.w	800591e <HAL_DMAEx_List_Init+0x162>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a69      	ldr	r2, [pc, #420]	; (80059a4 <HAL_DMAEx_List_Init+0x1e8>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	f000 808d 	beq.w	800591e <HAL_DMAEx_List_Init+0x162>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a67      	ldr	r2, [pc, #412]	; (80059a8 <HAL_DMAEx_List_Init+0x1ec>)
 800580a:	4293      	cmp	r3, r2
 800580c:	f000 8087 	beq.w	800591e <HAL_DMAEx_List_Init+0x162>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a65      	ldr	r2, [pc, #404]	; (80059ac <HAL_DMAEx_List_Init+0x1f0>)
 8005816:	4293      	cmp	r3, r2
 8005818:	f000 8081 	beq.w	800591e <HAL_DMAEx_List_Init+0x162>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a63      	ldr	r2, [pc, #396]	; (80059b0 <HAL_DMAEx_List_Init+0x1f4>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d07b      	beq.n	800591e <HAL_DMAEx_List_Init+0x162>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a62      	ldr	r2, [pc, #392]	; (80059b4 <HAL_DMAEx_List_Init+0x1f8>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d076      	beq.n	800591e <HAL_DMAEx_List_Init+0x162>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a60      	ldr	r2, [pc, #384]	; (80059b8 <HAL_DMAEx_List_Init+0x1fc>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d071      	beq.n	800591e <HAL_DMAEx_List_Init+0x162>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a5f      	ldr	r2, [pc, #380]	; (80059bc <HAL_DMAEx_List_Init+0x200>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d06c      	beq.n	800591e <HAL_DMAEx_List_Init+0x162>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a5d      	ldr	r2, [pc, #372]	; (80059c0 <HAL_DMAEx_List_Init+0x204>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d067      	beq.n	800591e <HAL_DMAEx_List_Init+0x162>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a5c      	ldr	r2, [pc, #368]	; (80059c4 <HAL_DMAEx_List_Init+0x208>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d062      	beq.n	800591e <HAL_DMAEx_List_Init+0x162>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a5a      	ldr	r2, [pc, #360]	; (80059c8 <HAL_DMAEx_List_Init+0x20c>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d05d      	beq.n	800591e <HAL_DMAEx_List_Init+0x162>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a59      	ldr	r2, [pc, #356]	; (80059cc <HAL_DMAEx_List_Init+0x210>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d058      	beq.n	800591e <HAL_DMAEx_List_Init+0x162>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a57      	ldr	r2, [pc, #348]	; (80059d0 <HAL_DMAEx_List_Init+0x214>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d053      	beq.n	800591e <HAL_DMAEx_List_Init+0x162>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a56      	ldr	r2, [pc, #344]	; (80059d4 <HAL_DMAEx_List_Init+0x218>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d04e      	beq.n	800591e <HAL_DMAEx_List_Init+0x162>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a54      	ldr	r2, [pc, #336]	; (80059d8 <HAL_DMAEx_List_Init+0x21c>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d049      	beq.n	800591e <HAL_DMAEx_List_Init+0x162>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a53      	ldr	r2, [pc, #332]	; (80059dc <HAL_DMAEx_List_Init+0x220>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d044      	beq.n	800591e <HAL_DMAEx_List_Init+0x162>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a51      	ldr	r2, [pc, #324]	; (80059e0 <HAL_DMAEx_List_Init+0x224>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d03f      	beq.n	800591e <HAL_DMAEx_List_Init+0x162>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a50      	ldr	r2, [pc, #320]	; (80059e4 <HAL_DMAEx_List_Init+0x228>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d03a      	beq.n	800591e <HAL_DMAEx_List_Init+0x162>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a4e      	ldr	r2, [pc, #312]	; (80059e8 <HAL_DMAEx_List_Init+0x22c>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d035      	beq.n	800591e <HAL_DMAEx_List_Init+0x162>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a4d      	ldr	r2, [pc, #308]	; (80059ec <HAL_DMAEx_List_Init+0x230>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d030      	beq.n	800591e <HAL_DMAEx_List_Init+0x162>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a4b      	ldr	r2, [pc, #300]	; (80059f0 <HAL_DMAEx_List_Init+0x234>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d02b      	beq.n	800591e <HAL_DMAEx_List_Init+0x162>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a4a      	ldr	r2, [pc, #296]	; (80059f4 <HAL_DMAEx_List_Init+0x238>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d026      	beq.n	800591e <HAL_DMAEx_List_Init+0x162>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a48      	ldr	r2, [pc, #288]	; (80059f8 <HAL_DMAEx_List_Init+0x23c>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d021      	beq.n	800591e <HAL_DMAEx_List_Init+0x162>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a47      	ldr	r2, [pc, #284]	; (80059fc <HAL_DMAEx_List_Init+0x240>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d01c      	beq.n	800591e <HAL_DMAEx_List_Init+0x162>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a45      	ldr	r2, [pc, #276]	; (8005a00 <HAL_DMAEx_List_Init+0x244>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d017      	beq.n	800591e <HAL_DMAEx_List_Init+0x162>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a44      	ldr	r2, [pc, #272]	; (8005a04 <HAL_DMAEx_List_Init+0x248>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d012      	beq.n	800591e <HAL_DMAEx_List_Init+0x162>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a42      	ldr	r2, [pc, #264]	; (8005a08 <HAL_DMAEx_List_Init+0x24c>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d00d      	beq.n	800591e <HAL_DMAEx_List_Init+0x162>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a41      	ldr	r2, [pc, #260]	; (8005a0c <HAL_DMAEx_List_Init+0x250>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d008      	beq.n	800591e <HAL_DMAEx_List_Init+0x162>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a3f      	ldr	r2, [pc, #252]	; (8005a10 <HAL_DMAEx_List_Init+0x254>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d003      	beq.n	800591e <HAL_DMAEx_List_Init+0x162>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a3e      	ldr	r2, [pc, #248]	; (8005a14 <HAL_DMAEx_List_Init+0x258>)
 800591c:	4293      	cmp	r3, r2
 800591e:	bf00      	nop
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2202      	movs	r2, #2
 800592c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	695a      	ldr	r2, [r3, #20]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f042 0206 	orr.w	r2, r2, #6
 800593e:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8005940:	e00f      	b.n	8005962 <HAL_DMAEx_List_Init+0x1a6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8005942:	f7fd f96d 	bl	8002c20 <HAL_GetTick>
 8005946:	4602      	mov	r2, r0
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	2b05      	cmp	r3, #5
 800594e:	d908      	bls.n	8005962 <HAL_DMAEx_List_Init+0x1a6>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2210      	movs	r2, #16
 8005954:	659a      	str	r2, [r3, #88]	; 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2203      	movs	r2, #3
 800595a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e015      	b.n	800598e <HAL_DMAEx_List_Init+0x1d2>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	695b      	ldr	r3, [r3, #20]
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1e8      	bne.n	8005942 <HAL_DMAEx_List_Init+0x186>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 fabb 	bl	8005eec <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	40020050 	.word	0x40020050
 800599c:	50020050 	.word	0x50020050
 80059a0:	400200d0 	.word	0x400200d0
 80059a4:	500200d0 	.word	0x500200d0
 80059a8:	40020150 	.word	0x40020150
 80059ac:	50020150 	.word	0x50020150
 80059b0:	400201d0 	.word	0x400201d0
 80059b4:	500201d0 	.word	0x500201d0
 80059b8:	40020250 	.word	0x40020250
 80059bc:	50020250 	.word	0x50020250
 80059c0:	400202d0 	.word	0x400202d0
 80059c4:	500202d0 	.word	0x500202d0
 80059c8:	40020350 	.word	0x40020350
 80059cc:	50020350 	.word	0x50020350
 80059d0:	400203d0 	.word	0x400203d0
 80059d4:	500203d0 	.word	0x500203d0
 80059d8:	40020450 	.word	0x40020450
 80059dc:	50020450 	.word	0x50020450
 80059e0:	400204d0 	.word	0x400204d0
 80059e4:	500204d0 	.word	0x500204d0
 80059e8:	40020550 	.word	0x40020550
 80059ec:	50020550 	.word	0x50020550
 80059f0:	400205d0 	.word	0x400205d0
 80059f4:	500205d0 	.word	0x500205d0
 80059f8:	40020650 	.word	0x40020650
 80059fc:	50020650 	.word	0x50020650
 8005a00:	400206d0 	.word	0x400206d0
 8005a04:	500206d0 	.word	0x500206d0
 8005a08:	40020750 	.word	0x40020750
 8005a0c:	50020750 	.word	0x50020750
 8005a10:	400207d0 	.word	0x400207d0
 8005a14:	500207d0 	.word	0x500207d0

08005a18 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b086      	sub	sp, #24
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <HAL_DMAEx_List_Start_IT+0x16>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d101      	bne.n	8005a32 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e082      	b.n	8005b38 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005a38:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	695b      	ldr	r3, [r3, #20]
 8005a40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a44:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8005a46:	7dfb      	ldrb	r3, [r7, #23]
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d005      	beq.n	8005a58 <HAL_DMAEx_List_Start_IT+0x40>
 8005a4c:	7dfb      	ldrb	r3, [r7, #23]
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d16a      	bne.n	8005b28 <HAL_DMAEx_List_Start_IT+0x110>
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d067      	beq.n	8005b28 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d157      	bne.n	8005b14 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d101      	bne.n	8005a72 <HAL_DMAEx_List_Start_IT+0x5a>
 8005a6e:	2302      	movs	r3, #2
 8005a70:	e062      	b.n	8005b38 <HAL_DMAEx_List_Start_IT+0x120>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2202      	movs	r2, #2
 8005a7e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a86:	2202      	movs	r2, #2
 8005a88:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	659a      	str	r2, [r3, #88]	; 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a94:	2200      	movs	r2, #0
 8005a96:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	695a      	ldr	r2, [r3, #20]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 8005aa6:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d007      	beq.n	8005ac0 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	695a      	ldr	r2, [r3, #20]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005abe:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d007      	beq.n	8005ad8 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	695a      	ldr	r2, [r3, #20]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ad6:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f107 010c 	add.w	r1, r7, #12
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f000 fd17 	bl	8006518 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4619      	mov	r1, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	0c0b      	lsrs	r3, r1, #16
 8005af8:	041b      	lsls	r3, r3, #16
 8005afa:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	461a      	mov	r2, r3
 8005b04:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8005b08:	4013      	ands	r3, r2
 8005b0a:	68f9      	ldr	r1, [r7, #12]
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	6812      	ldr	r2, [r2, #0]
 8005b10:	430b      	orrs	r3, r1
 8005b12:	67d3      	str	r3, [r2, #124]	; 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	695a      	ldr	r2, [r3, #20]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f042 0201 	orr.w	r2, r2, #1
 8005b22:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
 8005b26:	e007      	b.n	8005b38 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2240      	movs	r2, #64	; 0x40
 8005b2c:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3718      	adds	r7, #24
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <HAL_DMAEx_List_BuildNode>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b082      	sub	sp, #8
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d002      	beq.n	8005b56 <HAL_DMAEx_List_BuildNode+0x16>
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d101      	bne.n	8005b5a <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e004      	b.n	8005b64 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 8005b5a:	6839      	ldr	r1, [r7, #0]
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 fb1d 	bl	800619c <DMA_List_BuildNode>

  return HAL_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3708      	adds	r7, #8
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b08c      	sub	sp, #48	; 0x30
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d002      	beq.n	8005b84 <HAL_DMAEx_List_InsertNode+0x18>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d101      	bne.n	8005b88 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e0b6      	b.n	8005cf6 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	695b      	ldr	r3, [r3, #20]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d104      	bne.n	8005b9a <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2204      	movs	r2, #4
 8005b94:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e0ad      	b.n	8005cf6 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	68b9      	ldr	r1, [r7, #8]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f000 fc4c 	bl	8006440 <DMA_List_CheckNodesBaseAddresses>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d004      	beq.n	8005bb8 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2205      	movs	r2, #5
 8005bb2:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e09e      	b.n	8005cf6 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	68b9      	ldr	r1, [r7, #8]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f000 fc6d 	bl	80064a0 <DMA_List_CheckNodesTypes>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d004      	beq.n	8005bd6 <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2204      	movs	r2, #4
 8005bd0:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e08f      	b.n	8005cf6 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2202      	movs	r2, #2
 8005bda:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8005be2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005be6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005bea:	4619      	mov	r1, r3
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 fc93 	bl	8006518 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d11a      	bne.n	8005c30 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d106      	bne.n	8005c0e <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	609a      	str	r2, [r3, #8]
 8005c0c:	e06c      	b.n	8005ce8 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	68ba      	ldr	r2, [r7, #8]
 8005c12:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c20:	4319      	orrs	r1, r3
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2202      	movs	r2, #2
 8005c2c:	609a      	str	r2, [r3, #8]
 8005c2e:	e05b      	b.n	8005ce8 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d10f      	bne.n	8005c56 <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8005c40:	4013      	ands	r3, r2
 8005c42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c46:	4319      	orrs	r1, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	601a      	str	r2, [r3, #0]
 8005c54:	e043      	b.n	8005cde <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 8005c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c58:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 8005c5a:	f107 0314 	add.w	r3, r7, #20
 8005c5e:	461a      	mov	r2, r3
 8005c60:	68b9      	ldr	r1, [r7, #8]
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f000 fc88 	bl	8006578 <DMA_List_FindNode>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d132      	bne.n	8005cd4 <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 8005c6e:	69fa      	ldr	r2, [r7, #28]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d11a      	bne.n	8005cae <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00b      	beq.n	8005c98 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	461a      	mov	r2, r3
 8005c86:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c90:	4319      	orrs	r1, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ca2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ca4:	4319      	orrs	r1, r3
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005cac:	e017      	b.n	8005cde <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 8005cae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005cc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cca:	4319      	orrs	r1, r3
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005cd2:	e004      	b.n	8005cde <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2206      	movs	r2, #6
 8005cd8:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e00b      	b.n	8005cf6 <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	1c5a      	adds	r2, r3, #1
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3730      	adds	r7, #48	; 0x30
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b08a      	sub	sp, #40	; 0x28
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d101      	bne.n	8005d10 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e052      	b.n	8005db6 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d104      	bne.n	8005d22 <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2202      	movs	r2, #2
 8005d1c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e049      	b.n	8005db6 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00c      	beq.n	8005d44 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	685a      	ldr	r2, [r3, #4]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d101      	bne.n	8005d3a <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 8005d36:	2300      	movs	r3, #0
 8005d38:	e03d      	b.n	8005db6 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2204      	movs	r2, #4
 8005d3e:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e038      	b.n	8005db6 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	695b      	ldr	r3, [r3, #20]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d104      	bne.n	8005d56 <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2204      	movs	r2, #4
 8005d50:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e02f      	b.n	8005db6 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2202      	movs	r2, #2
 8005d5a:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f107 0220 	add.w	r2, r7, #32
 8005d6a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f000 fbd2 	bl	8006518 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8005d74:	6a3b      	ldr	r3, [r7, #32]
 8005d76:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8005d78:	f107 030c 	add.w	r3, r7, #12
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	2100      	movs	r1, #0
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 fbf9 	bl	8006578 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8005d90:	4013      	ands	r3, r2
 8005d92:	6a79      	ldr	r1, [r7, #36]	; 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8005d94:	69ba      	ldr	r2, [r7, #24]
 8005d96:	4610      	mov	r0, r2
 8005d98:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8005d9a:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8005d9c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3728      	adds	r7, #40	; 0x28
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
	...

08005dc0 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d002      	beq.n	8005dd6 <HAL_DMAEx_List_LinkQ+0x16>
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d101      	bne.n	8005dda <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e072      	b.n	8005ec0 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005de0:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d002      	beq.n	8005df4 <HAL_DMAEx_List_LinkQ+0x34>
 8005dee:	7bfb      	ldrb	r3, [r7, #15]
 8005df0:	2b05      	cmp	r3, #5
 8005df2:	d108      	bne.n	8005e06 <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2240      	movs	r2, #64	; 0x40
 8005df8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e05c      	b.n	8005ec0 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	7b1b      	ldrb	r3, [r3, #12]
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d104      	bne.n	8005e1a <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	2201      	movs	r2, #1
 8005e14:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e052      	b.n	8005ec0 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a2b      	ldr	r2, [pc, #172]	; (8005ecc <HAL_DMAEx_List_LinkQ+0x10c>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d022      	beq.n	8005e6a <HAL_DMAEx_List_LinkQ+0xaa>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a29      	ldr	r2, [pc, #164]	; (8005ed0 <HAL_DMAEx_List_LinkQ+0x110>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d01d      	beq.n	8005e6a <HAL_DMAEx_List_LinkQ+0xaa>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a28      	ldr	r2, [pc, #160]	; (8005ed4 <HAL_DMAEx_List_LinkQ+0x114>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d018      	beq.n	8005e6a <HAL_DMAEx_List_LinkQ+0xaa>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a26      	ldr	r2, [pc, #152]	; (8005ed8 <HAL_DMAEx_List_LinkQ+0x118>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d013      	beq.n	8005e6a <HAL_DMAEx_List_LinkQ+0xaa>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a25      	ldr	r2, [pc, #148]	; (8005edc <HAL_DMAEx_List_LinkQ+0x11c>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d00e      	beq.n	8005e6a <HAL_DMAEx_List_LinkQ+0xaa>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a23      	ldr	r2, [pc, #140]	; (8005ee0 <HAL_DMAEx_List_LinkQ+0x120>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d009      	beq.n	8005e6a <HAL_DMAEx_List_LinkQ+0xaa>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a22      	ldr	r2, [pc, #136]	; (8005ee4 <HAL_DMAEx_List_LinkQ+0x124>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d004      	beq.n	8005e6a <HAL_DMAEx_List_LinkQ+0xaa>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a20      	ldr	r2, [pc, #128]	; (8005ee8 <HAL_DMAEx_List_LinkQ+0x128>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d101      	bne.n	8005e6e <HAL_DMAEx_List_LinkQ+0xae>
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e000      	b.n	8005e70 <HAL_DMAEx_List_LinkQ+0xb0>
 8005e6e:	2300      	movs	r3, #0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d10b      	bne.n	8005e8c <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	6a1b      	ldr	r3, [r3, #32]
 8005e7a:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d004      	beq.n	8005e8c <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	2203      	movs	r2, #3
 8005e86:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e019      	b.n	8005ec0 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e90:	2b81      	cmp	r3, #129	; 0x81
 8005e92:	d108      	bne.n	8005ea6 <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d10d      	bne.n	8005eb8 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	2204      	movs	r2, #4
 8005ea0:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e00c      	b.n	8005ec0 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d004      	beq.n	8005eb8 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	2204      	movs	r2, #4
 8005eb2:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e003      	b.n	8005ec0 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	683a      	ldr	r2, [r7, #0]
 8005ebc:	675a      	str	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3714      	adds	r7, #20
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr
 8005ecc:	40020650 	.word	0x40020650
 8005ed0:	50020650 	.word	0x50020650
 8005ed4:	400206d0 	.word	0x400206d0
 8005ed8:	500206d0 	.word	0x500206d0
 8005edc:	40020750 	.word	0x40020750
 8005ee0:	50020750 	.word	0x50020750
 8005ee4:	400207d0 	.word	0x400207d0
 8005ee8:	500207d0 	.word	0x500207d0

08005eec <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005efc:	4313      	orrs	r3, r2
 8005efe:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a85      	ldr	r2, [pc, #532]	; (800611c <DMA_List_Init+0x230>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	f000 80a0 	beq.w	800604c <DMA_List_Init+0x160>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a83      	ldr	r2, [pc, #524]	; (8006120 <DMA_List_Init+0x234>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	f000 809a 	beq.w	800604c <DMA_List_Init+0x160>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a81      	ldr	r2, [pc, #516]	; (8006124 <DMA_List_Init+0x238>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	f000 8094 	beq.w	800604c <DMA_List_Init+0x160>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a7f      	ldr	r2, [pc, #508]	; (8006128 <DMA_List_Init+0x23c>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	f000 808e 	beq.w	800604c <DMA_List_Init+0x160>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a7d      	ldr	r2, [pc, #500]	; (800612c <DMA_List_Init+0x240>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	f000 8088 	beq.w	800604c <DMA_List_Init+0x160>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a7b      	ldr	r2, [pc, #492]	; (8006130 <DMA_List_Init+0x244>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	f000 8082 	beq.w	800604c <DMA_List_Init+0x160>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a79      	ldr	r2, [pc, #484]	; (8006134 <DMA_List_Init+0x248>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d07c      	beq.n	800604c <DMA_List_Init+0x160>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a78      	ldr	r2, [pc, #480]	; (8006138 <DMA_List_Init+0x24c>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d077      	beq.n	800604c <DMA_List_Init+0x160>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a76      	ldr	r2, [pc, #472]	; (800613c <DMA_List_Init+0x250>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d072      	beq.n	800604c <DMA_List_Init+0x160>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a75      	ldr	r2, [pc, #468]	; (8006140 <DMA_List_Init+0x254>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d06d      	beq.n	800604c <DMA_List_Init+0x160>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a73      	ldr	r2, [pc, #460]	; (8006144 <DMA_List_Init+0x258>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d068      	beq.n	800604c <DMA_List_Init+0x160>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a72      	ldr	r2, [pc, #456]	; (8006148 <DMA_List_Init+0x25c>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d063      	beq.n	800604c <DMA_List_Init+0x160>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a70      	ldr	r2, [pc, #448]	; (800614c <DMA_List_Init+0x260>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d05e      	beq.n	800604c <DMA_List_Init+0x160>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a6f      	ldr	r2, [pc, #444]	; (8006150 <DMA_List_Init+0x264>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d059      	beq.n	800604c <DMA_List_Init+0x160>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a6d      	ldr	r2, [pc, #436]	; (8006154 <DMA_List_Init+0x268>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d054      	beq.n	800604c <DMA_List_Init+0x160>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a6c      	ldr	r2, [pc, #432]	; (8006158 <DMA_List_Init+0x26c>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d04f      	beq.n	800604c <DMA_List_Init+0x160>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a6a      	ldr	r2, [pc, #424]	; (800615c <DMA_List_Init+0x270>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d04a      	beq.n	800604c <DMA_List_Init+0x160>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a69      	ldr	r2, [pc, #420]	; (8006160 <DMA_List_Init+0x274>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d045      	beq.n	800604c <DMA_List_Init+0x160>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a67      	ldr	r2, [pc, #412]	; (8006164 <DMA_List_Init+0x278>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d040      	beq.n	800604c <DMA_List_Init+0x160>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a66      	ldr	r2, [pc, #408]	; (8006168 <DMA_List_Init+0x27c>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d03b      	beq.n	800604c <DMA_List_Init+0x160>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a64      	ldr	r2, [pc, #400]	; (800616c <DMA_List_Init+0x280>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d036      	beq.n	800604c <DMA_List_Init+0x160>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a63      	ldr	r2, [pc, #396]	; (8006170 <DMA_List_Init+0x284>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d031      	beq.n	800604c <DMA_List_Init+0x160>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a61      	ldr	r2, [pc, #388]	; (8006174 <DMA_List_Init+0x288>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d02c      	beq.n	800604c <DMA_List_Init+0x160>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a60      	ldr	r2, [pc, #384]	; (8006178 <DMA_List_Init+0x28c>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d027      	beq.n	800604c <DMA_List_Init+0x160>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a5e      	ldr	r2, [pc, #376]	; (800617c <DMA_List_Init+0x290>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d022      	beq.n	800604c <DMA_List_Init+0x160>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a5d      	ldr	r2, [pc, #372]	; (8006180 <DMA_List_Init+0x294>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d01d      	beq.n	800604c <DMA_List_Init+0x160>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a5b      	ldr	r2, [pc, #364]	; (8006184 <DMA_List_Init+0x298>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d018      	beq.n	800604c <DMA_List_Init+0x160>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a5a      	ldr	r2, [pc, #360]	; (8006188 <DMA_List_Init+0x29c>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d013      	beq.n	800604c <DMA_List_Init+0x160>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a58      	ldr	r2, [pc, #352]	; (800618c <DMA_List_Init+0x2a0>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d00e      	beq.n	800604c <DMA_List_Init+0x160>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a57      	ldr	r2, [pc, #348]	; (8006190 <DMA_List_Init+0x2a4>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d009      	beq.n	800604c <DMA_List_Init+0x160>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a55      	ldr	r2, [pc, #340]	; (8006194 <DMA_List_Init+0x2a8>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d004      	beq.n	800604c <DMA_List_Init+0x160>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a54      	ldr	r2, [pc, #336]	; (8006198 <DMA_List_Init+0x2ac>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d101      	bne.n	8006050 <DMA_List_Init+0x164>
 800604c:	2301      	movs	r3, #1
 800604e:	e000      	b.n	8006052 <DMA_List_Init+0x166>
 8006050:	2300      	movs	r3, #0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d004      	beq.n	8006060 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	4313      	orrs	r3, r2
 800605e:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	f423 0143 	bic.w	r1, r3, #12779520	; 0xc30000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	430a      	orrs	r2, r1
 8006072:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2200      	movs	r2, #0
 800607a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006084:	645a      	str	r2, [r3, #68]	; 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2200      	movs	r2, #0
 800608c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2200      	movs	r2, #0
 8006094:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2200      	movs	r2, #0
 800609c:	651a      	str	r2, [r3, #80]	; 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a36      	ldr	r2, [pc, #216]	; (800617c <DMA_List_Init+0x290>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d022      	beq.n	80060ee <DMA_List_Init+0x202>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a34      	ldr	r2, [pc, #208]	; (8006180 <DMA_List_Init+0x294>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d01d      	beq.n	80060ee <DMA_List_Init+0x202>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a33      	ldr	r2, [pc, #204]	; (8006184 <DMA_List_Init+0x298>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d018      	beq.n	80060ee <DMA_List_Init+0x202>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a31      	ldr	r2, [pc, #196]	; (8006188 <DMA_List_Init+0x29c>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d013      	beq.n	80060ee <DMA_List_Init+0x202>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a30      	ldr	r2, [pc, #192]	; (800618c <DMA_List_Init+0x2a0>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d00e      	beq.n	80060ee <DMA_List_Init+0x202>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a2e      	ldr	r2, [pc, #184]	; (8006190 <DMA_List_Init+0x2a4>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d009      	beq.n	80060ee <DMA_List_Init+0x202>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a2d      	ldr	r2, [pc, #180]	; (8006194 <DMA_List_Init+0x2a8>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d004      	beq.n	80060ee <DMA_List_Init+0x202>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a2b      	ldr	r2, [pc, #172]	; (8006198 <DMA_List_Init+0x2ac>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d101      	bne.n	80060f2 <DMA_List_Init+0x206>
 80060ee:	2301      	movs	r3, #1
 80060f0:	e000      	b.n	80060f4 <DMA_List_Init+0x208>
 80060f2:	2300      	movs	r3, #0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d007      	beq.n	8006108 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2200      	movs	r2, #0
 80060fe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2200      	movs	r2, #0
 8006106:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2200      	movs	r2, #0
 800610e:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8006110:	bf00      	nop
 8006112:	3714      	adds	r7, #20
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr
 800611c:	40020050 	.word	0x40020050
 8006120:	50020050 	.word	0x50020050
 8006124:	400200d0 	.word	0x400200d0
 8006128:	500200d0 	.word	0x500200d0
 800612c:	40020150 	.word	0x40020150
 8006130:	50020150 	.word	0x50020150
 8006134:	400201d0 	.word	0x400201d0
 8006138:	500201d0 	.word	0x500201d0
 800613c:	40020250 	.word	0x40020250
 8006140:	50020250 	.word	0x50020250
 8006144:	400202d0 	.word	0x400202d0
 8006148:	500202d0 	.word	0x500202d0
 800614c:	40020350 	.word	0x40020350
 8006150:	50020350 	.word	0x50020350
 8006154:	400203d0 	.word	0x400203d0
 8006158:	500203d0 	.word	0x500203d0
 800615c:	40020450 	.word	0x40020450
 8006160:	50020450 	.word	0x50020450
 8006164:	400204d0 	.word	0x400204d0
 8006168:	500204d0 	.word	0x500204d0
 800616c:	40020550 	.word	0x40020550
 8006170:	50020550 	.word	0x50020550
 8006174:	400205d0 	.word	0x400205d0
 8006178:	500205d0 	.word	0x500205d0
 800617c:	40020650 	.word	0x40020650
 8006180:	50020650 	.word	0x50020650
 8006184:	400206d0 	.word	0x400206d0
 8006188:	500206d0 	.word	0x500206d0
 800618c:	40020750 	.word	0x40020750
 8006190:	50020750 	.word	0x50020750
 8006194:	400207d0 	.word	0x400207d0
 8006198:	500207d0 	.word	0x500207d0

0800619c <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 80061ae:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 80061b4:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 80061ba:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 80061c0:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 0320 	and.w	r3, r3, #32
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d017      	beq.n	8006202 <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061de:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e4:	3b01      	subs	r3, #1
 80061e6:	051b      	lsls	r3, r3, #20
 80061e8:	f003 737c 	and.w	r3, r3, #66060288	; 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 80061ec:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f2:	3b01      	subs	r3, #1
 80061f4:	011b      	lsls	r3, r3, #4
 80061f6:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 80061fa:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 80061fc:	431a      	orrs	r2, r3
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6b1a      	ldr	r2, [r3, #48]	; 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6859      	ldr	r1, [r3, #4]
 800620a:	f240 237f 	movw	r3, #639	; 0x27f
 800620e:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8006210:	431a      	orrs	r2, r3
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800621e:	d10c      	bne.n	800623a <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0320 	and.w	r3, r3, #32
 8006228:	2b00      	cmp	r3, #0
 800622a:	d011      	beq.n	8006250 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	605a      	str	r2, [r3, #4]
 8006238:	e00a      	b.n	8006250 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006242:	d105      	bne.n	8006250 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00f      	beq.n	8006278 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006264:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800626a:	041b      	lsls	r3, r3, #16
 800626c:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8006270:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8006272:	431a      	orrs	r2, r3
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800627c:	b29a      	uxth	r2, r3
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 0302 	and.w	r3, r3, #2
 800628a:	2b00      	cmp	r3, #0
 800628c:	d04e      	beq.n	800632c <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006296:	3b01      	subs	r3, #1
 8006298:	0419      	lsls	r1, r3, #16
 800629a:	4b67      	ldr	r3, [pc, #412]	; (8006438 <DMA_List_BuildNode+0x29c>)
 800629c:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 800629e:	431a      	orrs	r2, r3
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	da06      	bge.n	80062ba <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	609a      	str	r2, [r3, #8]
 80062b8:	e005      	b.n	80062c6 <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	da06      	bge.n	80062dc <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	609a      	str	r2, [r3, #8]
 80062da:	e005      	b.n	80062e8 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	da06      	bge.n	80062fe <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	609a      	str	r2, [r3, #8]
 80062fc:	e005      	b.n	800630a <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800630e:	2b00      	cmp	r3, #0
 8006310:	da06      	bge.n	8006320 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	609a      	str	r2, [r3, #8]
 800631e:	e005      	b.n	800632c <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */


  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0302 	and.w	r3, r3, #2
 8006344:	2b00      	cmp	r3, #0
 8006346:	d059      	beq.n	80063fc <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800634c:	2b00      	cmp	r3, #0
 800634e:	da09      	bge.n	8006364 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006354:	425b      	negs	r3, r3
 8006356:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f3c3 020c 	ubfx	r2, r3, #0, #13
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	615a      	str	r2, [r3, #20]
 8006362:	e005      	b.n	8006370 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006368:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006374:	2b00      	cmp	r3, #0
 8006376:	da0d      	bge.n	8006394 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800637c:	425b      	negs	r3, r3
 800637e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	695a      	ldr	r2, [r3, #20]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	0419      	lsls	r1, r3, #16
 8006388:	4b2c      	ldr	r3, [pc, #176]	; (800643c <DMA_List_BuildNode+0x2a0>)
 800638a:	400b      	ands	r3, r1
 800638c:	431a      	orrs	r2, r3
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	615a      	str	r2, [r3, #20]
 8006392:	e009      	b.n	80063a8 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800639c:	0419      	lsls	r1, r3, #16
 800639e:	4b27      	ldr	r3, [pc, #156]	; (800643c <DMA_List_BuildNode+0x2a0>)
 80063a0:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 80063a2:	431a      	orrs	r2, r3
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	da08      	bge.n	80063c2 <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063b4:	425b      	negs	r3, r3
 80063b6:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	619a      	str	r2, [r3, #24]
 80063c0:	e004      	b.n	80063cc <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063c6:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	da0b      	bge.n	80063ec <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063d8:	425b      	negs	r3, r3
 80063da:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80063e4:	431a      	orrs	r2, r3
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	619a      	str	r2, [r3, #24]
 80063ea:	e007      	b.n	80063fc <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063f4:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80063f6:	431a      	orrs	r2, r3
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0302 	and.w	r3, r3, #2
 800640c:	2b00      	cmp	r3, #0
 800640e:	d006      	beq.n	800641e <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	6a1b      	ldr	r3, [r3, #32]
 8006414:	f443 62e0 	orr.w	r2, r3, #1792	; 0x700
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 800641c:	e005      	b.n	800642a <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	6a1b      	ldr	r3, [r3, #32]
 8006422:	f443 62a0 	orr.w	r2, r3, #1280	; 0x500
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	621a      	str	r2, [r3, #32]
}
 800642a:	bf00      	nop
 800642c:	3714      	adds	r7, #20
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	07ff0000 	.word	0x07ff0000
 800643c:	1fff0000 	.word	0x1fff0000

08006440 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8006440:	b480      	push	{r7}
 8006442:	b087      	sub	sp, #28
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	431a      	orrs	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4313      	orrs	r3, r2
 8006456:	0c1b      	lsrs	r3, r3, #16
 8006458:	041b      	lsls	r3, r3, #16
 800645a:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 800645c:	2300      	movs	r3, #0
 800645e:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d002      	beq.n	800646c <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	617b      	str	r3, [r7, #20]
 800646a:	e00a      	b.n	8006482 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d002      	beq.n	8006478 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	617b      	str	r3, [r7, #20]
 8006476:	e004      	b.n	8006482 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d001      	beq.n	8006482 <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	0c1b      	lsrs	r3, r3, #16
 8006486:	041b      	lsls	r3, r3, #16
 8006488:	693a      	ldr	r2, [r7, #16]
 800648a:	429a      	cmp	r2, r3
 800648c:	d001      	beq.n	8006492 <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 800648e:	2301      	movs	r3, #1
 8006490:	e000      	b.n	8006494 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	371c      	adds	r7, #28
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b087      	sub	sp, #28
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	60f8      	str	r0, [r7, #12]
 80064a8:	60b9      	str	r1, [r7, #8]
 80064aa:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 80064ac:	2300      	movs	r3, #0
 80064ae:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d004      	beq.n	80064c0 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6a1b      	ldr	r3, [r3, #32]
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	617b      	str	r3, [r7, #20]
 80064be:	e00e      	b.n	80064de <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d004      	beq.n	80064d0 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	617b      	str	r3, [r7, #20]
 80064ce:	e006      	b.n	80064de <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d003      	beq.n	80064de <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a1b      	ldr	r3, [r3, #32]
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d007      	beq.n	80064f4 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	6a1b      	ldr	r3, [r3, #32]
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	697a      	ldr	r2, [r7, #20]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d001      	beq.n	80064f4 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 80064f0:	2302      	movs	r3, #2
 80064f2:	e00b      	b.n	800650c <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d007      	beq.n	800650a <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6a1b      	ldr	r3, [r3, #32]
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	697a      	ldr	r2, [r7, #20]
 8006502:	429a      	cmp	r2, r3
 8006504:	d001      	beq.n	800650a <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8006506:	2303      	movs	r3, #3
 8006508:	e000      	b.n	800650c <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	371c      	adds	r7, #28
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6a1b      	ldr	r3, [r3, #32]
 8006528:	f003 0302 	and.w	r3, r3, #2
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00c      	beq.n	800654a <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d002      	beq.n	800653c <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	4a0d      	ldr	r2, [pc, #52]	; (8006570 <DMA_List_GetCLLRNodeInfo+0x58>)
 800653a:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d00f      	beq.n	8006562 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2207      	movs	r2, #7
 8006546:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8006548:	e00b      	b.n	8006562 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d002      	beq.n	8006556 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	4a08      	ldr	r2, [pc, #32]	; (8006574 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8006554:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d002      	beq.n	8006562 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2205      	movs	r2, #5
 8006560:	601a      	str	r2, [r3, #0]
}
 8006562:	bf00      	nop
 8006564:	3714      	adds	r7, #20
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	fe010000 	.word	0xfe010000
 8006574:	f8010000 	.word	0xf8010000

08006578 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8006578:	b480      	push	{r7}
 800657a:	b089      	sub	sp, #36	; 0x24
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8006584:	2300      	movs	r3, #0
 8006586:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8006588:	2300      	movs	r3, #0
 800658a:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 800658c:	2300      	movs	r3, #0
 800658e:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d142      	bne.n	8006622 <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 800659c:	e01d      	b.n	80065da <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d107      	bne.n	80065b4 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	461a      	mov	r2, r3
 80065aa:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80065ae:	4013      	ands	r3, r2
 80065b0:	61bb      	str	r3, [r7, #24]
 80065b2:	e00f      	b.n	80065d4 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	0c1b      	lsrs	r3, r3, #16
 80065be:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 80065c0:	69ba      	ldr	r2, [r7, #24]
 80065c2:	4413      	add	r3, r2
 80065c4:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 80065cc:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80065d0:	4013      	ands	r3, r2
 80065d2:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	3301      	adds	r3, #1
 80065d8:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	69fa      	ldr	r2, [r7, #28]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d3dc      	bcc.n	800659e <DMA_List_FindNode+0x26>
 80065e4:	e029      	b.n	800663a <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d107      	bne.n	80065fc <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	461a      	mov	r2, r3
 80065f2:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80065f6:	4013      	ands	r3, r2
 80065f8:	61bb      	str	r3, [r7, #24]
 80065fa:	e00f      	b.n	800661c <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	0c1b      	lsrs	r3, r3, #16
 8006606:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8006608:	69ba      	ldr	r2, [r7, #24]
 800660a:	4413      	add	r3, r2
 800660c:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8006614:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8006618:	4013      	ands	r3, r2
 800661a:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	3301      	adds	r3, #1
 8006620:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	69fa      	ldr	r2, [r7, #28]
 8006628:	429a      	cmp	r2, r3
 800662a:	d206      	bcs.n	800663a <DMA_List_FindNode+0xc2>
 800662c:	68ba      	ldr	r2, [r7, #8]
 800662e:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8006632:	4013      	ands	r3, r2
 8006634:	69ba      	ldr	r2, [r7, #24]
 8006636:	429a      	cmp	r2, r3
 8006638:	d1d5      	bne.n	80065e6 <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d008      	beq.n	8006652 <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8006640:	68ba      	ldr	r2, [r7, #8]
 8006642:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8006646:	4013      	ands	r3, r2
 8006648:	69ba      	ldr	r2, [r7, #24]
 800664a:	429a      	cmp	r2, r3
 800664c:	d001      	beq.n	8006652 <DMA_List_FindNode+0xda>
    {
      return 1U;
 800664e:	2301      	movs	r3, #1
 8006650:	e02b      	b.n	80066aa <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	69fa      	ldr	r2, [r7, #28]
 8006656:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	0c1b      	lsrs	r3, r3, #16
 800665e:	041b      	lsls	r3, r3, #16
 8006660:	697a      	ldr	r2, [r7, #20]
 8006662:	431a      	orrs	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	0c1b      	lsrs	r3, r3, #16
 800666e:	041b      	lsls	r3, r3, #16
 8006670:	69ba      	ldr	r2, [r7, #24]
 8006672:	431a      	orrs	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	461a      	mov	r2, r3
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00f      	beq.n	80066a8 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	461a      	mov	r2, r3
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006694:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8006698:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	0c1b      	lsrs	r3, r3, #16
 80066a0:	041b      	lsls	r3, r3, #16
 80066a2:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3724      	adds	r7, #36	; 0x24
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
	...

080066b8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b089      	sub	sp, #36	; 0x24
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80066c2:	2300      	movs	r3, #0
 80066c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80066ca:	e1ba      	b.n	8006a42 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	2101      	movs	r1, #1
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	fa01 f303 	lsl.w	r3, r1, r3
 80066d8:	4013      	ands	r3, r2
 80066da:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	f000 81aa 	beq.w	8006a3c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a55      	ldr	r2, [pc, #340]	; (8006840 <HAL_GPIO_Init+0x188>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d15d      	bne.n	80067ac <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80066f6:	2201      	movs	r2, #1
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	fa02 f303 	lsl.w	r3, r2, r3
 80066fe:	43db      	mvns	r3, r3
 8006700:	69fa      	ldr	r2, [r7, #28]
 8006702:	4013      	ands	r3, r2
 8006704:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	f003 0201 	and.w	r2, r3, #1
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	fa02 f303 	lsl.w	r3, r2, r3
 8006714:	69fa      	ldr	r2, [r7, #28]
 8006716:	4313      	orrs	r3, r2
 8006718:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	69fa      	ldr	r2, [r7, #28]
 800671e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8006720:	4a48      	ldr	r2, [pc, #288]	; (8006844 <HAL_GPIO_Init+0x18c>)
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006728:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800672a:	4a46      	ldr	r2, [pc, #280]	; (8006844 <HAL_GPIO_Init+0x18c>)
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	00db      	lsls	r3, r3, #3
 8006730:	4413      	add	r3, r2
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	08da      	lsrs	r2, r3, #3
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	3208      	adds	r2, #8
 800673e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006742:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	f003 0307 	and.w	r3, r3, #7
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	220f      	movs	r2, #15
 800674e:	fa02 f303 	lsl.w	r3, r2, r3
 8006752:	43db      	mvns	r3, r3
 8006754:	69fa      	ldr	r2, [r7, #28]
 8006756:	4013      	ands	r3, r2
 8006758:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	f003 0307 	and.w	r3, r3, #7
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	220b      	movs	r2, #11
 8006764:	fa02 f303 	lsl.w	r3, r2, r3
 8006768:	69fa      	ldr	r2, [r7, #28]
 800676a:	4313      	orrs	r3, r2
 800676c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	08da      	lsrs	r2, r3, #3
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	3208      	adds	r2, #8
 8006776:	69f9      	ldr	r1, [r7, #28]
 8006778:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	005b      	lsls	r3, r3, #1
 8006786:	2203      	movs	r2, #3
 8006788:	fa02 f303 	lsl.w	r3, r2, r3
 800678c:	43db      	mvns	r3, r3
 800678e:	69fa      	ldr	r2, [r7, #28]
 8006790:	4013      	ands	r3, r2
 8006792:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	005b      	lsls	r3, r3, #1
 8006798:	2202      	movs	r2, #2
 800679a:	fa02 f303 	lsl.w	r3, r2, r3
 800679e:	69fa      	ldr	r2, [r7, #28]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	69fa      	ldr	r2, [r7, #28]
 80067a8:	601a      	str	r2, [r3, #0]
 80067aa:	e067      	b.n	800687c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d003      	beq.n	80067bc <HAL_GPIO_Init+0x104>
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	2b12      	cmp	r3, #18
 80067ba:	d145      	bne.n	8006848 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	08da      	lsrs	r2, r3, #3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	3208      	adds	r2, #8
 80067c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067c8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	f003 0307 	and.w	r3, r3, #7
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	220f      	movs	r2, #15
 80067d4:	fa02 f303 	lsl.w	r3, r2, r3
 80067d8:	43db      	mvns	r3, r3
 80067da:	69fa      	ldr	r2, [r7, #28]
 80067dc:	4013      	ands	r3, r2
 80067de:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	f003 020f 	and.w	r2, r3, #15
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	f003 0307 	and.w	r3, r3, #7
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	fa02 f303 	lsl.w	r3, r2, r3
 80067f4:	69fa      	ldr	r2, [r7, #28]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	08da      	lsrs	r2, r3, #3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	3208      	adds	r2, #8
 8006802:	69f9      	ldr	r1, [r7, #28]
 8006804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	005b      	lsls	r3, r3, #1
 8006812:	2203      	movs	r2, #3
 8006814:	fa02 f303 	lsl.w	r3, r2, r3
 8006818:	43db      	mvns	r3, r3
 800681a:	69fa      	ldr	r2, [r7, #28]
 800681c:	4013      	ands	r3, r2
 800681e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	f003 0203 	and.w	r2, r3, #3
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	005b      	lsls	r3, r3, #1
 800682c:	fa02 f303 	lsl.w	r3, r2, r3
 8006830:	69fa      	ldr	r2, [r7, #28]
 8006832:	4313      	orrs	r3, r2
 8006834:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	69fa      	ldr	r2, [r7, #28]
 800683a:	601a      	str	r2, [r3, #0]
 800683c:	e01e      	b.n	800687c <HAL_GPIO_Init+0x1c4>
 800683e:	bf00      	nop
 8006840:	46020000 	.word	0x46020000
 8006844:	0800e2e0 	.word	0x0800e2e0
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	005b      	lsls	r3, r3, #1
 8006852:	2203      	movs	r2, #3
 8006854:	fa02 f303 	lsl.w	r3, r2, r3
 8006858:	43db      	mvns	r3, r3
 800685a:	69fa      	ldr	r2, [r7, #28]
 800685c:	4013      	ands	r3, r2
 800685e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	f003 0203 	and.w	r2, r3, #3
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	005b      	lsls	r3, r3, #1
 800686c:	fa02 f303 	lsl.w	r3, r2, r3
 8006870:	69fa      	ldr	r2, [r7, #28]
 8006872:	4313      	orrs	r3, r2
 8006874:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	69fa      	ldr	r2, [r7, #28]
 800687a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	2b01      	cmp	r3, #1
 8006882:	d00b      	beq.n	800689c <HAL_GPIO_Init+0x1e4>
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	2b02      	cmp	r3, #2
 800688a:	d007      	beq.n	800689c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006890:	2b11      	cmp	r3, #17
 8006892:	d003      	beq.n	800689c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	2b12      	cmp	r3, #18
 800689a:	d130      	bne.n	80068fe <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	005b      	lsls	r3, r3, #1
 80068a6:	2203      	movs	r2, #3
 80068a8:	fa02 f303 	lsl.w	r3, r2, r3
 80068ac:	43db      	mvns	r3, r3
 80068ae:	69fa      	ldr	r2, [r7, #28]
 80068b0:	4013      	ands	r3, r2
 80068b2:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	68da      	ldr	r2, [r3, #12]
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	005b      	lsls	r3, r3, #1
 80068bc:	fa02 f303 	lsl.w	r3, r2, r3
 80068c0:	69fa      	ldr	r2, [r7, #28]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	69fa      	ldr	r2, [r7, #28]
 80068ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80068d2:	2201      	movs	r2, #1
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	fa02 f303 	lsl.w	r3, r2, r3
 80068da:	43db      	mvns	r3, r3
 80068dc:	69fa      	ldr	r2, [r7, #28]
 80068de:	4013      	ands	r3, r2
 80068e0:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	091b      	lsrs	r3, r3, #4
 80068e8:	f003 0201 	and.w	r2, r3, #1
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	fa02 f303 	lsl.w	r3, r2, r3
 80068f2:	69fa      	ldr	r2, [r7, #28]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	69fa      	ldr	r2, [r7, #28]
 80068fc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	2b03      	cmp	r3, #3
 8006904:	d017      	beq.n	8006936 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	005b      	lsls	r3, r3, #1
 8006910:	2203      	movs	r2, #3
 8006912:	fa02 f303 	lsl.w	r3, r2, r3
 8006916:	43db      	mvns	r3, r3
 8006918:	69fa      	ldr	r2, [r7, #28]
 800691a:	4013      	ands	r3, r2
 800691c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	689a      	ldr	r2, [r3, #8]
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	005b      	lsls	r3, r3, #1
 8006926:	fa02 f303 	lsl.w	r3, r2, r3
 800692a:	69fa      	ldr	r2, [r7, #28]
 800692c:	4313      	orrs	r3, r2
 800692e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	69fa      	ldr	r2, [r7, #28]
 8006934:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800693e:	2b00      	cmp	r3, #0
 8006940:	d07c      	beq.n	8006a3c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8006942:	4a47      	ldr	r2, [pc, #284]	; (8006a60 <HAL_GPIO_Init+0x3a8>)
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	089b      	lsrs	r3, r3, #2
 8006948:	3318      	adds	r3, #24
 800694a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800694e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	f003 0303 	and.w	r3, r3, #3
 8006956:	00db      	lsls	r3, r3, #3
 8006958:	220f      	movs	r2, #15
 800695a:	fa02 f303 	lsl.w	r3, r2, r3
 800695e:	43db      	mvns	r3, r3
 8006960:	69fa      	ldr	r2, [r7, #28]
 8006962:	4013      	ands	r3, r2
 8006964:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	0a9a      	lsrs	r2, r3, #10
 800696a:	4b3e      	ldr	r3, [pc, #248]	; (8006a64 <HAL_GPIO_Init+0x3ac>)
 800696c:	4013      	ands	r3, r2
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	f002 0203 	and.w	r2, r2, #3
 8006974:	00d2      	lsls	r2, r2, #3
 8006976:	4093      	lsls	r3, r2
 8006978:	69fa      	ldr	r2, [r7, #28]
 800697a:	4313      	orrs	r3, r2
 800697c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800697e:	4938      	ldr	r1, [pc, #224]	; (8006a60 <HAL_GPIO_Init+0x3a8>)
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	089b      	lsrs	r3, r3, #2
 8006984:	3318      	adds	r3, #24
 8006986:	69fa      	ldr	r2, [r7, #28]
 8006988:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800698c:	4b34      	ldr	r3, [pc, #208]	; (8006a60 <HAL_GPIO_Init+0x3a8>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	43db      	mvns	r3, r3
 8006996:	69fa      	ldr	r2, [r7, #28]
 8006998:	4013      	ands	r3, r2
 800699a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d003      	beq.n	80069b0 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80069a8:	69fa      	ldr	r2, [r7, #28]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80069b0:	4a2b      	ldr	r2, [pc, #172]	; (8006a60 <HAL_GPIO_Init+0x3a8>)
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80069b6:	4b2a      	ldr	r3, [pc, #168]	; (8006a60 <HAL_GPIO_Init+0x3a8>)
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	43db      	mvns	r3, r3
 80069c0:	69fa      	ldr	r2, [r7, #28]
 80069c2:	4013      	ands	r3, r2
 80069c4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d003      	beq.n	80069da <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80069d2:	69fa      	ldr	r2, [r7, #28]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80069da:	4a21      	ldr	r2, [pc, #132]	; (8006a60 <HAL_GPIO_Init+0x3a8>)
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80069e0:	4b1f      	ldr	r3, [pc, #124]	; (8006a60 <HAL_GPIO_Init+0x3a8>)
 80069e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069e6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	43db      	mvns	r3, r3
 80069ec:	69fa      	ldr	r2, [r7, #28]
 80069ee:	4013      	ands	r3, r2
 80069f0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d003      	beq.n	8006a06 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80069fe:	69fa      	ldr	r2, [r7, #28]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8006a06:	4a16      	ldr	r2, [pc, #88]	; (8006a60 <HAL_GPIO_Init+0x3a8>)
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8006a0e:	4b14      	ldr	r3, [pc, #80]	; (8006a60 <HAL_GPIO_Init+0x3a8>)
 8006a10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a14:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	43db      	mvns	r3, r3
 8006a1a:	69fa      	ldr	r2, [r7, #28]
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d003      	beq.n	8006a34 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8006a2c:	69fa      	ldr	r2, [r7, #28]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8006a34:	4a0a      	ldr	r2, [pc, #40]	; (8006a60 <HAL_GPIO_Init+0x3a8>)
 8006a36:	69fb      	ldr	r3, [r7, #28]
 8006a38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	3301      	adds	r3, #1
 8006a40:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	fa22 f303 	lsr.w	r3, r2, r3
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f47f ae3d 	bne.w	80066cc <HAL_GPIO_Init+0x14>
  }
}
 8006a52:	bf00      	nop
 8006a54:	bf00      	nop
 8006a56:	3724      	adds	r7, #36	; 0x24
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr
 8006a60:	46022000 	.word	0x46022000
 8006a64:	002f7f7f 	.word	0x002f7f7f

08006a68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	460b      	mov	r3, r1
 8006a72:	807b      	strh	r3, [r7, #2]
 8006a74:	4613      	mov	r3, r2
 8006a76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006a78:	787b      	ldrb	r3, [r7, #1]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d003      	beq.n	8006a86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006a7e:	887a      	ldrh	r2, [r7, #2]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8006a84:	e002      	b.n	8006a8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8006a86:	887a      	ldrh	r2, [r7, #2]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006a8c:	bf00      	nop
 8006a8e:	370c      	adds	r7, #12
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d101      	bne.n	8006aaa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e081      	b.n	8006bae <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d106      	bne.n	8006ac4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f7fb fd14 	bl	80024ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2224      	movs	r2, #36	; 0x24
 8006ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f022 0201 	bic.w	r2, r2, #1
 8006ada:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	685a      	ldr	r2, [r3, #4]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006ae8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	689a      	ldr	r2, [r3, #8]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006af8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d107      	bne.n	8006b12 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	689a      	ldr	r2, [r3, #8]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b0e:	609a      	str	r2, [r3, #8]
 8006b10:	e006      	b.n	8006b20 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	689a      	ldr	r2, [r3, #8]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006b1e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	d104      	bne.n	8006b32 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b30:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	6812      	ldr	r2, [r2, #0]
 8006b3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006b40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b44:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68da      	ldr	r2, [r3, #12]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b54:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	691a      	ldr	r2, [r3, #16]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	695b      	ldr	r3, [r3, #20]
 8006b5e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	699b      	ldr	r3, [r3, #24]
 8006b66:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	430a      	orrs	r2, r1
 8006b6e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	69d9      	ldr	r1, [r3, #28]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6a1a      	ldr	r2, [r3, #32]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	430a      	orrs	r2, r1
 8006b7e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f042 0201 	orr.w	r2, r2, #1
 8006b8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2220      	movs	r2, #32
 8006b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3708      	adds	r7, #8
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
	...

08006bb8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b088      	sub	sp, #32
 8006bbc:	af02      	add	r7, sp, #8
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	607a      	str	r2, [r7, #4]
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	817b      	strh	r3, [r7, #10]
 8006bc8:	4613      	mov	r3, r2
 8006bca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	2b20      	cmp	r3, #32
 8006bd6:	f040 80da 	bne.w	8006d8e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d101      	bne.n	8006be8 <HAL_I2C_Master_Transmit+0x30>
 8006be4:	2302      	movs	r3, #2
 8006be6:	e0d3      	b.n	8006d90 <HAL_I2C_Master_Transmit+0x1d8>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006bf0:	f7fc f816 	bl	8002c20 <HAL_GetTick>
 8006bf4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	9300      	str	r3, [sp, #0]
 8006bfa:	2319      	movs	r3, #25
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	f000 f8f0 	bl	8006de8 <I2C_WaitOnFlagUntilTimeout>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d001      	beq.n	8006c12 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e0be      	b.n	8006d90 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2221      	movs	r2, #33	; 0x21
 8006c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2210      	movs	r2, #16
 8006c1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2200      	movs	r2, #0
 8006c26:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	893a      	ldrh	r2, [r7, #8]
 8006c32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2200      	movs	r2, #0
 8006c38:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	2bff      	cmp	r3, #255	; 0xff
 8006c42:	d90e      	bls.n	8006c62 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	22ff      	movs	r2, #255	; 0xff
 8006c48:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c4e:	b2da      	uxtb	r2, r3
 8006c50:	8979      	ldrh	r1, [r7, #10]
 8006c52:	4b51      	ldr	r3, [pc, #324]	; (8006d98 <HAL_I2C_Master_Transmit+0x1e0>)
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c5a:	68f8      	ldr	r0, [r7, #12]
 8006c5c:	f000 fa6c 	bl	8007138 <I2C_TransferConfig>
 8006c60:	e06c      	b.n	8006d3c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c66:	b29a      	uxth	r2, r3
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c70:	b2da      	uxtb	r2, r3
 8006c72:	8979      	ldrh	r1, [r7, #10]
 8006c74:	4b48      	ldr	r3, [pc, #288]	; (8006d98 <HAL_I2C_Master_Transmit+0x1e0>)
 8006c76:	9300      	str	r3, [sp, #0]
 8006c78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c7c:	68f8      	ldr	r0, [r7, #12]
 8006c7e:	f000 fa5b 	bl	8007138 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006c82:	e05b      	b.n	8006d3c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c84:	697a      	ldr	r2, [r7, #20]
 8006c86:	6a39      	ldr	r1, [r7, #32]
 8006c88:	68f8      	ldr	r0, [r7, #12]
 8006c8a:	f000 f8ed 	bl	8006e68 <I2C_WaitOnTXISFlagUntilTimeout>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d001      	beq.n	8006c98 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e07b      	b.n	8006d90 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9c:	781a      	ldrb	r2, [r3, #0]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca8:	1c5a      	adds	r2, r3, #1
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	3b01      	subs	r3, #1
 8006cb6:	b29a      	uxth	r2, r3
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d034      	beq.n	8006d3c <HAL_I2C_Master_Transmit+0x184>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d130      	bne.n	8006d3c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	9300      	str	r3, [sp, #0]
 8006cde:	6a3b      	ldr	r3, [r7, #32]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	2180      	movs	r1, #128	; 0x80
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	f000 f87f 	bl	8006de8 <I2C_WaitOnFlagUntilTimeout>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d001      	beq.n	8006cf4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e04d      	b.n	8006d90 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	2bff      	cmp	r3, #255	; 0xff
 8006cfc:	d90e      	bls.n	8006d1c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	22ff      	movs	r2, #255	; 0xff
 8006d02:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d08:	b2da      	uxtb	r2, r3
 8006d0a:	8979      	ldrh	r1, [r7, #10]
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	9300      	str	r3, [sp, #0]
 8006d10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f000 fa0f 	bl	8007138 <I2C_TransferConfig>
 8006d1a:	e00f      	b.n	8006d3c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d20:	b29a      	uxth	r2, r3
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d2a:	b2da      	uxtb	r2, r3
 8006d2c:	8979      	ldrh	r1, [r7, #10]
 8006d2e:	2300      	movs	r3, #0
 8006d30:	9300      	str	r3, [sp, #0]
 8006d32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006d36:	68f8      	ldr	r0, [r7, #12]
 8006d38:	f000 f9fe 	bl	8007138 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d19e      	bne.n	8006c84 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d46:	697a      	ldr	r2, [r7, #20]
 8006d48:	6a39      	ldr	r1, [r7, #32]
 8006d4a:	68f8      	ldr	r0, [r7, #12]
 8006d4c:	f000 f8cc 	bl	8006ee8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d001      	beq.n	8006d5a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e01a      	b.n	8006d90 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2220      	movs	r2, #32
 8006d60:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	6859      	ldr	r1, [r3, #4]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	4b0b      	ldr	r3, [pc, #44]	; (8006d9c <HAL_I2C_Master_Transmit+0x1e4>)
 8006d6e:	400b      	ands	r3, r1
 8006d70:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2220      	movs	r2, #32
 8006d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	e000      	b.n	8006d90 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8006d8e:	2302      	movs	r3, #2
  }
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3718      	adds	r7, #24
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	80002000 	.word	0x80002000
 8006d9c:	fe00e800 	.word	0xfe00e800

08006da0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	699b      	ldr	r3, [r3, #24]
 8006dae:	f003 0302 	and.w	r3, r3, #2
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d103      	bne.n	8006dbe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	699b      	ldr	r3, [r3, #24]
 8006dc4:	f003 0301 	and.w	r3, r3, #1
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d007      	beq.n	8006ddc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	699a      	ldr	r2, [r3, #24]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f042 0201 	orr.w	r2, r2, #1
 8006dda:	619a      	str	r2, [r3, #24]
  }
}
 8006ddc:	bf00      	nop
 8006dde:	370c      	adds	r7, #12
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	603b      	str	r3, [r7, #0]
 8006df4:	4613      	mov	r3, r2
 8006df6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006df8:	e022      	b.n	8006e40 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e00:	d01e      	beq.n	8006e40 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e02:	f7fb ff0d 	bl	8002c20 <HAL_GetTick>
 8006e06:	4602      	mov	r2, r0
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	1ad3      	subs	r3, r2, r3
 8006e0c:	683a      	ldr	r2, [r7, #0]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d302      	bcc.n	8006e18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d113      	bne.n	8006e40 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e1c:	f043 0220 	orr.w	r2, r3, #32
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2220      	movs	r2, #32
 8006e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e00f      	b.n	8006e60 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	699a      	ldr	r2, [r3, #24]
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	4013      	ands	r3, r2
 8006e4a:	68ba      	ldr	r2, [r7, #8]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	bf0c      	ite	eq
 8006e50:	2301      	moveq	r3, #1
 8006e52:	2300      	movne	r3, #0
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	461a      	mov	r2, r3
 8006e58:	79fb      	ldrb	r3, [r7, #7]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d0cd      	beq.n	8006dfa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006e74:	e02c      	b.n	8006ed0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	68b9      	ldr	r1, [r7, #8]
 8006e7a:	68f8      	ldr	r0, [r7, #12]
 8006e7c:	f000 f870 	bl	8006f60 <I2C_IsErrorOccurred>
 8006e80:	4603      	mov	r3, r0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d001      	beq.n	8006e8a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e02a      	b.n	8006ee0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e90:	d01e      	beq.n	8006ed0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e92:	f7fb fec5 	bl	8002c20 <HAL_GetTick>
 8006e96:	4602      	mov	r2, r0
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	1ad3      	subs	r3, r2, r3
 8006e9c:	68ba      	ldr	r2, [r7, #8]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d302      	bcc.n	8006ea8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d113      	bne.n	8006ed0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eac:	f043 0220 	orr.w	r2, r3, #32
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2220      	movs	r2, #32
 8006eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e007      	b.n	8006ee0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	699b      	ldr	r3, [r3, #24]
 8006ed6:	f003 0302 	and.w	r3, r3, #2
 8006eda:	2b02      	cmp	r3, #2
 8006edc:	d1cb      	bne.n	8006e76 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3710      	adds	r7, #16
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ef4:	e028      	b.n	8006f48 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	68b9      	ldr	r1, [r7, #8]
 8006efa:	68f8      	ldr	r0, [r7, #12]
 8006efc:	f000 f830 	bl	8006f60 <I2C_IsErrorOccurred>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d001      	beq.n	8006f0a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e026      	b.n	8006f58 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f0a:	f7fb fe89 	bl	8002c20 <HAL_GetTick>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	1ad3      	subs	r3, r2, r3
 8006f14:	68ba      	ldr	r2, [r7, #8]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d302      	bcc.n	8006f20 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d113      	bne.n	8006f48 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f24:	f043 0220 	orr.w	r2, r3, #32
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2220      	movs	r2, #32
 8006f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2200      	movs	r2, #0
 8006f38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	e007      	b.n	8006f58 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	699b      	ldr	r3, [r3, #24]
 8006f4e:	f003 0320 	and.w	r3, r3, #32
 8006f52:	2b20      	cmp	r3, #32
 8006f54:	d1cf      	bne.n	8006ef6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006f56:	2300      	movs	r3, #0
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3710      	adds	r7, #16
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b08a      	sub	sp, #40	; 0x28
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	699b      	ldr	r3, [r3, #24]
 8006f78:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	f003 0310 	and.w	r3, r3, #16
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d075      	beq.n	8007078 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2210      	movs	r2, #16
 8006f92:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006f94:	e056      	b.n	8007044 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f9c:	d052      	beq.n	8007044 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006f9e:	f7fb fe3f 	bl	8002c20 <HAL_GetTick>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	1ad3      	subs	r3, r2, r3
 8006fa8:	68ba      	ldr	r2, [r7, #8]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d302      	bcc.n	8006fb4 <I2C_IsErrorOccurred+0x54>
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d147      	bne.n	8007044 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fbe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006fc6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	699b      	ldr	r3, [r3, #24]
 8006fce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fd6:	d12e      	bne.n	8007036 <I2C_IsErrorOccurred+0xd6>
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fde:	d02a      	beq.n	8007036 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006fe0:	7cfb      	ldrb	r3, [r7, #19]
 8006fe2:	2b20      	cmp	r3, #32
 8006fe4:	d027      	beq.n	8007036 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	685a      	ldr	r2, [r3, #4]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ff4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006ff6:	f7fb fe13 	bl	8002c20 <HAL_GetTick>
 8006ffa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ffc:	e01b      	b.n	8007036 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006ffe:	f7fb fe0f 	bl	8002c20 <HAL_GetTick>
 8007002:	4602      	mov	r2, r0
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	2b19      	cmp	r3, #25
 800700a:	d914      	bls.n	8007036 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007010:	f043 0220 	orr.w	r2, r3, #32
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2220      	movs	r2, #32
 800701c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2200      	movs	r2, #0
 8007024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	699b      	ldr	r3, [r3, #24]
 800703c:	f003 0320 	and.w	r3, r3, #32
 8007040:	2b20      	cmp	r3, #32
 8007042:	d1dc      	bne.n	8006ffe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	699b      	ldr	r3, [r3, #24]
 800704a:	f003 0320 	and.w	r3, r3, #32
 800704e:	2b20      	cmp	r3, #32
 8007050:	d003      	beq.n	800705a <I2C_IsErrorOccurred+0xfa>
 8007052:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007056:	2b00      	cmp	r3, #0
 8007058:	d09d      	beq.n	8006f96 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800705a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800705e:	2b00      	cmp	r3, #0
 8007060:	d103      	bne.n	800706a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	2220      	movs	r2, #32
 8007068:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800706a:	6a3b      	ldr	r3, [r7, #32]
 800706c:	f043 0304 	orr.w	r3, r3, #4
 8007070:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	699b      	ldr	r3, [r3, #24]
 800707e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00b      	beq.n	80070a2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800708a:	6a3b      	ldr	r3, [r7, #32]
 800708c:	f043 0301 	orr.w	r3, r3, #1
 8007090:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f44f 7280 	mov.w	r2, #256	; 0x100
 800709a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d00b      	beq.n	80070c4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80070ac:	6a3b      	ldr	r3, [r7, #32]
 80070ae:	f043 0308 	orr.w	r3, r3, #8
 80070b2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80070bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00b      	beq.n	80070e6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80070ce:	6a3b      	ldr	r3, [r7, #32]
 80070d0:	f043 0302 	orr.w	r3, r3, #2
 80070d4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80070e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d01c      	beq.n	8007128 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f7ff fe56 	bl	8006da0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	6859      	ldr	r1, [r3, #4]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	4b0d      	ldr	r3, [pc, #52]	; (8007134 <I2C_IsErrorOccurred+0x1d4>)
 8007100:	400b      	ands	r3, r1
 8007102:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007108:	6a3b      	ldr	r3, [r7, #32]
 800710a:	431a      	orrs	r2, r3
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2220      	movs	r2, #32
 8007114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2200      	movs	r2, #0
 800711c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007128:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800712c:	4618      	mov	r0, r3
 800712e:	3728      	adds	r7, #40	; 0x28
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}
 8007134:	fe00e800 	.word	0xfe00e800

08007138 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007138:	b480      	push	{r7}
 800713a:	b087      	sub	sp, #28
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	607b      	str	r3, [r7, #4]
 8007142:	460b      	mov	r3, r1
 8007144:	817b      	strh	r3, [r7, #10]
 8007146:	4613      	mov	r3, r2
 8007148:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800714a:	897b      	ldrh	r3, [r7, #10]
 800714c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007150:	7a7b      	ldrb	r3, [r7, #9]
 8007152:	041b      	lsls	r3, r3, #16
 8007154:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007158:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800715e:	6a3b      	ldr	r3, [r7, #32]
 8007160:	4313      	orrs	r3, r2
 8007162:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007166:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	685a      	ldr	r2, [r3, #4]
 800716e:	6a3b      	ldr	r3, [r7, #32]
 8007170:	0d5b      	lsrs	r3, r3, #21
 8007172:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007176:	4b08      	ldr	r3, [pc, #32]	; (8007198 <I2C_TransferConfig+0x60>)
 8007178:	430b      	orrs	r3, r1
 800717a:	43db      	mvns	r3, r3
 800717c:	ea02 0103 	and.w	r1, r2, r3
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	697a      	ldr	r2, [r7, #20]
 8007186:	430a      	orrs	r2, r1
 8007188:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800718a:	bf00      	nop
 800718c:	371c      	adds	r7, #28
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	03ff63ff 	.word	0x03ff63ff

0800719c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	2b20      	cmp	r3, #32
 80071b0:	d138      	bne.n	8007224 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d101      	bne.n	80071c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80071bc:	2302      	movs	r3, #2
 80071be:	e032      	b.n	8007226 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2224      	movs	r2, #36	; 0x24
 80071cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f022 0201 	bic.w	r2, r2, #1
 80071de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80071ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	6819      	ldr	r1, [r3, #0]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	683a      	ldr	r2, [r7, #0]
 80071fc:	430a      	orrs	r2, r1
 80071fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f042 0201 	orr.w	r2, r2, #1
 800720e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2220      	movs	r2, #32
 8007214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007220:	2300      	movs	r3, #0
 8007222:	e000      	b.n	8007226 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007224:	2302      	movs	r3, #2
  }
}
 8007226:	4618      	mov	r0, r3
 8007228:	370c      	adds	r7, #12
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr

08007232 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007232:	b480      	push	{r7}
 8007234:	b085      	sub	sp, #20
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
 800723a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007242:	b2db      	uxtb	r3, r3
 8007244:	2b20      	cmp	r3, #32
 8007246:	d139      	bne.n	80072bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800724e:	2b01      	cmp	r3, #1
 8007250:	d101      	bne.n	8007256 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007252:	2302      	movs	r3, #2
 8007254:	e033      	b.n	80072be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2201      	movs	r2, #1
 800725a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2224      	movs	r2, #36	; 0x24
 8007262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f022 0201 	bic.w	r2, r2, #1
 8007274:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007284:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	021b      	lsls	r3, r3, #8
 800728a:	68fa      	ldr	r2, [r7, #12]
 800728c:	4313      	orrs	r3, r2
 800728e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f042 0201 	orr.w	r2, r2, #1
 80072a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2220      	movs	r2, #32
 80072ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80072b8:	2300      	movs	r3, #0
 80072ba:	e000      	b.n	80072be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80072bc:	2302      	movs	r3, #2
  }
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3714      	adds	r7, #20
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr
	...

080072cc <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b085      	sub	sp, #20
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072d4:	2300      	movs	r3, #0
 80072d6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80072d8:	4b0b      	ldr	r3, [pc, #44]	; (8007308 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f003 0301 	and.w	r3, r3, #1
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d002      	beq.n	80072ea <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	73fb      	strb	r3, [r7, #15]
 80072e8:	e007      	b.n	80072fa <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80072ea:	4b07      	ldr	r3, [pc, #28]	; (8007308 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f023 0204 	bic.w	r2, r3, #4
 80072f2:	4905      	ldr	r1, [pc, #20]	; (8007308 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	600b      	str	r3, [r1, #0]
  }

  return status;
 80072fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3714      	adds	r7, #20
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr
 8007308:	40030400 	.word	0x40030400

0800730c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800730c:	b480      	push	{r7}
 800730e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8007310:	4b05      	ldr	r3, [pc, #20]	; (8007328 <HAL_ICACHE_Enable+0x1c>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a04      	ldr	r2, [pc, #16]	; (8007328 <HAL_ICACHE_Enable+0x1c>)
 8007316:	f043 0301 	orr.w	r3, r3, #1
 800731a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr
 8007328:	40030400 	.word	0x40030400

0800732c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800732c:	b480      	push	{r7}
 800732e:	b085      	sub	sp, #20
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8007334:	4b34      	ldr	r3, [pc, #208]	; (8007408 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8007336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007338:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800733c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800733e:	68ba      	ldr	r2, [r7, #8]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	429a      	cmp	r2, r3
 8007344:	d101      	bne.n	800734a <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 8007346:	2300      	movs	r3, #0
 8007348:	e057      	b.n	80073fa <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007350:	d90a      	bls.n	8007368 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8007352:	4b2d      	ldr	r3, [pc, #180]	; (8007408 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	4313      	orrs	r3, r2
 800735e:	4a2a      	ldr	r2, [pc, #168]	; (8007408 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8007360:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007364:	60d3      	str	r3, [r2, #12]
 8007366:	e007      	b.n	8007378 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8007368:	4b27      	ldr	r3, [pc, #156]	; (8007408 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800736a:	68db      	ldr	r3, [r3, #12]
 800736c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007370:	4925      	ldr	r1, [pc, #148]	; (8007408 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4313      	orrs	r3, r2
 8007376:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8007378:	4b24      	ldr	r3, [pc, #144]	; (800740c <HAL_PWREx_ControlVoltageScaling+0xe0>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a24      	ldr	r2, [pc, #144]	; (8007410 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800737e:	fba2 2303 	umull	r2, r3, r2, r3
 8007382:	099b      	lsrs	r3, r3, #6
 8007384:	2232      	movs	r2, #50	; 0x32
 8007386:	fb02 f303 	mul.w	r3, r2, r3
 800738a:	4a21      	ldr	r2, [pc, #132]	; (8007410 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800738c:	fba2 2303 	umull	r2, r3, r2, r3
 8007390:	099b      	lsrs	r3, r3, #6
 8007392:	3301      	adds	r3, #1
 8007394:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8007396:	e002      	b.n	800739e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	3b01      	subs	r3, #1
 800739c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800739e:	4b1a      	ldr	r3, [pc, #104]	; (8007408 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d102      	bne.n	80073b0 <HAL_PWREx_ControlVoltageScaling+0x84>
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d1f3      	bne.n	8007398 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d01b      	beq.n	80073ee <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80073b6:	4b15      	ldr	r3, [pc, #84]	; (800740c <HAL_PWREx_ControlVoltageScaling+0xe0>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a15      	ldr	r2, [pc, #84]	; (8007410 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80073bc:	fba2 2303 	umull	r2, r3, r2, r3
 80073c0:	099b      	lsrs	r3, r3, #6
 80073c2:	2232      	movs	r2, #50	; 0x32
 80073c4:	fb02 f303 	mul.w	r3, r2, r3
 80073c8:	4a11      	ldr	r2, [pc, #68]	; (8007410 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80073ca:	fba2 2303 	umull	r2, r3, r2, r3
 80073ce:	099b      	lsrs	r3, r3, #6
 80073d0:	3301      	adds	r3, #1
 80073d2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80073d4:	e002      	b.n	80073dc <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	3b01      	subs	r3, #1
 80073da:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80073dc:	4b0a      	ldr	r3, [pc, #40]	; (8007408 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80073de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d102      	bne.n	80073ee <HAL_PWREx_ControlVoltageScaling+0xc2>
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d1f3      	bne.n	80073d6 <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d101      	bne.n	80073f8 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 80073f4:	2303      	movs	r3, #3
 80073f6:	e000      	b.n	80073fa <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3714      	adds	r7, #20
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr
 8007406:	bf00      	nop
 8007408:	46020800 	.word	0x46020800
 800740c:	2000010c 	.word	0x2000010c
 8007410:	10624dd3 	.word	0x10624dd3

08007414 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007414:	b480      	push	{r7}
 8007416:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8007418:	4b04      	ldr	r3, [pc, #16]	; (800742c <HAL_PWREx_GetVoltageRange+0x18>)
 800741a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800741c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8007420:	4618      	mov	r0, r3
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr
 800742a:	bf00      	nop
 800742c:	46020800 	.word	0x46020800

08007430 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8007430:	b480      	push	{r7}
 8007432:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8007434:	4b05      	ldr	r3, [pc, #20]	; (800744c <HAL_PWREx_EnableVddIO2+0x1c>)
 8007436:	691b      	ldr	r3, [r3, #16]
 8007438:	4a04      	ldr	r2, [pc, #16]	; (800744c <HAL_PWREx_EnableVddIO2+0x1c>)
 800743a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800743e:	6113      	str	r3, [r2, #16]
}
 8007440:	bf00      	nop
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr
 800744a:	bf00      	nop
 800744c:	46020800 	.word	0x46020800

08007450 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8007450:	b480      	push	{r7}
 8007452:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8007454:	4b05      	ldr	r3, [pc, #20]	; (800746c <HAL_PWREx_EnableVddA+0x1c>)
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	4a04      	ldr	r2, [pc, #16]	; (800746c <HAL_PWREx_EnableVddA+0x1c>)
 800745a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800745e:	6113      	str	r3, [r2, #16]
}
 8007460:	bf00      	nop
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr
 800746a:	bf00      	nop
 800746c:	46020800 	.word	0x46020800

08007470 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007470:	b480      	push	{r7}
 8007472:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8007474:	4b05      	ldr	r3, [pc, #20]	; (800748c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007478:	4a04      	ldr	r2, [pc, #16]	; (800748c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800747a:	f043 0301 	orr.w	r3, r3, #1
 800747e:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8007480:	bf00      	nop
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr
 800748a:	bf00      	nop
 800748c:	46020800 	.word	0x46020800

08007490 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b08e      	sub	sp, #56	; 0x38
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8007498:	2300      	movs	r3, #0
 800749a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d102      	bne.n	80074aa <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	f000 bec3 	b.w	8008230 <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074aa:	4b9c      	ldr	r3, [pc, #624]	; (800771c <HAL_RCC_OscConfig+0x28c>)
 80074ac:	69db      	ldr	r3, [r3, #28]
 80074ae:	f003 030c 	and.w	r3, r3, #12
 80074b2:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80074b4:	4b99      	ldr	r3, [pc, #612]	; (800771c <HAL_RCC_OscConfig+0x28c>)
 80074b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b8:	f003 0303 	and.w	r3, r3, #3
 80074bc:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 0310 	and.w	r3, r3, #16
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	f000 8172 	beq.w	80077b0 <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80074cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d007      	beq.n	80074e2 <HAL_RCC_OscConfig+0x52>
 80074d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d4:	2b0c      	cmp	r3, #12
 80074d6:	f040 80e4 	bne.w	80076a2 <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80074da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074dc:	2b01      	cmp	r3, #1
 80074de:	f040 80e0 	bne.w	80076a2 <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80074e2:	4b8e      	ldr	r3, [pc, #568]	; (800771c <HAL_RCC_OscConfig+0x28c>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f003 0304 	and.w	r3, r3, #4
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d006      	beq.n	80074fc <HAL_RCC_OscConfig+0x6c>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	69db      	ldr	r3, [r3, #28]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d102      	bne.n	80074fc <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	f000 be9a 	b.w	8008230 <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007500:	4b86      	ldr	r3, [pc, #536]	; (800771c <HAL_RCC_OscConfig+0x28c>)
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007508:	2b00      	cmp	r3, #0
 800750a:	d004      	beq.n	8007516 <HAL_RCC_OscConfig+0x86>
 800750c:	4b83      	ldr	r3, [pc, #524]	; (800771c <HAL_RCC_OscConfig+0x28c>)
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007514:	e005      	b.n	8007522 <HAL_RCC_OscConfig+0x92>
 8007516:	4b81      	ldr	r3, [pc, #516]	; (800771c <HAL_RCC_OscConfig+0x28c>)
 8007518:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800751c:	041b      	lsls	r3, r3, #16
 800751e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007522:	4293      	cmp	r3, r2
 8007524:	d255      	bcs.n	80075d2 <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007528:	2b00      	cmp	r3, #0
 800752a:	d10a      	bne.n	8007542 <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007530:	4618      	mov	r0, r3
 8007532:	f001 f9d3 	bl	80088dc <RCC_SetFlashLatencyFromMSIRange>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d002      	beq.n	8007542 <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	f000 be77 	b.w	8008230 <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8007542:	4b76      	ldr	r3, [pc, #472]	; (800771c <HAL_RCC_OscConfig+0x28c>)
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	4a75      	ldr	r2, [pc, #468]	; (800771c <HAL_RCC_OscConfig+0x28c>)
 8007548:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800754c:	6093      	str	r3, [r2, #8]
 800754e:	4b73      	ldr	r3, [pc, #460]	; (800771c <HAL_RCC_OscConfig+0x28c>)
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755a:	4970      	ldr	r1, [pc, #448]	; (800771c <HAL_RCC_OscConfig+0x28c>)
 800755c:	4313      	orrs	r3, r2
 800755e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007564:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8007568:	d309      	bcc.n	800757e <HAL_RCC_OscConfig+0xee>
 800756a:	4b6c      	ldr	r3, [pc, #432]	; (800771c <HAL_RCC_OscConfig+0x28c>)
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	f023 021f 	bic.w	r2, r3, #31
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a1b      	ldr	r3, [r3, #32]
 8007576:	4969      	ldr	r1, [pc, #420]	; (800771c <HAL_RCC_OscConfig+0x28c>)
 8007578:	4313      	orrs	r3, r2
 800757a:	60cb      	str	r3, [r1, #12]
 800757c:	e07e      	b.n	800767c <HAL_RCC_OscConfig+0x1ec>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007582:	2b00      	cmp	r3, #0
 8007584:	da0a      	bge.n	800759c <HAL_RCC_OscConfig+0x10c>
 8007586:	4b65      	ldr	r3, [pc, #404]	; (800771c <HAL_RCC_OscConfig+0x28c>)
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6a1b      	ldr	r3, [r3, #32]
 8007592:	015b      	lsls	r3, r3, #5
 8007594:	4961      	ldr	r1, [pc, #388]	; (800771c <HAL_RCC_OscConfig+0x28c>)
 8007596:	4313      	orrs	r3, r2
 8007598:	60cb      	str	r3, [r1, #12]
 800759a:	e06f      	b.n	800767c <HAL_RCC_OscConfig+0x1ec>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075a4:	d30a      	bcc.n	80075bc <HAL_RCC_OscConfig+0x12c>
 80075a6:	4b5d      	ldr	r3, [pc, #372]	; (800771c <HAL_RCC_OscConfig+0x28c>)
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6a1b      	ldr	r3, [r3, #32]
 80075b2:	029b      	lsls	r3, r3, #10
 80075b4:	4959      	ldr	r1, [pc, #356]	; (800771c <HAL_RCC_OscConfig+0x28c>)
 80075b6:	4313      	orrs	r3, r2
 80075b8:	60cb      	str	r3, [r1, #12]
 80075ba:	e05f      	b.n	800767c <HAL_RCC_OscConfig+0x1ec>
 80075bc:	4b57      	ldr	r3, [pc, #348]	; (800771c <HAL_RCC_OscConfig+0x28c>)
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6a1b      	ldr	r3, [r3, #32]
 80075c8:	03db      	lsls	r3, r3, #15
 80075ca:	4954      	ldr	r1, [pc, #336]	; (800771c <HAL_RCC_OscConfig+0x28c>)
 80075cc:	4313      	orrs	r3, r2
 80075ce:	60cb      	str	r3, [r1, #12]
 80075d0:	e054      	b.n	800767c <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80075d2:	4b52      	ldr	r3, [pc, #328]	; (800771c <HAL_RCC_OscConfig+0x28c>)
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	4a51      	ldr	r2, [pc, #324]	; (800771c <HAL_RCC_OscConfig+0x28c>)
 80075d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80075dc:	6093      	str	r3, [r2, #8]
 80075de:	4b4f      	ldr	r3, [pc, #316]	; (800771c <HAL_RCC_OscConfig+0x28c>)
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ea:	494c      	ldr	r1, [pc, #304]	; (800771c <HAL_RCC_OscConfig+0x28c>)
 80075ec:	4313      	orrs	r3, r2
 80075ee:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80075f8:	d309      	bcc.n	800760e <HAL_RCC_OscConfig+0x17e>
 80075fa:	4b48      	ldr	r3, [pc, #288]	; (800771c <HAL_RCC_OscConfig+0x28c>)
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	f023 021f 	bic.w	r2, r3, #31
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6a1b      	ldr	r3, [r3, #32]
 8007606:	4945      	ldr	r1, [pc, #276]	; (800771c <HAL_RCC_OscConfig+0x28c>)
 8007608:	4313      	orrs	r3, r2
 800760a:	60cb      	str	r3, [r1, #12]
 800760c:	e028      	b.n	8007660 <HAL_RCC_OscConfig+0x1d0>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007612:	2b00      	cmp	r3, #0
 8007614:	da0a      	bge.n	800762c <HAL_RCC_OscConfig+0x19c>
 8007616:	4b41      	ldr	r3, [pc, #260]	; (800771c <HAL_RCC_OscConfig+0x28c>)
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6a1b      	ldr	r3, [r3, #32]
 8007622:	015b      	lsls	r3, r3, #5
 8007624:	493d      	ldr	r1, [pc, #244]	; (800771c <HAL_RCC_OscConfig+0x28c>)
 8007626:	4313      	orrs	r3, r2
 8007628:	60cb      	str	r3, [r1, #12]
 800762a:	e019      	b.n	8007660 <HAL_RCC_OscConfig+0x1d0>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007634:	d30a      	bcc.n	800764c <HAL_RCC_OscConfig+0x1bc>
 8007636:	4b39      	ldr	r3, [pc, #228]	; (800771c <HAL_RCC_OscConfig+0x28c>)
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a1b      	ldr	r3, [r3, #32]
 8007642:	029b      	lsls	r3, r3, #10
 8007644:	4935      	ldr	r1, [pc, #212]	; (800771c <HAL_RCC_OscConfig+0x28c>)
 8007646:	4313      	orrs	r3, r2
 8007648:	60cb      	str	r3, [r1, #12]
 800764a:	e009      	b.n	8007660 <HAL_RCC_OscConfig+0x1d0>
 800764c:	4b33      	ldr	r3, [pc, #204]	; (800771c <HAL_RCC_OscConfig+0x28c>)
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a1b      	ldr	r3, [r3, #32]
 8007658:	03db      	lsls	r3, r3, #15
 800765a:	4930      	ldr	r1, [pc, #192]	; (800771c <HAL_RCC_OscConfig+0x28c>)
 800765c:	4313      	orrs	r3, r2
 800765e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007662:	2b00      	cmp	r3, #0
 8007664:	d10a      	bne.n	800767c <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766a:	4618      	mov	r0, r3
 800766c:	f001 f936 	bl	80088dc <RCC_SetFlashLatencyFromMSIRange>
 8007670:	4603      	mov	r3, r0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d002      	beq.n	800767c <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	f000 bdda 	b.w	8008230 <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800767c:	f001 f8d8 	bl	8008830 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007680:	4b27      	ldr	r3, [pc, #156]	; (8007720 <HAL_RCC_OscConfig+0x290>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4618      	mov	r0, r3
 8007686:	f7fb fa81 	bl	8002b8c <HAL_InitTick>
 800768a:	4603      	mov	r3, r0
 800768c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8007690:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007694:	2b00      	cmp	r3, #0
 8007696:	f000 808a 	beq.w	80077ae <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 800769a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800769e:	f000 bdc7 	b.w	8008230 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	69db      	ldr	r3, [r3, #28]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d066      	beq.n	8007778 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80076aa:	4b1c      	ldr	r3, [pc, #112]	; (800771c <HAL_RCC_OscConfig+0x28c>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a1b      	ldr	r2, [pc, #108]	; (800771c <HAL_RCC_OscConfig+0x28c>)
 80076b0:	f043 0301 	orr.w	r3, r3, #1
 80076b4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80076b6:	f7fb fab3 	bl	8002c20 <HAL_GetTick>
 80076ba:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80076bc:	e009      	b.n	80076d2 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80076be:	f7fb faaf 	bl	8002c20 <HAL_GetTick>
 80076c2:	4602      	mov	r2, r0
 80076c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c6:	1ad3      	subs	r3, r2, r3
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d902      	bls.n	80076d2 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80076cc:	2303      	movs	r3, #3
 80076ce:	f000 bdaf 	b.w	8008230 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80076d2:	4b12      	ldr	r3, [pc, #72]	; (800771c <HAL_RCC_OscConfig+0x28c>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 0304 	and.w	r3, r3, #4
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d0ef      	beq.n	80076be <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80076de:	4b0f      	ldr	r3, [pc, #60]	; (800771c <HAL_RCC_OscConfig+0x28c>)
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	4a0e      	ldr	r2, [pc, #56]	; (800771c <HAL_RCC_OscConfig+0x28c>)
 80076e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80076e8:	6093      	str	r3, [r2, #8]
 80076ea:	4b0c      	ldr	r3, [pc, #48]	; (800771c <HAL_RCC_OscConfig+0x28c>)
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f6:	4909      	ldr	r1, [pc, #36]	; (800771c <HAL_RCC_OscConfig+0x28c>)
 80076f8:	4313      	orrs	r3, r2
 80076fa:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007700:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8007704:	d30e      	bcc.n	8007724 <HAL_RCC_OscConfig+0x294>
 8007706:	4b05      	ldr	r3, [pc, #20]	; (800771c <HAL_RCC_OscConfig+0x28c>)
 8007708:	68db      	ldr	r3, [r3, #12]
 800770a:	f023 021f 	bic.w	r2, r3, #31
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6a1b      	ldr	r3, [r3, #32]
 8007712:	4902      	ldr	r1, [pc, #8]	; (800771c <HAL_RCC_OscConfig+0x28c>)
 8007714:	4313      	orrs	r3, r2
 8007716:	60cb      	str	r3, [r1, #12]
 8007718:	e04a      	b.n	80077b0 <HAL_RCC_OscConfig+0x320>
 800771a:	bf00      	nop
 800771c:	46020c00 	.word	0x46020c00
 8007720:	20000110 	.word	0x20000110
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007728:	2b00      	cmp	r3, #0
 800772a:	da0a      	bge.n	8007742 <HAL_RCC_OscConfig+0x2b2>
 800772c:	4b9b      	ldr	r3, [pc, #620]	; (800799c <HAL_RCC_OscConfig+0x50c>)
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6a1b      	ldr	r3, [r3, #32]
 8007738:	015b      	lsls	r3, r3, #5
 800773a:	4998      	ldr	r1, [pc, #608]	; (800799c <HAL_RCC_OscConfig+0x50c>)
 800773c:	4313      	orrs	r3, r2
 800773e:	60cb      	str	r3, [r1, #12]
 8007740:	e036      	b.n	80077b0 <HAL_RCC_OscConfig+0x320>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800774a:	d30a      	bcc.n	8007762 <HAL_RCC_OscConfig+0x2d2>
 800774c:	4b93      	ldr	r3, [pc, #588]	; (800799c <HAL_RCC_OscConfig+0x50c>)
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6a1b      	ldr	r3, [r3, #32]
 8007758:	029b      	lsls	r3, r3, #10
 800775a:	4990      	ldr	r1, [pc, #576]	; (800799c <HAL_RCC_OscConfig+0x50c>)
 800775c:	4313      	orrs	r3, r2
 800775e:	60cb      	str	r3, [r1, #12]
 8007760:	e026      	b.n	80077b0 <HAL_RCC_OscConfig+0x320>
 8007762:	4b8e      	ldr	r3, [pc, #568]	; (800799c <HAL_RCC_OscConfig+0x50c>)
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6a1b      	ldr	r3, [r3, #32]
 800776e:	03db      	lsls	r3, r3, #15
 8007770:	498a      	ldr	r1, [pc, #552]	; (800799c <HAL_RCC_OscConfig+0x50c>)
 8007772:	4313      	orrs	r3, r2
 8007774:	60cb      	str	r3, [r1, #12]
 8007776:	e01b      	b.n	80077b0 <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8007778:	4b88      	ldr	r3, [pc, #544]	; (800799c <HAL_RCC_OscConfig+0x50c>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a87      	ldr	r2, [pc, #540]	; (800799c <HAL_RCC_OscConfig+0x50c>)
 800777e:	f023 0301 	bic.w	r3, r3, #1
 8007782:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007784:	f7fb fa4c 	bl	8002c20 <HAL_GetTick>
 8007788:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800778a:	e009      	b.n	80077a0 <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800778c:	f7fb fa48 	bl	8002c20 <HAL_GetTick>
 8007790:	4602      	mov	r2, r0
 8007792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007794:	1ad3      	subs	r3, r2, r3
 8007796:	2b02      	cmp	r3, #2
 8007798:	d902      	bls.n	80077a0 <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 800779a:	2303      	movs	r3, #3
 800779c:	f000 bd48 	b.w	8008230 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80077a0:	4b7e      	ldr	r3, [pc, #504]	; (800799c <HAL_RCC_OscConfig+0x50c>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 0304 	and.w	r3, r3, #4
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d1ef      	bne.n	800778c <HAL_RCC_OscConfig+0x2fc>
 80077ac:	e000      	b.n	80077b0 <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80077ae:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 0301 	and.w	r3, r3, #1
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f000 8094 	beq.w	80078e6 <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80077be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c0:	2b08      	cmp	r3, #8
 80077c2:	d005      	beq.n	80077d0 <HAL_RCC_OscConfig+0x340>
 80077c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c6:	2b0c      	cmp	r3, #12
 80077c8:	d110      	bne.n	80077ec <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80077ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077cc:	2b03      	cmp	r3, #3
 80077ce:	d10d      	bne.n	80077ec <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077d0:	4b72      	ldr	r3, [pc, #456]	; (800799c <HAL_RCC_OscConfig+0x50c>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f000 8083 	beq.w	80078e4 <HAL_RCC_OscConfig+0x454>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d17e      	bne.n	80078e4 <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	f000 bd22 	b.w	8008230 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077f4:	d106      	bne.n	8007804 <HAL_RCC_OscConfig+0x374>
 80077f6:	4b69      	ldr	r3, [pc, #420]	; (800799c <HAL_RCC_OscConfig+0x50c>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a68      	ldr	r2, [pc, #416]	; (800799c <HAL_RCC_OscConfig+0x50c>)
 80077fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007800:	6013      	str	r3, [r2, #0]
 8007802:	e041      	b.n	8007888 <HAL_RCC_OscConfig+0x3f8>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800780c:	d112      	bne.n	8007834 <HAL_RCC_OscConfig+0x3a4>
 800780e:	4b63      	ldr	r3, [pc, #396]	; (800799c <HAL_RCC_OscConfig+0x50c>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a62      	ldr	r2, [pc, #392]	; (800799c <HAL_RCC_OscConfig+0x50c>)
 8007814:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007818:	6013      	str	r3, [r2, #0]
 800781a:	4b60      	ldr	r3, [pc, #384]	; (800799c <HAL_RCC_OscConfig+0x50c>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a5f      	ldr	r2, [pc, #380]	; (800799c <HAL_RCC_OscConfig+0x50c>)
 8007820:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007824:	6013      	str	r3, [r2, #0]
 8007826:	4b5d      	ldr	r3, [pc, #372]	; (800799c <HAL_RCC_OscConfig+0x50c>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a5c      	ldr	r2, [pc, #368]	; (800799c <HAL_RCC_OscConfig+0x50c>)
 800782c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007830:	6013      	str	r3, [r2, #0]
 8007832:	e029      	b.n	8007888 <HAL_RCC_OscConfig+0x3f8>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800783c:	d112      	bne.n	8007864 <HAL_RCC_OscConfig+0x3d4>
 800783e:	4b57      	ldr	r3, [pc, #348]	; (800799c <HAL_RCC_OscConfig+0x50c>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a56      	ldr	r2, [pc, #344]	; (800799c <HAL_RCC_OscConfig+0x50c>)
 8007844:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007848:	6013      	str	r3, [r2, #0]
 800784a:	4b54      	ldr	r3, [pc, #336]	; (800799c <HAL_RCC_OscConfig+0x50c>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a53      	ldr	r2, [pc, #332]	; (800799c <HAL_RCC_OscConfig+0x50c>)
 8007850:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007854:	6013      	str	r3, [r2, #0]
 8007856:	4b51      	ldr	r3, [pc, #324]	; (800799c <HAL_RCC_OscConfig+0x50c>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a50      	ldr	r2, [pc, #320]	; (800799c <HAL_RCC_OscConfig+0x50c>)
 800785c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007860:	6013      	str	r3, [r2, #0]
 8007862:	e011      	b.n	8007888 <HAL_RCC_OscConfig+0x3f8>
 8007864:	4b4d      	ldr	r3, [pc, #308]	; (800799c <HAL_RCC_OscConfig+0x50c>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a4c      	ldr	r2, [pc, #304]	; (800799c <HAL_RCC_OscConfig+0x50c>)
 800786a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800786e:	6013      	str	r3, [r2, #0]
 8007870:	4b4a      	ldr	r3, [pc, #296]	; (800799c <HAL_RCC_OscConfig+0x50c>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a49      	ldr	r2, [pc, #292]	; (800799c <HAL_RCC_OscConfig+0x50c>)
 8007876:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800787a:	6013      	str	r3, [r2, #0]
 800787c:	4b47      	ldr	r3, [pc, #284]	; (800799c <HAL_RCC_OscConfig+0x50c>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a46      	ldr	r2, [pc, #280]	; (800799c <HAL_RCC_OscConfig+0x50c>)
 8007882:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007886:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d014      	beq.n	80078ba <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 8007890:	f7fb f9c6 	bl	8002c20 <HAL_GetTick>
 8007894:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007896:	e009      	b.n	80078ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007898:	f7fb f9c2 	bl	8002c20 <HAL_GetTick>
 800789c:	4602      	mov	r2, r0
 800789e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a0:	1ad3      	subs	r3, r2, r3
 80078a2:	2b64      	cmp	r3, #100	; 0x64
 80078a4:	d902      	bls.n	80078ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80078a6:	2303      	movs	r3, #3
 80078a8:	f000 bcc2 	b.w	8008230 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80078ac:	4b3b      	ldr	r3, [pc, #236]	; (800799c <HAL_RCC_OscConfig+0x50c>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d0ef      	beq.n	8007898 <HAL_RCC_OscConfig+0x408>
 80078b8:	e015      	b.n	80078e6 <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80078ba:	f7fb f9b1 	bl	8002c20 <HAL_GetTick>
 80078be:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80078c0:	e009      	b.n	80078d6 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80078c2:	f7fb f9ad 	bl	8002c20 <HAL_GetTick>
 80078c6:	4602      	mov	r2, r0
 80078c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ca:	1ad3      	subs	r3, r2, r3
 80078cc:	2b64      	cmp	r3, #100	; 0x64
 80078ce:	d902      	bls.n	80078d6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80078d0:	2303      	movs	r3, #3
 80078d2:	f000 bcad 	b.w	8008230 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80078d6:	4b31      	ldr	r3, [pc, #196]	; (800799c <HAL_RCC_OscConfig+0x50c>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d1ef      	bne.n	80078c2 <HAL_RCC_OscConfig+0x432>
 80078e2:	e000      	b.n	80078e6 <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f003 0302 	and.w	r3, r3, #2
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d066      	beq.n	80079c0 <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80078f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f4:	2b04      	cmp	r3, #4
 80078f6:	d005      	beq.n	8007904 <HAL_RCC_OscConfig+0x474>
 80078f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fa:	2b0c      	cmp	r3, #12
 80078fc:	d11a      	bne.n	8007934 <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80078fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007900:	2b02      	cmp	r3, #2
 8007902:	d117      	bne.n	8007934 <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007904:	4b25      	ldr	r3, [pc, #148]	; (800799c <HAL_RCC_OscConfig+0x50c>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800790c:	2b00      	cmp	r3, #0
 800790e:	d006      	beq.n	800791e <HAL_RCC_OscConfig+0x48e>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d102      	bne.n	800791e <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 8007918:	2301      	movs	r3, #1
 800791a:	f000 bc89 	b.w	8008230 <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800791e:	4b1f      	ldr	r3, [pc, #124]	; (800799c <HAL_RCC_OscConfig+0x50c>)
 8007920:	691b      	ldr	r3, [r3, #16]
 8007922:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	041b      	lsls	r3, r3, #16
 800792c:	491b      	ldr	r1, [pc, #108]	; (800799c <HAL_RCC_OscConfig+0x50c>)
 800792e:	4313      	orrs	r3, r2
 8007930:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007932:	e045      	b.n	80079c0 <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d024      	beq.n	8007986 <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800793c:	4b17      	ldr	r3, [pc, #92]	; (800799c <HAL_RCC_OscConfig+0x50c>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a16      	ldr	r2, [pc, #88]	; (800799c <HAL_RCC_OscConfig+0x50c>)
 8007942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007946:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007948:	f7fb f96a 	bl	8002c20 <HAL_GetTick>
 800794c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800794e:	e009      	b.n	8007964 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007950:	f7fb f966 	bl	8002c20 <HAL_GetTick>
 8007954:	4602      	mov	r2, r0
 8007956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007958:	1ad3      	subs	r3, r2, r3
 800795a:	2b02      	cmp	r3, #2
 800795c:	d902      	bls.n	8007964 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800795e:	2303      	movs	r3, #3
 8007960:	f000 bc66 	b.w	8008230 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007964:	4b0d      	ldr	r3, [pc, #52]	; (800799c <HAL_RCC_OscConfig+0x50c>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800796c:	2b00      	cmp	r3, #0
 800796e:	d0ef      	beq.n	8007950 <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8007970:	4b0a      	ldr	r3, [pc, #40]	; (800799c <HAL_RCC_OscConfig+0x50c>)
 8007972:	691b      	ldr	r3, [r3, #16]
 8007974:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	691b      	ldr	r3, [r3, #16]
 800797c:	041b      	lsls	r3, r3, #16
 800797e:	4907      	ldr	r1, [pc, #28]	; (800799c <HAL_RCC_OscConfig+0x50c>)
 8007980:	4313      	orrs	r3, r2
 8007982:	610b      	str	r3, [r1, #16]
 8007984:	e01c      	b.n	80079c0 <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8007986:	4b05      	ldr	r3, [pc, #20]	; (800799c <HAL_RCC_OscConfig+0x50c>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a04      	ldr	r2, [pc, #16]	; (800799c <HAL_RCC_OscConfig+0x50c>)
 800798c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007990:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007992:	f7fb f945 	bl	8002c20 <HAL_GetTick>
 8007996:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007998:	e00c      	b.n	80079b4 <HAL_RCC_OscConfig+0x524>
 800799a:	bf00      	nop
 800799c:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079a0:	f7fb f93e 	bl	8002c20 <HAL_GetTick>
 80079a4:	4602      	mov	r2, r0
 80079a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a8:	1ad3      	subs	r3, r2, r3
 80079aa:	2b02      	cmp	r3, #2
 80079ac:	d902      	bls.n	80079b4 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80079ae:	2303      	movs	r3, #3
 80079b0:	f000 bc3e 	b.w	8008230 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80079b4:	4baf      	ldr	r3, [pc, #700]	; (8007c74 <HAL_RCC_OscConfig+0x7e4>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d1ef      	bne.n	80079a0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f003 0308 	and.w	r3, r3, #8
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f000 80c7 	beq.w	8007b5c <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80079ce:	2300      	movs	r3, #0
 80079d0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079d4:	4ba7      	ldr	r3, [pc, #668]	; (8007c74 <HAL_RCC_OscConfig+0x7e4>)
 80079d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80079da:	f003 0304 	and.w	r3, r3, #4
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d111      	bne.n	8007a06 <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079e2:	4ba4      	ldr	r3, [pc, #656]	; (8007c74 <HAL_RCC_OscConfig+0x7e4>)
 80079e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80079e8:	4aa2      	ldr	r2, [pc, #648]	; (8007c74 <HAL_RCC_OscConfig+0x7e4>)
 80079ea:	f043 0304 	orr.w	r3, r3, #4
 80079ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80079f2:	4ba0      	ldr	r3, [pc, #640]	; (8007c74 <HAL_RCC_OscConfig+0x7e4>)
 80079f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80079f8:	f003 0304 	and.w	r3, r3, #4
 80079fc:	617b      	str	r3, [r7, #20]
 80079fe:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8007a00:	2301      	movs	r3, #1
 8007a02:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007a06:	4b9c      	ldr	r3, [pc, #624]	; (8007c78 <HAL_RCC_OscConfig+0x7e8>)
 8007a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a0a:	f003 0301 	and.w	r3, r3, #1
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d118      	bne.n	8007a44 <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8007a12:	4b99      	ldr	r3, [pc, #612]	; (8007c78 <HAL_RCC_OscConfig+0x7e8>)
 8007a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a16:	4a98      	ldr	r2, [pc, #608]	; (8007c78 <HAL_RCC_OscConfig+0x7e8>)
 8007a18:	f043 0301 	orr.w	r3, r3, #1
 8007a1c:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a1e:	f7fb f8ff 	bl	8002c20 <HAL_GetTick>
 8007a22:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007a24:	e008      	b.n	8007a38 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a26:	f7fb f8fb 	bl	8002c20 <HAL_GetTick>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a2e:	1ad3      	subs	r3, r2, r3
 8007a30:	2b02      	cmp	r3, #2
 8007a32:	d901      	bls.n	8007a38 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 8007a34:	2303      	movs	r3, #3
 8007a36:	e3fb      	b.n	8008230 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007a38:	4b8f      	ldr	r3, [pc, #572]	; (8007c78 <HAL_RCC_OscConfig+0x7e8>)
 8007a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a3c:	f003 0301 	and.w	r3, r3, #1
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d0f0      	beq.n	8007a26 <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	695b      	ldr	r3, [r3, #20]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d05f      	beq.n	8007b0c <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8007a4c:	4b89      	ldr	r3, [pc, #548]	; (8007c74 <HAL_RCC_OscConfig+0x7e4>)
 8007a4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007a52:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	699a      	ldr	r2, [r3, #24]
 8007a58:	6a3b      	ldr	r3, [r7, #32]
 8007a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d037      	beq.n	8007ad2 <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8007a62:	6a3b      	ldr	r3, [r7, #32]
 8007a64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d006      	beq.n	8007a7a <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8007a6c:	6a3b      	ldr	r3, [r7, #32]
 8007a6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d101      	bne.n	8007a7a <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	e3da      	b.n	8008230 <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8007a7a:	6a3b      	ldr	r3, [r7, #32]
 8007a7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d01b      	beq.n	8007abc <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 8007a84:	4b7b      	ldr	r3, [pc, #492]	; (8007c74 <HAL_RCC_OscConfig+0x7e4>)
 8007a86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007a8a:	4a7a      	ldr	r2, [pc, #488]	; (8007c74 <HAL_RCC_OscConfig+0x7e4>)
 8007a8c:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8007a90:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8007a94:	f7fb f8c4 	bl	8002c20 <HAL_GetTick>
 8007a98:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007a9a:	e008      	b.n	8007aae <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a9c:	f7fb f8c0 	bl	8002c20 <HAL_GetTick>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa4:	1ad3      	subs	r3, r2, r3
 8007aa6:	2b02      	cmp	r3, #2
 8007aa8:	d901      	bls.n	8007aae <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 8007aaa:	2303      	movs	r3, #3
 8007aac:	e3c0      	b.n	8008230 <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007aae:	4b71      	ldr	r3, [pc, #452]	; (8007c74 <HAL_RCC_OscConfig+0x7e4>)
 8007ab0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ab4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d1ef      	bne.n	8007a9c <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8007abc:	4b6d      	ldr	r3, [pc, #436]	; (8007c74 <HAL_RCC_OscConfig+0x7e4>)
 8007abe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ac2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	699b      	ldr	r3, [r3, #24]
 8007aca:	496a      	ldr	r1, [pc, #424]	; (8007c74 <HAL_RCC_OscConfig+0x7e4>)
 8007acc:	4313      	orrs	r3, r2
 8007ace:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8007ad2:	4b68      	ldr	r3, [pc, #416]	; (8007c74 <HAL_RCC_OscConfig+0x7e4>)
 8007ad4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ad8:	4a66      	ldr	r2, [pc, #408]	; (8007c74 <HAL_RCC_OscConfig+0x7e4>)
 8007ada:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007ade:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8007ae2:	f7fb f89d 	bl	8002c20 <HAL_GetTick>
 8007ae6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8007ae8:	e008      	b.n	8007afc <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007aea:	f7fb f899 	bl	8002c20 <HAL_GetTick>
 8007aee:	4602      	mov	r2, r0
 8007af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	2b02      	cmp	r3, #2
 8007af6:	d901      	bls.n	8007afc <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 8007af8:	2303      	movs	r3, #3
 8007afa:	e399      	b.n	8008230 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8007afc:	4b5d      	ldr	r3, [pc, #372]	; (8007c74 <HAL_RCC_OscConfig+0x7e4>)
 8007afe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d0ef      	beq.n	8007aea <HAL_RCC_OscConfig+0x65a>
 8007b0a:	e01b      	b.n	8007b44 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8007b0c:	4b59      	ldr	r3, [pc, #356]	; (8007c74 <HAL_RCC_OscConfig+0x7e4>)
 8007b0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b12:	4a58      	ldr	r2, [pc, #352]	; (8007c74 <HAL_RCC_OscConfig+0x7e4>)
 8007b14:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8007b18:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8007b1c:	f7fb f880 	bl	8002c20 <HAL_GetTick>
 8007b20:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007b22:	e008      	b.n	8007b36 <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b24:	f7fb f87c 	bl	8002c20 <HAL_GetTick>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b2c:	1ad3      	subs	r3, r2, r3
 8007b2e:	2b02      	cmp	r3, #2
 8007b30:	d901      	bls.n	8007b36 <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 8007b32:	2303      	movs	r3, #3
 8007b34:	e37c      	b.n	8008230 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007b36:	4b4f      	ldr	r3, [pc, #316]	; (8007c74 <HAL_RCC_OscConfig+0x7e4>)
 8007b38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d1ef      	bne.n	8007b24 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007b44:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d107      	bne.n	8007b5c <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b4c:	4b49      	ldr	r3, [pc, #292]	; (8007c74 <HAL_RCC_OscConfig+0x7e4>)
 8007b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b52:	4a48      	ldr	r2, [pc, #288]	; (8007c74 <HAL_RCC_OscConfig+0x7e4>)
 8007b54:	f023 0304 	bic.w	r3, r3, #4
 8007b58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f003 0304 	and.w	r3, r3, #4
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f000 8112 	beq.w	8007d8e <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b70:	4b40      	ldr	r3, [pc, #256]	; (8007c74 <HAL_RCC_OscConfig+0x7e4>)
 8007b72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b76:	f003 0304 	and.w	r3, r3, #4
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d111      	bne.n	8007ba2 <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b7e:	4b3d      	ldr	r3, [pc, #244]	; (8007c74 <HAL_RCC_OscConfig+0x7e4>)
 8007b80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b84:	4a3b      	ldr	r2, [pc, #236]	; (8007c74 <HAL_RCC_OscConfig+0x7e4>)
 8007b86:	f043 0304 	orr.w	r3, r3, #4
 8007b8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8007b8e:	4b39      	ldr	r3, [pc, #228]	; (8007c74 <HAL_RCC_OscConfig+0x7e4>)
 8007b90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b94:	f003 0304 	and.w	r3, r3, #4
 8007b98:	613b      	str	r3, [r7, #16]
 8007b9a:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007ba2:	4b35      	ldr	r3, [pc, #212]	; (8007c78 <HAL_RCC_OscConfig+0x7e8>)
 8007ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba6:	f003 0301 	and.w	r3, r3, #1
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d118      	bne.n	8007be0 <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8007bae:	4b32      	ldr	r3, [pc, #200]	; (8007c78 <HAL_RCC_OscConfig+0x7e8>)
 8007bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb2:	4a31      	ldr	r2, [pc, #196]	; (8007c78 <HAL_RCC_OscConfig+0x7e8>)
 8007bb4:	f043 0301 	orr.w	r3, r3, #1
 8007bb8:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007bba:	f7fb f831 	bl	8002c20 <HAL_GetTick>
 8007bbe:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007bc0:	e008      	b.n	8007bd4 <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007bc2:	f7fb f82d 	bl	8002c20 <HAL_GetTick>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bca:	1ad3      	subs	r3, r2, r3
 8007bcc:	2b02      	cmp	r3, #2
 8007bce:	d901      	bls.n	8007bd4 <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 8007bd0:	2303      	movs	r3, #3
 8007bd2:	e32d      	b.n	8008230 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007bd4:	4b28      	ldr	r3, [pc, #160]	; (8007c78 <HAL_RCC_OscConfig+0x7e8>)
 8007bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bd8:	f003 0301 	and.w	r3, r3, #1
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d0f0      	beq.n	8007bc2 <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	f003 0301 	and.w	r3, r3, #1
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d01f      	beq.n	8007c2c <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	f003 0304 	and.w	r3, r3, #4
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d010      	beq.n	8007c1a <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007bf8:	4b1e      	ldr	r3, [pc, #120]	; (8007c74 <HAL_RCC_OscConfig+0x7e4>)
 8007bfa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007bfe:	4a1d      	ldr	r2, [pc, #116]	; (8007c74 <HAL_RCC_OscConfig+0x7e4>)
 8007c00:	f043 0304 	orr.w	r3, r3, #4
 8007c04:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007c08:	4b1a      	ldr	r3, [pc, #104]	; (8007c74 <HAL_RCC_OscConfig+0x7e4>)
 8007c0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c0e:	4a19      	ldr	r2, [pc, #100]	; (8007c74 <HAL_RCC_OscConfig+0x7e4>)
 8007c10:	f043 0301 	orr.w	r3, r3, #1
 8007c14:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007c18:	e018      	b.n	8007c4c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007c1a:	4b16      	ldr	r3, [pc, #88]	; (8007c74 <HAL_RCC_OscConfig+0x7e4>)
 8007c1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c20:	4a14      	ldr	r2, [pc, #80]	; (8007c74 <HAL_RCC_OscConfig+0x7e4>)
 8007c22:	f043 0301 	orr.w	r3, r3, #1
 8007c26:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007c2a:	e00f      	b.n	8007c4c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007c2c:	4b11      	ldr	r3, [pc, #68]	; (8007c74 <HAL_RCC_OscConfig+0x7e4>)
 8007c2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c32:	4a10      	ldr	r2, [pc, #64]	; (8007c74 <HAL_RCC_OscConfig+0x7e4>)
 8007c34:	f023 0301 	bic.w	r3, r3, #1
 8007c38:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007c3c:	4b0d      	ldr	r3, [pc, #52]	; (8007c74 <HAL_RCC_OscConfig+0x7e4>)
 8007c3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c42:	4a0c      	ldr	r2, [pc, #48]	; (8007c74 <HAL_RCC_OscConfig+0x7e4>)
 8007c44:	f023 0304 	bic.w	r3, r3, #4
 8007c48:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d058      	beq.n	8007d06 <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 8007c54:	f7fa ffe4 	bl	8002c20 <HAL_GetTick>
 8007c58:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c5a:	e00f      	b.n	8007c7c <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c5c:	f7fa ffe0 	bl	8002c20 <HAL_GetTick>
 8007c60:	4602      	mov	r2, r0
 8007c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c64:	1ad3      	subs	r3, r2, r3
 8007c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d906      	bls.n	8007c7c <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 8007c6e:	2303      	movs	r3, #3
 8007c70:	e2de      	b.n	8008230 <HAL_RCC_OscConfig+0xda0>
 8007c72:	bf00      	nop
 8007c74:	46020c00 	.word	0x46020c00
 8007c78:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c7c:	4b9c      	ldr	r3, [pc, #624]	; (8007ef0 <HAL_RCC_OscConfig+0xa60>)
 8007c7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c82:	f003 0302 	and.w	r3, r3, #2
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d0e8      	beq.n	8007c5c <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d01b      	beq.n	8007cce <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007c96:	4b96      	ldr	r3, [pc, #600]	; (8007ef0 <HAL_RCC_OscConfig+0xa60>)
 8007c98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c9c:	4a94      	ldr	r2, [pc, #592]	; (8007ef0 <HAL_RCC_OscConfig+0xa60>)
 8007c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ca2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007ca6:	e00a      	b.n	8007cbe <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ca8:	f7fa ffba 	bl	8002c20 <HAL_GetTick>
 8007cac:	4602      	mov	r2, r0
 8007cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb0:	1ad3      	subs	r3, r2, r3
 8007cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d901      	bls.n	8007cbe <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 8007cba:	2303      	movs	r3, #3
 8007cbc:	e2b8      	b.n	8008230 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007cbe:	4b8c      	ldr	r3, [pc, #560]	; (8007ef0 <HAL_RCC_OscConfig+0xa60>)
 8007cc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007cc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d0ed      	beq.n	8007ca8 <HAL_RCC_OscConfig+0x818>
 8007ccc:	e053      	b.n	8007d76 <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007cce:	4b88      	ldr	r3, [pc, #544]	; (8007ef0 <HAL_RCC_OscConfig+0xa60>)
 8007cd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007cd4:	4a86      	ldr	r2, [pc, #536]	; (8007ef0 <HAL_RCC_OscConfig+0xa60>)
 8007cd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cda:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007cde:	e00a      	b.n	8007cf6 <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ce0:	f7fa ff9e 	bl	8002c20 <HAL_GetTick>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce8:	1ad3      	subs	r3, r2, r3
 8007cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d901      	bls.n	8007cf6 <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 8007cf2:	2303      	movs	r3, #3
 8007cf4:	e29c      	b.n	8008230 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007cf6:	4b7e      	ldr	r3, [pc, #504]	; (8007ef0 <HAL_RCC_OscConfig+0xa60>)
 8007cf8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007cfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d1ed      	bne.n	8007ce0 <HAL_RCC_OscConfig+0x850>
 8007d04:	e037      	b.n	8007d76 <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8007d06:	f7fa ff8b 	bl	8002c20 <HAL_GetTick>
 8007d0a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007d0c:	e00a      	b.n	8007d24 <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d0e:	f7fa ff87 	bl	8002c20 <HAL_GetTick>
 8007d12:	4602      	mov	r2, r0
 8007d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d16:	1ad3      	subs	r3, r2, r3
 8007d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d901      	bls.n	8007d24 <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 8007d20:	2303      	movs	r3, #3
 8007d22:	e285      	b.n	8008230 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007d24:	4b72      	ldr	r3, [pc, #456]	; (8007ef0 <HAL_RCC_OscConfig+0xa60>)
 8007d26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d2a:	f003 0302 	and.w	r3, r3, #2
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d1ed      	bne.n	8007d0e <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8007d32:	4b6f      	ldr	r3, [pc, #444]	; (8007ef0 <HAL_RCC_OscConfig+0xa60>)
 8007d34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d01a      	beq.n	8007d76 <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007d40:	4b6b      	ldr	r3, [pc, #428]	; (8007ef0 <HAL_RCC_OscConfig+0xa60>)
 8007d42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d46:	4a6a      	ldr	r2, [pc, #424]	; (8007ef0 <HAL_RCC_OscConfig+0xa60>)
 8007d48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d4c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007d50:	e00a      	b.n	8007d68 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d52:	f7fa ff65 	bl	8002c20 <HAL_GetTick>
 8007d56:	4602      	mov	r2, r0
 8007d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5a:	1ad3      	subs	r3, r2, r3
 8007d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d901      	bls.n	8007d68 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 8007d64:	2303      	movs	r3, #3
 8007d66:	e263      	b.n	8008230 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007d68:	4b61      	ldr	r3, [pc, #388]	; (8007ef0 <HAL_RCC_OscConfig+0xa60>)
 8007d6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1ed      	bne.n	8007d52 <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007d76:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d107      	bne.n	8007d8e <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d7e:	4b5c      	ldr	r3, [pc, #368]	; (8007ef0 <HAL_RCC_OscConfig+0xa60>)
 8007d80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d84:	4a5a      	ldr	r2, [pc, #360]	; (8007ef0 <HAL_RCC_OscConfig+0xa60>)
 8007d86:	f023 0304 	bic.w	r3, r3, #4
 8007d8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f003 0320 	and.w	r3, r3, #32
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d036      	beq.n	8007e08 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d019      	beq.n	8007dd6 <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8007da2:	4b53      	ldr	r3, [pc, #332]	; (8007ef0 <HAL_RCC_OscConfig+0xa60>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a52      	ldr	r2, [pc, #328]	; (8007ef0 <HAL_RCC_OscConfig+0xa60>)
 8007da8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007dac:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007dae:	f7fa ff37 	bl	8002c20 <HAL_GetTick>
 8007db2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8007db4:	e008      	b.n	8007dc8 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007db6:	f7fa ff33 	bl	8002c20 <HAL_GetTick>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dbe:	1ad3      	subs	r3, r2, r3
 8007dc0:	2b02      	cmp	r3, #2
 8007dc2:	d901      	bls.n	8007dc8 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 8007dc4:	2303      	movs	r3, #3
 8007dc6:	e233      	b.n	8008230 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8007dc8:	4b49      	ldr	r3, [pc, #292]	; (8007ef0 <HAL_RCC_OscConfig+0xa60>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d0f0      	beq.n	8007db6 <HAL_RCC_OscConfig+0x926>
 8007dd4:	e018      	b.n	8007e08 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8007dd6:	4b46      	ldr	r3, [pc, #280]	; (8007ef0 <HAL_RCC_OscConfig+0xa60>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a45      	ldr	r2, [pc, #276]	; (8007ef0 <HAL_RCC_OscConfig+0xa60>)
 8007ddc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007de0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007de2:	f7fa ff1d 	bl	8002c20 <HAL_GetTick>
 8007de6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8007de8:	e008      	b.n	8007dfc <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007dea:	f7fa ff19 	bl	8002c20 <HAL_GetTick>
 8007dee:	4602      	mov	r2, r0
 8007df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df2:	1ad3      	subs	r3, r2, r3
 8007df4:	2b02      	cmp	r3, #2
 8007df6:	d901      	bls.n	8007dfc <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 8007df8:	2303      	movs	r3, #3
 8007dfa:	e219      	b.n	8008230 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8007dfc:	4b3c      	ldr	r3, [pc, #240]	; (8007ef0 <HAL_RCC_OscConfig+0xa60>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d1f0      	bne.n	8007dea <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d036      	beq.n	8007e82 <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d019      	beq.n	8007e50 <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8007e1c:	4b34      	ldr	r3, [pc, #208]	; (8007ef0 <HAL_RCC_OscConfig+0xa60>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a33      	ldr	r2, [pc, #204]	; (8007ef0 <HAL_RCC_OscConfig+0xa60>)
 8007e22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e26:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007e28:	f7fa fefa 	bl	8002c20 <HAL_GetTick>
 8007e2c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8007e2e:	e008      	b.n	8007e42 <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8007e30:	f7fa fef6 	bl	8002c20 <HAL_GetTick>
 8007e34:	4602      	mov	r2, r0
 8007e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e38:	1ad3      	subs	r3, r2, r3
 8007e3a:	2b02      	cmp	r3, #2
 8007e3c:	d901      	bls.n	8007e42 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 8007e3e:	2303      	movs	r3, #3
 8007e40:	e1f6      	b.n	8008230 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8007e42:	4b2b      	ldr	r3, [pc, #172]	; (8007ef0 <HAL_RCC_OscConfig+0xa60>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d0f0      	beq.n	8007e30 <HAL_RCC_OscConfig+0x9a0>
 8007e4e:	e018      	b.n	8007e82 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8007e50:	4b27      	ldr	r3, [pc, #156]	; (8007ef0 <HAL_RCC_OscConfig+0xa60>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a26      	ldr	r2, [pc, #152]	; (8007ef0 <HAL_RCC_OscConfig+0xa60>)
 8007e56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e5a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007e5c:	f7fa fee0 	bl	8002c20 <HAL_GetTick>
 8007e60:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8007e62:	e008      	b.n	8007e76 <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8007e64:	f7fa fedc 	bl	8002c20 <HAL_GetTick>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6c:	1ad3      	subs	r3, r2, r3
 8007e6e:	2b02      	cmp	r3, #2
 8007e70:	d901      	bls.n	8007e76 <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 8007e72:	2303      	movs	r3, #3
 8007e74:	e1dc      	b.n	8008230 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8007e76:	4b1e      	ldr	r3, [pc, #120]	; (8007ef0 <HAL_RCC_OscConfig+0xa60>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d1f0      	bne.n	8007e64 <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d07f      	beq.n	8007f8e <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d062      	beq.n	8007f5c <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8007e96:	4b16      	ldr	r3, [pc, #88]	; (8007ef0 <HAL_RCC_OscConfig+0xa60>)
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	4a15      	ldr	r2, [pc, #84]	; (8007ef0 <HAL_RCC_OscConfig+0xa60>)
 8007e9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007ea0:	6093      	str	r3, [r2, #8]
 8007ea2:	4b13      	ldr	r3, [pc, #76]	; (8007ef0 <HAL_RCC_OscConfig+0xa60>)
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eae:	4910      	ldr	r1, [pc, #64]	; (8007ef0 <HAL_RCC_OscConfig+0xa60>)
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8007ebc:	d309      	bcc.n	8007ed2 <HAL_RCC_OscConfig+0xa42>
 8007ebe:	4b0c      	ldr	r3, [pc, #48]	; (8007ef0 <HAL_RCC_OscConfig+0xa60>)
 8007ec0:	68db      	ldr	r3, [r3, #12]
 8007ec2:	f023 021f 	bic.w	r2, r3, #31
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a1b      	ldr	r3, [r3, #32]
 8007eca:	4909      	ldr	r1, [pc, #36]	; (8007ef0 <HAL_RCC_OscConfig+0xa60>)
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	60cb      	str	r3, [r1, #12]
 8007ed0:	e02a      	b.n	8007f28 <HAL_RCC_OscConfig+0xa98>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	da0c      	bge.n	8007ef4 <HAL_RCC_OscConfig+0xa64>
 8007eda:	4b05      	ldr	r3, [pc, #20]	; (8007ef0 <HAL_RCC_OscConfig+0xa60>)
 8007edc:	68db      	ldr	r3, [r3, #12]
 8007ede:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6a1b      	ldr	r3, [r3, #32]
 8007ee6:	015b      	lsls	r3, r3, #5
 8007ee8:	4901      	ldr	r1, [pc, #4]	; (8007ef0 <HAL_RCC_OscConfig+0xa60>)
 8007eea:	4313      	orrs	r3, r2
 8007eec:	60cb      	str	r3, [r1, #12]
 8007eee:	e01b      	b.n	8007f28 <HAL_RCC_OscConfig+0xa98>
 8007ef0:	46020c00 	.word	0x46020c00
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007efc:	d30a      	bcc.n	8007f14 <HAL_RCC_OscConfig+0xa84>
 8007efe:	4ba5      	ldr	r3, [pc, #660]	; (8008194 <HAL_RCC_OscConfig+0xd04>)
 8007f00:	68db      	ldr	r3, [r3, #12]
 8007f02:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6a1b      	ldr	r3, [r3, #32]
 8007f0a:	029b      	lsls	r3, r3, #10
 8007f0c:	49a1      	ldr	r1, [pc, #644]	; (8008194 <HAL_RCC_OscConfig+0xd04>)
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	60cb      	str	r3, [r1, #12]
 8007f12:	e009      	b.n	8007f28 <HAL_RCC_OscConfig+0xa98>
 8007f14:	4b9f      	ldr	r3, [pc, #636]	; (8008194 <HAL_RCC_OscConfig+0xd04>)
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6a1b      	ldr	r3, [r3, #32]
 8007f20:	03db      	lsls	r3, r3, #15
 8007f22:	499c      	ldr	r1, [pc, #624]	; (8008194 <HAL_RCC_OscConfig+0xd04>)
 8007f24:	4313      	orrs	r3, r2
 8007f26:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8007f28:	4b9a      	ldr	r3, [pc, #616]	; (8008194 <HAL_RCC_OscConfig+0xd04>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a99      	ldr	r2, [pc, #612]	; (8008194 <HAL_RCC_OscConfig+0xd04>)
 8007f2e:	f043 0310 	orr.w	r3, r3, #16
 8007f32:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007f34:	f7fa fe74 	bl	8002c20 <HAL_GetTick>
 8007f38:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8007f3a:	e008      	b.n	8007f4e <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8007f3c:	f7fa fe70 	bl	8002c20 <HAL_GetTick>
 8007f40:	4602      	mov	r2, r0
 8007f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f44:	1ad3      	subs	r3, r2, r3
 8007f46:	2b02      	cmp	r3, #2
 8007f48:	d901      	bls.n	8007f4e <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 8007f4a:	2303      	movs	r3, #3
 8007f4c:	e170      	b.n	8008230 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8007f4e:	4b91      	ldr	r3, [pc, #580]	; (8008194 <HAL_RCC_OscConfig+0xd04>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f003 0320 	and.w	r3, r3, #32
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d0f0      	beq.n	8007f3c <HAL_RCC_OscConfig+0xaac>
 8007f5a:	e018      	b.n	8007f8e <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8007f5c:	4b8d      	ldr	r3, [pc, #564]	; (8008194 <HAL_RCC_OscConfig+0xd04>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a8c      	ldr	r2, [pc, #560]	; (8008194 <HAL_RCC_OscConfig+0xd04>)
 8007f62:	f023 0310 	bic.w	r3, r3, #16
 8007f66:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007f68:	f7fa fe5a 	bl	8002c20 <HAL_GetTick>
 8007f6c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8007f6e:	e008      	b.n	8007f82 <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8007f70:	f7fa fe56 	bl	8002c20 <HAL_GetTick>
 8007f74:	4602      	mov	r2, r0
 8007f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f78:	1ad3      	subs	r3, r2, r3
 8007f7a:	2b02      	cmp	r3, #2
 8007f7c:	d901      	bls.n	8007f82 <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 8007f7e:	2303      	movs	r3, #3
 8007f80:	e156      	b.n	8008230 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8007f82:	4b84      	ldr	r3, [pc, #528]	; (8008194 <HAL_RCC_OscConfig+0xd04>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f003 0320 	and.w	r3, r3, #32
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d1f0      	bne.n	8007f70 <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	f000 814b 	beq.w	800822e <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007f9e:	4b7d      	ldr	r3, [pc, #500]	; (8008194 <HAL_RCC_OscConfig+0xd04>)
 8007fa0:	69db      	ldr	r3, [r3, #28]
 8007fa2:	f003 030c 	and.w	r3, r3, #12
 8007fa6:	2b0c      	cmp	r3, #12
 8007fa8:	f000 80fa 	beq.w	80081a0 <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb0:	2b02      	cmp	r3, #2
 8007fb2:	f040 80cc 	bne.w	800814e <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8007fb6:	4b77      	ldr	r3, [pc, #476]	; (8008194 <HAL_RCC_OscConfig+0xd04>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a76      	ldr	r2, [pc, #472]	; (8008194 <HAL_RCC_OscConfig+0xd04>)
 8007fbc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007fc0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007fc2:	f7fa fe2d 	bl	8002c20 <HAL_GetTick>
 8007fc6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007fc8:	e008      	b.n	8007fdc <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fca:	f7fa fe29 	bl	8002c20 <HAL_GetTick>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd2:	1ad3      	subs	r3, r2, r3
 8007fd4:	2b02      	cmp	r3, #2
 8007fd6:	d901      	bls.n	8007fdc <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 8007fd8:	2303      	movs	r3, #3
 8007fda:	e129      	b.n	8008230 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007fdc:	4b6d      	ldr	r3, [pc, #436]	; (8008194 <HAL_RCC_OscConfig+0xd04>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d1f0      	bne.n	8007fca <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007fe8:	4b6a      	ldr	r3, [pc, #424]	; (8008194 <HAL_RCC_OscConfig+0xd04>)
 8007fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007fee:	f003 0304 	and.w	r3, r3, #4
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d111      	bne.n	800801a <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8007ff6:	4b67      	ldr	r3, [pc, #412]	; (8008194 <HAL_RCC_OscConfig+0xd04>)
 8007ff8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ffc:	4a65      	ldr	r2, [pc, #404]	; (8008194 <HAL_RCC_OscConfig+0xd04>)
 8007ffe:	f043 0304 	orr.w	r3, r3, #4
 8008002:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8008006:	4b63      	ldr	r3, [pc, #396]	; (8008194 <HAL_RCC_OscConfig+0xd04>)
 8008008:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800800c:	f003 0304 	and.w	r3, r3, #4
 8008010:	60fb      	str	r3, [r7, #12]
 8008012:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8008014:	2301      	movs	r3, #1
 8008016:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800801a:	4b5f      	ldr	r3, [pc, #380]	; (8008198 <HAL_RCC_OscConfig+0xd08>)
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008022:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008026:	d102      	bne.n	800802e <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 8008028:	2301      	movs	r3, #1
 800802a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800802e:	4b5a      	ldr	r3, [pc, #360]	; (8008198 <HAL_RCC_OscConfig+0xd08>)
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	4a59      	ldr	r2, [pc, #356]	; (8008198 <HAL_RCC_OscConfig+0xd08>)
 8008034:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008038:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800803a:	4b56      	ldr	r3, [pc, #344]	; (8008194 <HAL_RCC_OscConfig+0xd04>)
 800803c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800803e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008042:	f023 0303 	bic.w	r3, r3, #3
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800804e:	3a01      	subs	r2, #1
 8008050:	0212      	lsls	r2, r2, #8
 8008052:	4311      	orrs	r1, r2
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008058:	430a      	orrs	r2, r1
 800805a:	494e      	ldr	r1, [pc, #312]	; (8008194 <HAL_RCC_OscConfig+0xd04>)
 800805c:	4313      	orrs	r3, r2
 800805e:	628b      	str	r3, [r1, #40]	; 0x28
 8008060:	4b4c      	ldr	r3, [pc, #304]	; (8008194 <HAL_RCC_OscConfig+0xd04>)
 8008062:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008064:	4b4d      	ldr	r3, [pc, #308]	; (800819c <HAL_RCC_OscConfig+0xd0c>)
 8008066:	4013      	ands	r3, r2
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800806c:	3a01      	subs	r2, #1
 800806e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008076:	3a01      	subs	r2, #1
 8008078:	0252      	lsls	r2, r2, #9
 800807a:	b292      	uxth	r2, r2
 800807c:	4311      	orrs	r1, r2
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008082:	3a01      	subs	r2, #1
 8008084:	0412      	lsls	r2, r2, #16
 8008086:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800808a:	4311      	orrs	r1, r2
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008090:	3a01      	subs	r2, #1
 8008092:	0612      	lsls	r2, r2, #24
 8008094:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008098:	430a      	orrs	r2, r1
 800809a:	493e      	ldr	r1, [pc, #248]	; (8008194 <HAL_RCC_OscConfig+0xd04>)
 800809c:	4313      	orrs	r3, r2
 800809e:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 80080a0:	4b3c      	ldr	r3, [pc, #240]	; (8008194 <HAL_RCC_OscConfig+0xd04>)
 80080a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080a4:	4a3b      	ldr	r2, [pc, #236]	; (8008194 <HAL_RCC_OscConfig+0xd04>)
 80080a6:	f023 0310 	bic.w	r3, r3, #16
 80080aa:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80080ac:	4b39      	ldr	r3, [pc, #228]	; (8008194 <HAL_RCC_OscConfig+0xd04>)
 80080ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080b4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80080bc:	00d2      	lsls	r2, r2, #3
 80080be:	4935      	ldr	r1, [pc, #212]	; (8008194 <HAL_RCC_OscConfig+0xd04>)
 80080c0:	4313      	orrs	r3, r2
 80080c2:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 80080c4:	4b33      	ldr	r3, [pc, #204]	; (8008194 <HAL_RCC_OscConfig+0xd04>)
 80080c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c8:	4a32      	ldr	r2, [pc, #200]	; (8008194 <HAL_RCC_OscConfig+0xd04>)
 80080ca:	f043 0310 	orr.w	r3, r3, #16
 80080ce:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80080d0:	4b30      	ldr	r3, [pc, #192]	; (8008194 <HAL_RCC_OscConfig+0xd04>)
 80080d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d4:	f023 020c 	bic.w	r2, r3, #12
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080dc:	492d      	ldr	r1, [pc, #180]	; (8008194 <HAL_RCC_OscConfig+0xd04>)
 80080de:	4313      	orrs	r3, r2
 80080e0:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 80080e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d105      	bne.n	80080f6 <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80080ea:	4b2b      	ldr	r3, [pc, #172]	; (8008198 <HAL_RCC_OscConfig+0xd08>)
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	4a2a      	ldr	r2, [pc, #168]	; (8008198 <HAL_RCC_OscConfig+0xd08>)
 80080f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80080f4:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80080f6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d107      	bne.n	800810e <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80080fe:	4b25      	ldr	r3, [pc, #148]	; (8008194 <HAL_RCC_OscConfig+0xd04>)
 8008100:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008104:	4a23      	ldr	r2, [pc, #140]	; (8008194 <HAL_RCC_OscConfig+0xd04>)
 8008106:	f023 0304 	bic.w	r3, r3, #4
 800810a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800810e:	4b21      	ldr	r3, [pc, #132]	; (8008194 <HAL_RCC_OscConfig+0xd04>)
 8008110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008112:	4a20      	ldr	r2, [pc, #128]	; (8008194 <HAL_RCC_OscConfig+0xd04>)
 8008114:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008118:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800811a:	4b1e      	ldr	r3, [pc, #120]	; (8008194 <HAL_RCC_OscConfig+0xd04>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a1d      	ldr	r2, [pc, #116]	; (8008194 <HAL_RCC_OscConfig+0xd04>)
 8008120:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008124:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008126:	f7fa fd7b 	bl	8002c20 <HAL_GetTick>
 800812a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800812c:	e008      	b.n	8008140 <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800812e:	f7fa fd77 	bl	8002c20 <HAL_GetTick>
 8008132:	4602      	mov	r2, r0
 8008134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008136:	1ad3      	subs	r3, r2, r3
 8008138:	2b02      	cmp	r3, #2
 800813a:	d901      	bls.n	8008140 <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 800813c:	2303      	movs	r3, #3
 800813e:	e077      	b.n	8008230 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8008140:	4b14      	ldr	r3, [pc, #80]	; (8008194 <HAL_RCC_OscConfig+0xd04>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008148:	2b00      	cmp	r3, #0
 800814a:	d0f0      	beq.n	800812e <HAL_RCC_OscConfig+0xc9e>
 800814c:	e06f      	b.n	800822e <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800814e:	4b11      	ldr	r3, [pc, #68]	; (8008194 <HAL_RCC_OscConfig+0xd04>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a10      	ldr	r2, [pc, #64]	; (8008194 <HAL_RCC_OscConfig+0xd04>)
 8008154:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008158:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800815a:	f7fa fd61 	bl	8002c20 <HAL_GetTick>
 800815e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008160:	e008      	b.n	8008174 <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008162:	f7fa fd5d 	bl	8002c20 <HAL_GetTick>
 8008166:	4602      	mov	r2, r0
 8008168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800816a:	1ad3      	subs	r3, r2, r3
 800816c:	2b02      	cmp	r3, #2
 800816e:	d901      	bls.n	8008174 <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 8008170:	2303      	movs	r3, #3
 8008172:	e05d      	b.n	8008230 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008174:	4b07      	ldr	r3, [pc, #28]	; (8008194 <HAL_RCC_OscConfig+0xd04>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800817c:	2b00      	cmp	r3, #0
 800817e:	d1f0      	bne.n	8008162 <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8008180:	4b04      	ldr	r3, [pc, #16]	; (8008194 <HAL_RCC_OscConfig+0xd04>)
 8008182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008184:	4a03      	ldr	r2, [pc, #12]	; (8008194 <HAL_RCC_OscConfig+0xd04>)
 8008186:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800818a:	f023 0303 	bic.w	r3, r3, #3
 800818e:	6293      	str	r3, [r2, #40]	; 0x28
 8008190:	e04d      	b.n	800822e <HAL_RCC_OscConfig+0xd9e>
 8008192:	bf00      	nop
 8008194:	46020c00 	.word	0x46020c00
 8008198:	46020800 	.word	0x46020800
 800819c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80081a0:	4b25      	ldr	r3, [pc, #148]	; (8008238 <HAL_RCC_OscConfig+0xda8>)
 80081a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a4:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80081a6:	4b24      	ldr	r3, [pc, #144]	; (8008238 <HAL_RCC_OscConfig+0xda8>)
 80081a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081aa:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d03a      	beq.n	800822a <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	f003 0203 	and.w	r2, r3, #3
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80081be:	429a      	cmp	r2, r3
 80081c0:	d133      	bne.n	800822a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80081c2:	69fb      	ldr	r3, [r7, #28]
 80081c4:	0a1b      	lsrs	r3, r3, #8
 80081c6:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ce:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d12a      	bne.n	800822a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 80081d4:	69fb      	ldr	r3, [r7, #28]
 80081d6:	0b1b      	lsrs	r3, r3, #12
 80081d8:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d122      	bne.n	800822a <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80081e4:	69bb      	ldr	r3, [r7, #24]
 80081e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081ee:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d11a      	bne.n	800822a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	0a5b      	lsrs	r3, r3, #9
 80081f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008200:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008202:	429a      	cmp	r2, r3
 8008204:	d111      	bne.n	800822a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	0c1b      	lsrs	r3, r3, #16
 800820a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008212:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008214:	429a      	cmp	r2, r3
 8008216:	d108      	bne.n	800822a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8008218:	69bb      	ldr	r3, [r7, #24]
 800821a:	0e1b      	lsrs	r3, r3, #24
 800821c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008224:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008226:	429a      	cmp	r2, r3
 8008228:	d001      	beq.n	800822e <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 800822a:	2301      	movs	r3, #1
 800822c:	e000      	b.n	8008230 <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 800822e:	2300      	movs	r3, #0
}
 8008230:	4618      	mov	r0, r3
 8008232:	3738      	adds	r7, #56	; 0x38
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}
 8008238:	46020c00 	.word	0x46020c00

0800823c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b086      	sub	sp, #24
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d101      	bne.n	8008250 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800824c:	2301      	movs	r3, #1
 800824e:	e1d9      	b.n	8008604 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008250:	4b9b      	ldr	r3, [pc, #620]	; (80084c0 <HAL_RCC_ClockConfig+0x284>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f003 030f 	and.w	r3, r3, #15
 8008258:	683a      	ldr	r2, [r7, #0]
 800825a:	429a      	cmp	r2, r3
 800825c:	d910      	bls.n	8008280 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800825e:	4b98      	ldr	r3, [pc, #608]	; (80084c0 <HAL_RCC_ClockConfig+0x284>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f023 020f 	bic.w	r2, r3, #15
 8008266:	4996      	ldr	r1, [pc, #600]	; (80084c0 <HAL_RCC_ClockConfig+0x284>)
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	4313      	orrs	r3, r2
 800826c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800826e:	4b94      	ldr	r3, [pc, #592]	; (80084c0 <HAL_RCC_ClockConfig+0x284>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f003 030f 	and.w	r3, r3, #15
 8008276:	683a      	ldr	r2, [r7, #0]
 8008278:	429a      	cmp	r2, r3
 800827a:	d001      	beq.n	8008280 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800827c:	2301      	movs	r3, #1
 800827e:	e1c1      	b.n	8008604 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f003 0310 	and.w	r3, r3, #16
 8008288:	2b00      	cmp	r3, #0
 800828a:	d010      	beq.n	80082ae <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	695a      	ldr	r2, [r3, #20]
 8008290:	4b8c      	ldr	r3, [pc, #560]	; (80084c4 <HAL_RCC_ClockConfig+0x288>)
 8008292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008294:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008298:	429a      	cmp	r2, r3
 800829a:	d908      	bls.n	80082ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800829c:	4b89      	ldr	r3, [pc, #548]	; (80084c4 <HAL_RCC_ClockConfig+0x288>)
 800829e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	695b      	ldr	r3, [r3, #20]
 80082a8:	4986      	ldr	r1, [pc, #536]	; (80084c4 <HAL_RCC_ClockConfig+0x288>)
 80082aa:	4313      	orrs	r3, r2
 80082ac:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f003 0308 	and.w	r3, r3, #8
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d012      	beq.n	80082e0 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	691a      	ldr	r2, [r3, #16]
 80082be:	4b81      	ldr	r3, [pc, #516]	; (80084c4 <HAL_RCC_ClockConfig+0x288>)
 80082c0:	6a1b      	ldr	r3, [r3, #32]
 80082c2:	091b      	lsrs	r3, r3, #4
 80082c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d909      	bls.n	80082e0 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80082cc:	4b7d      	ldr	r3, [pc, #500]	; (80084c4 <HAL_RCC_ClockConfig+0x288>)
 80082ce:	6a1b      	ldr	r3, [r3, #32]
 80082d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	691b      	ldr	r3, [r3, #16]
 80082d8:	011b      	lsls	r3, r3, #4
 80082da:	497a      	ldr	r1, [pc, #488]	; (80084c4 <HAL_RCC_ClockConfig+0x288>)
 80082dc:	4313      	orrs	r3, r2
 80082de:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f003 0304 	and.w	r3, r3, #4
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d010      	beq.n	800830e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	68da      	ldr	r2, [r3, #12]
 80082f0:	4b74      	ldr	r3, [pc, #464]	; (80084c4 <HAL_RCC_ClockConfig+0x288>)
 80082f2:	6a1b      	ldr	r3, [r3, #32]
 80082f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d908      	bls.n	800830e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80082fc:	4b71      	ldr	r3, [pc, #452]	; (80084c4 <HAL_RCC_ClockConfig+0x288>)
 80082fe:	6a1b      	ldr	r3, [r3, #32]
 8008300:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	496e      	ldr	r1, [pc, #440]	; (80084c4 <HAL_RCC_ClockConfig+0x288>)
 800830a:	4313      	orrs	r3, r2
 800830c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f003 0302 	and.w	r3, r3, #2
 8008316:	2b00      	cmp	r3, #0
 8008318:	d010      	beq.n	800833c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	689a      	ldr	r2, [r3, #8]
 800831e:	4b69      	ldr	r3, [pc, #420]	; (80084c4 <HAL_RCC_ClockConfig+0x288>)
 8008320:	6a1b      	ldr	r3, [r3, #32]
 8008322:	f003 030f 	and.w	r3, r3, #15
 8008326:	429a      	cmp	r2, r3
 8008328:	d908      	bls.n	800833c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800832a:	4b66      	ldr	r3, [pc, #408]	; (80084c4 <HAL_RCC_ClockConfig+0x288>)
 800832c:	6a1b      	ldr	r3, [r3, #32]
 800832e:	f023 020f 	bic.w	r2, r3, #15
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	4963      	ldr	r1, [pc, #396]	; (80084c4 <HAL_RCC_ClockConfig+0x288>)
 8008338:	4313      	orrs	r3, r2
 800833a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f003 0301 	and.w	r3, r3, #1
 8008344:	2b00      	cmp	r3, #0
 8008346:	f000 80d2 	beq.w	80084ee <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800834a:	2300      	movs	r3, #0
 800834c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	2b03      	cmp	r3, #3
 8008354:	d143      	bne.n	80083de <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008356:	4b5b      	ldr	r3, [pc, #364]	; (80084c4 <HAL_RCC_ClockConfig+0x288>)
 8008358:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800835c:	f003 0304 	and.w	r3, r3, #4
 8008360:	2b00      	cmp	r3, #0
 8008362:	d110      	bne.n	8008386 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8008364:	4b57      	ldr	r3, [pc, #348]	; (80084c4 <HAL_RCC_ClockConfig+0x288>)
 8008366:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800836a:	4a56      	ldr	r2, [pc, #344]	; (80084c4 <HAL_RCC_ClockConfig+0x288>)
 800836c:	f043 0304 	orr.w	r3, r3, #4
 8008370:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8008374:	4b53      	ldr	r3, [pc, #332]	; (80084c4 <HAL_RCC_ClockConfig+0x288>)
 8008376:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800837a:	f003 0304 	and.w	r3, r3, #4
 800837e:	60bb      	str	r3, [r7, #8]
 8008380:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8008382:	2301      	movs	r3, #1
 8008384:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8008386:	f7fa fc4b 	bl	8002c20 <HAL_GetTick>
 800838a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800838c:	4b4e      	ldr	r3, [pc, #312]	; (80084c8 <HAL_RCC_ClockConfig+0x28c>)
 800838e:	68db      	ldr	r3, [r3, #12]
 8008390:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00f      	beq.n	80083b8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8008398:	e008      	b.n	80083ac <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800839a:	f7fa fc41 	bl	8002c20 <HAL_GetTick>
 800839e:	4602      	mov	r2, r0
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	1ad3      	subs	r3, r2, r3
 80083a4:	2b02      	cmp	r3, #2
 80083a6:	d901      	bls.n	80083ac <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80083a8:	2303      	movs	r3, #3
 80083aa:	e12b      	b.n	8008604 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80083ac:	4b46      	ldr	r3, [pc, #280]	; (80084c8 <HAL_RCC_ClockConfig+0x28c>)
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d0f0      	beq.n	800839a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80083b8:	7dfb      	ldrb	r3, [r7, #23]
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d107      	bne.n	80083ce <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80083be:	4b41      	ldr	r3, [pc, #260]	; (80084c4 <HAL_RCC_ClockConfig+0x288>)
 80083c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80083c4:	4a3f      	ldr	r2, [pc, #252]	; (80084c4 <HAL_RCC_ClockConfig+0x288>)
 80083c6:	f023 0304 	bic.w	r3, r3, #4
 80083ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80083ce:	4b3d      	ldr	r3, [pc, #244]	; (80084c4 <HAL_RCC_ClockConfig+0x288>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d121      	bne.n	800841e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80083da:	2301      	movs	r3, #1
 80083dc:	e112      	b.n	8008604 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	2b02      	cmp	r3, #2
 80083e4:	d107      	bne.n	80083f6 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80083e6:	4b37      	ldr	r3, [pc, #220]	; (80084c4 <HAL_RCC_ClockConfig+0x288>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d115      	bne.n	800841e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80083f2:	2301      	movs	r3, #1
 80083f4:	e106      	b.n	8008604 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d107      	bne.n	800840e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80083fe:	4b31      	ldr	r3, [pc, #196]	; (80084c4 <HAL_RCC_ClockConfig+0x288>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f003 0304 	and.w	r3, r3, #4
 8008406:	2b00      	cmp	r3, #0
 8008408:	d109      	bne.n	800841e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800840a:	2301      	movs	r3, #1
 800840c:	e0fa      	b.n	8008604 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800840e:	4b2d      	ldr	r3, [pc, #180]	; (80084c4 <HAL_RCC_ClockConfig+0x288>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008416:	2b00      	cmp	r3, #0
 8008418:	d101      	bne.n	800841e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	e0f2      	b.n	8008604 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800841e:	4b29      	ldr	r3, [pc, #164]	; (80084c4 <HAL_RCC_ClockConfig+0x288>)
 8008420:	69db      	ldr	r3, [r3, #28]
 8008422:	f023 0203 	bic.w	r2, r3, #3
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	4926      	ldr	r1, [pc, #152]	; (80084c4 <HAL_RCC_ClockConfig+0x288>)
 800842c:	4313      	orrs	r3, r2
 800842e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8008430:	f7fa fbf6 	bl	8002c20 <HAL_GetTick>
 8008434:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	2b03      	cmp	r3, #3
 800843c:	d112      	bne.n	8008464 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800843e:	e00a      	b.n	8008456 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008440:	f7fa fbee 	bl	8002c20 <HAL_GetTick>
 8008444:	4602      	mov	r2, r0
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	1ad3      	subs	r3, r2, r3
 800844a:	f241 3288 	movw	r2, #5000	; 0x1388
 800844e:	4293      	cmp	r3, r2
 8008450:	d901      	bls.n	8008456 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8008452:	2303      	movs	r3, #3
 8008454:	e0d6      	b.n	8008604 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008456:	4b1b      	ldr	r3, [pc, #108]	; (80084c4 <HAL_RCC_ClockConfig+0x288>)
 8008458:	69db      	ldr	r3, [r3, #28]
 800845a:	f003 030c 	and.w	r3, r3, #12
 800845e:	2b0c      	cmp	r3, #12
 8008460:	d1ee      	bne.n	8008440 <HAL_RCC_ClockConfig+0x204>
 8008462:	e044      	b.n	80084ee <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	2b02      	cmp	r3, #2
 800846a:	d112      	bne.n	8008492 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800846c:	e00a      	b.n	8008484 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800846e:	f7fa fbd7 	bl	8002c20 <HAL_GetTick>
 8008472:	4602      	mov	r2, r0
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	1ad3      	subs	r3, r2, r3
 8008478:	f241 3288 	movw	r2, #5000	; 0x1388
 800847c:	4293      	cmp	r3, r2
 800847e:	d901      	bls.n	8008484 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008480:	2303      	movs	r3, #3
 8008482:	e0bf      	b.n	8008604 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008484:	4b0f      	ldr	r3, [pc, #60]	; (80084c4 <HAL_RCC_ClockConfig+0x288>)
 8008486:	69db      	ldr	r3, [r3, #28]
 8008488:	f003 030c 	and.w	r3, r3, #12
 800848c:	2b08      	cmp	r3, #8
 800848e:	d1ee      	bne.n	800846e <HAL_RCC_ClockConfig+0x232>
 8008490:	e02d      	b.n	80084ee <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d123      	bne.n	80084e2 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800849a:	e00a      	b.n	80084b2 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800849c:	f7fa fbc0 	bl	8002c20 <HAL_GetTick>
 80084a0:	4602      	mov	r2, r0
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	1ad3      	subs	r3, r2, r3
 80084a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d901      	bls.n	80084b2 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80084ae:	2303      	movs	r3, #3
 80084b0:	e0a8      	b.n	8008604 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80084b2:	4b04      	ldr	r3, [pc, #16]	; (80084c4 <HAL_RCC_ClockConfig+0x288>)
 80084b4:	69db      	ldr	r3, [r3, #28]
 80084b6:	f003 030c 	and.w	r3, r3, #12
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d1ee      	bne.n	800849c <HAL_RCC_ClockConfig+0x260>
 80084be:	e016      	b.n	80084ee <HAL_RCC_ClockConfig+0x2b2>
 80084c0:	40022000 	.word	0x40022000
 80084c4:	46020c00 	.word	0x46020c00
 80084c8:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80084cc:	f7fa fba8 	bl	8002c20 <HAL_GetTick>
 80084d0:	4602      	mov	r2, r0
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	1ad3      	subs	r3, r2, r3
 80084d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80084da:	4293      	cmp	r3, r2
 80084dc:	d901      	bls.n	80084e2 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80084de:	2303      	movs	r3, #3
 80084e0:	e090      	b.n	8008604 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80084e2:	4b4a      	ldr	r3, [pc, #296]	; (800860c <HAL_RCC_ClockConfig+0x3d0>)
 80084e4:	69db      	ldr	r3, [r3, #28]
 80084e6:	f003 030c 	and.w	r3, r3, #12
 80084ea:	2b04      	cmp	r3, #4
 80084ec:	d1ee      	bne.n	80084cc <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f003 0302 	and.w	r3, r3, #2
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d010      	beq.n	800851c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	689a      	ldr	r2, [r3, #8]
 80084fe:	4b43      	ldr	r3, [pc, #268]	; (800860c <HAL_RCC_ClockConfig+0x3d0>)
 8008500:	6a1b      	ldr	r3, [r3, #32]
 8008502:	f003 030f 	and.w	r3, r3, #15
 8008506:	429a      	cmp	r2, r3
 8008508:	d208      	bcs.n	800851c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800850a:	4b40      	ldr	r3, [pc, #256]	; (800860c <HAL_RCC_ClockConfig+0x3d0>)
 800850c:	6a1b      	ldr	r3, [r3, #32]
 800850e:	f023 020f 	bic.w	r2, r3, #15
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	493d      	ldr	r1, [pc, #244]	; (800860c <HAL_RCC_ClockConfig+0x3d0>)
 8008518:	4313      	orrs	r3, r2
 800851a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800851c:	4b3c      	ldr	r3, [pc, #240]	; (8008610 <HAL_RCC_ClockConfig+0x3d4>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f003 030f 	and.w	r3, r3, #15
 8008524:	683a      	ldr	r2, [r7, #0]
 8008526:	429a      	cmp	r2, r3
 8008528:	d210      	bcs.n	800854c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800852a:	4b39      	ldr	r3, [pc, #228]	; (8008610 <HAL_RCC_ClockConfig+0x3d4>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f023 020f 	bic.w	r2, r3, #15
 8008532:	4937      	ldr	r1, [pc, #220]	; (8008610 <HAL_RCC_ClockConfig+0x3d4>)
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	4313      	orrs	r3, r2
 8008538:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800853a:	4b35      	ldr	r3, [pc, #212]	; (8008610 <HAL_RCC_ClockConfig+0x3d4>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f003 030f 	and.w	r3, r3, #15
 8008542:	683a      	ldr	r2, [r7, #0]
 8008544:	429a      	cmp	r2, r3
 8008546:	d001      	beq.n	800854c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8008548:	2301      	movs	r3, #1
 800854a:	e05b      	b.n	8008604 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f003 0304 	and.w	r3, r3, #4
 8008554:	2b00      	cmp	r3, #0
 8008556:	d010      	beq.n	800857a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	68da      	ldr	r2, [r3, #12]
 800855c:	4b2b      	ldr	r3, [pc, #172]	; (800860c <HAL_RCC_ClockConfig+0x3d0>)
 800855e:	6a1b      	ldr	r3, [r3, #32]
 8008560:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008564:	429a      	cmp	r2, r3
 8008566:	d208      	bcs.n	800857a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8008568:	4b28      	ldr	r3, [pc, #160]	; (800860c <HAL_RCC_ClockConfig+0x3d0>)
 800856a:	6a1b      	ldr	r3, [r3, #32]
 800856c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	4925      	ldr	r1, [pc, #148]	; (800860c <HAL_RCC_ClockConfig+0x3d0>)
 8008576:	4313      	orrs	r3, r2
 8008578:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f003 0308 	and.w	r3, r3, #8
 8008582:	2b00      	cmp	r3, #0
 8008584:	d012      	beq.n	80085ac <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	691a      	ldr	r2, [r3, #16]
 800858a:	4b20      	ldr	r3, [pc, #128]	; (800860c <HAL_RCC_ClockConfig+0x3d0>)
 800858c:	6a1b      	ldr	r3, [r3, #32]
 800858e:	091b      	lsrs	r3, r3, #4
 8008590:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008594:	429a      	cmp	r2, r3
 8008596:	d209      	bcs.n	80085ac <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8008598:	4b1c      	ldr	r3, [pc, #112]	; (800860c <HAL_RCC_ClockConfig+0x3d0>)
 800859a:	6a1b      	ldr	r3, [r3, #32]
 800859c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	691b      	ldr	r3, [r3, #16]
 80085a4:	011b      	lsls	r3, r3, #4
 80085a6:	4919      	ldr	r1, [pc, #100]	; (800860c <HAL_RCC_ClockConfig+0x3d0>)
 80085a8:	4313      	orrs	r3, r2
 80085aa:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f003 0310 	and.w	r3, r3, #16
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d010      	beq.n	80085da <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	695a      	ldr	r2, [r3, #20]
 80085bc:	4b13      	ldr	r3, [pc, #76]	; (800860c <HAL_RCC_ClockConfig+0x3d0>)
 80085be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d208      	bcs.n	80085da <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80085c8:	4b10      	ldr	r3, [pc, #64]	; (800860c <HAL_RCC_ClockConfig+0x3d0>)
 80085ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	695b      	ldr	r3, [r3, #20]
 80085d4:	490d      	ldr	r1, [pc, #52]	; (800860c <HAL_RCC_ClockConfig+0x3d0>)
 80085d6:	4313      	orrs	r3, r2
 80085d8:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80085da:	f000 f821 	bl	8008620 <HAL_RCC_GetSysClockFreq>
 80085de:	4602      	mov	r2, r0
 80085e0:	4b0a      	ldr	r3, [pc, #40]	; (800860c <HAL_RCC_ClockConfig+0x3d0>)
 80085e2:	6a1b      	ldr	r3, [r3, #32]
 80085e4:	f003 030f 	and.w	r3, r3, #15
 80085e8:	490a      	ldr	r1, [pc, #40]	; (8008614 <HAL_RCC_ClockConfig+0x3d8>)
 80085ea:	5ccb      	ldrb	r3, [r1, r3]
 80085ec:	fa22 f303 	lsr.w	r3, r2, r3
 80085f0:	4a09      	ldr	r2, [pc, #36]	; (8008618 <HAL_RCC_ClockConfig+0x3dc>)
 80085f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80085f4:	4b09      	ldr	r3, [pc, #36]	; (800861c <HAL_RCC_ClockConfig+0x3e0>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4618      	mov	r0, r3
 80085fa:	f7fa fac7 	bl	8002b8c <HAL_InitTick>
 80085fe:	4603      	mov	r3, r0
 8008600:	73fb      	strb	r3, [r7, #15]

  return status;
 8008602:	7bfb      	ldrb	r3, [r7, #15]
}
 8008604:	4618      	mov	r0, r3
 8008606:	3718      	adds	r7, #24
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}
 800860c:	46020c00 	.word	0x46020c00
 8008610:	40022000 	.word	0x40022000
 8008614:	0800e288 	.word	0x0800e288
 8008618:	2000010c 	.word	0x2000010c
 800861c:	20000110 	.word	0x20000110

08008620 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008620:	b480      	push	{r7}
 8008622:	b08b      	sub	sp, #44	; 0x2c
 8008624:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8008626:	2300      	movs	r3, #0
 8008628:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800862a:	2300      	movs	r3, #0
 800862c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800862e:	4b7b      	ldr	r3, [pc, #492]	; (800881c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8008630:	69db      	ldr	r3, [r3, #28]
 8008632:	f003 030c 	and.w	r3, r3, #12
 8008636:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008638:	4b78      	ldr	r3, [pc, #480]	; (800881c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800863a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800863c:	f003 0303 	and.w	r3, r3, #3
 8008640:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008642:	69bb      	ldr	r3, [r7, #24]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d005      	beq.n	8008654 <HAL_RCC_GetSysClockFreq+0x34>
 8008648:	69bb      	ldr	r3, [r7, #24]
 800864a:	2b0c      	cmp	r3, #12
 800864c:	d121      	bne.n	8008692 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	2b01      	cmp	r3, #1
 8008652:	d11e      	bne.n	8008692 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8008654:	4b71      	ldr	r3, [pc, #452]	; (800881c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800865c:	2b00      	cmp	r3, #0
 800865e:	d107      	bne.n	8008670 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8008660:	4b6e      	ldr	r3, [pc, #440]	; (800881c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8008662:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008666:	0b1b      	lsrs	r3, r3, #12
 8008668:	f003 030f 	and.w	r3, r3, #15
 800866c:	627b      	str	r3, [r7, #36]	; 0x24
 800866e:	e005      	b.n	800867c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8008670:	4b6a      	ldr	r3, [pc, #424]	; (800881c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	0f1b      	lsrs	r3, r3, #28
 8008676:	f003 030f 	and.w	r3, r3, #15
 800867a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800867c:	4a68      	ldr	r2, [pc, #416]	; (8008820 <HAL_RCC_GetSysClockFreq+0x200>)
 800867e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008684:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008686:	69bb      	ldr	r3, [r7, #24]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d110      	bne.n	80086ae <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800868c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008690:	e00d      	b.n	80086ae <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008692:	4b62      	ldr	r3, [pc, #392]	; (800881c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8008694:	69db      	ldr	r3, [r3, #28]
 8008696:	f003 030c 	and.w	r3, r3, #12
 800869a:	2b04      	cmp	r3, #4
 800869c:	d102      	bne.n	80086a4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800869e:	4b61      	ldr	r3, [pc, #388]	; (8008824 <HAL_RCC_GetSysClockFreq+0x204>)
 80086a0:	623b      	str	r3, [r7, #32]
 80086a2:	e004      	b.n	80086ae <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80086a4:	69bb      	ldr	r3, [r7, #24]
 80086a6:	2b08      	cmp	r3, #8
 80086a8:	d101      	bne.n	80086ae <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80086aa:	4b5e      	ldr	r3, [pc, #376]	; (8008824 <HAL_RCC_GetSysClockFreq+0x204>)
 80086ac:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80086ae:	69bb      	ldr	r3, [r7, #24]
 80086b0:	2b0c      	cmp	r3, #12
 80086b2:	f040 80ac 	bne.w	800880e <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80086b6:	4b59      	ldr	r3, [pc, #356]	; (800881c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80086b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ba:	f003 0303 	and.w	r3, r3, #3
 80086be:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80086c0:	4b56      	ldr	r3, [pc, #344]	; (800881c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80086c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c4:	0a1b      	lsrs	r3, r3, #8
 80086c6:	f003 030f 	and.w	r3, r3, #15
 80086ca:	3301      	adds	r3, #1
 80086cc:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80086ce:	4b53      	ldr	r3, [pc, #332]	; (800881c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80086d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d2:	091b      	lsrs	r3, r3, #4
 80086d4:	f003 0301 	and.w	r3, r3, #1
 80086d8:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80086da:	4b50      	ldr	r3, [pc, #320]	; (800881c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80086dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086de:	08db      	lsrs	r3, r3, #3
 80086e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80086e4:	68ba      	ldr	r2, [r7, #8]
 80086e6:	fb02 f303 	mul.w	r3, r2, r3
 80086ea:	ee07 3a90 	vmov	s15, r3
 80086ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086f2:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	f000 8086 	beq.w	800880a <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	2b02      	cmp	r3, #2
 8008702:	d003      	beq.n	800870c <HAL_RCC_GetSysClockFreq+0xec>
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	2b03      	cmp	r3, #3
 8008708:	d022      	beq.n	8008750 <HAL_RCC_GetSysClockFreq+0x130>
 800870a:	e043      	b.n	8008794 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	ee07 3a90 	vmov	s15, r3
 8008712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008716:	eddf 6a44 	vldr	s13, [pc, #272]	; 8008828 <HAL_RCC_GetSysClockFreq+0x208>
 800871a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800871e:	4b3f      	ldr	r3, [pc, #252]	; (800881c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8008720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008726:	ee07 3a90 	vmov	s15, r3
 800872a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800872e:	ed97 6a01 	vldr	s12, [r7, #4]
 8008732:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800882c <HAL_RCC_GetSysClockFreq+0x20c>
 8008736:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800873a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800873e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008742:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800874a:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800874e:	e046      	b.n	80087de <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	ee07 3a90 	vmov	s15, r3
 8008756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800875a:	eddf 6a33 	vldr	s13, [pc, #204]	; 8008828 <HAL_RCC_GetSysClockFreq+0x208>
 800875e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008762:	4b2e      	ldr	r3, [pc, #184]	; (800881c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8008764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800876a:	ee07 3a90 	vmov	s15, r3
 800876e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008772:	ed97 6a01 	vldr	s12, [r7, #4]
 8008776:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800882c <HAL_RCC_GetSysClockFreq+0x20c>
 800877a:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800877e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008782:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008786:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800878a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800878e:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8008792:	e024      	b.n	80087de <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008796:	ee07 3a90 	vmov	s15, r3
 800879a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	ee07 3a90 	vmov	s15, r3
 80087a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087ac:	4b1b      	ldr	r3, [pc, #108]	; (800881c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80087ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087b4:	ee07 3a90 	vmov	s15, r3
 80087b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80087bc:	ed97 6a01 	vldr	s12, [r7, #4]
 80087c0:	eddf 5a1a 	vldr	s11, [pc, #104]	; 800882c <HAL_RCC_GetSysClockFreq+0x20c>
 80087c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80087c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80087cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80087d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087d8:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80087dc:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80087de:	4b0f      	ldr	r3, [pc, #60]	; (800881c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80087e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087e2:	0e1b      	lsrs	r3, r3, #24
 80087e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087e8:	3301      	adds	r3, #1
 80087ea:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	ee07 3a90 	vmov	s15, r3
 80087f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80087f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80087fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008802:	ee17 3a90 	vmov	r3, s15
 8008806:	623b      	str	r3, [r7, #32]
 8008808:	e001      	b.n	800880e <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 800880a:	2300      	movs	r3, #0
 800880c:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 800880e:	6a3b      	ldr	r3, [r7, #32]
}
 8008810:	4618      	mov	r0, r3
 8008812:	372c      	adds	r7, #44	; 0x2c
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr
 800881c:	46020c00 	.word	0x46020c00
 8008820:	0800e2a0 	.word	0x0800e2a0
 8008824:	00f42400 	.word	0x00f42400
 8008828:	4b742400 	.word	0x4b742400
 800882c:	46000000 	.word	0x46000000

08008830 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8008834:	f7ff fef4 	bl	8008620 <HAL_RCC_GetSysClockFreq>
 8008838:	4602      	mov	r2, r0
 800883a:	4b07      	ldr	r3, [pc, #28]	; (8008858 <HAL_RCC_GetHCLKFreq+0x28>)
 800883c:	6a1b      	ldr	r3, [r3, #32]
 800883e:	f003 030f 	and.w	r3, r3, #15
 8008842:	4906      	ldr	r1, [pc, #24]	; (800885c <HAL_RCC_GetHCLKFreq+0x2c>)
 8008844:	5ccb      	ldrb	r3, [r1, r3]
 8008846:	fa22 f303 	lsr.w	r3, r2, r3
 800884a:	4a05      	ldr	r2, [pc, #20]	; (8008860 <HAL_RCC_GetHCLKFreq+0x30>)
 800884c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800884e:	4b04      	ldr	r3, [pc, #16]	; (8008860 <HAL_RCC_GetHCLKFreq+0x30>)
 8008850:	681b      	ldr	r3, [r3, #0]
}
 8008852:	4618      	mov	r0, r3
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop
 8008858:	46020c00 	.word	0x46020c00
 800885c:	0800e288 	.word	0x0800e288
 8008860:	2000010c 	.word	0x2000010c

08008864 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8008868:	f7ff ffe2 	bl	8008830 <HAL_RCC_GetHCLKFreq>
 800886c:	4602      	mov	r2, r0
 800886e:	4b05      	ldr	r3, [pc, #20]	; (8008884 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008870:	6a1b      	ldr	r3, [r3, #32]
 8008872:	091b      	lsrs	r3, r3, #4
 8008874:	f003 0307 	and.w	r3, r3, #7
 8008878:	4903      	ldr	r1, [pc, #12]	; (8008888 <HAL_RCC_GetPCLK1Freq+0x24>)
 800887a:	5ccb      	ldrb	r3, [r1, r3]
 800887c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008880:	4618      	mov	r0, r3
 8008882:	bd80      	pop	{r7, pc}
 8008884:	46020c00 	.word	0x46020c00
 8008888:	0800e298 	.word	0x0800e298

0800888c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8008890:	f7ff ffce 	bl	8008830 <HAL_RCC_GetHCLKFreq>
 8008894:	4602      	mov	r2, r0
 8008896:	4b05      	ldr	r3, [pc, #20]	; (80088ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8008898:	6a1b      	ldr	r3, [r3, #32]
 800889a:	0a1b      	lsrs	r3, r3, #8
 800889c:	f003 0307 	and.w	r3, r3, #7
 80088a0:	4903      	ldr	r1, [pc, #12]	; (80088b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80088a2:	5ccb      	ldrb	r3, [r1, r3]
 80088a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	46020c00 	.word	0x46020c00
 80088b0:	0800e298 	.word	0x0800e298

080088b4 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80088b8:	f7ff ffba 	bl	8008830 <HAL_RCC_GetHCLKFreq>
 80088bc:	4602      	mov	r2, r0
 80088be:	4b05      	ldr	r3, [pc, #20]	; (80088d4 <HAL_RCC_GetPCLK3Freq+0x20>)
 80088c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c2:	091b      	lsrs	r3, r3, #4
 80088c4:	f003 0307 	and.w	r3, r3, #7
 80088c8:	4903      	ldr	r1, [pc, #12]	; (80088d8 <HAL_RCC_GetPCLK3Freq+0x24>)
 80088ca:	5ccb      	ldrb	r3, [r1, r3]
 80088cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	bd80      	pop	{r7, pc}
 80088d4:	46020c00 	.word	0x46020c00
 80088d8:	0800e298 	.word	0x0800e298

080088dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b086      	sub	sp, #24
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80088e4:	4b3e      	ldr	r3, [pc, #248]	; (80089e0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80088e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088ea:	f003 0304 	and.w	r3, r3, #4
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d003      	beq.n	80088fa <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80088f2:	f7fe fd8f 	bl	8007414 <HAL_PWREx_GetVoltageRange>
 80088f6:	6178      	str	r0, [r7, #20]
 80088f8:	e019      	b.n	800892e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80088fa:	4b39      	ldr	r3, [pc, #228]	; (80089e0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80088fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008900:	4a37      	ldr	r2, [pc, #220]	; (80089e0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008902:	f043 0304 	orr.w	r3, r3, #4
 8008906:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800890a:	4b35      	ldr	r3, [pc, #212]	; (80089e0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800890c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008910:	f003 0304 	and.w	r3, r3, #4
 8008914:	60fb      	str	r3, [r7, #12]
 8008916:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008918:	f7fe fd7c 	bl	8007414 <HAL_PWREx_GetVoltageRange>
 800891c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800891e:	4b30      	ldr	r3, [pc, #192]	; (80089e0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008920:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008924:	4a2e      	ldr	r2, [pc, #184]	; (80089e0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008926:	f023 0304 	bic.w	r3, r3, #4
 800892a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008934:	d003      	beq.n	800893e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800893c:	d109      	bne.n	8008952 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008944:	d202      	bcs.n	800894c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8008946:	2301      	movs	r3, #1
 8008948:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800894a:	e033      	b.n	80089b4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800894c:	2300      	movs	r3, #0
 800894e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8008950:	e030      	b.n	80089b4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008958:	d208      	bcs.n	800896c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008960:	d102      	bne.n	8008968 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8008962:	2303      	movs	r3, #3
 8008964:	613b      	str	r3, [r7, #16]
 8008966:	e025      	b.n	80089b4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8008968:	2301      	movs	r3, #1
 800896a:	e035      	b.n	80089d8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008972:	d90f      	bls.n	8008994 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d109      	bne.n	800898e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008980:	d902      	bls.n	8008988 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8008982:	2300      	movs	r3, #0
 8008984:	613b      	str	r3, [r7, #16]
 8008986:	e015      	b.n	80089b4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8008988:	2301      	movs	r3, #1
 800898a:	613b      	str	r3, [r7, #16]
 800898c:	e012      	b.n	80089b4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800898e:	2300      	movs	r3, #0
 8008990:	613b      	str	r3, [r7, #16]
 8008992:	e00f      	b.n	80089b4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800899a:	d109      	bne.n	80089b0 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089a2:	d102      	bne.n	80089aa <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80089a4:	2301      	movs	r3, #1
 80089a6:	613b      	str	r3, [r7, #16]
 80089a8:	e004      	b.n	80089b4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80089aa:	2302      	movs	r3, #2
 80089ac:	613b      	str	r3, [r7, #16]
 80089ae:	e001      	b.n	80089b4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80089b0:	2301      	movs	r3, #1
 80089b2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80089b4:	4b0b      	ldr	r3, [pc, #44]	; (80089e4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f023 020f 	bic.w	r2, r3, #15
 80089bc:	4909      	ldr	r1, [pc, #36]	; (80089e4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	4313      	orrs	r3, r2
 80089c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80089c4:	4b07      	ldr	r3, [pc, #28]	; (80089e4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f003 030f 	and.w	r3, r3, #15
 80089cc:	693a      	ldr	r2, [r7, #16]
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d001      	beq.n	80089d6 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80089d2:	2301      	movs	r3, #1
 80089d4:	e000      	b.n	80089d8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80089d6:	2300      	movs	r3, #0
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3718      	adds	r7, #24
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}
 80089e0:	46020c00 	.word	0x46020c00
 80089e4:	40022000 	.word	0x40022000

080089e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80089e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80089ec:	b0ba      	sub	sp, #232	; 0xe8
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80089f4:	2300      	movs	r3, #0
 80089f6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80089fa:	2300      	movs	r3, #0
 80089fc:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008a00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a08:	f002 0401 	and.w	r4, r2, #1
 8008a0c:	2500      	movs	r5, #0
 8008a0e:	ea54 0305 	orrs.w	r3, r4, r5
 8008a12:	d00b      	beq.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8008a14:	4bcb      	ldr	r3, [pc, #812]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008a1a:	f023 0103 	bic.w	r1, r3, #3
 8008a1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a24:	4ac7      	ldr	r2, [pc, #796]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008a26:	430b      	orrs	r3, r1
 8008a28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008a2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a34:	f002 0802 	and.w	r8, r2, #2
 8008a38:	f04f 0900 	mov.w	r9, #0
 8008a3c:	ea58 0309 	orrs.w	r3, r8, r9
 8008a40:	d00b      	beq.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8008a42:	4bc0      	ldr	r3, [pc, #768]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008a48:	f023 010c 	bic.w	r1, r3, #12
 8008a4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a52:	4abc      	ldr	r2, [pc, #752]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008a54:	430b      	orrs	r3, r1
 8008a56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008a5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a62:	f002 0a04 	and.w	sl, r2, #4
 8008a66:	f04f 0b00 	mov.w	fp, #0
 8008a6a:	ea5a 030b 	orrs.w	r3, sl, fp
 8008a6e:	d00b      	beq.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8008a70:	4bb4      	ldr	r3, [pc, #720]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008a76:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8008a7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a80:	4ab0      	ldr	r2, [pc, #704]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008a82:	430b      	orrs	r3, r1
 8008a84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008a88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a90:	f002 0308 	and.w	r3, r2, #8
 8008a94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008a98:	2300      	movs	r3, #0
 8008a9a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008a9e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8008aa2:	460b      	mov	r3, r1
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	d00b      	beq.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8008aa8:	4ba6      	ldr	r3, [pc, #664]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008aae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008ab2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ab8:	4aa2      	ldr	r2, [pc, #648]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008aba:	430b      	orrs	r3, r1
 8008abc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008ac0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac8:	f002 0310 	and.w	r3, r2, #16
 8008acc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008ad6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008ada:	460b      	mov	r3, r1
 8008adc:	4313      	orrs	r3, r2
 8008ade:	d00b      	beq.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8008ae0:	4b98      	ldr	r3, [pc, #608]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008ae6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008aea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008aee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008af0:	4a94      	ldr	r2, [pc, #592]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008af2:	430b      	orrs	r3, r1
 8008af4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008af8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b00:	f002 0320 	and.w	r3, r2, #32
 8008b04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008b08:	2300      	movs	r3, #0
 8008b0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008b0e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8008b12:	460b      	mov	r3, r1
 8008b14:	4313      	orrs	r3, r2
 8008b16:	d00b      	beq.n	8008b30 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8008b18:	4b8a      	ldr	r3, [pc, #552]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008b1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008b1e:	f023 0107 	bic.w	r1, r3, #7
 8008b22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008b26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b28:	4a86      	ldr	r2, [pc, #536]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008b2a:	430b      	orrs	r3, r1
 8008b2c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008b30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b38:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8008b3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008b40:	2300      	movs	r3, #0
 8008b42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008b46:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8008b4a:	460b      	mov	r3, r1
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	d00b      	beq.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8008b50:	4b7c      	ldr	r3, [pc, #496]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008b56:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8008b5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008b5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b60:	4a78      	ldr	r2, [pc, #480]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008b62:	430b      	orrs	r3, r1
 8008b64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008b68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b70:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8008b74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008b78:	2300      	movs	r3, #0
 8008b7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008b7e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008b82:	460b      	mov	r3, r1
 8008b84:	4313      	orrs	r3, r2
 8008b86:	d00b      	beq.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8008b88:	4b6e      	ldr	r3, [pc, #440]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008b8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008b92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008b96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b98:	4a6a      	ldr	r2, [pc, #424]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008b9a:	430b      	orrs	r3, r1
 8008b9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008ba0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba8:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8008bac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008bb6:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8008bba:	460b      	mov	r3, r1
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	d00b      	beq.n	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8008bc0:	4b60      	ldr	r3, [pc, #384]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008bc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008bc6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008bca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bd0:	4a5c      	ldr	r2, [pc, #368]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008bd2:	430b      	orrs	r3, r1
 8008bd4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008bd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8008be4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008be8:	2300      	movs	r3, #0
 8008bea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008bee:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8008bf2:	460b      	mov	r3, r1
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	d00b      	beq.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8008bf8:	4b52      	ldr	r3, [pc, #328]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008bfe:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8008c02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008c06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c08:	4a4e      	ldr	r2, [pc, #312]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008c0a:	430b      	orrs	r3, r1
 8008c0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008c10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c18:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8008c1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008c20:	2300      	movs	r3, #0
 8008c22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008c26:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8008c2a:	460b      	mov	r3, r1
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	d00b      	beq.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8008c30:	4b44      	ldr	r3, [pc, #272]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008c32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008c36:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8008c3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008c3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c40:	4a40      	ldr	r2, [pc, #256]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008c42:	430b      	orrs	r3, r1
 8008c44:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008c48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c50:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8008c54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008c58:	2300      	movs	r3, #0
 8008c5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008c5e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8008c62:	460b      	mov	r3, r1
 8008c64:	4313      	orrs	r3, r2
 8008c66:	d00b      	beq.n	8008c80 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8008c68:	4b36      	ldr	r3, [pc, #216]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008c6e:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8008c72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008c76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c78:	4a32      	ldr	r2, [pc, #200]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008c7a:	430b      	orrs	r3, r1
 8008c7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8008c80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c88:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8008c8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008c90:	2300      	movs	r3, #0
 8008c92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008c96:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	d00c      	beq.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8008ca0:	4b28      	ldr	r3, [pc, #160]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008ca2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008ca6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008caa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008cae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008cb2:	4a24      	ldr	r2, [pc, #144]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008cb4:	430b      	orrs	r3, r1
 8008cb6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008cba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8008cc6:	67bb      	str	r3, [r7, #120]	; 0x78
 8008cc8:	2300      	movs	r3, #0
 8008cca:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008ccc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	d04f      	beq.n	8008d76 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8008cd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cde:	2b80      	cmp	r3, #128	; 0x80
 8008ce0:	d02d      	beq.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0x356>
 8008ce2:	2b80      	cmp	r3, #128	; 0x80
 8008ce4:	d827      	bhi.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008ce6:	2b60      	cmp	r3, #96	; 0x60
 8008ce8:	d02e      	beq.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008cea:	2b60      	cmp	r3, #96	; 0x60
 8008cec:	d823      	bhi.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008cee:	2b40      	cmp	r3, #64	; 0x40
 8008cf0:	d006      	beq.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8008cf2:	2b40      	cmp	r3, #64	; 0x40
 8008cf4:	d81f      	bhi.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d009      	beq.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x326>
 8008cfa:	2b20      	cmp	r3, #32
 8008cfc:	d011      	beq.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8008cfe:	e01a      	b.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008d00:	4b10      	ldr	r3, [pc, #64]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d04:	4a0f      	ldr	r2, [pc, #60]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008d06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d0a:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008d0c:	e01d      	b.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008d0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008d12:	3308      	adds	r3, #8
 8008d14:	4618      	mov	r0, r3
 8008d16:	f002 f981 	bl	800b01c <RCCEx_PLL2_Config>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008d20:	e013      	b.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008d22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008d26:	332c      	adds	r3, #44	; 0x2c
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f002 fa0f 	bl	800b14c <RCCEx_PLL3_Config>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008d34:	e009      	b.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d36:	2301      	movs	r3, #1
 8008d38:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8008d3c:	e005      	b.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8008d3e:	bf00      	nop
 8008d40:	e003      	b.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8008d42:	bf00      	nop
 8008d44:	46020c00 	.word	0x46020c00
        break;
 8008d48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d4a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d10d      	bne.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8008d52:	4bb6      	ldr	r3, [pc, #728]	; (800902c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8008d54:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008d58:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8008d5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d64:	4ab1      	ldr	r2, [pc, #708]	; (800902c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8008d66:	430b      	orrs	r3, r1
 8008d68:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8008d6c:	e003      	b.n	8008d76 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d6e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8008d72:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008d76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d7e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8008d82:	673b      	str	r3, [r7, #112]	; 0x70
 8008d84:	2300      	movs	r3, #0
 8008d86:	677b      	str	r3, [r7, #116]	; 0x74
 8008d88:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	d053      	beq.n	8008e3a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8008d92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008d96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d9e:	d033      	beq.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8008da0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008da4:	d82c      	bhi.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8008da6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008daa:	d02f      	beq.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x424>
 8008dac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008db0:	d826      	bhi.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8008db2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008db6:	d008      	beq.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8008db8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008dbc:	d820      	bhi.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d00a      	beq.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8008dc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dc6:	d011      	beq.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x404>
 8008dc8:	e01a      	b.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008dca:	4b98      	ldr	r3, [pc, #608]	; (800902c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8008dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dce:	4a97      	ldr	r2, [pc, #604]	; (800902c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8008dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008dd4:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8008dd6:	e01a      	b.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008dd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008ddc:	3308      	adds	r3, #8
 8008dde:	4618      	mov	r0, r3
 8008de0:	f002 f91c 	bl	800b01c <RCCEx_PLL2_Config>
 8008de4:	4603      	mov	r3, r0
 8008de6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8008dea:	e010      	b.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008dec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008df0:	332c      	adds	r3, #44	; 0x2c
 8008df2:	4618      	mov	r0, r3
 8008df4:	f002 f9aa 	bl	800b14c <RCCEx_PLL3_Config>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8008dfe:	e006      	b.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e00:	2301      	movs	r3, #1
 8008e02:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8008e06:	e002      	b.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8008e08:	bf00      	nop
 8008e0a:	e000      	b.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8008e0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e0e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d10d      	bne.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8008e16:	4b85      	ldr	r3, [pc, #532]	; (800902c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8008e18:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008e1c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8008e20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008e24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008e28:	4a80      	ldr	r2, [pc, #512]	; (800902c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8008e2a:	430b      	orrs	r3, r1
 8008e2c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8008e30:	e003      	b.n	8008e3a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e32:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8008e36:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8008e3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e42:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8008e46:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e48:	2300      	movs	r3, #0
 8008e4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008e4c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8008e50:	460b      	mov	r3, r1
 8008e52:	4313      	orrs	r3, r2
 8008e54:	d046      	beq.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8008e56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008e5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008e5e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008e62:	d028      	beq.n	8008eb6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8008e64:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008e68:	d821      	bhi.n	8008eae <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8008e6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e6e:	d022      	beq.n	8008eb6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8008e70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e74:	d81b      	bhi.n	8008eae <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8008e76:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008e7a:	d01c      	beq.n	8008eb6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8008e7c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008e80:	d815      	bhi.n	8008eae <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8008e82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e86:	d008      	beq.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8008e88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e8c:	d80f      	bhi.n	8008eae <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d011      	beq.n	8008eb6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8008e92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e96:	d00e      	beq.n	8008eb6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8008e98:	e009      	b.n	8008eae <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008e9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008e9e:	3308      	adds	r3, #8
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f002 f8bb 	bl	800b01c <RCCEx_PLL2_Config>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8008eac:	e004      	b.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8008eb4:	e000      	b.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8008eb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008eb8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d10d      	bne.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8008ec0:	4b5a      	ldr	r3, [pc, #360]	; (800902c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8008ec2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008ec6:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008eca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008ece:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008ed2:	4a56      	ldr	r2, [pc, #344]	; (800902c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8008ed4:	430b      	orrs	r3, r1
 8008ed6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8008eda:	e003      	b.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008edc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8008ee0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8008ee4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eec:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8008ef0:	663b      	str	r3, [r7, #96]	; 0x60
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	667b      	str	r3, [r7, #100]	; 0x64
 8008ef6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8008efa:	460b      	mov	r3, r1
 8008efc:	4313      	orrs	r3, r2
 8008efe:	d03f      	beq.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8008f00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f08:	2b04      	cmp	r3, #4
 8008f0a:	d81e      	bhi.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0x562>
 8008f0c:	a201      	add	r2, pc, #4	; (adr r2, 8008f14 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8008f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f12:	bf00      	nop
 8008f14:	08008f53 	.word	0x08008f53
 8008f18:	08008f29 	.word	0x08008f29
 8008f1c:	08008f37 	.word	0x08008f37
 8008f20:	08008f53 	.word	0x08008f53
 8008f24:	08008f53 	.word	0x08008f53
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008f28:	4b40      	ldr	r3, [pc, #256]	; (800902c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8008f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f2c:	4a3f      	ldr	r2, [pc, #252]	; (800902c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8008f2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f32:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8008f34:	e00e      	b.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008f36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008f3a:	332c      	adds	r3, #44	; 0x2c
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f002 f905 	bl	800b14c <RCCEx_PLL3_Config>
 8008f42:	4603      	mov	r3, r0
 8008f44:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8008f48:	e004      	b.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8008f50:	e000      	b.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8008f52:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008f54:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d10d      	bne.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8008f5c:	4b33      	ldr	r3, [pc, #204]	; (800902c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8008f5e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008f62:	f023 0107 	bic.w	r1, r3, #7
 8008f66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f6e:	4a2f      	ldr	r2, [pc, #188]	; (800902c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8008f70:	430b      	orrs	r3, r1
 8008f72:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8008f76:	e003      	b.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f78:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8008f7c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8008f80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f88:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8008f8c:	65bb      	str	r3, [r7, #88]	; 0x58
 8008f8e:	2300      	movs	r3, #0
 8008f90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f92:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8008f96:	460b      	mov	r3, r1
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	d04d      	beq.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8008f9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fa4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008fa8:	d028      	beq.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0x614>
 8008faa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008fae:	d821      	bhi.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8008fb0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008fb4:	d024      	beq.n	8009000 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8008fb6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008fba:	d81b      	bhi.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8008fbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fc0:	d00e      	beq.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8008fc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fc6:	d815      	bhi.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d01b      	beq.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8008fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fd0:	d110      	bne.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008fd2:	4b16      	ldr	r3, [pc, #88]	; (800902c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8008fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fd6:	4a15      	ldr	r2, [pc, #84]	; (800902c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8008fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008fdc:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8008fde:	e012      	b.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008fe0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008fe4:	332c      	adds	r3, #44	; 0x2c
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f002 f8b0 	bl	800b14c <RCCEx_PLL3_Config>
 8008fec:	4603      	mov	r3, r0
 8008fee:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8008ff2:	e008      	b.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8008ffa:	e004      	b.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8008ffc:	bf00      	nop
 8008ffe:	e002      	b.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8009000:	bf00      	nop
 8009002:	e000      	b.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8009004:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009006:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800900a:	2b00      	cmp	r3, #0
 800900c:	d110      	bne.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800900e:	4b07      	ldr	r3, [pc, #28]	; (800902c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8009010:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009014:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009018:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800901c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009020:	4a02      	ldr	r2, [pc, #8]	; (800902c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8009022:	430b      	orrs	r3, r1
 8009024:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009028:	e006      	b.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0x650>
 800902a:	bf00      	nop
 800902c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009030:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8009034:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009038:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800903c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009040:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8009044:	653b      	str	r3, [r7, #80]	; 0x50
 8009046:	2300      	movs	r3, #0
 8009048:	657b      	str	r3, [r7, #84]	; 0x54
 800904a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800904e:	460b      	mov	r3, r1
 8009050:	4313      	orrs	r3, r2
 8009052:	f000 80b5 	beq.w	80091c0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009056:	2300      	movs	r3, #0
 8009058:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800905c:	4b9d      	ldr	r3, [pc, #628]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800905e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009062:	f003 0304 	and.w	r3, r3, #4
 8009066:	2b00      	cmp	r3, #0
 8009068:	d113      	bne.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800906a:	4b9a      	ldr	r3, [pc, #616]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800906c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009070:	4a98      	ldr	r2, [pc, #608]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8009072:	f043 0304 	orr.w	r3, r3, #4
 8009076:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800907a:	4b96      	ldr	r3, [pc, #600]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800907c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009080:	f003 0304 	and.w	r3, r3, #4
 8009084:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009088:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 800908c:	2301      	movs	r3, #1
 800908e:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009092:	4b91      	ldr	r3, [pc, #580]	; (80092d8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8009094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009096:	4a90      	ldr	r2, [pc, #576]	; (80092d8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8009098:	f043 0301 	orr.w	r3, r3, #1
 800909c:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800909e:	f7f9 fdbf 	bl	8002c20 <HAL_GetTick>
 80090a2:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80090a6:	e00b      	b.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80090a8:	f7f9 fdba 	bl	8002c20 <HAL_GetTick>
 80090ac:	4602      	mov	r2, r0
 80090ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090b2:	1ad3      	subs	r3, r2, r3
 80090b4:	2b02      	cmp	r3, #2
 80090b6:	d903      	bls.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 80090b8:	2303      	movs	r3, #3
 80090ba:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80090be:	e005      	b.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80090c0:	4b85      	ldr	r3, [pc, #532]	; (80092d8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80090c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090c4:	f003 0301 	and.w	r3, r3, #1
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d0ed      	beq.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 80090cc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d165      	bne.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80090d4:	4b7f      	ldr	r3, [pc, #508]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80090d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80090da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80090e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d023      	beq.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 80090ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80090ee:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80090f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d01b      	beq.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80090fa:	4b76      	ldr	r3, [pc, #472]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80090fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009104:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009108:	4b72      	ldr	r3, [pc, #456]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800910a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800910e:	4a71      	ldr	r2, [pc, #452]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8009110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009114:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009118:	4b6e      	ldr	r3, [pc, #440]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800911a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800911e:	4a6d      	ldr	r2, [pc, #436]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8009120:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009124:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009128:	4a6a      	ldr	r2, [pc, #424]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800912a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800912e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009136:	f003 0301 	and.w	r3, r3, #1
 800913a:	2b00      	cmp	r3, #0
 800913c:	d019      	beq.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800913e:	f7f9 fd6f 	bl	8002c20 <HAL_GetTick>
 8009142:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009146:	e00d      	b.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009148:	f7f9 fd6a 	bl	8002c20 <HAL_GetTick>
 800914c:	4602      	mov	r2, r0
 800914e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009152:	1ad2      	subs	r2, r2, r3
 8009154:	f241 3388 	movw	r3, #5000	; 0x1388
 8009158:	429a      	cmp	r2, r3
 800915a:	d903      	bls.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 800915c:	2303      	movs	r3, #3
 800915e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 8009162:	e006      	b.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009164:	4b5b      	ldr	r3, [pc, #364]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8009166:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800916a:	f003 0302 	and.w	r3, r3, #2
 800916e:	2b00      	cmp	r3, #0
 8009170:	d0ea      	beq.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8009172:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8009176:	2b00      	cmp	r3, #0
 8009178:	d10d      	bne.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800917a:	4b56      	ldr	r3, [pc, #344]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800917c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009180:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009184:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009188:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800918c:	4a51      	ldr	r2, [pc, #324]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800918e:	430b      	orrs	r3, r1
 8009190:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8009194:	e008      	b.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009196:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800919a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 800919e:	e003      	b.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091a0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80091a4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80091a8:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d107      	bne.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80091b0:	4b48      	ldr	r3, [pc, #288]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80091b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80091b6:	4a47      	ldr	r2, [pc, #284]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80091b8:	f023 0304 	bic.w	r3, r3, #4
 80091bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80091c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80091c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80091cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80091ce:	2300      	movs	r3, #0
 80091d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091d2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80091d6:	460b      	mov	r3, r1
 80091d8:	4313      	orrs	r3, r2
 80091da:	d042      	beq.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80091dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80091e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80091e4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80091e8:	d022      	beq.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0x848>
 80091ea:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80091ee:	d81b      	bhi.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x840>
 80091f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091f4:	d011      	beq.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x832>
 80091f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091fa:	d815      	bhi.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x840>
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d019      	beq.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8009200:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009204:	d110      	bne.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009206:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800920a:	3308      	adds	r3, #8
 800920c:	4618      	mov	r0, r3
 800920e:	f001 ff05 	bl	800b01c <RCCEx_PLL2_Config>
 8009212:	4603      	mov	r3, r0
 8009214:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8009218:	e00d      	b.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800921a:	4b2e      	ldr	r3, [pc, #184]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800921c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800921e:	4a2d      	ldr	r2, [pc, #180]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8009220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009224:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8009226:	e006      	b.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009228:	2301      	movs	r3, #1
 800922a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800922e:	e002      	b.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8009230:	bf00      	nop
 8009232:	e000      	b.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8009234:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009236:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800923a:	2b00      	cmp	r3, #0
 800923c:	d10d      	bne.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800923e:	4b25      	ldr	r3, [pc, #148]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8009240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009244:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8009248:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800924c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009250:	4a20      	ldr	r2, [pc, #128]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8009252:	430b      	orrs	r3, r1
 8009254:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009258:	e003      	b.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800925a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800925e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009262:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926a:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800926e:	643b      	str	r3, [r7, #64]	; 0x40
 8009270:	2300      	movs	r3, #0
 8009272:	647b      	str	r3, [r7, #68]	; 0x44
 8009274:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8009278:	460b      	mov	r3, r1
 800927a:	4313      	orrs	r3, r2
 800927c:	d032      	beq.n	80092e4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800927e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009282:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009286:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800928a:	d00b      	beq.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800928c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009290:	d804      	bhi.n	800929c <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8009292:	2b00      	cmp	r3, #0
 8009294:	d008      	beq.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8009296:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800929a:	d007      	beq.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800929c:	2301      	movs	r3, #1
 800929e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80092a2:	e004      	b.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80092a4:	bf00      	nop
 80092a6:	e002      	b.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80092a8:	bf00      	nop
 80092aa:	e000      	b.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80092ac:	bf00      	nop
    }
    if (ret == HAL_OK)
 80092ae:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d112      	bne.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80092b6:	4b07      	ldr	r3, [pc, #28]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80092b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80092bc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80092c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80092c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80092c8:	4a02      	ldr	r2, [pc, #8]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80092ca:	430b      	orrs	r3, r1
 80092cc:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80092d0:	e008      	b.n	80092e4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 80092d2:	bf00      	nop
 80092d4:	46020c00 	.word	0x46020c00
 80092d8:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092dc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80092e0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 80092e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80092e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ec:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80092f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80092f2:	2300      	movs	r3, #0
 80092f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092f6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80092fa:	460b      	mov	r3, r1
 80092fc:	4313      	orrs	r3, r2
 80092fe:	d00c      	beq.n	800931a <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8009300:	4b98      	ldr	r3, [pc, #608]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8009302:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009306:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800930a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800930e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009312:	4a94      	ldr	r2, [pc, #592]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8009314:	430b      	orrs	r3, r1
 8009316:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800931a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800931e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009322:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8009326:	633b      	str	r3, [r7, #48]	; 0x30
 8009328:	2300      	movs	r3, #0
 800932a:	637b      	str	r3, [r7, #52]	; 0x34
 800932c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8009330:	460b      	mov	r3, r1
 8009332:	4313      	orrs	r3, r2
 8009334:	d019      	beq.n	800936a <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8009336:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800933a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800933e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009342:	d105      	bne.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009344:	4b87      	ldr	r3, [pc, #540]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8009346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009348:	4a86      	ldr	r2, [pc, #536]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800934a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800934e:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8009350:	4b84      	ldr	r3, [pc, #528]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8009352:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009356:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800935a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800935e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009362:	4a80      	ldr	r2, [pc, #512]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8009364:	430b      	orrs	r3, r1
 8009366:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800936a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800936e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009372:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8009376:	62bb      	str	r3, [r7, #40]	; 0x28
 8009378:	2300      	movs	r3, #0
 800937a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800937c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8009380:	460b      	mov	r3, r1
 8009382:	4313      	orrs	r3, r2
 8009384:	d00c      	beq.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8009386:	4b77      	ldr	r3, [pc, #476]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8009388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800938c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009390:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009394:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009398:	4972      	ldr	r1, [pc, #456]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800939a:	4313      	orrs	r3, r2
 800939c:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80093a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80093a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80093ac:	623b      	str	r3, [r7, #32]
 80093ae:	2300      	movs	r3, #0
 80093b0:	627b      	str	r3, [r7, #36]	; 0x24
 80093b2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80093b6:	460b      	mov	r3, r1
 80093b8:	4313      	orrs	r3, r2
 80093ba:	d00c      	beq.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80093bc:	4b69      	ldr	r3, [pc, #420]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80093be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80093c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80093c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80093ca:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80093ce:	4965      	ldr	r1, [pc, #404]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80093d0:	4313      	orrs	r3, r2
 80093d2:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80093d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80093da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093de:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80093e2:	61bb      	str	r3, [r7, #24]
 80093e4:	2300      	movs	r3, #0
 80093e6:	61fb      	str	r3, [r7, #28]
 80093e8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80093ec:	460b      	mov	r3, r1
 80093ee:	4313      	orrs	r3, r2
 80093f0:	d00c      	beq.n	800940c <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80093f2:	4b5c      	ldr	r3, [pc, #368]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80093f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80093f8:	f023 0218 	bic.w	r2, r3, #24
 80093fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009400:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8009404:	4957      	ldr	r1, [pc, #348]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8009406:	4313      	orrs	r3, r2
 8009408:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800940c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009414:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8009418:	613b      	str	r3, [r7, #16]
 800941a:	2300      	movs	r3, #0
 800941c:	617b      	str	r3, [r7, #20]
 800941e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009422:	460b      	mov	r3, r1
 8009424:	4313      	orrs	r3, r2
 8009426:	d032      	beq.n	800948e <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8009428:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800942c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009430:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009434:	d105      	bne.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009436:	4b4b      	ldr	r3, [pc, #300]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8009438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800943a:	4a4a      	ldr	r2, [pc, #296]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800943c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009440:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8009442:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009446:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800944a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800944e:	d108      	bne.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009450:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009454:	3308      	adds	r3, #8
 8009456:	4618      	mov	r0, r3
 8009458:	f001 fde0 	bl	800b01c <RCCEx_PLL2_Config>
 800945c:	4603      	mov	r3, r0
 800945e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 8009462:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8009466:	2b00      	cmp	r3, #0
 8009468:	d10d      	bne.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800946a:	4b3e      	ldr	r3, [pc, #248]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800946c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009470:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009474:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009478:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800947c:	4939      	ldr	r1, [pc, #228]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800947e:	4313      	orrs	r3, r2
 8009480:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8009484:	e003      	b.n	800948e <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009486:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800948a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800948e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009496:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800949a:	60bb      	str	r3, [r7, #8]
 800949c:	2300      	movs	r3, #0
 800949e:	60fb      	str	r3, [r7, #12]
 80094a0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80094a4:	460b      	mov	r3, r1
 80094a6:	4313      	orrs	r3, r2
 80094a8:	d03a      	beq.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80094aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80094ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80094b6:	d00e      	beq.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 80094b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80094bc:	d815      	bhi.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d017      	beq.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80094c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80094c6:	d110      	bne.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094c8:	4b26      	ldr	r3, [pc, #152]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80094ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094cc:	4a25      	ldr	r2, [pc, #148]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80094ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094d2:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80094d4:	e00e      	b.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80094d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80094da:	3308      	adds	r3, #8
 80094dc:	4618      	mov	r0, r3
 80094de:	f001 fd9d 	bl	800b01c <RCCEx_PLL2_Config>
 80094e2:	4603      	mov	r3, r0
 80094e4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80094e8:	e004      	b.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 80094ea:	2301      	movs	r3, #1
 80094ec:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80094f0:	e000      	b.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 80094f2:	bf00      	nop
    }
    if (ret == HAL_OK)
 80094f4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d10d      	bne.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80094fc:	4b19      	ldr	r3, [pc, #100]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80094fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009502:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009506:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800950a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800950e:	4915      	ldr	r1, [pc, #84]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8009510:	4313      	orrs	r3, r2
 8009512:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8009516:	e003      	b.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009518:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800951c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8009520:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009528:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800952c:	603b      	str	r3, [r7, #0]
 800952e:	2300      	movs	r3, #0
 8009530:	607b      	str	r3, [r7, #4]
 8009532:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009536:	460b      	mov	r3, r1
 8009538:	4313      	orrs	r3, r2
 800953a:	d00c      	beq.n	8009556 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800953c:	4b09      	ldr	r3, [pc, #36]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800953e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009542:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8009546:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800954a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800954e:	4905      	ldr	r1, [pc, #20]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8009550:	4313      	orrs	r3, r2
 8009552:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8009556:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 800955a:	4618      	mov	r0, r3
 800955c:	37e8      	adds	r7, #232	; 0xe8
 800955e:	46bd      	mov	sp, r7
 8009560:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009564:	46020c00 	.word	0x46020c00

08009568 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009568:	b480      	push	{r7}
 800956a:	b089      	sub	sp, #36	; 0x24
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8009570:	4bac      	ldr	r3, [pc, #688]	; (8009824 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8009572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009578:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800957a:	4baa      	ldr	r3, [pc, #680]	; (8009824 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800957c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800957e:	f003 0303 	and.w	r3, r3, #3
 8009582:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8009584:	4ba7      	ldr	r3, [pc, #668]	; (8009824 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8009586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009588:	0a1b      	lsrs	r3, r3, #8
 800958a:	f003 030f 	and.w	r3, r3, #15
 800958e:	3301      	adds	r3, #1
 8009590:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8009592:	4ba4      	ldr	r3, [pc, #656]	; (8009824 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8009594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009596:	f003 0310 	and.w	r3, r3, #16
 800959a:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800959c:	4ba1      	ldr	r3, [pc, #644]	; (8009824 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800959e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095a0:	08db      	lsrs	r3, r3, #3
 80095a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80095a6:	68fa      	ldr	r2, [r7, #12]
 80095a8:	fb02 f303 	mul.w	r3, r2, r3
 80095ac:	ee07 3a90 	vmov	s15, r3
 80095b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095b4:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	f000 8123 	beq.w	8009806 <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	2b03      	cmp	r3, #3
 80095c4:	d062      	beq.n	800968c <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	2b03      	cmp	r3, #3
 80095ca:	f200 8081 	bhi.w	80096d0 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d024      	beq.n	800961e <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	2b02      	cmp	r3, #2
 80095d8:	d17a      	bne.n	80096d0 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	ee07 3a90 	vmov	s15, r3
 80095e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095e4:	eddf 6a90 	vldr	s13, [pc, #576]	; 8009828 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 80095e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095ec:	4b8d      	ldr	r3, [pc, #564]	; (8009824 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80095ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095f4:	ee07 3a90 	vmov	s15, r3
 80095f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80095fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8009600:	eddf 5a8a 	vldr	s11, [pc, #552]	; 800982c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8009604:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009608:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800960c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009610:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009614:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009618:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800961c:	e08f      	b.n	800973e <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800961e:	4b81      	ldr	r3, [pc, #516]	; (8009824 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009626:	2b00      	cmp	r3, #0
 8009628:	d005      	beq.n	8009636 <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 800962a:	4b7e      	ldr	r3, [pc, #504]	; (8009824 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800962c:	689b      	ldr	r3, [r3, #8]
 800962e:	0f1b      	lsrs	r3, r3, #28
 8009630:	f003 030f 	and.w	r3, r3, #15
 8009634:	e006      	b.n	8009644 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 8009636:	4b7b      	ldr	r3, [pc, #492]	; (8009824 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8009638:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800963c:	041b      	lsls	r3, r3, #16
 800963e:	0f1b      	lsrs	r3, r3, #28
 8009640:	f003 030f 	and.w	r3, r3, #15
 8009644:	4a7a      	ldr	r2, [pc, #488]	; (8009830 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8009646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800964a:	ee07 3a90 	vmov	s15, r3
 800964e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	ee07 3a90 	vmov	s15, r3
 8009658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800965c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009660:	69bb      	ldr	r3, [r7, #24]
 8009662:	ee07 3a90 	vmov	s15, r3
 8009666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800966a:	ed97 6a02 	vldr	s12, [r7, #8]
 800966e:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800982c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8009672:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009676:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800967a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800967e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8009682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009686:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800968a:	e058      	b.n	800973e <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	ee07 3a90 	vmov	s15, r3
 8009692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009696:	eddf 6a64 	vldr	s13, [pc, #400]	; 8009828 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 800969a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800969e:	4b61      	ldr	r3, [pc, #388]	; (8009824 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80096a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096a6:	ee07 3a90 	vmov	s15, r3
 80096aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80096ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80096b2:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800982c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 80096b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80096ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80096be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80096c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096ce:	e036      	b.n	800973e <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80096d0:	4b54      	ldr	r3, [pc, #336]	; (8009824 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80096d2:	689b      	ldr	r3, [r3, #8]
 80096d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d005      	beq.n	80096e8 <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 80096dc:	4b51      	ldr	r3, [pc, #324]	; (8009824 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80096de:	689b      	ldr	r3, [r3, #8]
 80096e0:	0f1b      	lsrs	r3, r3, #28
 80096e2:	f003 030f 	and.w	r3, r3, #15
 80096e6:	e006      	b.n	80096f6 <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 80096e8:	4b4e      	ldr	r3, [pc, #312]	; (8009824 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80096ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80096ee:	041b      	lsls	r3, r3, #16
 80096f0:	0f1b      	lsrs	r3, r3, #28
 80096f2:	f003 030f 	and.w	r3, r3, #15
 80096f6:	4a4e      	ldr	r2, [pc, #312]	; (8009830 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80096f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096fc:	ee07 3a90 	vmov	s15, r3
 8009700:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	ee07 3a90 	vmov	s15, r3
 800970a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800970e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009712:	69bb      	ldr	r3, [r7, #24]
 8009714:	ee07 3a90 	vmov	s15, r3
 8009718:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800971c:	ed97 6a02 	vldr	s12, [r7, #8]
 8009720:	eddf 5a42 	vldr	s11, [pc, #264]	; 800982c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8009724:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009728:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800972c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009730:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8009734:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009738:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800973c:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800973e:	4b39      	ldr	r3, [pc, #228]	; (8009824 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8009740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009746:	2b00      	cmp	r3, #0
 8009748:	d017      	beq.n	800977a <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800974a:	4b36      	ldr	r3, [pc, #216]	; (8009824 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800974c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800974e:	0a5b      	lsrs	r3, r3, #9
 8009750:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009754:	ee07 3a90 	vmov	s15, r3
 8009758:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800975c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009760:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009764:	edd7 6a07 	vldr	s13, [r7, #28]
 8009768:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800976c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009770:	ee17 2a90 	vmov	r2, s15
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	601a      	str	r2, [r3, #0]
 8009778:	e002      	b.n	8009780 <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2200      	movs	r2, #0
 800977e:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8009780:	4b28      	ldr	r3, [pc, #160]	; (8009824 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8009782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009788:	2b00      	cmp	r3, #0
 800978a:	d017      	beq.n	80097bc <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800978c:	4b25      	ldr	r3, [pc, #148]	; (8009824 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800978e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009790:	0c1b      	lsrs	r3, r3, #16
 8009792:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009796:	ee07 3a90 	vmov	s15, r3
 800979a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800979e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097a2:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80097a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80097aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097b2:	ee17 2a90 	vmov	r2, s15
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	605a      	str	r2, [r3, #4]
 80097ba:	e002      	b.n	80097c2 <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2200      	movs	r2, #0
 80097c0:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80097c2:	4b18      	ldr	r3, [pc, #96]	; (8009824 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80097c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d017      	beq.n	80097fe <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80097ce:	4b15      	ldr	r3, [pc, #84]	; (8009824 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80097d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097d2:	0e1b      	lsrs	r3, r3, #24
 80097d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097d8:	ee07 3a90 	vmov	s15, r3
 80097dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80097e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097e4:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80097e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80097ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097f4:	ee17 2a90 	vmov	r2, s15
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80097fc:	e00c      	b.n	8009818 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2200      	movs	r2, #0
 8009802:	609a      	str	r2, [r3, #8]
}
 8009804:	e008      	b.n	8009818 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2200      	movs	r2, #0
 800980a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2200      	movs	r2, #0
 8009810:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2200      	movs	r2, #0
 8009816:	609a      	str	r2, [r3, #8]
}
 8009818:	bf00      	nop
 800981a:	3724      	adds	r7, #36	; 0x24
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr
 8009824:	46020c00 	.word	0x46020c00
 8009828:	4b742400 	.word	0x4b742400
 800982c:	46000000 	.word	0x46000000
 8009830:	0800e2a0 	.word	0x0800e2a0

08009834 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009834:	b480      	push	{r7}
 8009836:	b089      	sub	sp, #36	; 0x24
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800983c:	4bac      	ldr	r3, [pc, #688]	; (8009af0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800983e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009844:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8009846:	4baa      	ldr	r3, [pc, #680]	; (8009af0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8009848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800984a:	f003 0303 	and.w	r3, r3, #3
 800984e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8009850:	4ba7      	ldr	r3, [pc, #668]	; (8009af0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8009852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009854:	0a1b      	lsrs	r3, r3, #8
 8009856:	f003 030f 	and.w	r3, r3, #15
 800985a:	3301      	adds	r3, #1
 800985c:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 800985e:	4ba4      	ldr	r3, [pc, #656]	; (8009af0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8009860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009862:	f003 0310 	and.w	r3, r3, #16
 8009866:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8009868:	4ba1      	ldr	r3, [pc, #644]	; (8009af0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800986a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800986c:	08db      	lsrs	r3, r3, #3
 800986e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009872:	68fa      	ldr	r2, [r7, #12]
 8009874:	fb02 f303 	mul.w	r3, r2, r3
 8009878:	ee07 3a90 	vmov	s15, r3
 800987c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009880:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	2b00      	cmp	r3, #0
 8009888:	f000 8123 	beq.w	8009ad2 <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	2b03      	cmp	r3, #3
 8009890:	d062      	beq.n	8009958 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	2b03      	cmp	r3, #3
 8009896:	f200 8081 	bhi.w	800999c <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	2b01      	cmp	r3, #1
 800989e:	d024      	beq.n	80098ea <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	2b02      	cmp	r3, #2
 80098a4:	d17a      	bne.n	800999c <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	ee07 3a90 	vmov	s15, r3
 80098ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098b0:	eddf 6a90 	vldr	s13, [pc, #576]	; 8009af4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 80098b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098b8:	4b8d      	ldr	r3, [pc, #564]	; (8009af0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80098ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098c0:	ee07 3a90 	vmov	s15, r3
 80098c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80098c8:	ed97 6a02 	vldr	s12, [r7, #8]
 80098cc:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8009af8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80098d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80098d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80098d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80098e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80098e8:	e08f      	b.n	8009a0a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80098ea:	4b81      	ldr	r3, [pc, #516]	; (8009af0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80098ec:	689b      	ldr	r3, [r3, #8]
 80098ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d005      	beq.n	8009902 <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 80098f6:	4b7e      	ldr	r3, [pc, #504]	; (8009af0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80098f8:	689b      	ldr	r3, [r3, #8]
 80098fa:	0f1b      	lsrs	r3, r3, #28
 80098fc:	f003 030f 	and.w	r3, r3, #15
 8009900:	e006      	b.n	8009910 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 8009902:	4b7b      	ldr	r3, [pc, #492]	; (8009af0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8009904:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009908:	041b      	lsls	r3, r3, #16
 800990a:	0f1b      	lsrs	r3, r3, #28
 800990c:	f003 030f 	and.w	r3, r3, #15
 8009910:	4a7a      	ldr	r2, [pc, #488]	; (8009afc <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8009912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009916:	ee07 3a90 	vmov	s15, r3
 800991a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	ee07 3a90 	vmov	s15, r3
 8009924:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009928:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800992c:	69bb      	ldr	r3, [r7, #24]
 800992e:	ee07 3a90 	vmov	s15, r3
 8009932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009936:	ed97 6a02 	vldr	s12, [r7, #8]
 800993a:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8009af8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800993e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009946:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800994a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800994e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009952:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009956:	e058      	b.n	8009a0a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	ee07 3a90 	vmov	s15, r3
 800995e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009962:	eddf 6a64 	vldr	s13, [pc, #400]	; 8009af4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8009966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800996a:	4b61      	ldr	r3, [pc, #388]	; (8009af0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800996c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800996e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009972:	ee07 3a90 	vmov	s15, r3
 8009976:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800997a:	ed97 6a02 	vldr	s12, [r7, #8]
 800997e:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8009af8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8009982:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009986:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800998a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800998e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009996:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800999a:	e036      	b.n	8009a0a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800999c:	4b54      	ldr	r3, [pc, #336]	; (8009af0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800999e:	689b      	ldr	r3, [r3, #8]
 80099a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d005      	beq.n	80099b4 <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 80099a8:	4b51      	ldr	r3, [pc, #324]	; (8009af0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	0f1b      	lsrs	r3, r3, #28
 80099ae:	f003 030f 	and.w	r3, r3, #15
 80099b2:	e006      	b.n	80099c2 <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 80099b4:	4b4e      	ldr	r3, [pc, #312]	; (8009af0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80099b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80099ba:	041b      	lsls	r3, r3, #16
 80099bc:	0f1b      	lsrs	r3, r3, #28
 80099be:	f003 030f 	and.w	r3, r3, #15
 80099c2:	4a4e      	ldr	r2, [pc, #312]	; (8009afc <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 80099c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099c8:	ee07 3a90 	vmov	s15, r3
 80099cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	ee07 3a90 	vmov	s15, r3
 80099d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80099de:	69bb      	ldr	r3, [r7, #24]
 80099e0:	ee07 3a90 	vmov	s15, r3
 80099e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099e8:	ed97 6a02 	vldr	s12, [r7, #8]
 80099ec:	eddf 5a42 	vldr	s11, [pc, #264]	; 8009af8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80099f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8009a00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a04:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a08:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8009a0a:	4b39      	ldr	r3, [pc, #228]	; (8009af0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8009a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d017      	beq.n	8009a46 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009a16:	4b36      	ldr	r3, [pc, #216]	; (8009af0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8009a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a1a:	0a5b      	lsrs	r3, r3, #9
 8009a1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a20:	ee07 3a90 	vmov	s15, r3
 8009a24:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8009a28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a2c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009a30:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a3c:	ee17 2a90 	vmov	r2, s15
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	601a      	str	r2, [r3, #0]
 8009a44:	e002      	b.n	8009a4c <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8009a4c:	4b28      	ldr	r3, [pc, #160]	; (8009af0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8009a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d017      	beq.n	8009a88 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009a58:	4b25      	ldr	r3, [pc, #148]	; (8009af0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8009a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a5c:	0c1b      	lsrs	r3, r3, #16
 8009a5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a62:	ee07 3a90 	vmov	s15, r3
 8009a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8009a6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a6e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009a72:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a7e:	ee17 2a90 	vmov	r2, s15
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	605a      	str	r2, [r3, #4]
 8009a86:	e002      	b.n	8009a8e <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8009a8e:	4b18      	ldr	r3, [pc, #96]	; (8009af0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8009a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d017      	beq.n	8009aca <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009a9a:	4b15      	ldr	r3, [pc, #84]	; (8009af0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8009a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a9e:	0e1b      	lsrs	r3, r3, #24
 8009aa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009aa4:	ee07 3a90 	vmov	s15, r3
 8009aa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8009aac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ab0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009ab4:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ab8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009abc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ac0:	ee17 2a90 	vmov	r2, s15
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009ac8:	e00c      	b.n	8009ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2200      	movs	r2, #0
 8009ace:	609a      	str	r2, [r3, #8]
}
 8009ad0:	e008      	b.n	8009ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2200      	movs	r2, #0
 8009adc:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	609a      	str	r2, [r3, #8]
}
 8009ae4:	bf00      	nop
 8009ae6:	3724      	adds	r7, #36	; 0x24
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aee:	4770      	bx	lr
 8009af0:	46020c00 	.word	0x46020c00
 8009af4:	4b742400 	.word	0x4b742400
 8009af8:	46000000 	.word	0x46000000
 8009afc:	0800e2a0 	.word	0x0800e2a0

08009b00 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b089      	sub	sp, #36	; 0x24
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8009b08:	4bac      	ldr	r3, [pc, #688]	; (8009dbc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8009b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b10:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8009b12:	4baa      	ldr	r3, [pc, #680]	; (8009dbc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8009b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b16:	f003 0303 	and.w	r3, r3, #3
 8009b1a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8009b1c:	4ba7      	ldr	r3, [pc, #668]	; (8009dbc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8009b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b20:	0a1b      	lsrs	r3, r3, #8
 8009b22:	f003 030f 	and.w	r3, r3, #15
 8009b26:	3301      	adds	r3, #1
 8009b28:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8009b2a:	4ba4      	ldr	r3, [pc, #656]	; (8009dbc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8009b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b2e:	f003 0310 	and.w	r3, r3, #16
 8009b32:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8009b34:	4ba1      	ldr	r3, [pc, #644]	; (8009dbc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8009b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b38:	08db      	lsrs	r3, r3, #3
 8009b3a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b3e:	68fa      	ldr	r2, [r7, #12]
 8009b40:	fb02 f303 	mul.w	r3, r2, r3
 8009b44:	ee07 3a90 	vmov	s15, r3
 8009b48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b4c:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	f000 8123 	beq.w	8009d9e <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	2b03      	cmp	r3, #3
 8009b5c:	d062      	beq.n	8009c24 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	2b03      	cmp	r3, #3
 8009b62:	f200 8081 	bhi.w	8009c68 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	d024      	beq.n	8009bb6 <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	2b02      	cmp	r3, #2
 8009b70:	d17a      	bne.n	8009c68 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	ee07 3a90 	vmov	s15, r3
 8009b78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b7c:	eddf 6a90 	vldr	s13, [pc, #576]	; 8009dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8009b80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b84:	4b8d      	ldr	r3, [pc, #564]	; (8009dbc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8009b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b8c:	ee07 3a90 	vmov	s15, r3
 8009b90:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8009b94:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b98:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8009dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8009b9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009ba0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8009ba4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ba8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009bac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bb0:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8009bb4:	e08f      	b.n	8009cd6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8009bb6:	4b81      	ldr	r3, [pc, #516]	; (8009dbc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8009bb8:	689b      	ldr	r3, [r3, #8]
 8009bba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d005      	beq.n	8009bce <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 8009bc2:	4b7e      	ldr	r3, [pc, #504]	; (8009dbc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8009bc4:	689b      	ldr	r3, [r3, #8]
 8009bc6:	0f1b      	lsrs	r3, r3, #28
 8009bc8:	f003 030f 	and.w	r3, r3, #15
 8009bcc:	e006      	b.n	8009bdc <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 8009bce:	4b7b      	ldr	r3, [pc, #492]	; (8009dbc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8009bd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009bd4:	041b      	lsls	r3, r3, #16
 8009bd6:	0f1b      	lsrs	r3, r3, #28
 8009bd8:	f003 030f 	and.w	r3, r3, #15
 8009bdc:	4a7a      	ldr	r2, [pc, #488]	; (8009dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8009bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009be2:	ee07 3a90 	vmov	s15, r3
 8009be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	ee07 3a90 	vmov	s15, r3
 8009bf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bf4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009bf8:	69bb      	ldr	r3, [r7, #24]
 8009bfa:	ee07 3a90 	vmov	s15, r3
 8009bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c02:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c06:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8009dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8009c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8009c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c22:	e058      	b.n	8009cd6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	ee07 3a90 	vmov	s15, r3
 8009c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c2e:	eddf 6a64 	vldr	s13, [pc, #400]	; 8009dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8009c32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c36:	4b61      	ldr	r3, [pc, #388]	; (8009dbc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8009c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c3e:	ee07 3a90 	vmov	s15, r3
 8009c42:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8009c46:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c4a:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8009dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8009c4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009c52:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8009c56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c66:	e036      	b.n	8009cd6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8009c68:	4b54      	ldr	r3, [pc, #336]	; (8009dbc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8009c6a:	689b      	ldr	r3, [r3, #8]
 8009c6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d005      	beq.n	8009c80 <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 8009c74:	4b51      	ldr	r3, [pc, #324]	; (8009dbc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8009c76:	689b      	ldr	r3, [r3, #8]
 8009c78:	0f1b      	lsrs	r3, r3, #28
 8009c7a:	f003 030f 	and.w	r3, r3, #15
 8009c7e:	e006      	b.n	8009c8e <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 8009c80:	4b4e      	ldr	r3, [pc, #312]	; (8009dbc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8009c82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009c86:	041b      	lsls	r3, r3, #16
 8009c88:	0f1b      	lsrs	r3, r3, #28
 8009c8a:	f003 030f 	and.w	r3, r3, #15
 8009c8e:	4a4e      	ldr	r2, [pc, #312]	; (8009dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8009c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c94:	ee07 3a90 	vmov	s15, r3
 8009c98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	ee07 3a90 	vmov	s15, r3
 8009ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009caa:	69bb      	ldr	r3, [r7, #24]
 8009cac:	ee07 3a90 	vmov	s15, r3
 8009cb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cb4:	ed97 6a02 	vldr	s12, [r7, #8]
 8009cb8:	eddf 5a42 	vldr	s11, [pc, #264]	; 8009dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8009cbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8009ccc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cd0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009cd4:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8009cd6:	4b39      	ldr	r3, [pc, #228]	; (8009dbc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8009cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d017      	beq.n	8009d12 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009ce2:	4b36      	ldr	r3, [pc, #216]	; (8009dbc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8009ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ce6:	0a5b      	lsrs	r3, r3, #9
 8009ce8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cec:	ee07 3a90 	vmov	s15, r3
 8009cf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8009cf4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009cf8:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009cfc:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d08:	ee17 2a90 	vmov	r2, s15
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	601a      	str	r2, [r3, #0]
 8009d10:	e002      	b.n	8009d18 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2200      	movs	r2, #0
 8009d16:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8009d18:	4b28      	ldr	r3, [pc, #160]	; (8009dbc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8009d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d017      	beq.n	8009d54 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009d24:	4b25      	ldr	r3, [pc, #148]	; (8009dbc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8009d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d28:	0c1b      	lsrs	r3, r3, #16
 8009d2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d2e:	ee07 3a90 	vmov	s15, r3
 8009d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8009d36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d3a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009d3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d4a:	ee17 2a90 	vmov	r2, s15
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	605a      	str	r2, [r3, #4]
 8009d52:	e002      	b.n	8009d5a <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2200      	movs	r2, #0
 8009d58:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8009d5a:	4b18      	ldr	r3, [pc, #96]	; (8009dbc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8009d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d017      	beq.n	8009d96 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009d66:	4b15      	ldr	r3, [pc, #84]	; (8009dbc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8009d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d6a:	0e1b      	lsrs	r3, r3, #24
 8009d6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d70:	ee07 3a90 	vmov	s15, r3
 8009d74:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8009d78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d7c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009d80:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d8c:	ee17 2a90 	vmov	r2, s15
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8009d94:	e00c      	b.n	8009db0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	609a      	str	r2, [r3, #8]
}
 8009d9c:	e008      	b.n	8009db0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2200      	movs	r2, #0
 8009da2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2200      	movs	r2, #0
 8009da8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2200      	movs	r2, #0
 8009dae:	609a      	str	r2, [r3, #8]
}
 8009db0:	bf00      	nop
 8009db2:	3724      	adds	r7, #36	; 0x24
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr
 8009dbc:	46020c00 	.word	0x46020c00
 8009dc0:	4b742400 	.word	0x4b742400
 8009dc4:	46000000 	.word	0x46000000
 8009dc8:	0800e2a0 	.word	0x0800e2a0

08009dcc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b08e      	sub	sp, #56	; 0x38
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8009dd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009dda:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8009dde:	430b      	orrs	r3, r1
 8009de0:	d145      	bne.n	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8009de2:	4ba7      	ldr	r3, [pc, #668]	; (800a080 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009de4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009de8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009dec:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8009dee:	4ba4      	ldr	r3, [pc, #656]	; (800a080 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009df0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009df4:	f003 0302 	and.w	r3, r3, #2
 8009df8:	2b02      	cmp	r3, #2
 8009dfa:	d108      	bne.n	8009e0e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8009dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e02:	d104      	bne.n	8009e0e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8009e04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e08:	637b      	str	r3, [r7, #52]	; 0x34
 8009e0a:	f001 b8fc 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8009e0e:	4b9c      	ldr	r3, [pc, #624]	; (800a080 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009e10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009e14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009e1c:	d114      	bne.n	8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8009e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e24:	d110      	bne.n	8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009e26:	4b96      	ldr	r3, [pc, #600]	; (800a080 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009e28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e34:	d103      	bne.n	8009e3e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8009e36:	23fa      	movs	r3, #250	; 0xfa
 8009e38:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009e3a:	f001 b8e4 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8009e3e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009e42:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009e44:	f001 b8df 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8009e48:	4b8d      	ldr	r3, [pc, #564]	; (800a080 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e54:	d107      	bne.n	8009e66 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8009e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e5c:	d103      	bne.n	8009e66 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8009e5e:	4b89      	ldr	r3, [pc, #548]	; (800a084 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8009e60:	637b      	str	r3, [r7, #52]	; 0x34
 8009e62:	f001 b8d0 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8009e66:	2300      	movs	r3, #0
 8009e68:	637b      	str	r3, [r7, #52]	; 0x34
 8009e6a:	f001 b8cc 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009e6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e72:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8009e76:	430b      	orrs	r3, r1
 8009e78:	d151      	bne.n	8009f1e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8009e7a:	4b81      	ldr	r3, [pc, #516]	; (800a080 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009e7c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009e80:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8009e84:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8009e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e88:	2b80      	cmp	r3, #128	; 0x80
 8009e8a:	d035      	beq.n	8009ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8009e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e8e:	2b80      	cmp	r3, #128	; 0x80
 8009e90:	d841      	bhi.n	8009f16 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8009e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e94:	2b60      	cmp	r3, #96	; 0x60
 8009e96:	d02a      	beq.n	8009eee <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8009e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e9a:	2b60      	cmp	r3, #96	; 0x60
 8009e9c:	d83b      	bhi.n	8009f16 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8009e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea0:	2b40      	cmp	r3, #64	; 0x40
 8009ea2:	d009      	beq.n	8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea6:	2b40      	cmp	r3, #64	; 0x40
 8009ea8:	d835      	bhi.n	8009f16 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8009eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d00c      	beq.n	8009eca <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8009eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb2:	2b20      	cmp	r3, #32
 8009eb4:	d012      	beq.n	8009edc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8009eb6:	e02e      	b.n	8009f16 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009eb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f7ff fb53 	bl	8009568 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8009ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009ec6:	f001 b89e 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009eca:	f107 0318 	add.w	r3, r7, #24
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f7ff fcb0 	bl	8009834 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8009ed4:	69bb      	ldr	r3, [r7, #24]
 8009ed6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009ed8:	f001 b895 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009edc:	f107 030c 	add.w	r3, r7, #12
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f7ff fe0d 	bl	8009b00 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009eea:	f001 b88c 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009eee:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009ef2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009ef4:	f001 b887 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009ef8:	4b61      	ldr	r3, [pc, #388]	; (800a080 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f04:	d103      	bne.n	8009f0e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8009f06:	4b60      	ldr	r3, [pc, #384]	; (800a088 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009f08:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009f0a:	f001 b87c 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009f12:	f001 b878 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 8009f16:	2300      	movs	r3, #0
 8009f18:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009f1a:	f001 b874 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8009f1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f22:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8009f26:	430b      	orrs	r3, r1
 8009f28:	d158      	bne.n	8009fdc <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8009f2a:	4b55      	ldr	r3, [pc, #340]	; (800a080 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009f2c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009f30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009f34:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8009f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f3c:	d03b      	beq.n	8009fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8009f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f44:	d846      	bhi.n	8009fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8009f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f4c:	d02e      	beq.n	8009fac <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8009f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f54:	d83e      	bhi.n	8009fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8009f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f5c:	d00b      	beq.n	8009f76 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8009f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f64:	d836      	bhi.n	8009fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8009f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d00d      	beq.n	8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8009f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f72:	d012      	beq.n	8009f9a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8009f74:	e02e      	b.n	8009fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f7ff faf4 	bl	8009568 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8009f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009f84:	f001 b83f 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f88:	f107 0318 	add.w	r3, r7, #24
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f7ff fc51 	bl	8009834 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8009f92:	69bb      	ldr	r3, [r7, #24]
 8009f94:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009f96:	f001 b836 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f9a:	f107 030c 	add.w	r3, r7, #12
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f7ff fdae 	bl	8009b00 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009fa8:	f001 b82d 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009fac:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009fb0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009fb2:	f001 b828 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009fb6:	4b32      	ldr	r3, [pc, #200]	; (800a080 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fc2:	d103      	bne.n	8009fcc <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8009fc4:	4b30      	ldr	r3, [pc, #192]	; (800a088 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009fc6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009fc8:	f001 b81d 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009fd0:	f001 b819 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009fd8:	f001 b815 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8009fdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fe0:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8009fe4:	430b      	orrs	r3, r1
 8009fe6:	d126      	bne.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8009fe8:	4b25      	ldr	r3, [pc, #148]	; (800a080 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009fea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009fee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ff2:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8009ff4:	4b22      	ldr	r3, [pc, #136]	; (800a080 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ffc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a000:	d106      	bne.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800a002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a004:	2b00      	cmp	r3, #0
 800a006:	d103      	bne.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800a008:	4b1f      	ldr	r3, [pc, #124]	; (800a088 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a00a:	637b      	str	r3, [r7, #52]	; 0x34
 800a00c:	f000 bffb 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800a010:	4b1b      	ldr	r3, [pc, #108]	; (800a080 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a018:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a01c:	d107      	bne.n	800a02e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800a01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a020:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a024:	d103      	bne.n	800a02e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800a026:	4b19      	ldr	r3, [pc, #100]	; (800a08c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800a028:	637b      	str	r3, [r7, #52]	; 0x34
 800a02a:	f000 bfec 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800a02e:	2300      	movs	r3, #0
 800a030:	637b      	str	r3, [r7, #52]	; 0x34
 800a032:	f000 bfe8 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800a036:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a03a:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800a03e:	430b      	orrs	r3, r1
 800a040:	d164      	bne.n	800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800a042:	4b0f      	ldr	r3, [pc, #60]	; (800a080 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a048:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800a04c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800a04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a050:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a054:	d03d      	beq.n	800a0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a058:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a05c:	d852      	bhi.n	800a104 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800a05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a060:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a064:	d014      	beq.n	800a090 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800a066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a068:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a06c:	d84a      	bhi.n	800a104 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800a06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a070:	2b00      	cmp	r3, #0
 800a072:	d01f      	beq.n	800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800a074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a076:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a07a:	d012      	beq.n	800a0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800a07c:	e042      	b.n	800a104 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800a07e:	bf00      	nop
 800a080:	46020c00 	.word	0x46020c00
 800a084:	0007a120 	.word	0x0007a120
 800a088:	00f42400 	.word	0x00f42400
 800a08c:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a094:	4618      	mov	r0, r3
 800a096:	f7ff fa67 	bl	8009568 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800a09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a09c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a09e:	f000 bfb2 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0a2:	f107 0318 	add.w	r3, r7, #24
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7ff fbc4 	bl	8009834 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800a0ac:	69fb      	ldr	r3, [r7, #28]
 800a0ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a0b0:	f000 bfa9 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800a0b4:	4bab      	ldr	r3, [pc, #684]	; (800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a0bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0c0:	d103      	bne.n	800a0ca <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800a0c2:	4ba9      	ldr	r3, [pc, #676]	; (800a368 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800a0c4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a0c6:	f000 bf9e 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a0ce:	f000 bf9a 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a0d2:	4ba4      	ldr	r3, [pc, #656]	; (800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800a0d4:	689b      	ldr	r3, [r3, #8]
 800a0d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d005      	beq.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800a0de:	4ba1      	ldr	r3, [pc, #644]	; (800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800a0e0:	689b      	ldr	r3, [r3, #8]
 800a0e2:	0e1b      	lsrs	r3, r3, #24
 800a0e4:	f003 030f 	and.w	r3, r3, #15
 800a0e8:	e006      	b.n	800a0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 800a0ea:	4b9e      	ldr	r3, [pc, #632]	; (800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800a0ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a0f0:	041b      	lsls	r3, r3, #16
 800a0f2:	0e1b      	lsrs	r3, r3, #24
 800a0f4:	f003 030f 	and.w	r3, r3, #15
 800a0f8:	4a9c      	ldr	r2, [pc, #624]	; (800a36c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800a0fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a100:	f000 bf81 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 800a104:	2300      	movs	r3, #0
 800a106:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a108:	f000 bf7d 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a10c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a110:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 800a114:	430b      	orrs	r3, r1
 800a116:	d175      	bne.n	800a204 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a118:	4b92      	ldr	r3, [pc, #584]	; (800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800a11a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a11e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a122:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800a124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a126:	2b00      	cmp	r3, #0
 800a128:	d15b      	bne.n	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800a12a:	4b8e      	ldr	r3, [pc, #568]	; (800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800a12c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a130:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800a134:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 800a136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a138:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a13c:	d034      	beq.n	800a1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a140:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a144:	d849      	bhi.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 800a146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a148:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a14c:	d00b      	beq.n	800a166 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 800a14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a150:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a154:	d841      	bhi.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 800a156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d016      	beq.n	800a18a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a162:	d009      	beq.n	800a178 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 800a164:	e039      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a166:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a16a:	4618      	mov	r0, r3
 800a16c:	f7ff f9fc 	bl	8009568 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a172:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800a174:	f000 bf47 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a178:	f107 0318 	add.w	r3, r7, #24
 800a17c:	4618      	mov	r0, r3
 800a17e:	f7ff fb59 	bl	8009834 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a182:	69fb      	ldr	r3, [r7, #28]
 800a184:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800a186:	f000 bf3e 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800a18a:	4b76      	ldr	r3, [pc, #472]	; (800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a192:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a196:	d103      	bne.n	800a1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 800a198:	4b73      	ldr	r3, [pc, #460]	; (800a368 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800a19a:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800a19c:	f000 bf33 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800a1a4:	f000 bf2f 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a1a8:	4b6e      	ldr	r3, [pc, #440]	; (800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800a1aa:	689b      	ldr	r3, [r3, #8]
 800a1ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d005      	beq.n	800a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 800a1b4:	4b6b      	ldr	r3, [pc, #428]	; (800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800a1b6:	689b      	ldr	r3, [r3, #8]
 800a1b8:	0e1b      	lsrs	r3, r3, #24
 800a1ba:	f003 030f 	and.w	r3, r3, #15
 800a1be:	e006      	b.n	800a1ce <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 800a1c0:	4b68      	ldr	r3, [pc, #416]	; (800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800a1c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a1c6:	041b      	lsls	r3, r3, #16
 800a1c8:	0e1b      	lsrs	r3, r3, #24
 800a1ca:	f003 030f 	and.w	r3, r3, #15
 800a1ce:	4a67      	ldr	r2, [pc, #412]	; (800a36c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800a1d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1d4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800a1d6:	f000 bf16 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800a1de:	f000 bf12 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800a1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a1e8:	d108      	bne.n	800a1fc <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a1ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f7ff f9ba 	bl	8009568 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800a1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f6:	637b      	str	r3, [r7, #52]	; 0x34
 800a1f8:	f000 bf05 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	637b      	str	r3, [r7, #52]	; 0x34
 800a200:	f000 bf01 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800a204:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a208:	1e51      	subs	r1, r2, #1
 800a20a:	430b      	orrs	r3, r1
 800a20c:	d136      	bne.n	800a27c <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800a20e:	4b55      	ldr	r3, [pc, #340]	; (800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800a210:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a214:	f003 0303 	and.w	r3, r3, #3
 800a218:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800a21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d104      	bne.n	800a22a <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800a220:	f7fe fb34 	bl	800888c <HAL_RCC_GetPCLK2Freq>
 800a224:	6378      	str	r0, [r7, #52]	; 0x34
 800a226:	f000 beee 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800a22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d104      	bne.n	800a23a <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a230:	f7fe f9f6 	bl	8008620 <HAL_RCC_GetSysClockFreq>
 800a234:	6378      	str	r0, [r7, #52]	; 0x34
 800a236:	f000 bee6 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800a23a:	4b4a      	ldr	r3, [pc, #296]	; (800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a246:	d106      	bne.n	800a256 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800a248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a24a:	2b02      	cmp	r3, #2
 800a24c:	d103      	bne.n	800a256 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 800a24e:	4b48      	ldr	r3, [pc, #288]	; (800a370 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800a250:	637b      	str	r3, [r7, #52]	; 0x34
 800a252:	f000 bed8 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800a256:	4b43      	ldr	r3, [pc, #268]	; (800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800a258:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a25c:	f003 0302 	and.w	r3, r3, #2
 800a260:	2b02      	cmp	r3, #2
 800a262:	d107      	bne.n	800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 800a264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a266:	2b03      	cmp	r3, #3
 800a268:	d104      	bne.n	800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 800a26a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a26e:	637b      	str	r3, [r7, #52]	; 0x34
 800a270:	f000 bec9 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800a274:	2300      	movs	r3, #0
 800a276:	637b      	str	r3, [r7, #52]	; 0x34
 800a278:	f000 bec5 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800a27c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a280:	1e91      	subs	r1, r2, #2
 800a282:	430b      	orrs	r3, r1
 800a284:	d136      	bne.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800a286:	4b37      	ldr	r3, [pc, #220]	; (800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800a288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a28c:	f003 030c 	and.w	r3, r3, #12
 800a290:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800a292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a294:	2b00      	cmp	r3, #0
 800a296:	d104      	bne.n	800a2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a298:	f7fe fae4 	bl	8008864 <HAL_RCC_GetPCLK1Freq>
 800a29c:	6378      	str	r0, [r7, #52]	; 0x34
 800a29e:	f000 beb2 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800a2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a4:	2b04      	cmp	r3, #4
 800a2a6:	d104      	bne.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a2a8:	f7fe f9ba 	bl	8008620 <HAL_RCC_GetSysClockFreq>
 800a2ac:	6378      	str	r0, [r7, #52]	; 0x34
 800a2ae:	f000 beaa 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800a2b2:	4b2c      	ldr	r3, [pc, #176]	; (800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a2ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2be:	d106      	bne.n	800a2ce <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 800a2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c2:	2b08      	cmp	r3, #8
 800a2c4:	d103      	bne.n	800a2ce <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 800a2c6:	4b2a      	ldr	r3, [pc, #168]	; (800a370 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800a2c8:	637b      	str	r3, [r7, #52]	; 0x34
 800a2ca:	f000 be9c 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800a2ce:	4b25      	ldr	r3, [pc, #148]	; (800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800a2d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a2d4:	f003 0302 	and.w	r3, r3, #2
 800a2d8:	2b02      	cmp	r3, #2
 800a2da:	d107      	bne.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 800a2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2de:	2b0c      	cmp	r3, #12
 800a2e0:	d104      	bne.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 800a2e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2e6:	637b      	str	r3, [r7, #52]	; 0x34
 800a2e8:	f000 be8d 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	637b      	str	r3, [r7, #52]	; 0x34
 800a2f0:	f000 be89 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800a2f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2f8:	1f11      	subs	r1, r2, #4
 800a2fa:	430b      	orrs	r3, r1
 800a2fc:	d13e      	bne.n	800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800a2fe:	4b19      	ldr	r3, [pc, #100]	; (800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800a300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a304:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a308:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800a30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d104      	bne.n	800a31a <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a310:	f7fe faa8 	bl	8008864 <HAL_RCC_GetPCLK1Freq>
 800a314:	6378      	str	r0, [r7, #52]	; 0x34
 800a316:	f000 be76 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800a31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a31c:	2b10      	cmp	r3, #16
 800a31e:	d104      	bne.n	800a32a <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a320:	f7fe f97e 	bl	8008620 <HAL_RCC_GetSysClockFreq>
 800a324:	6378      	str	r0, [r7, #52]	; 0x34
 800a326:	f000 be6e 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800a32a:	4b0e      	ldr	r3, [pc, #56]	; (800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a336:	d106      	bne.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 800a338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a33a:	2b20      	cmp	r3, #32
 800a33c:	d103      	bne.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 800a33e:	4b0c      	ldr	r3, [pc, #48]	; (800a370 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800a340:	637b      	str	r3, [r7, #52]	; 0x34
 800a342:	f000 be60 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800a346:	4b07      	ldr	r3, [pc, #28]	; (800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800a348:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a34c:	f003 0302 	and.w	r3, r3, #2
 800a350:	2b02      	cmp	r3, #2
 800a352:	d10f      	bne.n	800a374 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a356:	2b30      	cmp	r3, #48	; 0x30
 800a358:	d10c      	bne.n	800a374 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 800a35a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a35e:	637b      	str	r3, [r7, #52]	; 0x34
 800a360:	f000 be51 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800a364:	46020c00 	.word	0x46020c00
 800a368:	02dc6c00 	.word	0x02dc6c00
 800a36c:	0800e2a0 	.word	0x0800e2a0
 800a370:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800a374:	2300      	movs	r3, #0
 800a376:	637b      	str	r3, [r7, #52]	; 0x34
 800a378:	f000 be45 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800a37c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a380:	f1a2 0108 	sub.w	r1, r2, #8
 800a384:	430b      	orrs	r3, r1
 800a386:	d136      	bne.n	800a3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800a388:	4b9f      	ldr	r3, [pc, #636]	; (800a608 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a38a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a38e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a392:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800a394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a396:	2b00      	cmp	r3, #0
 800a398:	d104      	bne.n	800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a39a:	f7fe fa63 	bl	8008864 <HAL_RCC_GetPCLK1Freq>
 800a39e:	6378      	str	r0, [r7, #52]	; 0x34
 800a3a0:	f000 be31 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800a3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a6:	2b40      	cmp	r3, #64	; 0x40
 800a3a8:	d104      	bne.n	800a3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a3aa:	f7fe f939 	bl	8008620 <HAL_RCC_GetSysClockFreq>
 800a3ae:	6378      	str	r0, [r7, #52]	; 0x34
 800a3b0:	f000 be29 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800a3b4:	4b94      	ldr	r3, [pc, #592]	; (800a608 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a3bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3c0:	d106      	bne.n	800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 800a3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c4:	2b80      	cmp	r3, #128	; 0x80
 800a3c6:	d103      	bne.n	800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 800a3c8:	4b90      	ldr	r3, [pc, #576]	; (800a60c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a3ca:	637b      	str	r3, [r7, #52]	; 0x34
 800a3cc:	f000 be1b 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800a3d0:	4b8d      	ldr	r3, [pc, #564]	; (800a608 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a3d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a3d6:	f003 0302 	and.w	r3, r3, #2
 800a3da:	2b02      	cmp	r3, #2
 800a3dc:	d107      	bne.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 800a3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e0:	2bc0      	cmp	r3, #192	; 0xc0
 800a3e2:	d104      	bne.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 800a3e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3e8:	637b      	str	r3, [r7, #52]	; 0x34
 800a3ea:	f000 be0c 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	637b      	str	r3, [r7, #52]	; 0x34
 800a3f2:	f000 be08 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800a3f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3fa:	f1a2 0110 	sub.w	r1, r2, #16
 800a3fe:	430b      	orrs	r3, r1
 800a400:	d139      	bne.n	800a476 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800a402:	4b81      	ldr	r3, [pc, #516]	; (800a608 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a408:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a40c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800a40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a410:	2b00      	cmp	r3, #0
 800a412:	d104      	bne.n	800a41e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a414:	f7fe fa26 	bl	8008864 <HAL_RCC_GetPCLK1Freq>
 800a418:	6378      	str	r0, [r7, #52]	; 0x34
 800a41a:	f000 bdf4 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800a41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a420:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a424:	d104      	bne.n	800a430 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a426:	f7fe f8fb 	bl	8008620 <HAL_RCC_GetSysClockFreq>
 800a42a:	6378      	str	r0, [r7, #52]	; 0x34
 800a42c:	f000 bdeb 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800a430:	4b75      	ldr	r3, [pc, #468]	; (800a608 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a43c:	d107      	bne.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 800a43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a444:	d103      	bne.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 800a446:	4b71      	ldr	r3, [pc, #452]	; (800a60c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a448:	637b      	str	r3, [r7, #52]	; 0x34
 800a44a:	f000 bddc 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800a44e:	4b6e      	ldr	r3, [pc, #440]	; (800a608 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a450:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a454:	f003 0302 	and.w	r3, r3, #2
 800a458:	2b02      	cmp	r3, #2
 800a45a:	d108      	bne.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 800a45c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a45e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a462:	d104      	bne.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 800a464:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a468:	637b      	str	r3, [r7, #52]	; 0x34
 800a46a:	f000 bdcc 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800a46e:	2300      	movs	r3, #0
 800a470:	637b      	str	r3, [r7, #52]	; 0x34
 800a472:	f000 bdc8 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800a476:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a47a:	f1a2 0120 	sub.w	r1, r2, #32
 800a47e:	430b      	orrs	r3, r1
 800a480:	d158      	bne.n	800a534 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800a482:	4b61      	ldr	r3, [pc, #388]	; (800a608 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a484:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a488:	f003 0307 	and.w	r3, r3, #7
 800a48c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800a48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a490:	2b00      	cmp	r3, #0
 800a492:	d104      	bne.n	800a49e <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800a494:	f7fe fa0e 	bl	80088b4 <HAL_RCC_GetPCLK3Freq>
 800a498:	6378      	str	r0, [r7, #52]	; 0x34
 800a49a:	f000 bdb4 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800a49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a0:	2b01      	cmp	r3, #1
 800a4a2:	d104      	bne.n	800a4ae <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a4a4:	f7fe f8bc 	bl	8008620 <HAL_RCC_GetSysClockFreq>
 800a4a8:	6378      	str	r0, [r7, #52]	; 0x34
 800a4aa:	f000 bdac 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800a4ae:	4b56      	ldr	r3, [pc, #344]	; (800a608 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4ba:	d106      	bne.n	800a4ca <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 800a4bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4be:	2b02      	cmp	r3, #2
 800a4c0:	d103      	bne.n	800a4ca <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 800a4c2:	4b52      	ldr	r3, [pc, #328]	; (800a60c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a4c4:	637b      	str	r3, [r7, #52]	; 0x34
 800a4c6:	f000 bd9e 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800a4ca:	4b4f      	ldr	r3, [pc, #316]	; (800a608 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a4cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a4d0:	f003 0302 	and.w	r3, r3, #2
 800a4d4:	2b02      	cmp	r3, #2
 800a4d6:	d107      	bne.n	800a4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 800a4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4da:	2b03      	cmp	r3, #3
 800a4dc:	d104      	bne.n	800a4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 800a4de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4e2:	637b      	str	r3, [r7, #52]	; 0x34
 800a4e4:	f000 bd8f 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800a4e8:	4b47      	ldr	r3, [pc, #284]	; (800a608 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f003 0320 	and.w	r3, r3, #32
 800a4f0:	2b20      	cmp	r3, #32
 800a4f2:	d11b      	bne.n	800a52c <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800a4f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f6:	2b04      	cmp	r3, #4
 800a4f8:	d118      	bne.n	800a52c <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a4fa:	4b43      	ldr	r3, [pc, #268]	; (800a608 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a4fc:	689b      	ldr	r3, [r3, #8]
 800a4fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a502:	2b00      	cmp	r3, #0
 800a504:	d005      	beq.n	800a512 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800a506:	4b40      	ldr	r3, [pc, #256]	; (800a608 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a508:	689b      	ldr	r3, [r3, #8]
 800a50a:	0e1b      	lsrs	r3, r3, #24
 800a50c:	f003 030f 	and.w	r3, r3, #15
 800a510:	e006      	b.n	800a520 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 800a512:	4b3d      	ldr	r3, [pc, #244]	; (800a608 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a514:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a518:	041b      	lsls	r3, r3, #16
 800a51a:	0e1b      	lsrs	r3, r3, #24
 800a51c:	f003 030f 	and.w	r3, r3, #15
 800a520:	4a3b      	ldr	r2, [pc, #236]	; (800a610 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800a522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a526:	637b      	str	r3, [r7, #52]	; 0x34
 800a528:	f000 bd6d 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800a52c:	2300      	movs	r3, #0
 800a52e:	637b      	str	r3, [r7, #52]	; 0x34
 800a530:	f000 bd69 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800a534:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a538:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800a53c:	430b      	orrs	r3, r1
 800a53e:	d169      	bne.n	800a614 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800a540:	4b31      	ldr	r3, [pc, #196]	; (800a608 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a542:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a546:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a54a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800a54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a54e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a552:	d104      	bne.n	800a55e <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a554:	f7fe f864 	bl	8008620 <HAL_RCC_GetSysClockFreq>
 800a558:	6378      	str	r0, [r7, #52]	; 0x34
 800a55a:	f000 bd54 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800a55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a560:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a564:	d108      	bne.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a566:	f107 0318 	add.w	r3, r7, #24
 800a56a:	4618      	mov	r0, r3
 800a56c:	f7ff f962 	bl	8009834 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800a570:	6a3b      	ldr	r3, [r7, #32]
 800a572:	637b      	str	r3, [r7, #52]	; 0x34
 800a574:	f000 bd47 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800a578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d104      	bne.n	800a588 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800a57e:	f7fe f957 	bl	8008830 <HAL_RCC_GetHCLKFreq>
 800a582:	6378      	str	r0, [r7, #52]	; 0x34
 800a584:	f000 bd3f 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800a588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a58a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a58e:	d118      	bne.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 800a590:	4b1d      	ldr	r3, [pc, #116]	; (800a608 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a592:	689b      	ldr	r3, [r3, #8]
 800a594:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d005      	beq.n	800a5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 800a59c:	4b1a      	ldr	r3, [pc, #104]	; (800a608 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a59e:	689b      	ldr	r3, [r3, #8]
 800a5a0:	0f1b      	lsrs	r3, r3, #28
 800a5a2:	f003 030f 	and.w	r3, r3, #15
 800a5a6:	e006      	b.n	800a5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 800a5a8:	4b17      	ldr	r3, [pc, #92]	; (800a608 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a5aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a5ae:	041b      	lsls	r3, r3, #16
 800a5b0:	0f1b      	lsrs	r3, r3, #28
 800a5b2:	f003 030f 	and.w	r3, r3, #15
 800a5b6:	4a16      	ldr	r2, [pc, #88]	; (800a610 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800a5b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5bc:	637b      	str	r3, [r7, #52]	; 0x34
 800a5be:	f000 bd22 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800a5c2:	4b11      	ldr	r3, [pc, #68]	; (800a608 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a5ce:	d107      	bne.n	800a5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 800a5d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a5d6:	d103      	bne.n	800a5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 800a5d8:	4b0c      	ldr	r3, [pc, #48]	; (800a60c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a5da:	637b      	str	r3, [r7, #52]	; 0x34
 800a5dc:	f000 bd13 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800a5e0:	4b09      	ldr	r3, [pc, #36]	; (800a608 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a5e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5ec:	d107      	bne.n	800a5fe <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 800a5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a5f4:	d103      	bne.n	800a5fe <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 800a5f6:	4b05      	ldr	r3, [pc, #20]	; (800a60c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a5f8:	637b      	str	r3, [r7, #52]	; 0x34
 800a5fa:	f000 bd04 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800a5fe:	2300      	movs	r3, #0
 800a600:	637b      	str	r3, [r7, #52]	; 0x34
 800a602:	f000 bd00 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800a606:	bf00      	nop
 800a608:	46020c00 	.word	0x46020c00
 800a60c:	00f42400 	.word	0x00f42400
 800a610:	0800e2a0 	.word	0x0800e2a0
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800a614:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a618:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800a61c:	430b      	orrs	r3, r1
 800a61e:	d14e      	bne.n	800a6be <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800a620:	4ba8      	ldr	r3, [pc, #672]	; (800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a622:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a626:	f003 0307 	and.w	r3, r3, #7
 800a62a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800a62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a62e:	2b04      	cmp	r3, #4
 800a630:	d841      	bhi.n	800a6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800a632:	a201      	add	r2, pc, #4	; (adr r2, 800a638 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 800a634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a638:	0800a671 	.word	0x0800a671
 800a63c:	0800a64d 	.word	0x0800a64d
 800a640:	0800a65f 	.word	0x0800a65f
 800a644:	0800a67b 	.word	0x0800a67b
 800a648:	0800a685 	.word	0x0800a685
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a64c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a650:	4618      	mov	r0, r3
 800a652:	f7fe ff89 	bl	8009568 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800a656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a658:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a65a:	f000 bcd4 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a65e:	f107 030c 	add.w	r3, r7, #12
 800a662:	4618      	mov	r0, r3
 800a664:	f7ff fa4c 	bl	8009b00 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a66c:	f000 bccb 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800a670:	f7fe f8de 	bl	8008830 <HAL_RCC_GetHCLKFreq>
 800a674:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800a676:	f000 bcc6 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800a67a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a67e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a680:	f000 bcc1 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a684:	4b8f      	ldr	r3, [pc, #572]	; (800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a686:	689b      	ldr	r3, [r3, #8]
 800a688:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d005      	beq.n	800a69c <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 800a690:	4b8c      	ldr	r3, [pc, #560]	; (800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a692:	689b      	ldr	r3, [r3, #8]
 800a694:	0e1b      	lsrs	r3, r3, #24
 800a696:	f003 030f 	and.w	r3, r3, #15
 800a69a:	e006      	b.n	800a6aa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800a69c:	4b89      	ldr	r3, [pc, #548]	; (800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a69e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a6a2:	041b      	lsls	r3, r3, #16
 800a6a4:	0e1b      	lsrs	r3, r3, #24
 800a6a6:	f003 030f 	and.w	r3, r3, #15
 800a6aa:	4a87      	ldr	r2, [pc, #540]	; (800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800a6ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a6b2:	f000 bca8 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a6ba:	f000 bca4 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800a6be:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6c2:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800a6c6:	430b      	orrs	r3, r1
 800a6c8:	d15d      	bne.n	800a786 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800a6ca:	4b7e      	ldr	r3, [pc, #504]	; (800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a6cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a6d0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800a6d4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800a6d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a6dc:	d036      	beq.n	800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800a6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a6e4:	d84b      	bhi.n	800a77e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 800a6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a6ec:	d029      	beq.n	800a742 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 800a6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a6f4:	d843      	bhi.n	800a77e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 800a6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a6fc:	d013      	beq.n	800a726 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800a6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a700:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a704:	d83b      	bhi.n	800a77e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 800a706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d015      	beq.n	800a738 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 800a70c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a70e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a712:	d134      	bne.n	800a77e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a714:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a718:	4618      	mov	r0, r3
 800a71a:	f7fe ff25 	bl	8009568 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800a71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a720:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a722:	f000 bc70 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a726:	f107 030c 	add.w	r3, r7, #12
 800a72a:	4618      	mov	r0, r3
 800a72c:	f7ff f9e8 	bl	8009b00 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a734:	f000 bc67 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800a738:	f7fe f87a 	bl	8008830 <HAL_RCC_GetHCLKFreq>
 800a73c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800a73e:	f000 bc62 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800a742:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a746:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a748:	f000 bc5d 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a74c:	4b5d      	ldr	r3, [pc, #372]	; (800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a74e:	689b      	ldr	r3, [r3, #8]
 800a750:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a754:	2b00      	cmp	r3, #0
 800a756:	d005      	beq.n	800a764 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800a758:	4b5a      	ldr	r3, [pc, #360]	; (800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a75a:	689b      	ldr	r3, [r3, #8]
 800a75c:	0e1b      	lsrs	r3, r3, #24
 800a75e:	f003 030f 	and.w	r3, r3, #15
 800a762:	e006      	b.n	800a772 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800a764:	4b57      	ldr	r3, [pc, #348]	; (800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a766:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a76a:	041b      	lsls	r3, r3, #16
 800a76c:	0e1b      	lsrs	r3, r3, #24
 800a76e:	f003 030f 	and.w	r3, r3, #15
 800a772:	4a55      	ldr	r2, [pc, #340]	; (800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800a774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a778:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a77a:	f000 bc44 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800a77e:	2300      	movs	r3, #0
 800a780:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a782:	f000 bc40 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800a786:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a78a:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800a78e:	430b      	orrs	r3, r1
 800a790:	d14a      	bne.n	800a828 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800a792:	4b4c      	ldr	r3, [pc, #304]	; (800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a798:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a79c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800a79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d104      	bne.n	800a7ae <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a7a4:	f7fe f85e 	bl	8008864 <HAL_RCC_GetPCLK1Freq>
 800a7a8:	6378      	str	r0, [r7, #52]	; 0x34
 800a7aa:	f000 bc2c 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800a7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7b4:	d104      	bne.n	800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a7b6:	f7fd ff33 	bl	8008620 <HAL_RCC_GetSysClockFreq>
 800a7ba:	6378      	str	r0, [r7, #52]	; 0x34
 800a7bc:	f000 bc23 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800a7c0:	4b40      	ldr	r3, [pc, #256]	; (800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7cc:	d107      	bne.n	800a7de <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 800a7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7d4:	d103      	bne.n	800a7de <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 800a7d6:	4b3d      	ldr	r3, [pc, #244]	; (800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800a7d8:	637b      	str	r3, [r7, #52]	; 0x34
 800a7da:	f000 bc14 	b.w	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800a7de:	4b39      	ldr	r3, [pc, #228]	; (800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f003 0320 	and.w	r3, r3, #32
 800a7e6:	2b20      	cmp	r3, #32
 800a7e8:	d11b      	bne.n	800a822 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 800a7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a7f0:	d117      	bne.n	800a822 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a7f2:	4b34      	ldr	r3, [pc, #208]	; (800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a7f4:	689b      	ldr	r3, [r3, #8]
 800a7f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d005      	beq.n	800a80a <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 800a7fe:	4b31      	ldr	r3, [pc, #196]	; (800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a800:	689b      	ldr	r3, [r3, #8]
 800a802:	0e1b      	lsrs	r3, r3, #24
 800a804:	f003 030f 	and.w	r3, r3, #15
 800a808:	e006      	b.n	800a818 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 800a80a:	4b2e      	ldr	r3, [pc, #184]	; (800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a80c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a810:	041b      	lsls	r3, r3, #16
 800a812:	0e1b      	lsrs	r3, r3, #24
 800a814:	f003 030f 	and.w	r3, r3, #15
 800a818:	4a2b      	ldr	r2, [pc, #172]	; (800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800a81a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a81e:	637b      	str	r3, [r7, #52]	; 0x34
 800a820:	e3f1      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800a822:	2300      	movs	r3, #0
 800a824:	637b      	str	r3, [r7, #52]	; 0x34
 800a826:	e3ee      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800a828:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a82c:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 800a830:	430b      	orrs	r3, r1
 800a832:	d14d      	bne.n	800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800a834:	4b23      	ldr	r3, [pc, #140]	; (800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a83a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a83e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800a840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a842:	2b00      	cmp	r3, #0
 800a844:	d103      	bne.n	800a84e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a846:	f7fe f80d 	bl	8008864 <HAL_RCC_GetPCLK1Freq>
 800a84a:	6378      	str	r0, [r7, #52]	; 0x34
 800a84c:	e3db      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800a84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a850:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a854:	d103      	bne.n	800a85e <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a856:	f7fd fee3 	bl	8008620 <HAL_RCC_GetSysClockFreq>
 800a85a:	6378      	str	r0, [r7, #52]	; 0x34
 800a85c:	e3d3      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800a85e:	4b19      	ldr	r3, [pc, #100]	; (800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a86a:	d106      	bne.n	800a87a <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 800a86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a86e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a872:	d102      	bne.n	800a87a <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 800a874:	4b15      	ldr	r3, [pc, #84]	; (800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800a876:	637b      	str	r3, [r7, #52]	; 0x34
 800a878:	e3c5      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800a87a:	4b12      	ldr	r3, [pc, #72]	; (800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f003 0320 	and.w	r3, r3, #32
 800a882:	2b20      	cmp	r3, #32
 800a884:	d11b      	bne.n	800a8be <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 800a886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a888:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a88c:	d117      	bne.n	800a8be <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a88e:	4b0d      	ldr	r3, [pc, #52]	; (800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a890:	689b      	ldr	r3, [r3, #8]
 800a892:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a896:	2b00      	cmp	r3, #0
 800a898:	d005      	beq.n	800a8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 800a89a:	4b0a      	ldr	r3, [pc, #40]	; (800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a89c:	689b      	ldr	r3, [r3, #8]
 800a89e:	0e1b      	lsrs	r3, r3, #24
 800a8a0:	f003 030f 	and.w	r3, r3, #15
 800a8a4:	e006      	b.n	800a8b4 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800a8a6:	4b07      	ldr	r3, [pc, #28]	; (800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a8a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a8ac:	041b      	lsls	r3, r3, #16
 800a8ae:	0e1b      	lsrs	r3, r3, #24
 800a8b0:	f003 030f 	and.w	r3, r3, #15
 800a8b4:	4a04      	ldr	r2, [pc, #16]	; (800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800a8b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8ba:	637b      	str	r3, [r7, #52]	; 0x34
 800a8bc:	e3a3      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	637b      	str	r3, [r7, #52]	; 0x34
 800a8c2:	e3a0      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800a8c4:	46020c00 	.word	0x46020c00
 800a8c8:	0800e2a0 	.word	0x0800e2a0
 800a8cc:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800a8d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8d4:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800a8d8:	430b      	orrs	r3, r1
 800a8da:	d148      	bne.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800a8dc:	4b9d      	ldr	r3, [pc, #628]	; (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800a8de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a8e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a8e6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800a8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ea:	2bc0      	cmp	r3, #192	; 0xc0
 800a8ec:	d024      	beq.n	800a938 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 800a8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f0:	2bc0      	cmp	r3, #192	; 0xc0
 800a8f2:	d839      	bhi.n	800a968 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 800a8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f6:	2b80      	cmp	r3, #128	; 0x80
 800a8f8:	d00d      	beq.n	800a916 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 800a8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8fc:	2b80      	cmp	r3, #128	; 0x80
 800a8fe:	d833      	bhi.n	800a968 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 800a900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a902:	2b00      	cmp	r3, #0
 800a904:	d003      	beq.n	800a90e <HAL_RCCEx_GetPeriphCLKFreq+0xb42>
 800a906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a908:	2b40      	cmp	r3, #64	; 0x40
 800a90a:	d011      	beq.n	800a930 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800a90c:	e02c      	b.n	800a968 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800a90e:	f7fd ffd1 	bl	80088b4 <HAL_RCC_GetPCLK3Freq>
 800a912:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800a914:	e377      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a916:	4b8f      	ldr	r3, [pc, #572]	; (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a91e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a922:	d102      	bne.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
        {
          frequency = HSI_VALUE;
 800a924:	4b8c      	ldr	r3, [pc, #560]	; (800ab58 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800a926:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a928:	e36d      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800a92a:	2300      	movs	r3, #0
 800a92c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a92e:	e36a      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800a930:	f7fd fe76 	bl	8008620 <HAL_RCC_GetSysClockFreq>
 800a934:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800a936:	e366      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 800a938:	4b86      	ldr	r3, [pc, #536]	; (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800a93a:	689b      	ldr	r3, [r3, #8]
 800a93c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a940:	2b00      	cmp	r3, #0
 800a942:	d005      	beq.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 800a944:	4b83      	ldr	r3, [pc, #524]	; (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800a946:	689b      	ldr	r3, [r3, #8]
 800a948:	0f1b      	lsrs	r3, r3, #28
 800a94a:	f003 030f 	and.w	r3, r3, #15
 800a94e:	e006      	b.n	800a95e <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 800a950:	4b80      	ldr	r3, [pc, #512]	; (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800a952:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a956:	041b      	lsls	r3, r3, #16
 800a958:	0f1b      	lsrs	r3, r3, #28
 800a95a:	f003 030f 	and.w	r3, r3, #15
 800a95e:	4a7f      	ldr	r2, [pc, #508]	; (800ab5c <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800a960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a964:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a966:	e34e      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 800a968:	2300      	movs	r3, #0
 800a96a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a96c:	e34b      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800a96e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a972:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 800a976:	430b      	orrs	r3, r1
 800a978:	d147      	bne.n	800aa0a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800a97a:	4b76      	ldr	r3, [pc, #472]	; (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800a97c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a980:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a984:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800a986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d103      	bne.n	800a994 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a98c:	f7fd ff6a 	bl	8008864 <HAL_RCC_GetPCLK1Freq>
 800a990:	6378      	str	r0, [r7, #52]	; 0x34
 800a992:	e338      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800a994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a996:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a99a:	d103      	bne.n	800a9a4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a99c:	f7fd fe40 	bl	8008620 <HAL_RCC_GetSysClockFreq>
 800a9a0:	6378      	str	r0, [r7, #52]	; 0x34
 800a9a2:	e330      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800a9a4:	4b6b      	ldr	r3, [pc, #428]	; (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a9ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9b0:	d106      	bne.n	800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 800a9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9b8:	d102      	bne.n	800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HSI_VALUE;
 800a9ba:	4b67      	ldr	r3, [pc, #412]	; (800ab58 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800a9bc:	637b      	str	r3, [r7, #52]	; 0x34
 800a9be:	e322      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800a9c0:	4b64      	ldr	r3, [pc, #400]	; (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f003 0320 	and.w	r3, r3, #32
 800a9c8:	2b20      	cmp	r3, #32
 800a9ca:	d11b      	bne.n	800aa04 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 800a9cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a9d2:	d117      	bne.n	800aa04 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a9d4:	4b5f      	ldr	r3, [pc, #380]	; (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800a9d6:	689b      	ldr	r3, [r3, #8]
 800a9d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d005      	beq.n	800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 800a9e0:	4b5c      	ldr	r3, [pc, #368]	; (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800a9e2:	689b      	ldr	r3, [r3, #8]
 800a9e4:	0e1b      	lsrs	r3, r3, #24
 800a9e6:	f003 030f 	and.w	r3, r3, #15
 800a9ea:	e006      	b.n	800a9fa <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 800a9ec:	4b59      	ldr	r3, [pc, #356]	; (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800a9ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a9f2:	041b      	lsls	r3, r3, #16
 800a9f4:	0e1b      	lsrs	r3, r3, #24
 800a9f6:	f003 030f 	and.w	r3, r3, #15
 800a9fa:	4a58      	ldr	r2, [pc, #352]	; (800ab5c <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800a9fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa00:	637b      	str	r3, [r7, #52]	; 0x34
 800aa02:	e300      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800aa04:	2300      	movs	r3, #0
 800aa06:	637b      	str	r3, [r7, #52]	; 0x34
 800aa08:	e2fd      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800aa0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa0e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800aa12:	430b      	orrs	r3, r1
 800aa14:	d15b      	bne.n	800aace <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800aa16:	4b4f      	ldr	r3, [pc, #316]	; (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800aa18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800aa1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa20:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800aa22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d117      	bne.n	800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800aa28:	4b4a      	ldr	r3, [pc, #296]	; (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800aa2a:	689b      	ldr	r3, [r3, #8]
 800aa2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d005      	beq.n	800aa40 <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
 800aa34:	4b47      	ldr	r3, [pc, #284]	; (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800aa36:	689b      	ldr	r3, [r3, #8]
 800aa38:	0e1b      	lsrs	r3, r3, #24
 800aa3a:	f003 030f 	and.w	r3, r3, #15
 800aa3e:	e006      	b.n	800aa4e <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
 800aa40:	4b44      	ldr	r3, [pc, #272]	; (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800aa42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800aa46:	041b      	lsls	r3, r3, #16
 800aa48:	0e1b      	lsrs	r3, r3, #24
 800aa4a:	f003 030f 	and.w	r3, r3, #15
 800aa4e:	4a43      	ldr	r2, [pc, #268]	; (800ab5c <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800aa50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa54:	637b      	str	r3, [r7, #52]	; 0x34
 800aa56:	e2d6      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800aa58:	4b3e      	ldr	r3, [pc, #248]	; (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800aa5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800aa5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aa66:	d112      	bne.n	800aa8e <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 800aa68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa6e:	d10e      	bne.n	800aa8e <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800aa70:	4b38      	ldr	r3, [pc, #224]	; (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800aa72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800aa76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa7e:	d102      	bne.n	800aa86 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
      {
        frequency = LSI_VALUE / 128U;
 800aa80:	23fa      	movs	r3, #250	; 0xfa
 800aa82:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800aa84:	e2bf      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800aa86:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800aa8a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800aa8c:	e2bb      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800aa8e:	4b31      	ldr	r3, [pc, #196]	; (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa9a:	d106      	bne.n	800aaaa <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 800aa9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aaa2:	d102      	bne.n	800aaaa <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HSI_VALUE;
 800aaa4:	4b2c      	ldr	r3, [pc, #176]	; (800ab58 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800aaa6:	637b      	str	r3, [r7, #52]	; 0x34
 800aaa8:	e2ad      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800aaaa:	4b2a      	ldr	r3, [pc, #168]	; (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800aaac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800aab0:	f003 0302 	and.w	r3, r3, #2
 800aab4:	2b02      	cmp	r3, #2
 800aab6:	d107      	bne.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 800aab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aabe:	d103      	bne.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
    {
      frequency = LSE_VALUE;
 800aac0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aac4:	637b      	str	r3, [r7, #52]	; 0x34
 800aac6:	e29e      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800aac8:	2300      	movs	r3, #0
 800aaca:	637b      	str	r3, [r7, #52]	; 0x34
 800aacc:	e29b      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800aace:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aad2:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800aad6:	430b      	orrs	r3, r1
 800aad8:	d162      	bne.n	800aba0 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800aada:	4b1e      	ldr	r3, [pc, #120]	; (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800aadc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800aae0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800aae4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800aae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d117      	bne.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800aaec:	4b19      	ldr	r3, [pc, #100]	; (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800aaee:	689b      	ldr	r3, [r3, #8]
 800aaf0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d005      	beq.n	800ab04 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800aaf8:	4b16      	ldr	r3, [pc, #88]	; (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800aafa:	689b      	ldr	r3, [r3, #8]
 800aafc:	0e1b      	lsrs	r3, r3, #24
 800aafe:	f003 030f 	and.w	r3, r3, #15
 800ab02:	e006      	b.n	800ab12 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800ab04:	4b13      	ldr	r3, [pc, #76]	; (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ab06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ab0a:	041b      	lsls	r3, r3, #16
 800ab0c:	0e1b      	lsrs	r3, r3, #24
 800ab0e:	f003 030f 	and.w	r3, r3, #15
 800ab12:	4a12      	ldr	r2, [pc, #72]	; (800ab5c <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800ab14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab18:	637b      	str	r3, [r7, #52]	; 0x34
 800ab1a:	e274      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800ab1c:	4b0d      	ldr	r3, [pc, #52]	; (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ab1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ab22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab2a:	d119      	bne.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 800ab2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab32:	d115      	bne.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ab34:	4b07      	ldr	r3, [pc, #28]	; (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ab36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ab3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab42:	d102      	bne.n	800ab4a <HAL_RCCEx_GetPeriphCLKFreq+0xd7e>
      {
        frequency = LSI_VALUE / 128U;
 800ab44:	23fa      	movs	r3, #250	; 0xfa
 800ab46:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ab48:	e25d      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800ab4a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800ab4e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ab50:	e259      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800ab52:	bf00      	nop
 800ab54:	46020c00 	.word	0x46020c00
 800ab58:	00f42400 	.word	0x00f42400
 800ab5c:	0800e2a0 	.word	0x0800e2a0
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800ab60:	4b9d      	ldr	r3, [pc, #628]	; (800add8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab6c:	d106      	bne.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 800ab6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab74:	d102      	bne.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      frequency = HSI_VALUE;
 800ab76:	4b99      	ldr	r3, [pc, #612]	; (800addc <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800ab78:	637b      	str	r3, [r7, #52]	; 0x34
 800ab7a:	e244      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800ab7c:	4b96      	ldr	r3, [pc, #600]	; (800add8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800ab7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ab82:	f003 0302 	and.w	r3, r3, #2
 800ab86:	2b02      	cmp	r3, #2
 800ab88:	d107      	bne.n	800ab9a <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 800ab8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ab90:	d103      	bne.n	800ab9a <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
    {
      frequency = LSE_VALUE;
 800ab92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab96:	637b      	str	r3, [r7, #52]	; 0x34
 800ab98:	e235      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	637b      	str	r3, [r7, #52]	; 0x34
 800ab9e:	e232      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800aba0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aba4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800aba8:	430b      	orrs	r3, r1
 800abaa:	d147      	bne.n	800ac3c <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800abac:	4b8a      	ldr	r3, [pc, #552]	; (800add8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800abae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800abb2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800abb6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800abb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d103      	bne.n	800abc6 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800abbe:	f7fd fe51 	bl	8008864 <HAL_RCC_GetPCLK1Freq>
 800abc2:	6378      	str	r0, [r7, #52]	; 0x34
 800abc4:	e21f      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800abc6:	4b84      	ldr	r3, [pc, #528]	; (800add8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800abc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800abcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800abd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800abd4:	d112      	bne.n	800abfc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 800abd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800abdc:	d10e      	bne.n	800abfc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800abde:	4b7e      	ldr	r3, [pc, #504]	; (800add8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800abe0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800abe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abe8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800abec:	d102      	bne.n	800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      {
        frequency = LSI_VALUE / 128U;
 800abee:	23fa      	movs	r3, #250	; 0xfa
 800abf0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800abf2:	e208      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800abf4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800abf8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800abfa:	e204      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800abfc:	4b76      	ldr	r3, [pc, #472]	; (800add8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ac04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac08:	d106      	bne.n	800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 800ac0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac0c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ac10:	d102      	bne.n	800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HSI_VALUE;
 800ac12:	4b72      	ldr	r3, [pc, #456]	; (800addc <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800ac14:	637b      	str	r3, [r7, #52]	; 0x34
 800ac16:	e1f6      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800ac18:	4b6f      	ldr	r3, [pc, #444]	; (800add8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800ac1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ac1e:	f003 0302 	and.w	r3, r3, #2
 800ac22:	2b02      	cmp	r3, #2
 800ac24:	d107      	bne.n	800ac36 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800ac26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac28:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800ac2c:	d103      	bne.n	800ac36 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    {
      frequency = LSE_VALUE;
 800ac2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac32:	637b      	str	r3, [r7, #52]	; 0x34
 800ac34:	e1e7      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800ac36:	2300      	movs	r3, #0
 800ac38:	637b      	str	r3, [r7, #52]	; 0x34
 800ac3a:	e1e4      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800ac3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac40:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 800ac44:	430b      	orrs	r3, r1
 800ac46:	d12d      	bne.n	800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800ac48:	4b63      	ldr	r3, [pc, #396]	; (800add8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800ac4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ac4e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800ac52:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800ac54:	4b60      	ldr	r3, [pc, #384]	; (800add8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac60:	d105      	bne.n	800ac6e <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 800ac62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d102      	bne.n	800ac6e <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HSE_VALUE;
 800ac68:	4b5c      	ldr	r3, [pc, #368]	; (800addc <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800ac6a:	637b      	str	r3, [r7, #52]	; 0x34
 800ac6c:	e1cb      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800ac6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ac74:	d107      	bne.n	800ac86 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f7fe fc74 	bl	8009568 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800ac80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac82:	637b      	str	r3, [r7, #52]	; 0x34
 800ac84:	e1bf      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800ac86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac8c:	d107      	bne.n	800ac9e <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac8e:	f107 0318 	add.w	r3, r7, #24
 800ac92:	4618      	mov	r0, r3
 800ac94:	f7fe fdce 	bl	8009834 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800ac98:	69bb      	ldr	r3, [r7, #24]
 800ac9a:	637b      	str	r3, [r7, #52]	; 0x34
 800ac9c:	e1b3      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	637b      	str	r3, [r7, #52]	; 0x34
 800aca2:	e1b0      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800aca4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aca8:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 800acac:	430b      	orrs	r3, r1
 800acae:	d14d      	bne.n	800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800acb0:	4b49      	ldr	r3, [pc, #292]	; (800add8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800acb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800acb6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800acba:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800acbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acbe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800acc2:	d028      	beq.n	800ad16 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 800acc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800acca:	d83c      	bhi.n	800ad46 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 800accc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800acd2:	d013      	beq.n	800acfc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 800acd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800acda:	d834      	bhi.n	800ad46 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 800acdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d004      	beq.n	800acec <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 800ace2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ace8:	d004      	beq.n	800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800acea:	e02c      	b.n	800ad46 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800acec:	f7fd fdce 	bl	800888c <HAL_RCC_GetPCLK2Freq>
 800acf0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800acf2:	e188      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800acf4:	f7fd fc94 	bl	8008620 <HAL_RCC_GetSysClockFreq>
 800acf8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800acfa:	e184      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800acfc:	4b36      	ldr	r3, [pc, #216]	; (800add8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad08:	d102      	bne.n	800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
        {
          frequency = HSI_VALUE;
 800ad0a:	4b34      	ldr	r3, [pc, #208]	; (800addc <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800ad0c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ad0e:	e17a      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800ad10:	2300      	movs	r3, #0
 800ad12:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ad14:	e177      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ad16:	4b30      	ldr	r3, [pc, #192]	; (800add8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800ad18:	689b      	ldr	r3, [r3, #8]
 800ad1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d005      	beq.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 800ad22:	4b2d      	ldr	r3, [pc, #180]	; (800add8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800ad24:	689b      	ldr	r3, [r3, #8]
 800ad26:	0e1b      	lsrs	r3, r3, #24
 800ad28:	f003 030f 	and.w	r3, r3, #15
 800ad2c:	e006      	b.n	800ad3c <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 800ad2e:	4b2a      	ldr	r3, [pc, #168]	; (800add8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800ad30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ad34:	041b      	lsls	r3, r3, #16
 800ad36:	0e1b      	lsrs	r3, r3, #24
 800ad38:	f003 030f 	and.w	r3, r3, #15
 800ad3c:	4a28      	ldr	r2, [pc, #160]	; (800ade0 <HAL_RCCEx_GetPeriphCLKFreq+0x1014>)
 800ad3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad42:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ad44:	e15f      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800ad46:	2300      	movs	r3, #0
 800ad48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ad4a:	e15c      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800ad4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad50:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 800ad54:	430b      	orrs	r3, r1
 800ad56:	d154      	bne.n	800ae02 <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800ad58:	4b1f      	ldr	r3, [pc, #124]	; (800add8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800ad5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ad5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ad62:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800ad64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad66:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ad6a:	d028      	beq.n	800adbe <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 800ad6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad6e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ad72:	d843      	bhi.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 800ad74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad7a:	d013      	beq.n	800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800ad7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad82:	d83b      	bhi.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 800ad84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d004      	beq.n	800ad94 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 800ad8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad90:	d004      	beq.n	800ad9c <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 800ad92:	e033      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800ad94:	f7fd fd66 	bl	8008864 <HAL_RCC_GetPCLK1Freq>
 800ad98:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800ad9a:	e134      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800ad9c:	f7fd fc40 	bl	8008620 <HAL_RCC_GetSysClockFreq>
 800ada0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800ada2:	e130      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ada4:	4b0c      	ldr	r3, [pc, #48]	; (800add8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800adac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800adb0:	d102      	bne.n	800adb8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 800adb2:	4b0a      	ldr	r3, [pc, #40]	; (800addc <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800adb4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800adb6:	e126      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800adb8:	2300      	movs	r3, #0
 800adba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800adbc:	e123      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800adbe:	4b06      	ldr	r3, [pc, #24]	; (800add8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800adc0:	689b      	ldr	r3, [r3, #8]
 800adc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d00c      	beq.n	800ade4 <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
 800adca:	4b03      	ldr	r3, [pc, #12]	; (800add8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800adcc:	689b      	ldr	r3, [r3, #8]
 800adce:	0e1b      	lsrs	r3, r3, #24
 800add0:	f003 030f 	and.w	r3, r3, #15
 800add4:	e00d      	b.n	800adf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 800add6:	bf00      	nop
 800add8:	46020c00 	.word	0x46020c00
 800addc:	00f42400 	.word	0x00f42400
 800ade0:	0800e2a0 	.word	0x0800e2a0
 800ade4:	4b8a      	ldr	r3, [pc, #552]	; (800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800ade6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800adea:	041b      	lsls	r3, r3, #16
 800adec:	0e1b      	lsrs	r3, r3, #24
 800adee:	f003 030f 	and.w	r3, r3, #15
 800adf2:	4a88      	ldr	r2, [pc, #544]	; (800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 800adf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800adf8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800adfa:	e104      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800adfc:	2300      	movs	r3, #0
 800adfe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ae00:	e101      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800ae02:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae06:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800ae0a:	430b      	orrs	r3, r1
 800ae0c:	d16e      	bne.n	800aeec <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800ae0e:	4b80      	ldr	r3, [pc, #512]	; (800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800ae10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ae14:	f003 0318 	and.w	r3, r3, #24
 800ae18:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800ae1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae1c:	2b18      	cmp	r3, #24
 800ae1e:	d862      	bhi.n	800aee6 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 800ae20:	a201      	add	r2, pc, #4	; (adr r2, 800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800ae22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae26:	bf00      	nop
 800ae28:	0800ae8d 	.word	0x0800ae8d
 800ae2c:	0800aee7 	.word	0x0800aee7
 800ae30:	0800aee7 	.word	0x0800aee7
 800ae34:	0800aee7 	.word	0x0800aee7
 800ae38:	0800aee7 	.word	0x0800aee7
 800ae3c:	0800aee7 	.word	0x0800aee7
 800ae40:	0800aee7 	.word	0x0800aee7
 800ae44:	0800aee7 	.word	0x0800aee7
 800ae48:	0800ae95 	.word	0x0800ae95
 800ae4c:	0800aee7 	.word	0x0800aee7
 800ae50:	0800aee7 	.word	0x0800aee7
 800ae54:	0800aee7 	.word	0x0800aee7
 800ae58:	0800aee7 	.word	0x0800aee7
 800ae5c:	0800aee7 	.word	0x0800aee7
 800ae60:	0800aee7 	.word	0x0800aee7
 800ae64:	0800aee7 	.word	0x0800aee7
 800ae68:	0800ae9d 	.word	0x0800ae9d
 800ae6c:	0800aee7 	.word	0x0800aee7
 800ae70:	0800aee7 	.word	0x0800aee7
 800ae74:	0800aee7 	.word	0x0800aee7
 800ae78:	0800aee7 	.word	0x0800aee7
 800ae7c:	0800aee7 	.word	0x0800aee7
 800ae80:	0800aee7 	.word	0x0800aee7
 800ae84:	0800aee7 	.word	0x0800aee7
 800ae88:	0800aeb7 	.word	0x0800aeb7
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800ae8c:	f7fd fd12 	bl	80088b4 <HAL_RCC_GetPCLK3Freq>
 800ae90:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800ae92:	e0b8      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800ae94:	f7fd fbc4 	bl	8008620 <HAL_RCC_GetSysClockFreq>
 800ae98:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800ae9a:	e0b4      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ae9c:	4b5c      	ldr	r3, [pc, #368]	; (800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aea4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aea8:	d102      	bne.n	800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 800aeaa:	4b5b      	ldr	r3, [pc, #364]	; (800b018 <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 800aeac:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800aeae:	e0aa      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aeb4:	e0a7      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800aeb6:	4b56      	ldr	r3, [pc, #344]	; (800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800aeb8:	689b      	ldr	r3, [r3, #8]
 800aeba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d005      	beq.n	800aece <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800aec2:	4b53      	ldr	r3, [pc, #332]	; (800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800aec4:	689b      	ldr	r3, [r3, #8]
 800aec6:	0e1b      	lsrs	r3, r3, #24
 800aec8:	f003 030f 	and.w	r3, r3, #15
 800aecc:	e006      	b.n	800aedc <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 800aece:	4b50      	ldr	r3, [pc, #320]	; (800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800aed0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800aed4:	041b      	lsls	r3, r3, #16
 800aed6:	0e1b      	lsrs	r3, r3, #24
 800aed8:	f003 030f 	and.w	r3, r3, #15
 800aedc:	4a4d      	ldr	r2, [pc, #308]	; (800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 800aede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aee2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aee4:	e08f      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800aee6:	2300      	movs	r3, #0
 800aee8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aeea:	e08c      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800aeec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aef0:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 800aef4:	430b      	orrs	r3, r1
 800aef6:	d14c      	bne.n	800af92 <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800aef8:	4b45      	ldr	r3, [pc, #276]	; (800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800aefa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800aefe:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800af02:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800af04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af06:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800af0a:	d013      	beq.n	800af34 <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 800af0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af0e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800af12:	d83b      	bhi.n	800af8c <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800af14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af1a:	d013      	beq.n	800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 800af1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af22:	d833      	bhi.n	800af8c <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800af24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af26:	2b00      	cmp	r3, #0
 800af28:	d014      	beq.n	800af54 <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 800af2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af30:	d014      	beq.n	800af5c <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 800af32:	e02b      	b.n	800af8c <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af34:	f107 0318 	add.w	r3, r7, #24
 800af38:	4618      	mov	r0, r3
 800af3a:	f7fe fc7b 	bl	8009834 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800af3e:	69fb      	ldr	r3, [r7, #28]
 800af40:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800af42:	e060      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800af44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af48:	4618      	mov	r0, r3
 800af4a:	f7fe fb0d 	bl	8009568 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800af4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800af52:	e058      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800af54:	f7fd fb64 	bl	8008620 <HAL_RCC_GetSysClockFreq>
 800af58:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800af5a:	e054      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800af5c:	4b2c      	ldr	r3, [pc, #176]	; (800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800af5e:	689b      	ldr	r3, [r3, #8]
 800af60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800af64:	2b00      	cmp	r3, #0
 800af66:	d005      	beq.n	800af74 <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 800af68:	4b29      	ldr	r3, [pc, #164]	; (800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800af6a:	689b      	ldr	r3, [r3, #8]
 800af6c:	0e1b      	lsrs	r3, r3, #24
 800af6e:	f003 030f 	and.w	r3, r3, #15
 800af72:	e006      	b.n	800af82 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 800af74:	4b26      	ldr	r3, [pc, #152]	; (800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800af76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800af7a:	041b      	lsls	r3, r3, #16
 800af7c:	0e1b      	lsrs	r3, r3, #24
 800af7e:	f003 030f 	and.w	r3, r3, #15
 800af82:	4a24      	ldr	r2, [pc, #144]	; (800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 800af84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800af8a:	e03c      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800af8c:	2300      	movs	r3, #0
 800af8e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800af90:	e039      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800af92:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af96:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 800af9a:	430b      	orrs	r3, r1
 800af9c:	d131      	bne.n	800b002 <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800af9e:	4b1c      	ldr	r3, [pc, #112]	; (800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800afa0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800afa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800afa8:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800afaa:	4b19      	ldr	r3, [pc, #100]	; (800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800afac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800afb0:	f003 0302 	and.w	r3, r3, #2
 800afb4:	2b02      	cmp	r3, #2
 800afb6:	d106      	bne.n	800afc6 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 800afb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d103      	bne.n	800afc6 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 800afbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800afc2:	637b      	str	r3, [r7, #52]	; 0x34
 800afc4:	e01f      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800afc6:	4b12      	ldr	r3, [pc, #72]	; (800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800afc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800afcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800afd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800afd4:	d112      	bne.n	800affc <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 800afd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800afdc:	d10e      	bne.n	800affc <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800afde:	4b0c      	ldr	r3, [pc, #48]	; (800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800afe0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800afe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800afe8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800afec:	d102      	bne.n	800aff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 800afee:	23fa      	movs	r3, #250	; 0xfa
 800aff0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800aff2:	e008      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800aff4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800aff8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800affa:	e004      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800affc:	2300      	movs	r3, #0
 800affe:	637b      	str	r3, [r7, #52]	; 0x34
 800b000:	e001      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 800b002:	2300      	movs	r3, #0
 800b004:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 800b006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b008:	4618      	mov	r0, r3
 800b00a:	3738      	adds	r7, #56	; 0x38
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}
 800b010:	46020c00 	.word	0x46020c00
 800b014:	0800e2a0 	.word	0x0800e2a0
 800b018:	00f42400 	.word	0x00f42400

0800b01c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b084      	sub	sp, #16
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800b024:	4b47      	ldr	r3, [pc, #284]	; (800b144 <RCCEx_PLL2_Config+0x128>)
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	4a46      	ldr	r2, [pc, #280]	; (800b144 <RCCEx_PLL2_Config+0x128>)
 800b02a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b02e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b030:	f7f7 fdf6 	bl	8002c20 <HAL_GetTick>
 800b034:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b036:	e008      	b.n	800b04a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b038:	f7f7 fdf2 	bl	8002c20 <HAL_GetTick>
 800b03c:	4602      	mov	r2, r0
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	1ad3      	subs	r3, r2, r3
 800b042:	2b02      	cmp	r3, #2
 800b044:	d901      	bls.n	800b04a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800b046:	2303      	movs	r3, #3
 800b048:	e077      	b.n	800b13a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b04a:	4b3e      	ldr	r3, [pc, #248]	; (800b144 <RCCEx_PLL2_Config+0x128>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b052:	2b00      	cmp	r3, #0
 800b054:	d1f0      	bne.n	800b038 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800b056:	4b3b      	ldr	r3, [pc, #236]	; (800b144 <RCCEx_PLL2_Config+0x128>)
 800b058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b05a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b05e:	f023 0303 	bic.w	r3, r3, #3
 800b062:	687a      	ldr	r2, [r7, #4]
 800b064:	6811      	ldr	r1, [r2, #0]
 800b066:	687a      	ldr	r2, [r7, #4]
 800b068:	6852      	ldr	r2, [r2, #4]
 800b06a:	3a01      	subs	r2, #1
 800b06c:	0212      	lsls	r2, r2, #8
 800b06e:	430a      	orrs	r2, r1
 800b070:	4934      	ldr	r1, [pc, #208]	; (800b144 <RCCEx_PLL2_Config+0x128>)
 800b072:	4313      	orrs	r3, r2
 800b074:	62cb      	str	r3, [r1, #44]	; 0x2c
 800b076:	4b33      	ldr	r3, [pc, #204]	; (800b144 <RCCEx_PLL2_Config+0x128>)
 800b078:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b07a:	4b33      	ldr	r3, [pc, #204]	; (800b148 <RCCEx_PLL2_Config+0x12c>)
 800b07c:	4013      	ands	r3, r2
 800b07e:	687a      	ldr	r2, [r7, #4]
 800b080:	6892      	ldr	r2, [r2, #8]
 800b082:	3a01      	subs	r2, #1
 800b084:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800b088:	687a      	ldr	r2, [r7, #4]
 800b08a:	68d2      	ldr	r2, [r2, #12]
 800b08c:	3a01      	subs	r2, #1
 800b08e:	0252      	lsls	r2, r2, #9
 800b090:	b292      	uxth	r2, r2
 800b092:	4311      	orrs	r1, r2
 800b094:	687a      	ldr	r2, [r7, #4]
 800b096:	6912      	ldr	r2, [r2, #16]
 800b098:	3a01      	subs	r2, #1
 800b09a:	0412      	lsls	r2, r2, #16
 800b09c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800b0a0:	4311      	orrs	r1, r2
 800b0a2:	687a      	ldr	r2, [r7, #4]
 800b0a4:	6952      	ldr	r2, [r2, #20]
 800b0a6:	3a01      	subs	r2, #1
 800b0a8:	0612      	lsls	r2, r2, #24
 800b0aa:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800b0ae:	430a      	orrs	r2, r1
 800b0b0:	4924      	ldr	r1, [pc, #144]	; (800b144 <RCCEx_PLL2_Config+0x128>)
 800b0b2:	4313      	orrs	r3, r2
 800b0b4:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800b0b6:	4b23      	ldr	r3, [pc, #140]	; (800b144 <RCCEx_PLL2_Config+0x128>)
 800b0b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ba:	f023 020c 	bic.w	r2, r3, #12
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	699b      	ldr	r3, [r3, #24]
 800b0c2:	4920      	ldr	r1, [pc, #128]	; (800b144 <RCCEx_PLL2_Config+0x128>)
 800b0c4:	4313      	orrs	r3, r2
 800b0c6:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800b0c8:	4b1e      	ldr	r3, [pc, #120]	; (800b144 <RCCEx_PLL2_Config+0x128>)
 800b0ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6a1b      	ldr	r3, [r3, #32]
 800b0d0:	491c      	ldr	r1, [pc, #112]	; (800b144 <RCCEx_PLL2_Config+0x128>)
 800b0d2:	4313      	orrs	r3, r2
 800b0d4:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800b0d6:	4b1b      	ldr	r3, [pc, #108]	; (800b144 <RCCEx_PLL2_Config+0x128>)
 800b0d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0da:	4a1a      	ldr	r2, [pc, #104]	; (800b144 <RCCEx_PLL2_Config+0x128>)
 800b0dc:	f023 0310 	bic.w	r3, r3, #16
 800b0e0:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b0e2:	4b18      	ldr	r3, [pc, #96]	; (800b144 <RCCEx_PLL2_Config+0x128>)
 800b0e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b0ea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800b0ee:	687a      	ldr	r2, [r7, #4]
 800b0f0:	69d2      	ldr	r2, [r2, #28]
 800b0f2:	00d2      	lsls	r2, r2, #3
 800b0f4:	4913      	ldr	r1, [pc, #76]	; (800b144 <RCCEx_PLL2_Config+0x128>)
 800b0f6:	4313      	orrs	r3, r2
 800b0f8:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800b0fa:	4b12      	ldr	r3, [pc, #72]	; (800b144 <RCCEx_PLL2_Config+0x128>)
 800b0fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0fe:	4a11      	ldr	r2, [pc, #68]	; (800b144 <RCCEx_PLL2_Config+0x128>)
 800b100:	f043 0310 	orr.w	r3, r3, #16
 800b104:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800b106:	4b0f      	ldr	r3, [pc, #60]	; (800b144 <RCCEx_PLL2_Config+0x128>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	4a0e      	ldr	r2, [pc, #56]	; (800b144 <RCCEx_PLL2_Config+0x128>)
 800b10c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b110:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b112:	f7f7 fd85 	bl	8002c20 <HAL_GetTick>
 800b116:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b118:	e008      	b.n	800b12c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b11a:	f7f7 fd81 	bl	8002c20 <HAL_GetTick>
 800b11e:	4602      	mov	r2, r0
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	1ad3      	subs	r3, r2, r3
 800b124:	2b02      	cmp	r3, #2
 800b126:	d901      	bls.n	800b12c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800b128:	2303      	movs	r3, #3
 800b12a:	e006      	b.n	800b13a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b12c:	4b05      	ldr	r3, [pc, #20]	; (800b144 <RCCEx_PLL2_Config+0x128>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b134:	2b00      	cmp	r3, #0
 800b136:	d0f0      	beq.n	800b11a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800b138:	2300      	movs	r3, #0

}
 800b13a:	4618      	mov	r0, r3
 800b13c:	3710      	adds	r7, #16
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}
 800b142:	bf00      	nop
 800b144:	46020c00 	.word	0x46020c00
 800b148:	80800000 	.word	0x80800000

0800b14c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b084      	sub	sp, #16
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800b154:	4b47      	ldr	r3, [pc, #284]	; (800b274 <RCCEx_PLL3_Config+0x128>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	4a46      	ldr	r2, [pc, #280]	; (800b274 <RCCEx_PLL3_Config+0x128>)
 800b15a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b15e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b160:	f7f7 fd5e 	bl	8002c20 <HAL_GetTick>
 800b164:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b166:	e008      	b.n	800b17a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b168:	f7f7 fd5a 	bl	8002c20 <HAL_GetTick>
 800b16c:	4602      	mov	r2, r0
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	1ad3      	subs	r3, r2, r3
 800b172:	2b02      	cmp	r3, #2
 800b174:	d901      	bls.n	800b17a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800b176:	2303      	movs	r3, #3
 800b178:	e077      	b.n	800b26a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b17a:	4b3e      	ldr	r3, [pc, #248]	; (800b274 <RCCEx_PLL3_Config+0x128>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b182:	2b00      	cmp	r3, #0
 800b184:	d1f0      	bne.n	800b168 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800b186:	4b3b      	ldr	r3, [pc, #236]	; (800b274 <RCCEx_PLL3_Config+0x128>)
 800b188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b18a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b18e:	f023 0303 	bic.w	r3, r3, #3
 800b192:	687a      	ldr	r2, [r7, #4]
 800b194:	6811      	ldr	r1, [r2, #0]
 800b196:	687a      	ldr	r2, [r7, #4]
 800b198:	6852      	ldr	r2, [r2, #4]
 800b19a:	3a01      	subs	r2, #1
 800b19c:	0212      	lsls	r2, r2, #8
 800b19e:	430a      	orrs	r2, r1
 800b1a0:	4934      	ldr	r1, [pc, #208]	; (800b274 <RCCEx_PLL3_Config+0x128>)
 800b1a2:	4313      	orrs	r3, r2
 800b1a4:	630b      	str	r3, [r1, #48]	; 0x30
 800b1a6:	4b33      	ldr	r3, [pc, #204]	; (800b274 <RCCEx_PLL3_Config+0x128>)
 800b1a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b1aa:	4b33      	ldr	r3, [pc, #204]	; (800b278 <RCCEx_PLL3_Config+0x12c>)
 800b1ac:	4013      	ands	r3, r2
 800b1ae:	687a      	ldr	r2, [r7, #4]
 800b1b0:	6892      	ldr	r2, [r2, #8]
 800b1b2:	3a01      	subs	r2, #1
 800b1b4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800b1b8:	687a      	ldr	r2, [r7, #4]
 800b1ba:	68d2      	ldr	r2, [r2, #12]
 800b1bc:	3a01      	subs	r2, #1
 800b1be:	0252      	lsls	r2, r2, #9
 800b1c0:	b292      	uxth	r2, r2
 800b1c2:	4311      	orrs	r1, r2
 800b1c4:	687a      	ldr	r2, [r7, #4]
 800b1c6:	6912      	ldr	r2, [r2, #16]
 800b1c8:	3a01      	subs	r2, #1
 800b1ca:	0412      	lsls	r2, r2, #16
 800b1cc:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800b1d0:	4311      	orrs	r1, r2
 800b1d2:	687a      	ldr	r2, [r7, #4]
 800b1d4:	6952      	ldr	r2, [r2, #20]
 800b1d6:	3a01      	subs	r2, #1
 800b1d8:	0612      	lsls	r2, r2, #24
 800b1da:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800b1de:	430a      	orrs	r2, r1
 800b1e0:	4924      	ldr	r1, [pc, #144]	; (800b274 <RCCEx_PLL3_Config+0x128>)
 800b1e2:	4313      	orrs	r3, r2
 800b1e4:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800b1e6:	4b23      	ldr	r3, [pc, #140]	; (800b274 <RCCEx_PLL3_Config+0x128>)
 800b1e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1ea:	f023 020c 	bic.w	r2, r3, #12
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	699b      	ldr	r3, [r3, #24]
 800b1f2:	4920      	ldr	r1, [pc, #128]	; (800b274 <RCCEx_PLL3_Config+0x128>)
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800b1f8:	4b1e      	ldr	r3, [pc, #120]	; (800b274 <RCCEx_PLL3_Config+0x128>)
 800b1fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6a1b      	ldr	r3, [r3, #32]
 800b200:	491c      	ldr	r1, [pc, #112]	; (800b274 <RCCEx_PLL3_Config+0x128>)
 800b202:	4313      	orrs	r3, r2
 800b204:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800b206:	4b1b      	ldr	r3, [pc, #108]	; (800b274 <RCCEx_PLL3_Config+0x128>)
 800b208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b20a:	4a1a      	ldr	r2, [pc, #104]	; (800b274 <RCCEx_PLL3_Config+0x128>)
 800b20c:	f023 0310 	bic.w	r3, r3, #16
 800b210:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b212:	4b18      	ldr	r3, [pc, #96]	; (800b274 <RCCEx_PLL3_Config+0x128>)
 800b214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b216:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b21a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800b21e:	687a      	ldr	r2, [r7, #4]
 800b220:	69d2      	ldr	r2, [r2, #28]
 800b222:	00d2      	lsls	r2, r2, #3
 800b224:	4913      	ldr	r1, [pc, #76]	; (800b274 <RCCEx_PLL3_Config+0x128>)
 800b226:	4313      	orrs	r3, r2
 800b228:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800b22a:	4b12      	ldr	r3, [pc, #72]	; (800b274 <RCCEx_PLL3_Config+0x128>)
 800b22c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b22e:	4a11      	ldr	r2, [pc, #68]	; (800b274 <RCCEx_PLL3_Config+0x128>)
 800b230:	f043 0310 	orr.w	r3, r3, #16
 800b234:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800b236:	4b0f      	ldr	r3, [pc, #60]	; (800b274 <RCCEx_PLL3_Config+0x128>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	4a0e      	ldr	r2, [pc, #56]	; (800b274 <RCCEx_PLL3_Config+0x128>)
 800b23c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b240:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b242:	f7f7 fced 	bl	8002c20 <HAL_GetTick>
 800b246:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b248:	e008      	b.n	800b25c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b24a:	f7f7 fce9 	bl	8002c20 <HAL_GetTick>
 800b24e:	4602      	mov	r2, r0
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	1ad3      	subs	r3, r2, r3
 800b254:	2b02      	cmp	r3, #2
 800b256:	d901      	bls.n	800b25c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800b258:	2303      	movs	r3, #3
 800b25a:	e006      	b.n	800b26a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b25c:	4b05      	ldr	r3, [pc, #20]	; (800b274 <RCCEx_PLL3_Config+0x128>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b264:	2b00      	cmp	r3, #0
 800b266:	d0f0      	beq.n	800b24a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800b268:	2300      	movs	r3, #0
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3710      	adds	r7, #16
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}
 800b272:	bf00      	nop
 800b274:	46020c00 	.word	0x46020c00
 800b278:	80800000 	.word	0x80800000

0800b27c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b084      	sub	sp, #16
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d101      	bne.n	800b28e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b28a:	2301      	movs	r3, #1
 800b28c:	e0dd      	b.n	800b44a <HAL_SPI_Init+0x1ce>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	4a70      	ldr	r2, [pc, #448]	; (800b454 <HAL_SPI_Init+0x1d8>)
 800b294:	4293      	cmp	r3, r2
 800b296:	d004      	beq.n	800b2a2 <HAL_SPI_Init+0x26>
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	4a6e      	ldr	r2, [pc, #440]	; (800b458 <HAL_SPI_Init+0x1dc>)
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	e000      	b.n	800b2a4 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800b2a2:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	629a      	str	r2, [r3, #40]	; 0x28

  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	4a69      	ldr	r2, [pc, #420]	; (800b454 <HAL_SPI_Init+0x1d8>)
 800b2b0:	4293      	cmp	r3, r2
 800b2b2:	d004      	beq.n	800b2be <HAL_SPI_Init+0x42>
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	4a67      	ldr	r2, [pc, #412]	; (800b458 <HAL_SPI_Init+0x1dc>)
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d105      	bne.n	800b2ca <HAL_SPI_Init+0x4e>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	68db      	ldr	r3, [r3, #12]
 800b2c2:	2b0f      	cmp	r3, #15
 800b2c4:	d901      	bls.n	800b2ca <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	e0bf      	b.n	800b44a <HAL_SPI_Init+0x1ce>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f000 fbae 	bl	800ba2c <SPI_GetPacketSize>
 800b2d0:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	4a5f      	ldr	r2, [pc, #380]	; (800b454 <HAL_SPI_Init+0x1d8>)
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d004      	beq.n	800b2e6 <HAL_SPI_Init+0x6a>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	4a5d      	ldr	r2, [pc, #372]	; (800b458 <HAL_SPI_Init+0x1dc>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d102      	bne.n	800b2ec <HAL_SPI_Init+0x70>
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	2b08      	cmp	r3, #8
 800b2ea:	d816      	bhi.n	800b31a <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b2f0:	4a5a      	ldr	r2, [pc, #360]	; (800b45c <HAL_SPI_Init+0x1e0>)
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	d00e      	beq.n	800b314 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	4a59      	ldr	r2, [pc, #356]	; (800b460 <HAL_SPI_Init+0x1e4>)
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	d009      	beq.n	800b314 <HAL_SPI_Init+0x98>
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	4a57      	ldr	r2, [pc, #348]	; (800b464 <HAL_SPI_Init+0x1e8>)
 800b306:	4293      	cmp	r3, r2
 800b308:	d004      	beq.n	800b314 <HAL_SPI_Init+0x98>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	4a56      	ldr	r2, [pc, #344]	; (800b468 <HAL_SPI_Init+0x1ec>)
 800b310:	4293      	cmp	r3, r2
 800b312:	d104      	bne.n	800b31e <HAL_SPI_Init+0xa2>
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	2b10      	cmp	r3, #16
 800b318:	d901      	bls.n	800b31e <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800b31a:	2301      	movs	r3, #1
 800b31c:	e095      	b.n	800b44a <HAL_SPI_Init+0x1ce>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800b324:	b2db      	uxtb	r3, r3
 800b326:	2b00      	cmp	r3, #0
 800b328:	d106      	bne.n	800b338 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2200      	movs	r2, #0
 800b32e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f7f7 f992 	bl	800265c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2202      	movs	r2, #2
 800b33c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	681a      	ldr	r2, [r3, #0]
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f022 0201 	bic.w	r2, r2, #1
 800b34e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	689b      	ldr	r3, [r3, #8]
 800b356:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b35a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	699b      	ldr	r3, [r3, #24]
 800b360:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b364:	d119      	bne.n	800b39a <HAL_SPI_Init+0x11e>
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	685b      	ldr	r3, [r3, #4]
 800b36a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b36e:	d103      	bne.n	800b378 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b374:	2b00      	cmp	r3, #0
 800b376:	d008      	beq.n	800b38a <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d10c      	bne.n	800b39a <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b384:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b388:	d107      	bne.n	800b39a <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	681a      	ldr	r2, [r3, #0]
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b398:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	69da      	ldr	r2, [r3, #28]
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3a2:	431a      	orrs	r2, r3
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	431a      	orrs	r2, r3
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3ac:	ea42 0103 	orr.w	r1, r2, r3
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	68da      	ldr	r2, [r3, #12]
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	430a      	orrs	r2, r1
 800b3ba:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3c4:	431a      	orrs	r2, r3
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3ca:	431a      	orrs	r2, r3
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	699b      	ldr	r3, [r3, #24]
 800b3d0:	431a      	orrs	r2, r3
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	691b      	ldr	r3, [r3, #16]
 800b3d6:	431a      	orrs	r2, r3
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	695b      	ldr	r3, [r3, #20]
 800b3dc:	431a      	orrs	r2, r3
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6a1b      	ldr	r3, [r3, #32]
 800b3e2:	431a      	orrs	r2, r3
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	685b      	ldr	r3, [r3, #4]
 800b3e8:	431a      	orrs	r2, r3
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3ee:	431a      	orrs	r2, r3
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	689b      	ldr	r3, [r3, #8]
 800b3f4:	431a      	orrs	r2, r3
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b3fa:	431a      	orrs	r2, r3
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b400:	431a      	orrs	r2, r3
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b406:	ea42 0103 	orr.w	r1, r2, r3
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	430a      	orrs	r2, r1
 800b414:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	685b      	ldr	r3, [r3, #4]
 800b41a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d00a      	beq.n	800b438 <HAL_SPI_Init+0x1bc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	68db      	ldr	r3, [r3, #12]
 800b428:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	430a      	orrs	r2, r1
 800b436:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2200      	movs	r2, #0
 800b43c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2201      	movs	r2, #1
 800b444:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 800b448:	2300      	movs	r3, #0
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	3710      	adds	r7, #16
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}
 800b452:	bf00      	nop
 800b454:	46002000 	.word	0x46002000
 800b458:	56002000 	.word	0x56002000
 800b45c:	40013000 	.word	0x40013000
 800b460:	50013000 	.word	0x50013000
 800b464:	40003800 	.word	0x40003800
 800b468:	50003800 	.word	0x50003800

0800b46c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b08a      	sub	sp, #40	; 0x28
 800b470:	af02      	add	r7, sp, #8
 800b472:	60f8      	str	r0, [r7, #12]
 800b474:	60b9      	str	r1, [r7, #8]
 800b476:	603b      	str	r3, [r7, #0]
 800b478:	4613      	mov	r3, r2
 800b47a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	3320      	adds	r3, #32
 800b482:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b484:	2300      	movs	r3, #0
 800b486:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800b48e:	2b01      	cmp	r3, #1
 800b490:	d101      	bne.n	800b496 <HAL_SPI_Transmit+0x2a>
 800b492:	2302      	movs	r3, #2
 800b494:	e1f7      	b.n	800b886 <HAL_SPI_Transmit+0x41a>
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	2201      	movs	r2, #1
 800b49a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b49e:	f7f7 fbbf 	bl	8002c20 <HAL_GetTick>
 800b4a2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800b4aa:	b2db      	uxtb	r3, r3
 800b4ac:	2b01      	cmp	r3, #1
 800b4ae:	d007      	beq.n	800b4c0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800b4b0:	2302      	movs	r3, #2
 800b4b2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800b4bc:	7efb      	ldrb	r3, [r7, #27]
 800b4be:	e1e2      	b.n	800b886 <HAL_SPI_Transmit+0x41a>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d002      	beq.n	800b4cc <HAL_SPI_Transmit+0x60>
 800b4c6:	88fb      	ldrh	r3, [r7, #6]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d107      	bne.n	800b4dc <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800b4d8:	7efb      	ldrb	r3, [r7, #27]
 800b4da:	e1d4      	b.n	800b886 <HAL_SPI_Transmit+0x41a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	2203      	movs	r2, #3
 800b4e0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	68ba      	ldr	r2, [r7, #8]
 800b4f0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	88fa      	ldrh	r2, [r7, #6]
 800b4f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	88fa      	ldrh	r2, [r7, #6]
 800b4fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	2200      	movs	r2, #0
 800b506:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	2200      	movs	r2, #0
 800b50c:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	2200      	movs	r2, #0
 800b514:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxISR       = NULL;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	2200      	movs	r2, #0
 800b51c:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	2200      	movs	r2, #0
 800b522:	679a      	str	r2, [r3, #120]	; 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	689b      	ldr	r3, [r3, #8]
 800b528:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800b52c:	d107      	bne.n	800b53e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	681a      	ldr	r2, [r3, #0]
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b53c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	685b      	ldr	r3, [r3, #4]
 800b544:	0c1b      	lsrs	r3, r3, #16
 800b546:	041b      	lsls	r3, r3, #16
 800b548:	88f9      	ldrh	r1, [r7, #6]
 800b54a:	68fa      	ldr	r2, [r7, #12]
 800b54c:	6812      	ldr	r2, [r2, #0]
 800b54e:	430b      	orrs	r3, r1
 800b550:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	681a      	ldr	r2, [r3, #0]
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f042 0201 	orr.w	r2, r2, #1
 800b560:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	69db      	ldr	r3, [r3, #28]
 800b568:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d10c      	bne.n	800b58a <HAL_SPI_Transmit+0x11e>
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	685b      	ldr	r3, [r3, #4]
 800b574:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b578:	d107      	bne.n	800b58a <HAL_SPI_Transmit+0x11e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	681a      	ldr	r2, [r3, #0]
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b588:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	68db      	ldr	r3, [r3, #12]
 800b58e:	2b0f      	cmp	r3, #15
 800b590:	d95b      	bls.n	800b64a <HAL_SPI_Transmit+0x1de>
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	4a8f      	ldr	r2, [pc, #572]	; (800b7d4 <HAL_SPI_Transmit+0x368>)
 800b598:	4293      	cmp	r3, r2
 800b59a:	d04f      	beq.n	800b63c <HAL_SPI_Transmit+0x1d0>
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	4a8d      	ldr	r2, [pc, #564]	; (800b7d8 <HAL_SPI_Transmit+0x36c>)
 800b5a2:	4293      	cmp	r3, r2
 800b5a4:	d04a      	beq.n	800b63c <HAL_SPI_Transmit+0x1d0>
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	4a8c      	ldr	r2, [pc, #560]	; (800b7dc <HAL_SPI_Transmit+0x370>)
 800b5ac:	4293      	cmp	r3, r2
 800b5ae:	d045      	beq.n	800b63c <HAL_SPI_Transmit+0x1d0>
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	4a8a      	ldr	r2, [pc, #552]	; (800b7e0 <HAL_SPI_Transmit+0x374>)
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	d147      	bne.n	800b64a <HAL_SPI_Transmit+0x1de>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b5ba:	e03f      	b.n	800b63c <HAL_SPI_Transmit+0x1d0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	695b      	ldr	r3, [r3, #20]
 800b5c2:	f003 0302 	and.w	r3, r3, #2
 800b5c6:	2b02      	cmp	r3, #2
 800b5c8:	d114      	bne.n	800b5f4 <HAL_SPI_Transmit+0x188>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	6812      	ldr	r2, [r2, #0]
 800b5d4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b5da:	1d1a      	adds	r2, r3, #4
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b5e6:	b29b      	uxth	r3, r3
 800b5e8:	3b01      	subs	r3, #1
 800b5ea:	b29a      	uxth	r2, r3
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b5f2:	e023      	b.n	800b63c <HAL_SPI_Transmit+0x1d0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b5f4:	f7f7 fb14 	bl	8002c20 <HAL_GetTick>
 800b5f8:	4602      	mov	r2, r0
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	1ad3      	subs	r3, r2, r3
 800b5fe:	683a      	ldr	r2, [r7, #0]
 800b600:	429a      	cmp	r2, r3
 800b602:	d803      	bhi.n	800b60c <HAL_SPI_Transmit+0x1a0>
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b60a:	d102      	bne.n	800b612 <HAL_SPI_Transmit+0x1a6>
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d114      	bne.n	800b63c <HAL_SPI_Transmit+0x1d0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b612:	68f8      	ldr	r0, [r7, #12]
 800b614:	f000 f93c 	bl	800b890 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	2200      	movs	r2, #0
 800b61c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b626:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	2201      	movs	r2, #1
 800b634:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800b638:	2303      	movs	r3, #3
 800b63a:	e124      	b.n	800b886 <HAL_SPI_Transmit+0x41a>
    while (hspi->TxXferCount > 0UL)
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b642:	b29b      	uxth	r3, r3
 800b644:	2b00      	cmp	r3, #0
 800b646:	d1b9      	bne.n	800b5bc <HAL_SPI_Transmit+0x150>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800b648:	e0f7      	b.n	800b83a <HAL_SPI_Transmit+0x3ce>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	68db      	ldr	r3, [r3, #12]
 800b64e:	2b07      	cmp	r3, #7
 800b650:	f240 80ec 	bls.w	800b82c <HAL_SPI_Transmit+0x3c0>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b654:	e05d      	b.n	800b712 <HAL_SPI_Transmit+0x2a6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	695b      	ldr	r3, [r3, #20]
 800b65c:	f003 0302 	and.w	r3, r3, #2
 800b660:	2b02      	cmp	r3, #2
 800b662:	d132      	bne.n	800b6ca <HAL_SPI_Transmit+0x25e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b66a:	b29b      	uxth	r3, r3
 800b66c:	2b01      	cmp	r3, #1
 800b66e:	d918      	bls.n	800b6a2 <HAL_SPI_Transmit+0x236>
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b674:	2b00      	cmp	r3, #0
 800b676:	d014      	beq.n	800b6a2 <HAL_SPI_Transmit+0x236>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	6812      	ldr	r2, [r2, #0]
 800b682:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b688:	1d1a      	adds	r2, r3, #4
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b694:	b29b      	uxth	r3, r3
 800b696:	3b02      	subs	r3, #2
 800b698:	b29a      	uxth	r2, r3
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b6a0:	e037      	b.n	800b712 <HAL_SPI_Transmit+0x2a6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b6a6:	881a      	ldrh	r2, [r3, #0]
 800b6a8:	69fb      	ldr	r3, [r7, #28]
 800b6aa:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b6b0:	1c9a      	adds	r2, r3, #2
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b6bc:	b29b      	uxth	r3, r3
 800b6be:	3b01      	subs	r3, #1
 800b6c0:	b29a      	uxth	r2, r3
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b6c8:	e023      	b.n	800b712 <HAL_SPI_Transmit+0x2a6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b6ca:	f7f7 faa9 	bl	8002c20 <HAL_GetTick>
 800b6ce:	4602      	mov	r2, r0
 800b6d0:	697b      	ldr	r3, [r7, #20]
 800b6d2:	1ad3      	subs	r3, r2, r3
 800b6d4:	683a      	ldr	r2, [r7, #0]
 800b6d6:	429a      	cmp	r2, r3
 800b6d8:	d803      	bhi.n	800b6e2 <HAL_SPI_Transmit+0x276>
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6e0:	d102      	bne.n	800b6e8 <HAL_SPI_Transmit+0x27c>
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d114      	bne.n	800b712 <HAL_SPI_Transmit+0x2a6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b6e8:	68f8      	ldr	r0, [r7, #12]
 800b6ea:	f000 f8d1 	bl	800b890 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	2201      	movs	r2, #1
 800b70a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800b70e:	2303      	movs	r3, #3
 800b710:	e0b9      	b.n	800b886 <HAL_SPI_Transmit+0x41a>
    while (hspi->TxXferCount > 0UL)
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b718:	b29b      	uxth	r3, r3
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d19b      	bne.n	800b656 <HAL_SPI_Transmit+0x1ea>
 800b71e:	e08c      	b.n	800b83a <HAL_SPI_Transmit+0x3ce>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	695b      	ldr	r3, [r3, #20]
 800b726:	f003 0302 	and.w	r3, r3, #2
 800b72a:	2b02      	cmp	r3, #2
 800b72c:	d15a      	bne.n	800b7e4 <HAL_SPI_Transmit+0x378>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b734:	b29b      	uxth	r3, r3
 800b736:	2b03      	cmp	r3, #3
 800b738:	d918      	bls.n	800b76c <HAL_SPI_Transmit+0x300>
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b73e:	2b40      	cmp	r3, #64	; 0x40
 800b740:	d914      	bls.n	800b76c <HAL_SPI_Transmit+0x300>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	6812      	ldr	r2, [r2, #0]
 800b74c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b752:	1d1a      	adds	r2, r3, #4
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b75e:	b29b      	uxth	r3, r3
 800b760:	3b04      	subs	r3, #4
 800b762:	b29a      	uxth	r2, r3
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b76a:	e05f      	b.n	800b82c <HAL_SPI_Transmit+0x3c0>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b772:	b29b      	uxth	r3, r3
 800b774:	2b01      	cmp	r3, #1
 800b776:	d917      	bls.n	800b7a8 <HAL_SPI_Transmit+0x33c>
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d013      	beq.n	800b7a8 <HAL_SPI_Transmit+0x33c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b784:	881a      	ldrh	r2, [r3, #0]
 800b786:	69fb      	ldr	r3, [r7, #28]
 800b788:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b78e:	1c9a      	adds	r2, r3, #2
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b79a:	b29b      	uxth	r3, r3
 800b79c:	3b02      	subs	r3, #2
 800b79e:	b29a      	uxth	r2, r3
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b7a6:	e041      	b.n	800b82c <HAL_SPI_Transmit+0x3c0>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	3320      	adds	r3, #32
 800b7b2:	7812      	ldrb	r2, [r2, #0]
 800b7b4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7ba:	1c5a      	adds	r2, r3, #1
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b7c6:	b29b      	uxth	r3, r3
 800b7c8:	3b01      	subs	r3, #1
 800b7ca:	b29a      	uxth	r2, r3
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b7d2:	e02b      	b.n	800b82c <HAL_SPI_Transmit+0x3c0>
 800b7d4:	40013000 	.word	0x40013000
 800b7d8:	50013000 	.word	0x50013000
 800b7dc:	40003800 	.word	0x40003800
 800b7e0:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b7e4:	f7f7 fa1c 	bl	8002c20 <HAL_GetTick>
 800b7e8:	4602      	mov	r2, r0
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	1ad3      	subs	r3, r2, r3
 800b7ee:	683a      	ldr	r2, [r7, #0]
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	d803      	bhi.n	800b7fc <HAL_SPI_Transmit+0x390>
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7fa:	d102      	bne.n	800b802 <HAL_SPI_Transmit+0x396>
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d114      	bne.n	800b82c <HAL_SPI_Transmit+0x3c0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b802:	68f8      	ldr	r0, [r7, #12]
 800b804:	f000 f844 	bl	800b890 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	2200      	movs	r2, #0
 800b80c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b816:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	2201      	movs	r2, #1
 800b824:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800b828:	2303      	movs	r3, #3
 800b82a:	e02c      	b.n	800b886 <HAL_SPI_Transmit+0x41a>
    while (hspi->TxXferCount > 0UL)
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b832:	b29b      	uxth	r3, r3
 800b834:	2b00      	cmp	r3, #0
 800b836:	f47f af73 	bne.w	800b720 <HAL_SPI_Transmit+0x2b4>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	9300      	str	r3, [sp, #0]
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	2200      	movs	r2, #0
 800b842:	2108      	movs	r1, #8
 800b844:	68f8      	ldr	r0, [r7, #12]
 800b846:	f000 f8c3 	bl	800b9d0 <SPI_WaitOnFlagUntilTimeout>
 800b84a:	4603      	mov	r3, r0
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d007      	beq.n	800b860 <HAL_SPI_Transmit+0x3f4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b856:	f043 0220 	orr.w	r2, r3, #32
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b860:	68f8      	ldr	r0, [r7, #12]
 800b862:	f000 f815 	bl	800b890 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	2200      	movs	r2, #0
 800b86a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	2201      	movs	r2, #1
 800b872:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d001      	beq.n	800b884 <HAL_SPI_Transmit+0x418>
  {
    return HAL_ERROR;
 800b880:	2301      	movs	r3, #1
 800b882:	e000      	b.n	800b886 <HAL_SPI_Transmit+0x41a>
  }
  return errorcode;
 800b884:	7efb      	ldrb	r3, [r7, #27]
}
 800b886:	4618      	mov	r0, r3
 800b888:	3720      	adds	r7, #32
 800b88a:	46bd      	mov	sp, r7
 800b88c:	bd80      	pop	{r7, pc}
 800b88e:	bf00      	nop

0800b890 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b890:	b480      	push	{r7}
 800b892:	b085      	sub	sp, #20
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	695b      	ldr	r3, [r3, #20]
 800b89e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	699a      	ldr	r2, [r3, #24]
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f042 0208 	orr.w	r2, r2, #8
 800b8ae:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	699a      	ldr	r2, [r3, #24]
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	f042 0210 	orr.w	r2, r2, #16
 800b8be:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	681a      	ldr	r2, [r3, #0]
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	f022 0201 	bic.w	r2, r2, #1
 800b8ce:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	691b      	ldr	r3, [r3, #16]
 800b8d6:	687a      	ldr	r2, [r7, #4]
 800b8d8:	6812      	ldr	r2, [r2, #0]
 800b8da:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 800b8de:	f023 0303 	bic.w	r3, r3, #3
 800b8e2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	689a      	ldr	r2, [r3, #8]
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800b8f2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800b8fa:	b2db      	uxtb	r3, r3
 800b8fc:	2b04      	cmp	r3, #4
 800b8fe:	d014      	beq.n	800b92a <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	f003 0320 	and.w	r3, r3, #32
 800b906:	2b00      	cmp	r3, #0
 800b908:	d00f      	beq.n	800b92a <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b910:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	699a      	ldr	r2, [r3, #24]
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	f042 0220 	orr.w	r2, r2, #32
 800b928:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800b930:	b2db      	uxtb	r3, r3
 800b932:	2b03      	cmp	r3, #3
 800b934:	d014      	beq.n	800b960 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d00f      	beq.n	800b960 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b946:	f043 0204 	orr.w	r2, r3, #4
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	699a      	ldr	r2, [r3, #24]
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b95e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b966:	2b00      	cmp	r3, #0
 800b968:	d00f      	beq.n	800b98a <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b970:	f043 0201 	orr.w	r2, r3, #1
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	699a      	ldr	r2, [r3, #24]
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b988:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b990:	2b00      	cmp	r3, #0
 800b992:	d00f      	beq.n	800b9b4 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b99a:	f043 0208 	orr.w	r2, r3, #8
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	699a      	ldr	r2, [r3, #24]
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b9b2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2200      	movs	r2, #0
 800b9c0:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 800b9c4:	bf00      	nop
 800b9c6:	3714      	adds	r7, #20
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ce:	4770      	bx	lr

0800b9d0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b084      	sub	sp, #16
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	60f8      	str	r0, [r7, #12]
 800b9d8:	60b9      	str	r1, [r7, #8]
 800b9da:	603b      	str	r3, [r7, #0]
 800b9dc:	4613      	mov	r3, r2
 800b9de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b9e0:	e010      	b.n	800ba04 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b9e2:	f7f7 f91d 	bl	8002c20 <HAL_GetTick>
 800b9e6:	4602      	mov	r2, r0
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	1ad3      	subs	r3, r2, r3
 800b9ec:	69ba      	ldr	r2, [r7, #24]
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	d803      	bhi.n	800b9fa <SPI_WaitOnFlagUntilTimeout+0x2a>
 800b9f2:	69bb      	ldr	r3, [r7, #24]
 800b9f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9f8:	d102      	bne.n	800ba00 <SPI_WaitOnFlagUntilTimeout+0x30>
 800b9fa:	69bb      	ldr	r3, [r7, #24]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d101      	bne.n	800ba04 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800ba00:	2303      	movs	r3, #3
 800ba02:	e00f      	b.n	800ba24 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	695a      	ldr	r2, [r3, #20]
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	4013      	ands	r3, r2
 800ba0e:	68ba      	ldr	r2, [r7, #8]
 800ba10:	429a      	cmp	r2, r3
 800ba12:	bf0c      	ite	eq
 800ba14:	2301      	moveq	r3, #1
 800ba16:	2300      	movne	r3, #0
 800ba18:	b2db      	uxtb	r3, r3
 800ba1a:	461a      	mov	r2, r3
 800ba1c:	79fb      	ldrb	r3, [r7, #7]
 800ba1e:	429a      	cmp	r2, r3
 800ba20:	d0df      	beq.n	800b9e2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800ba22:	2300      	movs	r3, #0
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	3710      	adds	r7, #16
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}

0800ba2c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b085      	sub	sp, #20
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba38:	095b      	lsrs	r3, r3, #5
 800ba3a:	3301      	adds	r3, #1
 800ba3c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	68db      	ldr	r3, [r3, #12]
 800ba42:	3301      	adds	r3, #1
 800ba44:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ba46:	68bb      	ldr	r3, [r7, #8]
 800ba48:	3307      	adds	r3, #7
 800ba4a:	08db      	lsrs	r3, r3, #3
 800ba4c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	68fa      	ldr	r2, [r7, #12]
 800ba52:	fb02 f303 	mul.w	r3, r2, r3
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	3714      	adds	r7, #20
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba60:	4770      	bx	lr

0800ba62 <HAL_SPIEx_SetConfigAutonomousMode>:
  * @param  sConfig Pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi, SPI_AutonomousModeConfTypeDef *sConfig)
{
 800ba62:	b480      	push	{r7}
 800ba64:	b083      	sub	sp, #12
 800ba66:	af00      	add	r7, sp, #0
 800ba68:	6078      	str	r0, [r7, #4]
 800ba6a:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800ba72:	b2db      	uxtb	r3, r3
 800ba74:	2b01      	cmp	r3, #1
 800ba76:	d12e      	bne.n	800bad6 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800ba7e:	2b01      	cmp	r3, #1
 800ba80:	d101      	bne.n	800ba86 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800ba82:	2302      	movs	r3, #2
 800ba84:	e028      	b.n	800bad8 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2201      	movs	r2, #1
 800ba8a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2202      	movs	r2, #2
 800ba92:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));

    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	681a      	ldr	r2, [r3, #0]
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	f022 0201 	bic.w	r2, r2, #1
 800baa4:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	681a      	ldr	r2, [r3, #0]
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	685b      	ldr	r3, [r3, #4]
 800baae:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800bab2:	ea42 0103 	orr.w	r1, r2, r3
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	689a      	ldr	r2, [r3, #8]
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	430a      	orrs	r2, r1
 800bac0:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2201      	movs	r2, #1
 800bac6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2200      	movs	r2, #0
 800bace:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800bad2:	2300      	movs	r3, #0
 800bad4:	e000      	b.n	800bad8 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800bad6:	2301      	movs	r3, #1
  }
}
 800bad8:	4618      	mov	r0, r3
 800bada:	370c      	adds	r7, #12
 800badc:	46bd      	mov	sp, r7
 800bade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae2:	4770      	bx	lr

0800bae4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b082      	sub	sp, #8
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d101      	bne.n	800baf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800baf2:	2301      	movs	r3, #1
 800baf4:	e049      	b.n	800bb8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bafc:	b2db      	uxtb	r3, r3
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d106      	bne.n	800bb10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2200      	movs	r2, #0
 800bb06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f7f6 fe10 	bl	8002730 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2202      	movs	r2, #2
 800bb14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681a      	ldr	r2, [r3, #0]
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	3304      	adds	r3, #4
 800bb20:	4619      	mov	r1, r3
 800bb22:	4610      	mov	r0, r2
 800bb24:	f000 fb80 	bl	800c228 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2201      	movs	r2, #1
 800bb34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2201      	movs	r2, #1
 800bb3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2201      	movs	r2, #1
 800bb44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2201      	movs	r2, #1
 800bb4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2201      	movs	r2, #1
 800bb54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2201      	movs	r2, #1
 800bb5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2201      	movs	r2, #1
 800bb64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2201      	movs	r2, #1
 800bb6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2201      	movs	r2, #1
 800bb74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2201      	movs	r2, #1
 800bb84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bb88:	2300      	movs	r3, #0
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	3708      	adds	r7, #8
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}
	...

0800bb94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bb94:	b480      	push	{r7}
 800bb96:	b085      	sub	sp, #20
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bba2:	b2db      	uxtb	r3, r3
 800bba4:	2b01      	cmp	r3, #1
 800bba6:	d001      	beq.n	800bbac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bba8:	2301      	movs	r3, #1
 800bbaa:	e072      	b.n	800bc92 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2202      	movs	r2, #2
 800bbb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	68da      	ldr	r2, [r3, #12]
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	f042 0201 	orr.w	r2, r2, #1
 800bbc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	4a35      	ldr	r2, [pc, #212]	; (800bca0 <HAL_TIM_Base_Start_IT+0x10c>)
 800bbca:	4293      	cmp	r3, r2
 800bbcc:	d040      	beq.n	800bc50 <HAL_TIM_Base_Start_IT+0xbc>
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	4a34      	ldr	r2, [pc, #208]	; (800bca4 <HAL_TIM_Base_Start_IT+0x110>)
 800bbd4:	4293      	cmp	r3, r2
 800bbd6:	d03b      	beq.n	800bc50 <HAL_TIM_Base_Start_IT+0xbc>
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbe0:	d036      	beq.n	800bc50 <HAL_TIM_Base_Start_IT+0xbc>
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bbea:	d031      	beq.n	800bc50 <HAL_TIM_Base_Start_IT+0xbc>
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	4a2d      	ldr	r2, [pc, #180]	; (800bca8 <HAL_TIM_Base_Start_IT+0x114>)
 800bbf2:	4293      	cmp	r3, r2
 800bbf4:	d02c      	beq.n	800bc50 <HAL_TIM_Base_Start_IT+0xbc>
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	4a2c      	ldr	r2, [pc, #176]	; (800bcac <HAL_TIM_Base_Start_IT+0x118>)
 800bbfc:	4293      	cmp	r3, r2
 800bbfe:	d027      	beq.n	800bc50 <HAL_TIM_Base_Start_IT+0xbc>
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	4a2a      	ldr	r2, [pc, #168]	; (800bcb0 <HAL_TIM_Base_Start_IT+0x11c>)
 800bc06:	4293      	cmp	r3, r2
 800bc08:	d022      	beq.n	800bc50 <HAL_TIM_Base_Start_IT+0xbc>
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	4a29      	ldr	r2, [pc, #164]	; (800bcb4 <HAL_TIM_Base_Start_IT+0x120>)
 800bc10:	4293      	cmp	r3, r2
 800bc12:	d01d      	beq.n	800bc50 <HAL_TIM_Base_Start_IT+0xbc>
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	4a27      	ldr	r2, [pc, #156]	; (800bcb8 <HAL_TIM_Base_Start_IT+0x124>)
 800bc1a:	4293      	cmp	r3, r2
 800bc1c:	d018      	beq.n	800bc50 <HAL_TIM_Base_Start_IT+0xbc>
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	4a26      	ldr	r2, [pc, #152]	; (800bcbc <HAL_TIM_Base_Start_IT+0x128>)
 800bc24:	4293      	cmp	r3, r2
 800bc26:	d013      	beq.n	800bc50 <HAL_TIM_Base_Start_IT+0xbc>
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	4a24      	ldr	r2, [pc, #144]	; (800bcc0 <HAL_TIM_Base_Start_IT+0x12c>)
 800bc2e:	4293      	cmp	r3, r2
 800bc30:	d00e      	beq.n	800bc50 <HAL_TIM_Base_Start_IT+0xbc>
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	4a23      	ldr	r2, [pc, #140]	; (800bcc4 <HAL_TIM_Base_Start_IT+0x130>)
 800bc38:	4293      	cmp	r3, r2
 800bc3a:	d009      	beq.n	800bc50 <HAL_TIM_Base_Start_IT+0xbc>
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	4a21      	ldr	r2, [pc, #132]	; (800bcc8 <HAL_TIM_Base_Start_IT+0x134>)
 800bc42:	4293      	cmp	r3, r2
 800bc44:	d004      	beq.n	800bc50 <HAL_TIM_Base_Start_IT+0xbc>
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	4a20      	ldr	r2, [pc, #128]	; (800bccc <HAL_TIM_Base_Start_IT+0x138>)
 800bc4c:	4293      	cmp	r3, r2
 800bc4e:	d115      	bne.n	800bc7c <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	689a      	ldr	r2, [r3, #8]
 800bc56:	4b1e      	ldr	r3, [pc, #120]	; (800bcd0 <HAL_TIM_Base_Start_IT+0x13c>)
 800bc58:	4013      	ands	r3, r2
 800bc5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	2b06      	cmp	r3, #6
 800bc60:	d015      	beq.n	800bc8e <HAL_TIM_Base_Start_IT+0xfa>
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc68:	d011      	beq.n	800bc8e <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	681a      	ldr	r2, [r3, #0]
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f042 0201 	orr.w	r2, r2, #1
 800bc78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc7a:	e008      	b.n	800bc8e <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	681a      	ldr	r2, [r3, #0]
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f042 0201 	orr.w	r2, r2, #1
 800bc8a:	601a      	str	r2, [r3, #0]
 800bc8c:	e000      	b.n	800bc90 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bc90:	2300      	movs	r3, #0
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	3714      	adds	r7, #20
 800bc96:	46bd      	mov	sp, r7
 800bc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9c:	4770      	bx	lr
 800bc9e:	bf00      	nop
 800bca0:	40012c00 	.word	0x40012c00
 800bca4:	50012c00 	.word	0x50012c00
 800bca8:	40000400 	.word	0x40000400
 800bcac:	50000400 	.word	0x50000400
 800bcb0:	40000800 	.word	0x40000800
 800bcb4:	50000800 	.word	0x50000800
 800bcb8:	40000c00 	.word	0x40000c00
 800bcbc:	50000c00 	.word	0x50000c00
 800bcc0:	40013400 	.word	0x40013400
 800bcc4:	50013400 	.word	0x50013400
 800bcc8:	40014000 	.word	0x40014000
 800bccc:	50014000 	.word	0x50014000
 800bcd0:	00010007 	.word	0x00010007

0800bcd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b082      	sub	sp, #8
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	691b      	ldr	r3, [r3, #16]
 800bce2:	f003 0302 	and.w	r3, r3, #2
 800bce6:	2b02      	cmp	r3, #2
 800bce8:	d122      	bne.n	800bd30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	68db      	ldr	r3, [r3, #12]
 800bcf0:	f003 0302 	and.w	r3, r3, #2
 800bcf4:	2b02      	cmp	r3, #2
 800bcf6:	d11b      	bne.n	800bd30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	f06f 0202 	mvn.w	r2, #2
 800bd00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2201      	movs	r2, #1
 800bd06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	699b      	ldr	r3, [r3, #24]
 800bd0e:	f003 0303 	and.w	r3, r3, #3
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d003      	beq.n	800bd1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f000 fa68 	bl	800c1ec <HAL_TIM_IC_CaptureCallback>
 800bd1c:	e005      	b.n	800bd2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f000 fa5a 	bl	800c1d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f000 fa6b 	bl	800c200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	691b      	ldr	r3, [r3, #16]
 800bd36:	f003 0304 	and.w	r3, r3, #4
 800bd3a:	2b04      	cmp	r3, #4
 800bd3c:	d122      	bne.n	800bd84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	68db      	ldr	r3, [r3, #12]
 800bd44:	f003 0304 	and.w	r3, r3, #4
 800bd48:	2b04      	cmp	r3, #4
 800bd4a:	d11b      	bne.n	800bd84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f06f 0204 	mvn.w	r2, #4
 800bd54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2202      	movs	r2, #2
 800bd5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	699b      	ldr	r3, [r3, #24]
 800bd62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d003      	beq.n	800bd72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f000 fa3e 	bl	800c1ec <HAL_TIM_IC_CaptureCallback>
 800bd70:	e005      	b.n	800bd7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	f000 fa30 	bl	800c1d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f000 fa41 	bl	800c200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2200      	movs	r2, #0
 800bd82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	691b      	ldr	r3, [r3, #16]
 800bd8a:	f003 0308 	and.w	r3, r3, #8
 800bd8e:	2b08      	cmp	r3, #8
 800bd90:	d122      	bne.n	800bdd8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	68db      	ldr	r3, [r3, #12]
 800bd98:	f003 0308 	and.w	r3, r3, #8
 800bd9c:	2b08      	cmp	r3, #8
 800bd9e:	d11b      	bne.n	800bdd8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	f06f 0208 	mvn.w	r2, #8
 800bda8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2204      	movs	r2, #4
 800bdae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	69db      	ldr	r3, [r3, #28]
 800bdb6:	f003 0303 	and.w	r3, r3, #3
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d003      	beq.n	800bdc6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f000 fa14 	bl	800c1ec <HAL_TIM_IC_CaptureCallback>
 800bdc4:	e005      	b.n	800bdd2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f000 fa06 	bl	800c1d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f000 fa17 	bl	800c200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	691b      	ldr	r3, [r3, #16]
 800bdde:	f003 0310 	and.w	r3, r3, #16
 800bde2:	2b10      	cmp	r3, #16
 800bde4:	d122      	bne.n	800be2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	68db      	ldr	r3, [r3, #12]
 800bdec:	f003 0310 	and.w	r3, r3, #16
 800bdf0:	2b10      	cmp	r3, #16
 800bdf2:	d11b      	bne.n	800be2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f06f 0210 	mvn.w	r2, #16
 800bdfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2208      	movs	r2, #8
 800be02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	69db      	ldr	r3, [r3, #28]
 800be0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d003      	beq.n	800be1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f000 f9ea 	bl	800c1ec <HAL_TIM_IC_CaptureCallback>
 800be18:	e005      	b.n	800be26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f000 f9dc 	bl	800c1d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f000 f9ed 	bl	800c200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	2200      	movs	r2, #0
 800be2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	691b      	ldr	r3, [r3, #16]
 800be32:	f003 0301 	and.w	r3, r3, #1
 800be36:	2b01      	cmp	r3, #1
 800be38:	d10e      	bne.n	800be58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	68db      	ldr	r3, [r3, #12]
 800be40:	f003 0301 	and.w	r3, r3, #1
 800be44:	2b01      	cmp	r3, #1
 800be46:	d107      	bne.n	800be58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	f06f 0201 	mvn.w	r2, #1
 800be50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f7f6 fa8c 	bl	8002370 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	691b      	ldr	r3, [r3, #16]
 800be5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be62:	2b80      	cmp	r3, #128	; 0x80
 800be64:	d10e      	bne.n	800be84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	68db      	ldr	r3, [r3, #12]
 800be6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be70:	2b80      	cmp	r3, #128	; 0x80
 800be72:	d107      	bne.n	800be84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800be7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f000 fc34 	bl	800c6ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	691b      	ldr	r3, [r3, #16]
 800be8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be92:	d10e      	bne.n	800beb2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	68db      	ldr	r3, [r3, #12]
 800be9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be9e:	2b80      	cmp	r3, #128	; 0x80
 800bea0:	d107      	bne.n	800beb2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800beaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	f000 fc27 	bl	800c700 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	691b      	ldr	r3, [r3, #16]
 800beb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bebc:	2b40      	cmp	r3, #64	; 0x40
 800bebe:	d10e      	bne.n	800bede <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	68db      	ldr	r3, [r3, #12]
 800bec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800beca:	2b40      	cmp	r3, #64	; 0x40
 800becc:	d107      	bne.n	800bede <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f000 f99b 	bl	800c214 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	691b      	ldr	r3, [r3, #16]
 800bee4:	f003 0320 	and.w	r3, r3, #32
 800bee8:	2b20      	cmp	r3, #32
 800beea:	d10e      	bne.n	800bf0a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	68db      	ldr	r3, [r3, #12]
 800bef2:	f003 0320 	and.w	r3, r3, #32
 800bef6:	2b20      	cmp	r3, #32
 800bef8:	d107      	bne.n	800bf0a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	f06f 0220 	mvn.w	r2, #32
 800bf02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f000 fbe7 	bl	800c6d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	691b      	ldr	r3, [r3, #16]
 800bf10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bf14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf18:	d10f      	bne.n	800bf3a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	68db      	ldr	r3, [r3, #12]
 800bf20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bf24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf28:	d107      	bne.n	800bf3a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800bf32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f000 fbed 	bl	800c714 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	691b      	ldr	r3, [r3, #16]
 800bf40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bf44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bf48:	d10f      	bne.n	800bf6a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	68db      	ldr	r3, [r3, #12]
 800bf50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bf54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bf58:	d107      	bne.n	800bf6a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800bf62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	f000 fbdf 	bl	800c728 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	691b      	ldr	r3, [r3, #16]
 800bf70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bf74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bf78:	d10f      	bne.n	800bf9a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	68db      	ldr	r3, [r3, #12]
 800bf80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bf84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bf88:	d107      	bne.n	800bf9a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800bf92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f000 fbd1 	bl	800c73c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	691b      	ldr	r3, [r3, #16]
 800bfa0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bfa4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bfa8:	d10f      	bne.n	800bfca <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	68db      	ldr	r3, [r3, #12]
 800bfb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bfb4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bfb8:	d107      	bne.n	800bfca <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800bfc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	f000 fbc3 	bl	800c750 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bfca:	bf00      	nop
 800bfcc:	3708      	adds	r7, #8
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}
	...

0800bfd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b084      	sub	sp, #16
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
 800bfdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bfe8:	2b01      	cmp	r3, #1
 800bfea:	d101      	bne.n	800bff0 <HAL_TIM_ConfigClockSource+0x1c>
 800bfec:	2302      	movs	r3, #2
 800bfee:	e0e6      	b.n	800c1be <HAL_TIM_ConfigClockSource+0x1ea>
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2201      	movs	r2, #1
 800bff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2202      	movs	r2, #2
 800bffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	689b      	ldr	r3, [r3, #8]
 800c006:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800c00e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c012:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c01a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	68ba      	ldr	r2, [r7, #8]
 800c022:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	4a67      	ldr	r2, [pc, #412]	; (800c1c8 <HAL_TIM_ConfigClockSource+0x1f4>)
 800c02a:	4293      	cmp	r3, r2
 800c02c:	f000 80b1 	beq.w	800c192 <HAL_TIM_ConfigClockSource+0x1be>
 800c030:	4a65      	ldr	r2, [pc, #404]	; (800c1c8 <HAL_TIM_ConfigClockSource+0x1f4>)
 800c032:	4293      	cmp	r3, r2
 800c034:	f200 80b6 	bhi.w	800c1a4 <HAL_TIM_ConfigClockSource+0x1d0>
 800c038:	4a64      	ldr	r2, [pc, #400]	; (800c1cc <HAL_TIM_ConfigClockSource+0x1f8>)
 800c03a:	4293      	cmp	r3, r2
 800c03c:	f000 80a9 	beq.w	800c192 <HAL_TIM_ConfigClockSource+0x1be>
 800c040:	4a62      	ldr	r2, [pc, #392]	; (800c1cc <HAL_TIM_ConfigClockSource+0x1f8>)
 800c042:	4293      	cmp	r3, r2
 800c044:	f200 80ae 	bhi.w	800c1a4 <HAL_TIM_ConfigClockSource+0x1d0>
 800c048:	4a61      	ldr	r2, [pc, #388]	; (800c1d0 <HAL_TIM_ConfigClockSource+0x1fc>)
 800c04a:	4293      	cmp	r3, r2
 800c04c:	f000 80a1 	beq.w	800c192 <HAL_TIM_ConfigClockSource+0x1be>
 800c050:	4a5f      	ldr	r2, [pc, #380]	; (800c1d0 <HAL_TIM_ConfigClockSource+0x1fc>)
 800c052:	4293      	cmp	r3, r2
 800c054:	f200 80a6 	bhi.w	800c1a4 <HAL_TIM_ConfigClockSource+0x1d0>
 800c058:	4a5e      	ldr	r2, [pc, #376]	; (800c1d4 <HAL_TIM_ConfigClockSource+0x200>)
 800c05a:	4293      	cmp	r3, r2
 800c05c:	f000 8099 	beq.w	800c192 <HAL_TIM_ConfigClockSource+0x1be>
 800c060:	4a5c      	ldr	r2, [pc, #368]	; (800c1d4 <HAL_TIM_ConfigClockSource+0x200>)
 800c062:	4293      	cmp	r3, r2
 800c064:	f200 809e 	bhi.w	800c1a4 <HAL_TIM_ConfigClockSource+0x1d0>
 800c068:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c06c:	f000 8091 	beq.w	800c192 <HAL_TIM_ConfigClockSource+0x1be>
 800c070:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c074:	f200 8096 	bhi.w	800c1a4 <HAL_TIM_ConfigClockSource+0x1d0>
 800c078:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c07c:	f000 8089 	beq.w	800c192 <HAL_TIM_ConfigClockSource+0x1be>
 800c080:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c084:	f200 808e 	bhi.w	800c1a4 <HAL_TIM_ConfigClockSource+0x1d0>
 800c088:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c08c:	d03e      	beq.n	800c10c <HAL_TIM_ConfigClockSource+0x138>
 800c08e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c092:	f200 8087 	bhi.w	800c1a4 <HAL_TIM_ConfigClockSource+0x1d0>
 800c096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c09a:	f000 8086 	beq.w	800c1aa <HAL_TIM_ConfigClockSource+0x1d6>
 800c09e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0a2:	d87f      	bhi.n	800c1a4 <HAL_TIM_ConfigClockSource+0x1d0>
 800c0a4:	2b70      	cmp	r3, #112	; 0x70
 800c0a6:	d01a      	beq.n	800c0de <HAL_TIM_ConfigClockSource+0x10a>
 800c0a8:	2b70      	cmp	r3, #112	; 0x70
 800c0aa:	d87b      	bhi.n	800c1a4 <HAL_TIM_ConfigClockSource+0x1d0>
 800c0ac:	2b60      	cmp	r3, #96	; 0x60
 800c0ae:	d050      	beq.n	800c152 <HAL_TIM_ConfigClockSource+0x17e>
 800c0b0:	2b60      	cmp	r3, #96	; 0x60
 800c0b2:	d877      	bhi.n	800c1a4 <HAL_TIM_ConfigClockSource+0x1d0>
 800c0b4:	2b50      	cmp	r3, #80	; 0x50
 800c0b6:	d03c      	beq.n	800c132 <HAL_TIM_ConfigClockSource+0x15e>
 800c0b8:	2b50      	cmp	r3, #80	; 0x50
 800c0ba:	d873      	bhi.n	800c1a4 <HAL_TIM_ConfigClockSource+0x1d0>
 800c0bc:	2b40      	cmp	r3, #64	; 0x40
 800c0be:	d058      	beq.n	800c172 <HAL_TIM_ConfigClockSource+0x19e>
 800c0c0:	2b40      	cmp	r3, #64	; 0x40
 800c0c2:	d86f      	bhi.n	800c1a4 <HAL_TIM_ConfigClockSource+0x1d0>
 800c0c4:	2b30      	cmp	r3, #48	; 0x30
 800c0c6:	d064      	beq.n	800c192 <HAL_TIM_ConfigClockSource+0x1be>
 800c0c8:	2b30      	cmp	r3, #48	; 0x30
 800c0ca:	d86b      	bhi.n	800c1a4 <HAL_TIM_ConfigClockSource+0x1d0>
 800c0cc:	2b20      	cmp	r3, #32
 800c0ce:	d060      	beq.n	800c192 <HAL_TIM_ConfigClockSource+0x1be>
 800c0d0:	2b20      	cmp	r3, #32
 800c0d2:	d867      	bhi.n	800c1a4 <HAL_TIM_ConfigClockSource+0x1d0>
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d05c      	beq.n	800c192 <HAL_TIM_ConfigClockSource+0x1be>
 800c0d8:	2b10      	cmp	r3, #16
 800c0da:	d05a      	beq.n	800c192 <HAL_TIM_ConfigClockSource+0x1be>
 800c0dc:	e062      	b.n	800c1a4 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6818      	ldr	r0, [r3, #0]
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	6899      	ldr	r1, [r3, #8]
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	685a      	ldr	r2, [r3, #4]
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	68db      	ldr	r3, [r3, #12]
 800c0ee:	f000 fa11 	bl	800c514 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	689b      	ldr	r3, [r3, #8]
 800c0f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c0fa:	68bb      	ldr	r3, [r7, #8]
 800c0fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c100:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	68ba      	ldr	r2, [r7, #8]
 800c108:	609a      	str	r2, [r3, #8]
      break;
 800c10a:	e04f      	b.n	800c1ac <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	6818      	ldr	r0, [r3, #0]
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	6899      	ldr	r1, [r3, #8]
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	685a      	ldr	r2, [r3, #4]
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	68db      	ldr	r3, [r3, #12]
 800c11c:	f000 f9fa 	bl	800c514 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	689a      	ldr	r2, [r3, #8]
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c12e:	609a      	str	r2, [r3, #8]
      break;
 800c130:	e03c      	b.n	800c1ac <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	6818      	ldr	r0, [r3, #0]
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	6859      	ldr	r1, [r3, #4]
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	68db      	ldr	r3, [r3, #12]
 800c13e:	461a      	mov	r2, r3
 800c140:	f000 f96c 	bl	800c41c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	2150      	movs	r1, #80	; 0x50
 800c14a:	4618      	mov	r0, r3
 800c14c:	f000 f9c5 	bl	800c4da <TIM_ITRx_SetConfig>
      break;
 800c150:	e02c      	b.n	800c1ac <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6818      	ldr	r0, [r3, #0]
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	6859      	ldr	r1, [r3, #4]
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	68db      	ldr	r3, [r3, #12]
 800c15e:	461a      	mov	r2, r3
 800c160:	f000 f98b 	bl	800c47a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	2160      	movs	r1, #96	; 0x60
 800c16a:	4618      	mov	r0, r3
 800c16c:	f000 f9b5 	bl	800c4da <TIM_ITRx_SetConfig>
      break;
 800c170:	e01c      	b.n	800c1ac <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6818      	ldr	r0, [r3, #0]
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	6859      	ldr	r1, [r3, #4]
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	68db      	ldr	r3, [r3, #12]
 800c17e:	461a      	mov	r2, r3
 800c180:	f000 f94c 	bl	800c41c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	2140      	movs	r1, #64	; 0x40
 800c18a:	4618      	mov	r0, r3
 800c18c:	f000 f9a5 	bl	800c4da <TIM_ITRx_SetConfig>
      break;
 800c190:	e00c      	b.n	800c1ac <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681a      	ldr	r2, [r3, #0]
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	4619      	mov	r1, r3
 800c19c:	4610      	mov	r0, r2
 800c19e:	f000 f99c 	bl	800c4da <TIM_ITRx_SetConfig>
      break;
 800c1a2:	e003      	b.n	800c1ac <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	73fb      	strb	r3, [r7, #15]
      break;
 800c1a8:	e000      	b.n	800c1ac <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800c1aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2201      	movs	r2, #1
 800c1b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c1bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3710      	adds	r7, #16
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}
 800c1c6:	bf00      	nop
 800c1c8:	00100070 	.word	0x00100070
 800c1cc:	00100040 	.word	0x00100040
 800c1d0:	00100030 	.word	0x00100030
 800c1d4:	00100020 	.word	0x00100020

0800c1d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c1d8:	b480      	push	{r7}
 800c1da:	b083      	sub	sp, #12
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c1e0:	bf00      	nop
 800c1e2:	370c      	adds	r7, #12
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ea:	4770      	bx	lr

0800c1ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c1ec:	b480      	push	{r7}
 800c1ee:	b083      	sub	sp, #12
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c1f4:	bf00      	nop
 800c1f6:	370c      	adds	r7, #12
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fe:	4770      	bx	lr

0800c200 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c200:	b480      	push	{r7}
 800c202:	b083      	sub	sp, #12
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c208:	bf00      	nop
 800c20a:	370c      	adds	r7, #12
 800c20c:	46bd      	mov	sp, r7
 800c20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c212:	4770      	bx	lr

0800c214 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c214:	b480      	push	{r7}
 800c216:	b083      	sub	sp, #12
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c21c:	bf00      	nop
 800c21e:	370c      	adds	r7, #12
 800c220:	46bd      	mov	sp, r7
 800c222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c226:	4770      	bx	lr

0800c228 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c228:	b480      	push	{r7}
 800c22a:	b085      	sub	sp, #20
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
 800c230:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	4a68      	ldr	r2, [pc, #416]	; (800c3dc <TIM_Base_SetConfig+0x1b4>)
 800c23c:	4293      	cmp	r3, r2
 800c23e:	d02b      	beq.n	800c298 <TIM_Base_SetConfig+0x70>
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	4a67      	ldr	r2, [pc, #412]	; (800c3e0 <TIM_Base_SetConfig+0x1b8>)
 800c244:	4293      	cmp	r3, r2
 800c246:	d027      	beq.n	800c298 <TIM_Base_SetConfig+0x70>
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c24e:	d023      	beq.n	800c298 <TIM_Base_SetConfig+0x70>
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c256:	d01f      	beq.n	800c298 <TIM_Base_SetConfig+0x70>
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	4a62      	ldr	r2, [pc, #392]	; (800c3e4 <TIM_Base_SetConfig+0x1bc>)
 800c25c:	4293      	cmp	r3, r2
 800c25e:	d01b      	beq.n	800c298 <TIM_Base_SetConfig+0x70>
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	4a61      	ldr	r2, [pc, #388]	; (800c3e8 <TIM_Base_SetConfig+0x1c0>)
 800c264:	4293      	cmp	r3, r2
 800c266:	d017      	beq.n	800c298 <TIM_Base_SetConfig+0x70>
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	4a60      	ldr	r2, [pc, #384]	; (800c3ec <TIM_Base_SetConfig+0x1c4>)
 800c26c:	4293      	cmp	r3, r2
 800c26e:	d013      	beq.n	800c298 <TIM_Base_SetConfig+0x70>
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	4a5f      	ldr	r2, [pc, #380]	; (800c3f0 <TIM_Base_SetConfig+0x1c8>)
 800c274:	4293      	cmp	r3, r2
 800c276:	d00f      	beq.n	800c298 <TIM_Base_SetConfig+0x70>
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	4a5e      	ldr	r2, [pc, #376]	; (800c3f4 <TIM_Base_SetConfig+0x1cc>)
 800c27c:	4293      	cmp	r3, r2
 800c27e:	d00b      	beq.n	800c298 <TIM_Base_SetConfig+0x70>
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	4a5d      	ldr	r2, [pc, #372]	; (800c3f8 <TIM_Base_SetConfig+0x1d0>)
 800c284:	4293      	cmp	r3, r2
 800c286:	d007      	beq.n	800c298 <TIM_Base_SetConfig+0x70>
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	4a5c      	ldr	r2, [pc, #368]	; (800c3fc <TIM_Base_SetConfig+0x1d4>)
 800c28c:	4293      	cmp	r3, r2
 800c28e:	d003      	beq.n	800c298 <TIM_Base_SetConfig+0x70>
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	4a5b      	ldr	r2, [pc, #364]	; (800c400 <TIM_Base_SetConfig+0x1d8>)
 800c294:	4293      	cmp	r3, r2
 800c296:	d108      	bne.n	800c2aa <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c29e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	685b      	ldr	r3, [r3, #4]
 800c2a4:	68fa      	ldr	r2, [r7, #12]
 800c2a6:	4313      	orrs	r3, r2
 800c2a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	4a4b      	ldr	r2, [pc, #300]	; (800c3dc <TIM_Base_SetConfig+0x1b4>)
 800c2ae:	4293      	cmp	r3, r2
 800c2b0:	d043      	beq.n	800c33a <TIM_Base_SetConfig+0x112>
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	4a4a      	ldr	r2, [pc, #296]	; (800c3e0 <TIM_Base_SetConfig+0x1b8>)
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	d03f      	beq.n	800c33a <TIM_Base_SetConfig+0x112>
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2c0:	d03b      	beq.n	800c33a <TIM_Base_SetConfig+0x112>
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c2c8:	d037      	beq.n	800c33a <TIM_Base_SetConfig+0x112>
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	4a45      	ldr	r2, [pc, #276]	; (800c3e4 <TIM_Base_SetConfig+0x1bc>)
 800c2ce:	4293      	cmp	r3, r2
 800c2d0:	d033      	beq.n	800c33a <TIM_Base_SetConfig+0x112>
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	4a44      	ldr	r2, [pc, #272]	; (800c3e8 <TIM_Base_SetConfig+0x1c0>)
 800c2d6:	4293      	cmp	r3, r2
 800c2d8:	d02f      	beq.n	800c33a <TIM_Base_SetConfig+0x112>
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	4a43      	ldr	r2, [pc, #268]	; (800c3ec <TIM_Base_SetConfig+0x1c4>)
 800c2de:	4293      	cmp	r3, r2
 800c2e0:	d02b      	beq.n	800c33a <TIM_Base_SetConfig+0x112>
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	4a42      	ldr	r2, [pc, #264]	; (800c3f0 <TIM_Base_SetConfig+0x1c8>)
 800c2e6:	4293      	cmp	r3, r2
 800c2e8:	d027      	beq.n	800c33a <TIM_Base_SetConfig+0x112>
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	4a41      	ldr	r2, [pc, #260]	; (800c3f4 <TIM_Base_SetConfig+0x1cc>)
 800c2ee:	4293      	cmp	r3, r2
 800c2f0:	d023      	beq.n	800c33a <TIM_Base_SetConfig+0x112>
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	4a40      	ldr	r2, [pc, #256]	; (800c3f8 <TIM_Base_SetConfig+0x1d0>)
 800c2f6:	4293      	cmp	r3, r2
 800c2f8:	d01f      	beq.n	800c33a <TIM_Base_SetConfig+0x112>
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	4a3f      	ldr	r2, [pc, #252]	; (800c3fc <TIM_Base_SetConfig+0x1d4>)
 800c2fe:	4293      	cmp	r3, r2
 800c300:	d01b      	beq.n	800c33a <TIM_Base_SetConfig+0x112>
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	4a3e      	ldr	r2, [pc, #248]	; (800c400 <TIM_Base_SetConfig+0x1d8>)
 800c306:	4293      	cmp	r3, r2
 800c308:	d017      	beq.n	800c33a <TIM_Base_SetConfig+0x112>
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	4a3d      	ldr	r2, [pc, #244]	; (800c404 <TIM_Base_SetConfig+0x1dc>)
 800c30e:	4293      	cmp	r3, r2
 800c310:	d013      	beq.n	800c33a <TIM_Base_SetConfig+0x112>
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	4a3c      	ldr	r2, [pc, #240]	; (800c408 <TIM_Base_SetConfig+0x1e0>)
 800c316:	4293      	cmp	r3, r2
 800c318:	d00f      	beq.n	800c33a <TIM_Base_SetConfig+0x112>
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	4a3b      	ldr	r2, [pc, #236]	; (800c40c <TIM_Base_SetConfig+0x1e4>)
 800c31e:	4293      	cmp	r3, r2
 800c320:	d00b      	beq.n	800c33a <TIM_Base_SetConfig+0x112>
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	4a3a      	ldr	r2, [pc, #232]	; (800c410 <TIM_Base_SetConfig+0x1e8>)
 800c326:	4293      	cmp	r3, r2
 800c328:	d007      	beq.n	800c33a <TIM_Base_SetConfig+0x112>
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	4a39      	ldr	r2, [pc, #228]	; (800c414 <TIM_Base_SetConfig+0x1ec>)
 800c32e:	4293      	cmp	r3, r2
 800c330:	d003      	beq.n	800c33a <TIM_Base_SetConfig+0x112>
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	4a38      	ldr	r2, [pc, #224]	; (800c418 <TIM_Base_SetConfig+0x1f0>)
 800c336:	4293      	cmp	r3, r2
 800c338:	d108      	bne.n	800c34c <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c340:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	68db      	ldr	r3, [r3, #12]
 800c346:	68fa      	ldr	r2, [r7, #12]
 800c348:	4313      	orrs	r3, r2
 800c34a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	695b      	ldr	r3, [r3, #20]
 800c356:	4313      	orrs	r3, r2
 800c358:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	68fa      	ldr	r2, [r7, #12]
 800c35e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	689a      	ldr	r2, [r3, #8]
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	681a      	ldr	r2, [r3, #0]
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	4a1a      	ldr	r2, [pc, #104]	; (800c3dc <TIM_Base_SetConfig+0x1b4>)
 800c374:	4293      	cmp	r3, r2
 800c376:	d023      	beq.n	800c3c0 <TIM_Base_SetConfig+0x198>
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	4a19      	ldr	r2, [pc, #100]	; (800c3e0 <TIM_Base_SetConfig+0x1b8>)
 800c37c:	4293      	cmp	r3, r2
 800c37e:	d01f      	beq.n	800c3c0 <TIM_Base_SetConfig+0x198>
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	4a1e      	ldr	r2, [pc, #120]	; (800c3fc <TIM_Base_SetConfig+0x1d4>)
 800c384:	4293      	cmp	r3, r2
 800c386:	d01b      	beq.n	800c3c0 <TIM_Base_SetConfig+0x198>
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	4a1d      	ldr	r2, [pc, #116]	; (800c400 <TIM_Base_SetConfig+0x1d8>)
 800c38c:	4293      	cmp	r3, r2
 800c38e:	d017      	beq.n	800c3c0 <TIM_Base_SetConfig+0x198>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	4a1c      	ldr	r2, [pc, #112]	; (800c404 <TIM_Base_SetConfig+0x1dc>)
 800c394:	4293      	cmp	r3, r2
 800c396:	d013      	beq.n	800c3c0 <TIM_Base_SetConfig+0x198>
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	4a1b      	ldr	r2, [pc, #108]	; (800c408 <TIM_Base_SetConfig+0x1e0>)
 800c39c:	4293      	cmp	r3, r2
 800c39e:	d00f      	beq.n	800c3c0 <TIM_Base_SetConfig+0x198>
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	4a1a      	ldr	r2, [pc, #104]	; (800c40c <TIM_Base_SetConfig+0x1e4>)
 800c3a4:	4293      	cmp	r3, r2
 800c3a6:	d00b      	beq.n	800c3c0 <TIM_Base_SetConfig+0x198>
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	4a19      	ldr	r2, [pc, #100]	; (800c410 <TIM_Base_SetConfig+0x1e8>)
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d007      	beq.n	800c3c0 <TIM_Base_SetConfig+0x198>
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	4a18      	ldr	r2, [pc, #96]	; (800c414 <TIM_Base_SetConfig+0x1ec>)
 800c3b4:	4293      	cmp	r3, r2
 800c3b6:	d003      	beq.n	800c3c0 <TIM_Base_SetConfig+0x198>
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	4a17      	ldr	r2, [pc, #92]	; (800c418 <TIM_Base_SetConfig+0x1f0>)
 800c3bc:	4293      	cmp	r3, r2
 800c3be:	d103      	bne.n	800c3c8 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	691a      	ldr	r2, [r3, #16]
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2201      	movs	r2, #1
 800c3cc:	615a      	str	r2, [r3, #20]
}
 800c3ce:	bf00      	nop
 800c3d0:	3714      	adds	r7, #20
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d8:	4770      	bx	lr
 800c3da:	bf00      	nop
 800c3dc:	40012c00 	.word	0x40012c00
 800c3e0:	50012c00 	.word	0x50012c00
 800c3e4:	40000400 	.word	0x40000400
 800c3e8:	50000400 	.word	0x50000400
 800c3ec:	40000800 	.word	0x40000800
 800c3f0:	50000800 	.word	0x50000800
 800c3f4:	40000c00 	.word	0x40000c00
 800c3f8:	50000c00 	.word	0x50000c00
 800c3fc:	40013400 	.word	0x40013400
 800c400:	50013400 	.word	0x50013400
 800c404:	40014000 	.word	0x40014000
 800c408:	50014000 	.word	0x50014000
 800c40c:	40014400 	.word	0x40014400
 800c410:	50014400 	.word	0x50014400
 800c414:	40014800 	.word	0x40014800
 800c418:	50014800 	.word	0x50014800

0800c41c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c41c:	b480      	push	{r7}
 800c41e:	b087      	sub	sp, #28
 800c420:	af00      	add	r7, sp, #0
 800c422:	60f8      	str	r0, [r7, #12]
 800c424:	60b9      	str	r1, [r7, #8]
 800c426:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	6a1b      	ldr	r3, [r3, #32]
 800c42c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	6a1b      	ldr	r3, [r3, #32]
 800c432:	f023 0201 	bic.w	r2, r3, #1
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	699b      	ldr	r3, [r3, #24]
 800c43e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c440:	693b      	ldr	r3, [r7, #16]
 800c442:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c446:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	011b      	lsls	r3, r3, #4
 800c44c:	693a      	ldr	r2, [r7, #16]
 800c44e:	4313      	orrs	r3, r2
 800c450:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	f023 030a 	bic.w	r3, r3, #10
 800c458:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c45a:	697a      	ldr	r2, [r7, #20]
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	4313      	orrs	r3, r2
 800c460:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	693a      	ldr	r2, [r7, #16]
 800c466:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	697a      	ldr	r2, [r7, #20]
 800c46c:	621a      	str	r2, [r3, #32]
}
 800c46e:	bf00      	nop
 800c470:	371c      	adds	r7, #28
 800c472:	46bd      	mov	sp, r7
 800c474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c478:	4770      	bx	lr

0800c47a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c47a:	b480      	push	{r7}
 800c47c:	b087      	sub	sp, #28
 800c47e:	af00      	add	r7, sp, #0
 800c480:	60f8      	str	r0, [r7, #12]
 800c482:	60b9      	str	r1, [r7, #8]
 800c484:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	6a1b      	ldr	r3, [r3, #32]
 800c48a:	f023 0210 	bic.w	r2, r3, #16
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	699b      	ldr	r3, [r3, #24]
 800c496:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	6a1b      	ldr	r3, [r3, #32]
 800c49c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c49e:	697b      	ldr	r3, [r7, #20]
 800c4a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c4a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	031b      	lsls	r3, r3, #12
 800c4aa:	697a      	ldr	r2, [r7, #20]
 800c4ac:	4313      	orrs	r3, r2
 800c4ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c4b0:	693b      	ldr	r3, [r7, #16]
 800c4b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c4b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	011b      	lsls	r3, r3, #4
 800c4bc:	693a      	ldr	r2, [r7, #16]
 800c4be:	4313      	orrs	r3, r2
 800c4c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	697a      	ldr	r2, [r7, #20]
 800c4c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	693a      	ldr	r2, [r7, #16]
 800c4cc:	621a      	str	r2, [r3, #32]
}
 800c4ce:	bf00      	nop
 800c4d0:	371c      	adds	r7, #28
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d8:	4770      	bx	lr

0800c4da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_ITR8: Internal Trigger 8
  *            @arg TIM_TS_ITR11: Internal Trigger 11
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c4da:	b480      	push	{r7}
 800c4dc:	b085      	sub	sp, #20
 800c4de:	af00      	add	r7, sp, #0
 800c4e0:	6078      	str	r0, [r7, #4]
 800c4e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	689b      	ldr	r3, [r3, #8]
 800c4e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800c4f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c4f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c4f6:	683a      	ldr	r2, [r7, #0]
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	4313      	orrs	r3, r2
 800c4fc:	f043 0307 	orr.w	r3, r3, #7
 800c500:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	68fa      	ldr	r2, [r7, #12]
 800c506:	609a      	str	r2, [r3, #8]
}
 800c508:	bf00      	nop
 800c50a:	3714      	adds	r7, #20
 800c50c:	46bd      	mov	sp, r7
 800c50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c512:	4770      	bx	lr

0800c514 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c514:	b480      	push	{r7}
 800c516:	b087      	sub	sp, #28
 800c518:	af00      	add	r7, sp, #0
 800c51a:	60f8      	str	r0, [r7, #12]
 800c51c:	60b9      	str	r1, [r7, #8]
 800c51e:	607a      	str	r2, [r7, #4]
 800c520:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	689b      	ldr	r3, [r3, #8]
 800c526:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c528:	697b      	ldr	r3, [r7, #20]
 800c52a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c52e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	021a      	lsls	r2, r3, #8
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	431a      	orrs	r2, r3
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	4313      	orrs	r3, r2
 800c53c:	697a      	ldr	r2, [r7, #20]
 800c53e:	4313      	orrs	r3, r2
 800c540:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	697a      	ldr	r2, [r7, #20]
 800c546:	609a      	str	r2, [r3, #8]
}
 800c548:	bf00      	nop
 800c54a:	371c      	adds	r7, #28
 800c54c:	46bd      	mov	sp, r7
 800c54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c552:	4770      	bx	lr

0800c554 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c554:	b480      	push	{r7}
 800c556:	b085      	sub	sp, #20
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
 800c55c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c564:	2b01      	cmp	r3, #1
 800c566:	d101      	bne.n	800c56c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c568:	2302      	movs	r3, #2
 800c56a:	e097      	b.n	800c69c <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2201      	movs	r2, #1
 800c570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2202      	movs	r2, #2
 800c578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	685b      	ldr	r3, [r3, #4]
 800c582:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	689b      	ldr	r3, [r3, #8]
 800c58a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	4a45      	ldr	r2, [pc, #276]	; (800c6a8 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800c592:	4293      	cmp	r3, r2
 800c594:	d00e      	beq.n	800c5b4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	4a44      	ldr	r2, [pc, #272]	; (800c6ac <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800c59c:	4293      	cmp	r3, r2
 800c59e:	d009      	beq.n	800c5b4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	4a42      	ldr	r2, [pc, #264]	; (800c6b0 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800c5a6:	4293      	cmp	r3, r2
 800c5a8:	d004      	beq.n	800c5b4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	4a41      	ldr	r2, [pc, #260]	; (800c6b4 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800c5b0:	4293      	cmp	r3, r2
 800c5b2:	d108      	bne.n	800c5c6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c5ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	685b      	ldr	r3, [r3, #4]
 800c5c0:	68fa      	ldr	r2, [r7, #12]
 800c5c2:	4313      	orrs	r3, r2
 800c5c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800c5cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c5d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	68fa      	ldr	r2, [r7, #12]
 800c5d8:	4313      	orrs	r3, r2
 800c5da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	68fa      	ldr	r2, [r7, #12]
 800c5e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	4a2f      	ldr	r2, [pc, #188]	; (800c6a8 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800c5ea:	4293      	cmp	r3, r2
 800c5ec:	d040      	beq.n	800c670 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	4a2e      	ldr	r2, [pc, #184]	; (800c6ac <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800c5f4:	4293      	cmp	r3, r2
 800c5f6:	d03b      	beq.n	800c670 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c600:	d036      	beq.n	800c670 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c60a:	d031      	beq.n	800c670 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	4a29      	ldr	r2, [pc, #164]	; (800c6b8 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800c612:	4293      	cmp	r3, r2
 800c614:	d02c      	beq.n	800c670 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	4a28      	ldr	r2, [pc, #160]	; (800c6bc <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800c61c:	4293      	cmp	r3, r2
 800c61e:	d027      	beq.n	800c670 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	4a26      	ldr	r2, [pc, #152]	; (800c6c0 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800c626:	4293      	cmp	r3, r2
 800c628:	d022      	beq.n	800c670 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	4a25      	ldr	r2, [pc, #148]	; (800c6c4 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800c630:	4293      	cmp	r3, r2
 800c632:	d01d      	beq.n	800c670 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	4a23      	ldr	r2, [pc, #140]	; (800c6c8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800c63a:	4293      	cmp	r3, r2
 800c63c:	d018      	beq.n	800c670 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	4a22      	ldr	r2, [pc, #136]	; (800c6cc <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800c644:	4293      	cmp	r3, r2
 800c646:	d013      	beq.n	800c670 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	4a18      	ldr	r2, [pc, #96]	; (800c6b0 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800c64e:	4293      	cmp	r3, r2
 800c650:	d00e      	beq.n	800c670 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	4a17      	ldr	r2, [pc, #92]	; (800c6b4 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800c658:	4293      	cmp	r3, r2
 800c65a:	d009      	beq.n	800c670 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	4a1b      	ldr	r2, [pc, #108]	; (800c6d0 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800c662:	4293      	cmp	r3, r2
 800c664:	d004      	beq.n	800c670 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	4a1a      	ldr	r2, [pc, #104]	; (800c6d4 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800c66c:	4293      	cmp	r3, r2
 800c66e:	d10c      	bne.n	800c68a <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c676:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	689b      	ldr	r3, [r3, #8]
 800c67c:	68ba      	ldr	r2, [r7, #8]
 800c67e:	4313      	orrs	r3, r2
 800c680:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	68ba      	ldr	r2, [r7, #8]
 800c688:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	2201      	movs	r2, #1
 800c68e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2200      	movs	r2, #0
 800c696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c69a:	2300      	movs	r3, #0
}
 800c69c:	4618      	mov	r0, r3
 800c69e:	3714      	adds	r7, #20
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a6:	4770      	bx	lr
 800c6a8:	40012c00 	.word	0x40012c00
 800c6ac:	50012c00 	.word	0x50012c00
 800c6b0:	40013400 	.word	0x40013400
 800c6b4:	50013400 	.word	0x50013400
 800c6b8:	40000400 	.word	0x40000400
 800c6bc:	50000400 	.word	0x50000400
 800c6c0:	40000800 	.word	0x40000800
 800c6c4:	50000800 	.word	0x50000800
 800c6c8:	40000c00 	.word	0x40000c00
 800c6cc:	50000c00 	.word	0x50000c00
 800c6d0:	40014000 	.word	0x40014000
 800c6d4:	50014000 	.word	0x50014000

0800c6d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c6d8:	b480      	push	{r7}
 800c6da:	b083      	sub	sp, #12
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c6e0:	bf00      	nop
 800c6e2:	370c      	adds	r7, #12
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ea:	4770      	bx	lr

0800c6ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	b083      	sub	sp, #12
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c6f4:	bf00      	nop
 800c6f6:	370c      	adds	r7, #12
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fe:	4770      	bx	lr

0800c700 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c700:	b480      	push	{r7}
 800c702:	b083      	sub	sp, #12
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c708:	bf00      	nop
 800c70a:	370c      	adds	r7, #12
 800c70c:	46bd      	mov	sp, r7
 800c70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c712:	4770      	bx	lr

0800c714 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800c714:	b480      	push	{r7}
 800c716:	b083      	sub	sp, #12
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800c71c:	bf00      	nop
 800c71e:	370c      	adds	r7, #12
 800c720:	46bd      	mov	sp, r7
 800c722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c726:	4770      	bx	lr

0800c728 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800c728:	b480      	push	{r7}
 800c72a:	b083      	sub	sp, #12
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800c730:	bf00      	nop
 800c732:	370c      	adds	r7, #12
 800c734:	46bd      	mov	sp, r7
 800c736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73a:	4770      	bx	lr

0800c73c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800c73c:	b480      	push	{r7}
 800c73e:	b083      	sub	sp, #12
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800c744:	bf00      	nop
 800c746:	370c      	adds	r7, #12
 800c748:	46bd      	mov	sp, r7
 800c74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74e:	4770      	bx	lr

0800c750 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800c750:	b480      	push	{r7}
 800c752:	b083      	sub	sp, #12
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800c758:	bf00      	nop
 800c75a:	370c      	adds	r7, #12
 800c75c:	46bd      	mov	sp, r7
 800c75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c762:	4770      	bx	lr

0800c764 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b082      	sub	sp, #8
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d101      	bne.n	800c776 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c772:	2301      	movs	r3, #1
 800c774:	e042      	b.n	800c7fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d106      	bne.n	800c78e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2200      	movs	r2, #0
 800c784:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f7f5 fff9 	bl	8002780 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2224      	movs	r2, #36	; 0x24
 800c792:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	681a      	ldr	r2, [r3, #0]
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	f022 0201 	bic.w	r2, r2, #1
 800c7a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f000 fc28 	bl	800cffc <UART_SetConfig>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	2b01      	cmp	r3, #1
 800c7b0:	d101      	bne.n	800c7b6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c7b2:	2301      	movs	r3, #1
 800c7b4:	e022      	b.n	800c7fc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d002      	beq.n	800c7c4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	f000 fdbe 	bl	800d340 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	685a      	ldr	r2, [r3, #4]
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c7d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	689a      	ldr	r2, [r3, #8]
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c7e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	681a      	ldr	r2, [r3, #0]
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	f042 0201 	orr.w	r2, r2, #1
 800c7f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	f000 fe45 	bl	800d484 <UART_CheckIdleState>
 800c7fa:	4603      	mov	r3, r0
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	3708      	adds	r7, #8
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}

0800c804 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c804:	b480      	push	{r7}
 800c806:	b091      	sub	sp, #68	; 0x44
 800c808:	af00      	add	r7, sp, #0
 800c80a:	60f8      	str	r0, [r7, #12]
 800c80c:	60b9      	str	r1, [r7, #8]
 800c80e:	4613      	mov	r3, r2
 800c810:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c818:	2b20      	cmp	r3, #32
 800c81a:	f040 809b 	bne.w	800c954 <HAL_UART_Transmit_IT+0x150>
  {
    if ((pData == NULL) || (Size == 0U))
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d002      	beq.n	800c82a <HAL_UART_Transmit_IT+0x26>
 800c824:	88fb      	ldrh	r3, [r7, #6]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d101      	bne.n	800c82e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800c82a:	2301      	movs	r3, #1
 800c82c:	e093      	b.n	800c956 <HAL_UART_Transmit_IT+0x152>
    }

    __HAL_LOCK(huart);
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c834:	2b01      	cmp	r3, #1
 800c836:	d101      	bne.n	800c83c <HAL_UART_Transmit_IT+0x38>
 800c838:	2302      	movs	r3, #2
 800c83a:	e08c      	b.n	800c956 <HAL_UART_Transmit_IT+0x152>
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	2201      	movs	r2, #1
 800c840:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	689b      	ldr	r3, [r3, #8]
 800c84a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c84e:	2b80      	cmp	r3, #128	; 0x80
 800c850:	d107      	bne.n	800c862 <HAL_UART_Transmit_IT+0x5e>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	689a      	ldr	r2, [r3, #8]
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c860:	609a      	str	r2, [r3, #8]
    }

    huart->pTxBuffPtr  = pData;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	68ba      	ldr	r2, [r7, #8]
 800c866:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	88fa      	ldrh	r2, [r7, #6]
 800c86c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	88fa      	ldrh	r2, [r7, #6]
 800c874:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	2200      	movs	r2, #0
 800c87c:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	2200      	movs	r2, #0
 800c882:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	2221      	movs	r2, #33	; 0x21
 800c88a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c892:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c896:	d12e      	bne.n	800c8f6 <HAL_UART_Transmit_IT+0xf2>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	689b      	ldr	r3, [r3, #8]
 800c89c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c8a0:	d107      	bne.n	800c8b2 <HAL_UART_Transmit_IT+0xae>
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	691b      	ldr	r3, [r3, #16]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d103      	bne.n	800c8b2 <HAL_UART_Transmit_IT+0xae>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	4a2d      	ldr	r2, [pc, #180]	; (800c964 <HAL_UART_Transmit_IT+0x160>)
 800c8ae:	675a      	str	r2, [r3, #116]	; 0x74
 800c8b0:	e002      	b.n	800c8b8 <HAL_UART_Transmit_IT+0xb4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	4a2c      	ldr	r2, [pc, #176]	; (800c968 <HAL_UART_Transmit_IT+0x164>)
 800c8b6:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	3308      	adds	r3, #8
 800c8c6:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ca:	e853 3f00 	ldrex	r3, [r3]
 800c8ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c8d6:	63bb      	str	r3, [r7, #56]	; 0x38
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	3308      	adds	r3, #8
 800c8de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c8e0:	637a      	str	r2, [r7, #52]	; 0x34
 800c8e2:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c8e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c8e8:	e841 2300 	strex	r3, r2, [r1]
 800c8ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c8ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d1e5      	bne.n	800c8c0 <HAL_UART_Transmit_IT+0xbc>
 800c8f4:	e02c      	b.n	800c950 <HAL_UART_Transmit_IT+0x14c>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	689b      	ldr	r3, [r3, #8]
 800c8fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c8fe:	d107      	bne.n	800c910 <HAL_UART_Transmit_IT+0x10c>
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	691b      	ldr	r3, [r3, #16]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d103      	bne.n	800c910 <HAL_UART_Transmit_IT+0x10c>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	4a18      	ldr	r2, [pc, #96]	; (800c96c <HAL_UART_Transmit_IT+0x168>)
 800c90c:	675a      	str	r2, [r3, #116]	; 0x74
 800c90e:	e002      	b.n	800c916 <HAL_UART_Transmit_IT+0x112>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	4a17      	ldr	r2, [pc, #92]	; (800c970 <HAL_UART_Transmit_IT+0x16c>)
 800c914:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	2200      	movs	r2, #0
 800c91a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c924:	697b      	ldr	r3, [r7, #20]
 800c926:	e853 3f00 	ldrex	r3, [r3]
 800c92a:	613b      	str	r3, [r7, #16]
   return(result);
 800c92c:	693b      	ldr	r3, [r7, #16]
 800c92e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c932:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	461a      	mov	r2, r3
 800c93a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c93c:	623b      	str	r3, [r7, #32]
 800c93e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c940:	69f9      	ldr	r1, [r7, #28]
 800c942:	6a3a      	ldr	r2, [r7, #32]
 800c944:	e841 2300 	strex	r3, r2, [r1]
 800c948:	61bb      	str	r3, [r7, #24]
   return(result);
 800c94a:	69bb      	ldr	r3, [r7, #24]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d1e6      	bne.n	800c91e <HAL_UART_Transmit_IT+0x11a>
    }

    return HAL_OK;
 800c950:	2300      	movs	r3, #0
 800c952:	e000      	b.n	800c956 <HAL_UART_Transmit_IT+0x152>
  }
  else
  {
    return HAL_BUSY;
 800c954:	2302      	movs	r3, #2
  }
}
 800c956:	4618      	mov	r0, r3
 800c958:	3744      	adds	r7, #68	; 0x44
 800c95a:	46bd      	mov	sp, r7
 800c95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c960:	4770      	bx	lr
 800c962:	bf00      	nop
 800c964:	0800de09 	.word	0x0800de09
 800c968:	0800dd29 	.word	0x0800dd29
 800c96c:	0800dc67 	.word	0x0800dc67
 800c970:	0800dbaf 	.word	0x0800dbaf

0800c974 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b08a      	sub	sp, #40	; 0x28
 800c978:	af00      	add	r7, sp, #0
 800c97a:	60f8      	str	r0, [r7, #12]
 800c97c:	60b9      	str	r1, [r7, #8]
 800c97e:	4613      	mov	r3, r2
 800c980:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c988:	2b20      	cmp	r3, #32
 800c98a:	d147      	bne.n	800ca1c <HAL_UART_Receive_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d002      	beq.n	800c998 <HAL_UART_Receive_DMA+0x24>
 800c992:	88fb      	ldrh	r3, [r7, #6]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d101      	bne.n	800c99c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c998:	2301      	movs	r3, #1
 800c99a:	e040      	b.n	800ca1e <HAL_UART_Receive_DMA+0xaa>
    }

    __HAL_LOCK(huart);
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c9a2:	2b01      	cmp	r3, #1
 800c9a4:	d101      	bne.n	800c9aa <HAL_UART_Receive_DMA+0x36>
 800c9a6:	2302      	movs	r3, #2
 800c9a8:	e039      	b.n	800ca1e <HAL_UART_Receive_DMA+0xaa>
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	2201      	movs	r2, #1
 800c9ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	4a1a      	ldr	r2, [pc, #104]	; (800ca28 <HAL_UART_Receive_DMA+0xb4>)
 800c9be:	4293      	cmp	r3, r2
 800c9c0:	d024      	beq.n	800ca0c <HAL_UART_Receive_DMA+0x98>
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	4a19      	ldr	r2, [pc, #100]	; (800ca2c <HAL_UART_Receive_DMA+0xb8>)
 800c9c8:	4293      	cmp	r3, r2
 800c9ca:	d01f      	beq.n	800ca0c <HAL_UART_Receive_DMA+0x98>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	685b      	ldr	r3, [r3, #4]
 800c9d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d018      	beq.n	800ca0c <HAL_UART_Receive_DMA+0x98>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9e0:	697b      	ldr	r3, [r7, #20]
 800c9e2:	e853 3f00 	ldrex	r3, [r3]
 800c9e6:	613b      	str	r3, [r7, #16]
   return(result);
 800c9e8:	693b      	ldr	r3, [r7, #16]
 800c9ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c9ee:	627b      	str	r3, [r7, #36]	; 0x24
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	461a      	mov	r2, r3
 800c9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f8:	623b      	str	r3, [r7, #32]
 800c9fa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9fc:	69f9      	ldr	r1, [r7, #28]
 800c9fe:	6a3a      	ldr	r2, [r7, #32]
 800ca00:	e841 2300 	strex	r3, r2, [r1]
 800ca04:	61bb      	str	r3, [r7, #24]
   return(result);
 800ca06:	69bb      	ldr	r3, [r7, #24]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d1e6      	bne.n	800c9da <HAL_UART_Receive_DMA+0x66>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ca0c:	88fb      	ldrh	r3, [r7, #6]
 800ca0e:	461a      	mov	r2, r3
 800ca10:	68b9      	ldr	r1, [r7, #8]
 800ca12:	68f8      	ldr	r0, [r7, #12]
 800ca14:	f000 fe4a 	bl	800d6ac <UART_Start_Receive_DMA>
 800ca18:	4603      	mov	r3, r0
 800ca1a:	e000      	b.n	800ca1e <HAL_UART_Receive_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 800ca1c:	2302      	movs	r3, #2
  }
}
 800ca1e:	4618      	mov	r0, r3
 800ca20:	3728      	adds	r7, #40	; 0x28
 800ca22:	46bd      	mov	sp, r7
 800ca24:	bd80      	pop	{r7, pc}
 800ca26:	bf00      	nop
 800ca28:	46002400 	.word	0x46002400
 800ca2c:	56002400 	.word	0x56002400

0800ca30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b0ae      	sub	sp, #184	; 0xb8
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	69db      	ldr	r3, [r3, #28]
 800ca3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	689b      	ldr	r3, [r3, #8]
 800ca52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ca56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ca5a:	f640 030f 	movw	r3, #2063	; 0x80f
 800ca5e:	4013      	ands	r3, r2
 800ca60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (errorflags == 0U)
 800ca64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d11b      	bne.n	800caa4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ca6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ca70:	f003 0320 	and.w	r3, r3, #32
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d015      	beq.n	800caa4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ca78:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ca7c:	f003 0320 	and.w	r3, r3, #32
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d105      	bne.n	800ca90 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ca84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ca88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d009      	beq.n	800caa4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	f000 8271 	beq.w	800cf7c <HAL_UART_IRQHandler+0x54c>
      {
        huart->RxISR(huart);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	4798      	blx	r3
      }
      return;
 800caa2:	e26b      	b.n	800cf7c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800caa4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	f000 80f9 	beq.w	800cca0 <HAL_UART_IRQHandler+0x270>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800caae:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800cab2:	4b78      	ldr	r3, [pc, #480]	; (800cc94 <HAL_UART_IRQHandler+0x264>)
 800cab4:	4013      	ands	r3, r2
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d106      	bne.n	800cac8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800caba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800cabe:	4b76      	ldr	r3, [pc, #472]	; (800cc98 <HAL_UART_IRQHandler+0x268>)
 800cac0:	4013      	ands	r3, r2
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	f000 80ec 	beq.w	800cca0 <HAL_UART_IRQHandler+0x270>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cac8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cacc:	f003 0301 	and.w	r3, r3, #1
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d011      	beq.n	800caf8 <HAL_UART_IRQHandler+0xc8>
 800cad4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800cad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d00b      	beq.n	800caf8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	2201      	movs	r2, #1
 800cae6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800caee:	f043 0201 	orr.w	r2, r3, #1
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800caf8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cafc:	f003 0302 	and.w	r3, r3, #2
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d011      	beq.n	800cb28 <HAL_UART_IRQHandler+0xf8>
 800cb04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cb08:	f003 0301 	and.w	r3, r3, #1
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d00b      	beq.n	800cb28 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	2202      	movs	r2, #2
 800cb16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb1e:	f043 0204 	orr.w	r2, r3, #4
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cb28:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cb2c:	f003 0304 	and.w	r3, r3, #4
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d011      	beq.n	800cb58 <HAL_UART_IRQHandler+0x128>
 800cb34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cb38:	f003 0301 	and.w	r3, r3, #1
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d00b      	beq.n	800cb58 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	2204      	movs	r2, #4
 800cb46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb4e:	f043 0202 	orr.w	r2, r3, #2
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cb58:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cb5c:	f003 0308 	and.w	r3, r3, #8
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d017      	beq.n	800cb94 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cb64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800cb68:	f003 0320 	and.w	r3, r3, #32
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d105      	bne.n	800cb7c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800cb70:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800cb74:	4b47      	ldr	r3, [pc, #284]	; (800cc94 <HAL_UART_IRQHandler+0x264>)
 800cb76:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d00b      	beq.n	800cb94 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	2208      	movs	r2, #8
 800cb82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb8a:	f043 0208 	orr.w	r2, r3, #8
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cb94:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cb98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d012      	beq.n	800cbc6 <HAL_UART_IRQHandler+0x196>
 800cba0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800cba4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d00c      	beq.n	800cbc6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cbb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cbbc:	f043 0220 	orr.w	r2, r3, #32
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	f000 81d7 	beq.w	800cf80 <HAL_UART_IRQHandler+0x550>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cbd2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cbd6:	f003 0320 	and.w	r3, r3, #32
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d013      	beq.n	800cc06 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cbde:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800cbe2:	f003 0320 	and.w	r3, r3, #32
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d105      	bne.n	800cbf6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cbea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cbee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d007      	beq.n	800cc06 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d003      	beq.n	800cc06 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc02:	6878      	ldr	r0, [r7, #4]
 800cc04:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	689b      	ldr	r3, [r3, #8]
 800cc16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc1a:	2b40      	cmp	r3, #64	; 0x40
 800cc1c:	d005      	beq.n	800cc2a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cc1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800cc22:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d029      	beq.n	800cc7e <HAL_UART_IRQHandler+0x24e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cc2a:	6878      	ldr	r0, [r7, #4]
 800cc2c:	f000 fe71 	bl	800d912 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	689b      	ldr	r3, [r3, #8]
 800cc36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc3a:	2b40      	cmp	r3, #64	; 0x40
 800cc3c:	d11b      	bne.n	800cc76 <HAL_UART_IRQHandler+0x246>
        {
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d013      	beq.n	800cc6e <HAL_UART_IRQHandler+0x23e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc4a:	4a14      	ldr	r2, [pc, #80]	; (800cc9c <HAL_UART_IRQHandler+0x26c>)
 800cc4c:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc52:	4618      	mov	r0, r3
 800cc54:	f7f8 fbb3 	bl	80053be <HAL_DMA_Abort_IT>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d017      	beq.n	800cc8e <HAL_UART_IRQHandler+0x25e>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc64:	687a      	ldr	r2, [r7, #4]
 800cc66:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800cc68:	4610      	mov	r0, r2
 800cc6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc6c:	e00f      	b.n	800cc8e <HAL_UART_IRQHandler+0x25e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	f000 f9ae 	bl	800cfd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc74:	e00b      	b.n	800cc8e <HAL_UART_IRQHandler+0x25e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cc76:	6878      	ldr	r0, [r7, #4]
 800cc78:	f000 f9aa 	bl	800cfd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc7c:	e007      	b.n	800cc8e <HAL_UART_IRQHandler+0x25e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	f000 f9a6 	bl	800cfd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2200      	movs	r2, #0
 800cc88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800cc8c:	e178      	b.n	800cf80 <HAL_UART_IRQHandler+0x550>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc8e:	bf00      	nop
    return;
 800cc90:	e176      	b.n	800cf80 <HAL_UART_IRQHandler+0x550>
 800cc92:	bf00      	nop
 800cc94:	10000001 	.word	0x10000001
 800cc98:	04000120 	.word	0x04000120
 800cc9c:	0800db83 	.word	0x0800db83

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cca4:	2b01      	cmp	r3, #1
 800cca6:	f040 8120 	bne.w	800ceea <HAL_UART_IRQHandler+0x4ba>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ccaa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ccae:	f003 0310 	and.w	r3, r3, #16
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	f000 8119 	beq.w	800ceea <HAL_UART_IRQHandler+0x4ba>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ccb8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ccbc:	f003 0310 	and.w	r3, r3, #16
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	f000 8112 	beq.w	800ceea <HAL_UART_IRQHandler+0x4ba>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	2210      	movs	r2, #16
 800cccc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	689b      	ldr	r3, [r3, #8]
 800ccd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccd8:	2b40      	cmp	r3, #64	; 0x40
 800ccda:	f040 808b 	bne.w	800cdf4 <HAL_UART_IRQHandler+0x3c4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cce6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
      if ((nb_remaining_rx_data > 0U)
 800ccea:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	f000 8148 	beq.w	800cf84 <HAL_UART_IRQHandler+0x554>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ccfa:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800ccfe:	429a      	cmp	r2, r3
 800cd00:	f080 8140 	bcs.w	800cf84 <HAL_UART_IRQHandler+0x554>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800cd0a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd14:	2b81      	cmp	r3, #129	; 0x81
 800cd16:	d05f      	beq.n	800cdd8 <HAL_UART_IRQHandler+0x3a8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cd20:	e853 3f00 	ldrex	r3, [r3]
 800cd24:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800cd26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cd28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	461a      	mov	r2, r3
 800cd36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cd3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cd3e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd40:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800cd42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cd46:	e841 2300 	strex	r3, r2, [r1]
 800cd4a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800cd4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d1e2      	bne.n	800cd18 <HAL_UART_IRQHandler+0x2e8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	3308      	adds	r3, #8
 800cd58:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cd5c:	e853 3f00 	ldrex	r3, [r3]
 800cd60:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800cd62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd64:	f023 0301 	bic.w	r3, r3, #1
 800cd68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	3308      	adds	r3, #8
 800cd72:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800cd76:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cd78:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd7a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cd7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cd7e:	e841 2300 	strex	r3, r2, [r1]
 800cd82:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800cd84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d1e3      	bne.n	800cd52 <HAL_UART_IRQHandler+0x322>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2220      	movs	r2, #32
 800cd8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	2200      	movs	r2, #0
 800cd96:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cda0:	e853 3f00 	ldrex	r3, [r3]
 800cda4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cda6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cda8:	f023 0310 	bic.w	r3, r3, #16
 800cdac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	461a      	mov	r2, r3
 800cdb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cdba:	65bb      	str	r3, [r7, #88]	; 0x58
 800cdbc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdbe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cdc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cdc2:	e841 2300 	strex	r3, r2, [r1]
 800cdc6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cdc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d1e4      	bne.n	800cd98 <HAL_UART_IRQHandler+0x368>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	f7f8 fa77 	bl	80052c6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cde4:	b29b      	uxth	r3, r3
 800cde6:	1ad3      	subs	r3, r2, r3
 800cde8:	b29b      	uxth	r3, r3
 800cdea:	4619      	mov	r1, r3
 800cdec:	6878      	ldr	r0, [r7, #4]
 800cdee:	f000 f8f9 	bl	800cfe4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cdf2:	e0c7      	b.n	800cf84 <HAL_UART_IRQHandler+0x554>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ce00:	b29b      	uxth	r3, r3
 800ce02:	1ad3      	subs	r3, r2, r3
 800ce04:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
      if ((huart->RxXferCount > 0U)
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ce0e:	b29b      	uxth	r3, r3
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	f000 80b9 	beq.w	800cf88 <HAL_UART_IRQHandler+0x558>
          && (nb_rx_data > 0U))
 800ce16:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	f000 80b4 	beq.w	800cf88 <HAL_UART_IRQHandler+0x558>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce28:	e853 3f00 	ldrex	r3, [r3]
 800ce2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ce2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ce34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	461a      	mov	r2, r3
 800ce3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ce42:	647b      	str	r3, [r7, #68]	; 0x44
 800ce44:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ce48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ce4a:	e841 2300 	strex	r3, r2, [r1]
 800ce4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ce50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d1e4      	bne.n	800ce20 <HAL_UART_IRQHandler+0x3f0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	3308      	adds	r3, #8
 800ce5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce60:	e853 3f00 	ldrex	r3, [r3]
 800ce64:	623b      	str	r3, [r7, #32]
   return(result);
 800ce66:	6a3b      	ldr	r3, [r7, #32]
 800ce68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ce6c:	f023 0301 	bic.w	r3, r3, #1
 800ce70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	3308      	adds	r3, #8
 800ce7a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ce7e:	633a      	str	r2, [r7, #48]	; 0x30
 800ce80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ce84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce86:	e841 2300 	strex	r3, r2, [r1]
 800ce8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ce8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d1e1      	bne.n	800ce56 <HAL_UART_IRQHandler+0x426>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2220      	movs	r2, #32
 800ce96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2200      	movs	r2, #0
 800cea4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceac:	693b      	ldr	r3, [r7, #16]
 800ceae:	e853 3f00 	ldrex	r3, [r3]
 800ceb2:	60fb      	str	r3, [r7, #12]
   return(result);
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	f023 0310 	bic.w	r3, r3, #16
 800ceba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	461a      	mov	r2, r3
 800cec4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cec8:	61fb      	str	r3, [r7, #28]
 800ceca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cecc:	69b9      	ldr	r1, [r7, #24]
 800cece:	69fa      	ldr	r2, [r7, #28]
 800ced0:	e841 2300 	strex	r3, r2, [r1]
 800ced4:	617b      	str	r3, [r7, #20]
   return(result);
 800ced6:	697b      	ldr	r3, [r7, #20]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d1e4      	bne.n	800cea6 <HAL_UART_IRQHandler+0x476>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cedc:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800cee0:	4619      	mov	r1, r3
 800cee2:	6878      	ldr	r0, [r7, #4]
 800cee4:	f000 f87e 	bl	800cfe4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cee8:	e04e      	b.n	800cf88 <HAL_UART_IRQHandler+0x558>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ceea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ceee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d014      	beq.n	800cf20 <HAL_UART_IRQHandler+0x4f0>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800cef6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800cefa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d105      	bne.n	800cf0e <HAL_UART_IRQHandler+0x4de>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800cf02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cf06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d008      	beq.n	800cf20 <HAL_UART_IRQHandler+0x4f0>
  {
    if (huart->TxISR != NULL)
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d03a      	beq.n	800cf8c <HAL_UART_IRQHandler+0x55c>
    {
      huart->TxISR(huart);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	4798      	blx	r3
    }
    return;
 800cf1e:	e035      	b.n	800cf8c <HAL_UART_IRQHandler+0x55c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cf20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cf24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d009      	beq.n	800cf40 <HAL_UART_IRQHandler+0x510>
 800cf2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800cf30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d003      	beq.n	800cf40 <HAL_UART_IRQHandler+0x510>
  {
    UART_EndTransmit_IT(huart);
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f000 ffda 	bl	800def2 <UART_EndTransmit_IT>
    return;
 800cf3e:	e026      	b.n	800cf8e <HAL_UART_IRQHandler+0x55e>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800cf40:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cf44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d009      	beq.n	800cf60 <HAL_UART_IRQHandler+0x530>
 800cf4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800cf50:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d003      	beq.n	800cf60 <HAL_UART_IRQHandler+0x530>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800cf58:	6878      	ldr	r0, [r7, #4]
 800cf5a:	f000 ffff 	bl	800df5c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cf5e:	e016      	b.n	800cf8e <HAL_UART_IRQHandler+0x55e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cf60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cf64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d010      	beq.n	800cf8e <HAL_UART_IRQHandler+0x55e>
 800cf6c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	da0c      	bge.n	800cf8e <HAL_UART_IRQHandler+0x55e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	f000 ffe7 	bl	800df48 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cf7a:	e008      	b.n	800cf8e <HAL_UART_IRQHandler+0x55e>
      return;
 800cf7c:	bf00      	nop
 800cf7e:	e006      	b.n	800cf8e <HAL_UART_IRQHandler+0x55e>
    return;
 800cf80:	bf00      	nop
 800cf82:	e004      	b.n	800cf8e <HAL_UART_IRQHandler+0x55e>
      return;
 800cf84:	bf00      	nop
 800cf86:	e002      	b.n	800cf8e <HAL_UART_IRQHandler+0x55e>
      return;
 800cf88:	bf00      	nop
 800cf8a:	e000      	b.n	800cf8e <HAL_UART_IRQHandler+0x55e>
    return;
 800cf8c:	bf00      	nop
  }
}
 800cf8e:	37b8      	adds	r7, #184	; 0xb8
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}

0800cf94 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cf94:	b480      	push	{r7}
 800cf96:	b083      	sub	sp, #12
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cf9c:	bf00      	nop
 800cf9e:	370c      	adds	r7, #12
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa6:	4770      	bx	lr

0800cfa8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800cfa8:	b480      	push	{r7}
 800cfaa:	b083      	sub	sp, #12
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800cfb0:	bf00      	nop
 800cfb2:	370c      	adds	r7, #12
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfba:	4770      	bx	lr

0800cfbc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cfbc:	b480      	push	{r7}
 800cfbe:	b083      	sub	sp, #12
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800cfc4:	bf00      	nop
 800cfc6:	370c      	adds	r7, #12
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfce:	4770      	bx	lr

0800cfd0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cfd0:	b480      	push	{r7}
 800cfd2:	b083      	sub	sp, #12
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cfd8:	bf00      	nop
 800cfda:	370c      	adds	r7, #12
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe2:	4770      	bx	lr

0800cfe4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cfe4:	b480      	push	{r7}
 800cfe6:	b083      	sub	sp, #12
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
 800cfec:	460b      	mov	r3, r1
 800cfee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cff0:	bf00      	nop
 800cff2:	370c      	adds	r7, #12
 800cff4:	46bd      	mov	sp, r7
 800cff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffa:	4770      	bx	lr

0800cffc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cffc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d000:	b094      	sub	sp, #80	; 0x50
 800d002:	af00      	add	r7, sp, #0
 800d004:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d006:	2300      	movs	r3, #0
 800d008:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800d00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d00e:	681a      	ldr	r2, [r3, #0]
 800d010:	4b7e      	ldr	r3, [pc, #504]	; (800d20c <UART_SetConfig+0x210>)
 800d012:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d016:	689a      	ldr	r2, [r3, #8]
 800d018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d01a:	691b      	ldr	r3, [r3, #16]
 800d01c:	431a      	orrs	r2, r3
 800d01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d020:	695b      	ldr	r3, [r3, #20]
 800d022:	431a      	orrs	r2, r3
 800d024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d026:	69db      	ldr	r3, [r3, #28]
 800d028:	4313      	orrs	r3, r2
 800d02a:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	4977      	ldr	r1, [pc, #476]	; (800d210 <UART_SetConfig+0x214>)
 800d034:	4019      	ands	r1, r3
 800d036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d038:	681a      	ldr	r2, [r3, #0]
 800d03a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d03c:	430b      	orrs	r3, r1
 800d03e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	685b      	ldr	r3, [r3, #4]
 800d046:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800d04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d04c:	68d9      	ldr	r1, [r3, #12]
 800d04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d050:	681a      	ldr	r2, [r3, #0]
 800d052:	ea40 0301 	orr.w	r3, r0, r1
 800d056:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d05a:	699b      	ldr	r3, [r3, #24]
 800d05c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d060:	681a      	ldr	r2, [r3, #0]
 800d062:	4b6a      	ldr	r3, [pc, #424]	; (800d20c <UART_SetConfig+0x210>)
 800d064:	429a      	cmp	r2, r3
 800d066:	d009      	beq.n	800d07c <UART_SetConfig+0x80>
 800d068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d06a:	681a      	ldr	r2, [r3, #0]
 800d06c:	4b69      	ldr	r3, [pc, #420]	; (800d214 <UART_SetConfig+0x218>)
 800d06e:	429a      	cmp	r2, r3
 800d070:	d004      	beq.n	800d07c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d074:	6a1a      	ldr	r2, [r3, #32]
 800d076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d078:	4313      	orrs	r3, r2
 800d07a:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	689b      	ldr	r3, [r3, #8]
 800d082:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800d086:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800d08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d08c:	681a      	ldr	r2, [r3, #0]
 800d08e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d090:	430b      	orrs	r3, r1
 800d092:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d09a:	f023 000f 	bic.w	r0, r3, #15
 800d09e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0a0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0a4:	681a      	ldr	r2, [r3, #0]
 800d0a6:	ea40 0301 	orr.w	r3, r0, r1
 800d0aa:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ae:	681a      	ldr	r2, [r3, #0]
 800d0b0:	4b59      	ldr	r3, [pc, #356]	; (800d218 <UART_SetConfig+0x21c>)
 800d0b2:	429a      	cmp	r2, r3
 800d0b4:	d102      	bne.n	800d0bc <UART_SetConfig+0xc0>
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	64bb      	str	r3, [r7, #72]	; 0x48
 800d0ba:	e029      	b.n	800d110 <UART_SetConfig+0x114>
 800d0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0be:	681a      	ldr	r2, [r3, #0]
 800d0c0:	4b56      	ldr	r3, [pc, #344]	; (800d21c <UART_SetConfig+0x220>)
 800d0c2:	429a      	cmp	r2, r3
 800d0c4:	d102      	bne.n	800d0cc <UART_SetConfig+0xd0>
 800d0c6:	2302      	movs	r3, #2
 800d0c8:	64bb      	str	r3, [r7, #72]	; 0x48
 800d0ca:	e021      	b.n	800d110 <UART_SetConfig+0x114>
 800d0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ce:	681a      	ldr	r2, [r3, #0]
 800d0d0:	4b53      	ldr	r3, [pc, #332]	; (800d220 <UART_SetConfig+0x224>)
 800d0d2:	429a      	cmp	r2, r3
 800d0d4:	d102      	bne.n	800d0dc <UART_SetConfig+0xe0>
 800d0d6:	2304      	movs	r3, #4
 800d0d8:	64bb      	str	r3, [r7, #72]	; 0x48
 800d0da:	e019      	b.n	800d110 <UART_SetConfig+0x114>
 800d0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0de:	681a      	ldr	r2, [r3, #0]
 800d0e0:	4b50      	ldr	r3, [pc, #320]	; (800d224 <UART_SetConfig+0x228>)
 800d0e2:	429a      	cmp	r2, r3
 800d0e4:	d102      	bne.n	800d0ec <UART_SetConfig+0xf0>
 800d0e6:	2308      	movs	r3, #8
 800d0e8:	64bb      	str	r3, [r7, #72]	; 0x48
 800d0ea:	e011      	b.n	800d110 <UART_SetConfig+0x114>
 800d0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ee:	681a      	ldr	r2, [r3, #0]
 800d0f0:	4b4d      	ldr	r3, [pc, #308]	; (800d228 <UART_SetConfig+0x22c>)
 800d0f2:	429a      	cmp	r2, r3
 800d0f4:	d102      	bne.n	800d0fc <UART_SetConfig+0x100>
 800d0f6:	2310      	movs	r3, #16
 800d0f8:	64bb      	str	r3, [r7, #72]	; 0x48
 800d0fa:	e009      	b.n	800d110 <UART_SetConfig+0x114>
 800d0fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0fe:	681a      	ldr	r2, [r3, #0]
 800d100:	4b42      	ldr	r3, [pc, #264]	; (800d20c <UART_SetConfig+0x210>)
 800d102:	429a      	cmp	r2, r3
 800d104:	d102      	bne.n	800d10c <UART_SetConfig+0x110>
 800d106:	2320      	movs	r3, #32
 800d108:	64bb      	str	r3, [r7, #72]	; 0x48
 800d10a:	e001      	b.n	800d110 <UART_SetConfig+0x114>
 800d10c:	2300      	movs	r3, #0
 800d10e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d112:	681a      	ldr	r2, [r3, #0]
 800d114:	4b3d      	ldr	r3, [pc, #244]	; (800d20c <UART_SetConfig+0x210>)
 800d116:	429a      	cmp	r2, r3
 800d118:	d005      	beq.n	800d126 <UART_SetConfig+0x12a>
 800d11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d11c:	681a      	ldr	r2, [r3, #0]
 800d11e:	4b3d      	ldr	r3, [pc, #244]	; (800d214 <UART_SetConfig+0x218>)
 800d120:	429a      	cmp	r2, r3
 800d122:	f040 8085 	bne.w	800d230 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d128:	2200      	movs	r2, #0
 800d12a:	623b      	str	r3, [r7, #32]
 800d12c:	627a      	str	r2, [r7, #36]	; 0x24
 800d12e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d132:	f7fc fe4b 	bl	8009dcc <HAL_RCCEx_GetPeriphCLKFreq>
 800d136:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800d138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	f000 80e8 	beq.w	800d310 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d144:	4a39      	ldr	r2, [pc, #228]	; (800d22c <UART_SetConfig+0x230>)
 800d146:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d14a:	461a      	mov	r2, r3
 800d14c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d14e:	fbb3 f3f2 	udiv	r3, r3, r2
 800d152:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d156:	685a      	ldr	r2, [r3, #4]
 800d158:	4613      	mov	r3, r2
 800d15a:	005b      	lsls	r3, r3, #1
 800d15c:	4413      	add	r3, r2
 800d15e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d160:	429a      	cmp	r2, r3
 800d162:	d305      	bcc.n	800d170 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d166:	685b      	ldr	r3, [r3, #4]
 800d168:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d16a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d16c:	429a      	cmp	r2, r3
 800d16e:	d903      	bls.n	800d178 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800d170:	2301      	movs	r3, #1
 800d172:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d176:	e048      	b.n	800d20a <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d17a:	2200      	movs	r2, #0
 800d17c:	61bb      	str	r3, [r7, #24]
 800d17e:	61fa      	str	r2, [r7, #28]
 800d180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d184:	4a29      	ldr	r2, [pc, #164]	; (800d22c <UART_SetConfig+0x230>)
 800d186:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d18a:	b29b      	uxth	r3, r3
 800d18c:	2200      	movs	r2, #0
 800d18e:	613b      	str	r3, [r7, #16]
 800d190:	617a      	str	r2, [r7, #20]
 800d192:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d196:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d19a:	f7f3 fc8b 	bl	8000ab4 <__aeabi_uldivmod>
 800d19e:	4602      	mov	r2, r0
 800d1a0:	460b      	mov	r3, r1
 800d1a2:	4610      	mov	r0, r2
 800d1a4:	4619      	mov	r1, r3
 800d1a6:	f04f 0200 	mov.w	r2, #0
 800d1aa:	f04f 0300 	mov.w	r3, #0
 800d1ae:	020b      	lsls	r3, r1, #8
 800d1b0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d1b4:	0202      	lsls	r2, r0, #8
 800d1b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d1b8:	6849      	ldr	r1, [r1, #4]
 800d1ba:	0849      	lsrs	r1, r1, #1
 800d1bc:	2000      	movs	r0, #0
 800d1be:	460c      	mov	r4, r1
 800d1c0:	4605      	mov	r5, r0
 800d1c2:	eb12 0804 	adds.w	r8, r2, r4
 800d1c6:	eb43 0905 	adc.w	r9, r3, r5
 800d1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1cc:	685b      	ldr	r3, [r3, #4]
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	60bb      	str	r3, [r7, #8]
 800d1d2:	60fa      	str	r2, [r7, #12]
 800d1d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d1d8:	4640      	mov	r0, r8
 800d1da:	4649      	mov	r1, r9
 800d1dc:	f7f3 fc6a 	bl	8000ab4 <__aeabi_uldivmod>
 800d1e0:	4602      	mov	r2, r0
 800d1e2:	460b      	mov	r3, r1
 800d1e4:	4613      	mov	r3, r2
 800d1e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d1e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d1ee:	d308      	bcc.n	800d202 <UART_SetConfig+0x206>
 800d1f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d1f6:	d204      	bcs.n	800d202 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800d1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d1fe:	60da      	str	r2, [r3, #12]
 800d200:	e003      	b.n	800d20a <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800d202:	2301      	movs	r3, #1
 800d204:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800d208:	e082      	b.n	800d310 <UART_SetConfig+0x314>
 800d20a:	e081      	b.n	800d310 <UART_SetConfig+0x314>
 800d20c:	46002400 	.word	0x46002400
 800d210:	cfff69f3 	.word	0xcfff69f3
 800d214:	56002400 	.word	0x56002400
 800d218:	40013800 	.word	0x40013800
 800d21c:	40004400 	.word	0x40004400
 800d220:	40004800 	.word	0x40004800
 800d224:	40004c00 	.word	0x40004c00
 800d228:	40005000 	.word	0x40005000
 800d22c:	0800e360 	.word	0x0800e360
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d232:	69db      	ldr	r3, [r3, #28]
 800d234:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d238:	d13c      	bne.n	800d2b4 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d23a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d23c:	2200      	movs	r2, #0
 800d23e:	603b      	str	r3, [r7, #0]
 800d240:	607a      	str	r2, [r7, #4]
 800d242:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d246:	f7fc fdc1 	bl	8009dcc <HAL_RCCEx_GetPeriphCLKFreq>
 800d24a:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d24c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d05e      	beq.n	800d310 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d256:	4a39      	ldr	r2, [pc, #228]	; (800d33c <UART_SetConfig+0x340>)
 800d258:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d25c:	461a      	mov	r2, r3
 800d25e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d260:	fbb3 f3f2 	udiv	r3, r3, r2
 800d264:	005a      	lsls	r2, r3, #1
 800d266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d268:	685b      	ldr	r3, [r3, #4]
 800d26a:	085b      	lsrs	r3, r3, #1
 800d26c:	441a      	add	r2, r3
 800d26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d270:	685b      	ldr	r3, [r3, #4]
 800d272:	fbb2 f3f3 	udiv	r3, r2, r3
 800d276:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d27a:	2b0f      	cmp	r3, #15
 800d27c:	d916      	bls.n	800d2ac <UART_SetConfig+0x2b0>
 800d27e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d284:	d212      	bcs.n	800d2ac <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d288:	b29b      	uxth	r3, r3
 800d28a:	f023 030f 	bic.w	r3, r3, #15
 800d28e:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d292:	085b      	lsrs	r3, r3, #1
 800d294:	b29b      	uxth	r3, r3
 800d296:	f003 0307 	and.w	r3, r3, #7
 800d29a:	b29a      	uxth	r2, r3
 800d29c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d29e:	4313      	orrs	r3, r2
 800d2a0:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800d2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d2a8:	60da      	str	r2, [r3, #12]
 800d2aa:	e031      	b.n	800d310 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800d2ac:	2301      	movs	r3, #1
 800d2ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d2b2:	e02d      	b.n	800d310 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d2b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	469a      	mov	sl, r3
 800d2ba:	4693      	mov	fp, r2
 800d2bc:	4650      	mov	r0, sl
 800d2be:	4659      	mov	r1, fp
 800d2c0:	f7fc fd84 	bl	8009dcc <HAL_RCCEx_GetPeriphCLKFreq>
 800d2c4:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800d2c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d021      	beq.n	800d310 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d2cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2d0:	4a1a      	ldr	r2, [pc, #104]	; (800d33c <UART_SetConfig+0x340>)
 800d2d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d2d6:	461a      	mov	r2, r3
 800d2d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2da:	fbb3 f2f2 	udiv	r2, r3, r2
 800d2de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2e0:	685b      	ldr	r3, [r3, #4]
 800d2e2:	085b      	lsrs	r3, r3, #1
 800d2e4:	441a      	add	r2, r3
 800d2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2e8:	685b      	ldr	r3, [r3, #4]
 800d2ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2ee:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d2f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2f2:	2b0f      	cmp	r3, #15
 800d2f4:	d909      	bls.n	800d30a <UART_SetConfig+0x30e>
 800d2f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d2fc:	d205      	bcs.n	800d30a <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d2fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d300:	b29a      	uxth	r2, r3
 800d302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	60da      	str	r2, [r3, #12]
 800d308:	e002      	b.n	800d310 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800d30a:	2301      	movs	r3, #1
 800d30c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d312:	2201      	movs	r2, #1
 800d314:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d31a:	2201      	movs	r2, #1
 800d31c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d322:	2200      	movs	r2, #0
 800d324:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d328:	2200      	movs	r2, #0
 800d32a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d32c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800d330:	4618      	mov	r0, r3
 800d332:	3750      	adds	r7, #80	; 0x50
 800d334:	46bd      	mov	sp, r7
 800d336:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d33a:	bf00      	nop
 800d33c:	0800e360 	.word	0x0800e360

0800d340 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d340:	b480      	push	{r7}
 800d342:	b083      	sub	sp, #12
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d34c:	f003 0301 	and.w	r3, r3, #1
 800d350:	2b00      	cmp	r3, #0
 800d352:	d00a      	beq.n	800d36a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	685b      	ldr	r3, [r3, #4]
 800d35a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	430a      	orrs	r2, r1
 800d368:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d36e:	f003 0302 	and.w	r3, r3, #2
 800d372:	2b00      	cmp	r3, #0
 800d374:	d00a      	beq.n	800d38c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	685b      	ldr	r3, [r3, #4]
 800d37c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	430a      	orrs	r2, r1
 800d38a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d390:	f003 0304 	and.w	r3, r3, #4
 800d394:	2b00      	cmp	r3, #0
 800d396:	d00a      	beq.n	800d3ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	685b      	ldr	r3, [r3, #4]
 800d39e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	430a      	orrs	r2, r1
 800d3ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3b2:	f003 0308 	and.w	r3, r3, #8
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d00a      	beq.n	800d3d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	685b      	ldr	r3, [r3, #4]
 800d3c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	430a      	orrs	r2, r1
 800d3ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3d4:	f003 0310 	and.w	r3, r3, #16
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d00a      	beq.n	800d3f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	689b      	ldr	r3, [r3, #8]
 800d3e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	430a      	orrs	r2, r1
 800d3f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3f6:	f003 0320 	and.w	r3, r3, #32
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d00a      	beq.n	800d414 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	689b      	ldr	r3, [r3, #8]
 800d404:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	430a      	orrs	r2, r1
 800d412:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d01a      	beq.n	800d456 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	685b      	ldr	r3, [r3, #4]
 800d426:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	430a      	orrs	r2, r1
 800d434:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d43a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d43e:	d10a      	bne.n	800d456 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	685b      	ldr	r3, [r3, #4]
 800d446:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	430a      	orrs	r2, r1
 800d454:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d45a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d00a      	beq.n	800d478 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	685b      	ldr	r3, [r3, #4]
 800d468:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	430a      	orrs	r2, r1
 800d476:	605a      	str	r2, [r3, #4]
  }
}
 800d478:	bf00      	nop
 800d47a:	370c      	adds	r7, #12
 800d47c:	46bd      	mov	sp, r7
 800d47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d482:	4770      	bx	lr

0800d484 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b086      	sub	sp, #24
 800d488:	af02      	add	r7, sp, #8
 800d48a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2200      	movs	r2, #0
 800d490:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d494:	f7f5 fbc4 	bl	8002c20 <HAL_GetTick>
 800d498:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	f003 0308 	and.w	r3, r3, #8
 800d4a4:	2b08      	cmp	r3, #8
 800d4a6:	d10e      	bne.n	800d4c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d4a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d4ac:	9300      	str	r3, [sp, #0]
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d4b6:	6878      	ldr	r0, [r7, #4]
 800d4b8:	f000 f82f 	bl	800d51a <UART_WaitOnFlagUntilTimeout>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d001      	beq.n	800d4c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d4c2:	2303      	movs	r3, #3
 800d4c4:	e025      	b.n	800d512 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	f003 0304 	and.w	r3, r3, #4
 800d4d0:	2b04      	cmp	r3, #4
 800d4d2:	d10e      	bne.n	800d4f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d4d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d4d8:	9300      	str	r3, [sp, #0]
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	2200      	movs	r2, #0
 800d4de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d4e2:	6878      	ldr	r0, [r7, #4]
 800d4e4:	f000 f819 	bl	800d51a <UART_WaitOnFlagUntilTimeout>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d001      	beq.n	800d4f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d4ee:	2303      	movs	r3, #3
 800d4f0:	e00f      	b.n	800d512 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2220      	movs	r2, #32
 800d4f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2220      	movs	r2, #32
 800d4fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	2200      	movs	r2, #0
 800d506:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2200      	movs	r2, #0
 800d50c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d510:	2300      	movs	r3, #0
}
 800d512:	4618      	mov	r0, r3
 800d514:	3710      	adds	r7, #16
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}

0800d51a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d51a:	b580      	push	{r7, lr}
 800d51c:	b09c      	sub	sp, #112	; 0x70
 800d51e:	af00      	add	r7, sp, #0
 800d520:	60f8      	str	r0, [r7, #12]
 800d522:	60b9      	str	r1, [r7, #8]
 800d524:	603b      	str	r3, [r7, #0]
 800d526:	4613      	mov	r3, r2
 800d528:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d52a:	e0a9      	b.n	800d680 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d52c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d52e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d532:	f000 80a5 	beq.w	800d680 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d536:	f7f5 fb73 	bl	8002c20 <HAL_GetTick>
 800d53a:	4602      	mov	r2, r0
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	1ad3      	subs	r3, r2, r3
 800d540:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d542:	429a      	cmp	r2, r3
 800d544:	d302      	bcc.n	800d54c <UART_WaitOnFlagUntilTimeout+0x32>
 800d546:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d140      	bne.n	800d5ce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d554:	e853 3f00 	ldrex	r3, [r3]
 800d558:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d55a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d55c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d560:	667b      	str	r3, [r7, #100]	; 0x64
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	461a      	mov	r2, r3
 800d568:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d56a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d56c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d56e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d570:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d572:	e841 2300 	strex	r3, r2, [r1]
 800d576:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d578:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d1e6      	bne.n	800d54c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	3308      	adds	r3, #8
 800d584:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d588:	e853 3f00 	ldrex	r3, [r3]
 800d58c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d58e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d590:	f023 0301 	bic.w	r3, r3, #1
 800d594:	663b      	str	r3, [r7, #96]	; 0x60
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	3308      	adds	r3, #8
 800d59c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d59e:	64ba      	str	r2, [r7, #72]	; 0x48
 800d5a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d5a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d5a6:	e841 2300 	strex	r3, r2, [r1]
 800d5aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d5ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d1e5      	bne.n	800d57e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	2220      	movs	r2, #32
 800d5b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	2220      	movs	r2, #32
 800d5be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d5ca:	2303      	movs	r3, #3
 800d5cc:	e069      	b.n	800d6a2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	f003 0304 	and.w	r3, r3, #4
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d051      	beq.n	800d680 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	69db      	ldr	r3, [r3, #28]
 800d5e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d5e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d5ea:	d149      	bne.n	800d680 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d5f4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5fe:	e853 3f00 	ldrex	r3, [r3]
 800d602:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d606:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d60a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	461a      	mov	r2, r3
 800d612:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d614:	637b      	str	r3, [r7, #52]	; 0x34
 800d616:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d618:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d61a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d61c:	e841 2300 	strex	r3, r2, [r1]
 800d620:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d624:	2b00      	cmp	r3, #0
 800d626:	d1e6      	bne.n	800d5f6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	3308      	adds	r3, #8
 800d62e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d630:	697b      	ldr	r3, [r7, #20]
 800d632:	e853 3f00 	ldrex	r3, [r3]
 800d636:	613b      	str	r3, [r7, #16]
   return(result);
 800d638:	693b      	ldr	r3, [r7, #16]
 800d63a:	f023 0301 	bic.w	r3, r3, #1
 800d63e:	66bb      	str	r3, [r7, #104]	; 0x68
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	3308      	adds	r3, #8
 800d646:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d648:	623a      	str	r2, [r7, #32]
 800d64a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d64c:	69f9      	ldr	r1, [r7, #28]
 800d64e:	6a3a      	ldr	r2, [r7, #32]
 800d650:	e841 2300 	strex	r3, r2, [r1]
 800d654:	61bb      	str	r3, [r7, #24]
   return(result);
 800d656:	69bb      	ldr	r3, [r7, #24]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d1e5      	bne.n	800d628 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	2220      	movs	r2, #32
 800d660:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	2220      	movs	r2, #32
 800d668:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	2220      	movs	r2, #32
 800d670:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	2200      	movs	r2, #0
 800d678:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d67c:	2303      	movs	r3, #3
 800d67e:	e010      	b.n	800d6a2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	69da      	ldr	r2, [r3, #28]
 800d686:	68bb      	ldr	r3, [r7, #8]
 800d688:	4013      	ands	r3, r2
 800d68a:	68ba      	ldr	r2, [r7, #8]
 800d68c:	429a      	cmp	r2, r3
 800d68e:	bf0c      	ite	eq
 800d690:	2301      	moveq	r3, #1
 800d692:	2300      	movne	r3, #0
 800d694:	b2db      	uxtb	r3, r3
 800d696:	461a      	mov	r2, r3
 800d698:	79fb      	ldrb	r3, [r7, #7]
 800d69a:	429a      	cmp	r2, r3
 800d69c:	f43f af46 	beq.w	800d52c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d6a0:	2300      	movs	r3, #0
}
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	3770      	adds	r7, #112	; 0x70
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd80      	pop	{r7, pc}
	...

0800d6ac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b098      	sub	sp, #96	; 0x60
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	60f8      	str	r0, [r7, #12]
 800d6b4:	60b9      	str	r1, [r7, #8]
 800d6b6:	4613      	mov	r3, r2
 800d6b8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint16_t nbByte = Size;
 800d6ba:	88fb      	ldrh	r3, [r7, #6]
 800d6bc:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

  huart->pRxBuffPtr = pData;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	68ba      	ldr	r2, [r7, #8]
 800d6c4:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	88fa      	ldrh	r2, [r7, #6]
 800d6ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	2222      	movs	r2, #34	; 0x22
 800d6da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d074      	beq.n	800d7d0 <UART_Start_Receive_DMA+0x124>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6ea:	4a66      	ldr	r2, [pc, #408]	; (800d884 <UART_Start_Receive_DMA+0x1d8>)
 800d6ec:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6f2:	4a65      	ldr	r2, [pc, #404]	; (800d888 <UART_Start_Receive_DMA+0x1dc>)
 800d6f4:	665a      	str	r2, [r3, #100]	; 0x64

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6fa:	4a64      	ldr	r2, [pc, #400]	; (800d88c <UART_Start_Receive_DMA+0x1e0>)
 800d6fc:	669a      	str	r2, [r3, #104]	; 0x68

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d702:	2200      	movs	r2, #0
 800d704:	66da      	str	r2, [r3, #108]	; 0x6c

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, so nbByte should be equal to Size * 2 */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	689b      	ldr	r3, [r3, #8]
 800d70a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d70e:	d107      	bne.n	800d720 <UART_Start_Receive_DMA+0x74>
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	691b      	ldr	r3, [r3, #16]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d103      	bne.n	800d720 <UART_Start_Receive_DMA+0x74>
    {
      nbByte = Size * 2U;
 800d718:	88fb      	ldrh	r3, [r7, #6]
 800d71a:	005b      	lsls	r3, r3, #1
 800d71c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    }

    /* Check linked list mode */
    if ((huart->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d724:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d02e      	beq.n	800d78c <UART_Start_Receive_DMA+0xe0>
    {
      if ((huart->hdmarx->LinkedListQueue != NULL) && (huart->hdmarx->LinkedListQueue->Head != NULL))
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d732:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d734:	2b00      	cmp	r3, #0
 800d736:	d025      	beq.n	800d784 <UART_Start_Receive_DMA+0xd8>
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d73c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d01f      	beq.n	800d784 <UART_Start_Receive_DMA+0xd8>
      {
        /* Set DMA data size */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800d750:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
          (uint32_t)&huart->Instance->RDR;
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	f103 0224 	add.w	r2, r3, #36	; 0x24
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d75e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)huart->pRxBuffPtr;
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d76c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	611a      	str	r2, [r3, #16]

        /* Enable the UART receive DMA channel */
        status = HAL_DMAEx_List_Start_IT(huart->hdmarx);
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d776:	4618      	mov	r0, r3
 800d778:	f7f8 f94e 	bl	8005a18 <HAL_DMAEx_List_Start_IT>
 800d77c:	4603      	mov	r3, r0
 800d77e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d782:	e013      	b.n	800d7ac <UART_Start_Receive_DMA+0x100>
      }
      else
      {
        /* Update status */
        status = HAL_ERROR;
 800d784:	2301      	movs	r3, #1
 800d786:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d78a:	e00f      	b.n	800d7ac <UART_Start_Receive_DMA+0x100>
      }
    }
    else
    {
      /* Enable the UART receive DMA channel */
      status = HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, nbByte);
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	3324      	adds	r3, #36	; 0x24
 800d796:	4619      	mov	r1, r3
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d79c:	461a      	mov	r2, r3
 800d79e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800d7a2:	f7f7 fd30 	bl	8005206 <HAL_DMA_Start_IT>
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }

    if (status != HAL_OK)
 800d7ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d00d      	beq.n	800d7d0 <UART_Start_Receive_DMA+0x124>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	2210      	movs	r2, #16
 800d7b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	2200      	movs	r2, #0
 800d7c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	2220      	movs	r2, #32
 800d7c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800d7cc:	2301      	movs	r3, #1
 800d7ce:	e055      	b.n	800d87c <UART_Start_Receive_DMA+0x1d0>
    }
  }
  __HAL_UNLOCK(huart);
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	691b      	ldr	r3, [r3, #16]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d018      	beq.n	800d812 <UART_Start_Receive_DMA+0x166>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7e8:	e853 3f00 	ldrex	r3, [r3]
 800d7ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d7ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d7f4:	65bb      	str	r3, [r7, #88]	; 0x58
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	461a      	mov	r2, r3
 800d7fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d7fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d800:	64ba      	str	r2, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d802:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d804:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d806:	e841 2300 	strex	r3, r2, [r1]
 800d80a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800d80c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d1e6      	bne.n	800d7e0 <UART_Start_Receive_DMA+0x134>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	3308      	adds	r3, #8
 800d818:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d81c:	e853 3f00 	ldrex	r3, [r3]
 800d820:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d824:	f043 0301 	orr.w	r3, r3, #1
 800d828:	657b      	str	r3, [r7, #84]	; 0x54
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	3308      	adds	r3, #8
 800d830:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d832:	63ba      	str	r2, [r7, #56]	; 0x38
 800d834:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d836:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d838:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d83a:	e841 2300 	strex	r3, r2, [r1]
 800d83e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d842:	2b00      	cmp	r3, #0
 800d844:	d1e5      	bne.n	800d812 <UART_Start_Receive_DMA+0x166>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	3308      	adds	r3, #8
 800d84c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d84e:	69bb      	ldr	r3, [r7, #24]
 800d850:	e853 3f00 	ldrex	r3, [r3]
 800d854:	617b      	str	r3, [r7, #20]
   return(result);
 800d856:	697b      	ldr	r3, [r7, #20]
 800d858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d85c:	653b      	str	r3, [r7, #80]	; 0x50
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	3308      	adds	r3, #8
 800d864:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d866:	627a      	str	r2, [r7, #36]	; 0x24
 800d868:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d86a:	6a39      	ldr	r1, [r7, #32]
 800d86c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d86e:	e841 2300 	strex	r3, r2, [r1]
 800d872:	61fb      	str	r3, [r7, #28]
   return(result);
 800d874:	69fb      	ldr	r3, [r7, #28]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d1e5      	bne.n	800d846 <UART_Start_Receive_DMA+0x19a>

  return HAL_OK;
 800d87a:	2300      	movs	r3, #0
}
 800d87c:	4618      	mov	r0, r3
 800d87e:	3760      	adds	r7, #96	; 0x60
 800d880:	46bd      	mov	sp, r7
 800d882:	bd80      	pop	{r7, pc}
 800d884:	0800d9df 	.word	0x0800d9df
 800d888:	0800dacb 	.word	0x0800dacb
 800d88c:	0800db03 	.word	0x0800db03

0800d890 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d890:	b480      	push	{r7}
 800d892:	b08f      	sub	sp, #60	; 0x3c
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d89e:	6a3b      	ldr	r3, [r7, #32]
 800d8a0:	e853 3f00 	ldrex	r3, [r3]
 800d8a4:	61fb      	str	r3, [r7, #28]
   return(result);
 800d8a6:	69fb      	ldr	r3, [r7, #28]
 800d8a8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d8ac:	637b      	str	r3, [r7, #52]	; 0x34
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	461a      	mov	r2, r3
 800d8b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d8b8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d8bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d8be:	e841 2300 	strex	r3, r2, [r1]
 800d8c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d1e6      	bne.n	800d898 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	3308      	adds	r3, #8
 800d8d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	e853 3f00 	ldrex	r3, [r3]
 800d8d8:	60bb      	str	r3, [r7, #8]
   return(result);
 800d8da:	68bb      	ldr	r3, [r7, #8]
 800d8dc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d8e0:	633b      	str	r3, [r7, #48]	; 0x30
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	3308      	adds	r3, #8
 800d8e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8ea:	61ba      	str	r2, [r7, #24]
 800d8ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8ee:	6979      	ldr	r1, [r7, #20]
 800d8f0:	69ba      	ldr	r2, [r7, #24]
 800d8f2:	e841 2300 	strex	r3, r2, [r1]
 800d8f6:	613b      	str	r3, [r7, #16]
   return(result);
 800d8f8:	693b      	ldr	r3, [r7, #16]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d1e5      	bne.n	800d8ca <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	2220      	movs	r2, #32
 800d902:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800d906:	bf00      	nop
 800d908:	373c      	adds	r7, #60	; 0x3c
 800d90a:	46bd      	mov	sp, r7
 800d90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d910:	4770      	bx	lr

0800d912 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d912:	b480      	push	{r7}
 800d914:	b095      	sub	sp, #84	; 0x54
 800d916:	af00      	add	r7, sp, #0
 800d918:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d922:	e853 3f00 	ldrex	r3, [r3]
 800d926:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d92a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d92e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	461a      	mov	r2, r3
 800d936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d938:	643b      	str	r3, [r7, #64]	; 0x40
 800d93a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d93c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d93e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d940:	e841 2300 	strex	r3, r2, [r1]
 800d944:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d1e6      	bne.n	800d91a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	3308      	adds	r3, #8
 800d952:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d954:	6a3b      	ldr	r3, [r7, #32]
 800d956:	e853 3f00 	ldrex	r3, [r3]
 800d95a:	61fb      	str	r3, [r7, #28]
   return(result);
 800d95c:	69fb      	ldr	r3, [r7, #28]
 800d95e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d962:	f023 0301 	bic.w	r3, r3, #1
 800d966:	64bb      	str	r3, [r7, #72]	; 0x48
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	3308      	adds	r3, #8
 800d96e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d970:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d972:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d974:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d976:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d978:	e841 2300 	strex	r3, r2, [r1]
 800d97c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d980:	2b00      	cmp	r3, #0
 800d982:	d1e3      	bne.n	800d94c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d988:	2b01      	cmp	r3, #1
 800d98a:	d118      	bne.n	800d9be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	e853 3f00 	ldrex	r3, [r3]
 800d998:	60bb      	str	r3, [r7, #8]
   return(result);
 800d99a:	68bb      	ldr	r3, [r7, #8]
 800d99c:	f023 0310 	bic.w	r3, r3, #16
 800d9a0:	647b      	str	r3, [r7, #68]	; 0x44
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	461a      	mov	r2, r3
 800d9a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9aa:	61bb      	str	r3, [r7, #24]
 800d9ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9ae:	6979      	ldr	r1, [r7, #20]
 800d9b0:	69ba      	ldr	r2, [r7, #24]
 800d9b2:	e841 2300 	strex	r3, r2, [r1]
 800d9b6:	613b      	str	r3, [r7, #16]
   return(result);
 800d9b8:	693b      	ldr	r3, [r7, #16]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d1e6      	bne.n	800d98c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2220      	movs	r2, #32
 800d9c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d9d2:	bf00      	nop
 800d9d4:	3754      	adds	r7, #84	; 0x54
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9dc:	4770      	bx	lr

0800d9de <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d9de:	b580      	push	{r7, lr}
 800d9e0:	b096      	sub	sp, #88	; 0x58
 800d9e2:	af00      	add	r7, sp, #0
 800d9e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d9ea:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9f0:	2b81      	cmp	r3, #129	; 0x81
 800d9f2:	d057      	beq.n	800daa4 <UART_DMAReceiveCplt+0xc6>
  {
    huart->RxXferCount = 0U;
 800d9f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d9fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da04:	e853 3f00 	ldrex	r3, [r3]
 800da08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800da0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800da10:	653b      	str	r3, [r7, #80]	; 0x50
 800da12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	461a      	mov	r2, r3
 800da18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da1a:	647b      	str	r3, [r7, #68]	; 0x44
 800da1c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800da20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800da22:	e841 2300 	strex	r3, r2, [r1]
 800da26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800da28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d1e6      	bne.n	800d9fc <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	3308      	adds	r3, #8
 800da34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da38:	e853 3f00 	ldrex	r3, [r3]
 800da3c:	623b      	str	r3, [r7, #32]
   return(result);
 800da3e:	6a3b      	ldr	r3, [r7, #32]
 800da40:	f023 0301 	bic.w	r3, r3, #1
 800da44:	64fb      	str	r3, [r7, #76]	; 0x4c
 800da46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	3308      	adds	r3, #8
 800da4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800da4e:	633a      	str	r2, [r7, #48]	; 0x30
 800da50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800da54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da56:	e841 2300 	strex	r3, r2, [r1]
 800da5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800da5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d1e5      	bne.n	800da2e <UART_DMAReceiveCplt+0x50>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800da62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da64:	2220      	movs	r2, #32
 800da66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da6e:	2b01      	cmp	r3, #1
 800da70:	d118      	bne.n	800daa4 <UART_DMAReceiveCplt+0xc6>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800da72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da78:	693b      	ldr	r3, [r7, #16]
 800da7a:	e853 3f00 	ldrex	r3, [r3]
 800da7e:	60fb      	str	r3, [r7, #12]
   return(result);
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	f023 0310 	bic.w	r3, r3, #16
 800da86:	64bb      	str	r3, [r7, #72]	; 0x48
 800da88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	461a      	mov	r2, r3
 800da8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da90:	61fb      	str	r3, [r7, #28]
 800da92:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da94:	69b9      	ldr	r1, [r7, #24]
 800da96:	69fa      	ldr	r2, [r7, #28]
 800da98:	e841 2300 	strex	r3, r2, [r1]
 800da9c:	617b      	str	r3, [r7, #20]
   return(result);
 800da9e:	697b      	ldr	r3, [r7, #20]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d1e6      	bne.n	800da72 <UART_DMAReceiveCplt+0x94>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800daa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800daa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800daa8:	2b01      	cmp	r3, #1
 800daaa:	d107      	bne.n	800dabc <UART_DMAReceiveCplt+0xde>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800daac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800daae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dab2:	4619      	mov	r1, r3
 800dab4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800dab6:	f7ff fa95 	bl	800cfe4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800daba:	e002      	b.n	800dac2 <UART_DMAReceiveCplt+0xe4>
    HAL_UART_RxCpltCallback(huart);
 800dabc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800dabe:	f7ff fa73 	bl	800cfa8 <HAL_UART_RxCpltCallback>
}
 800dac2:	bf00      	nop
 800dac4:	3758      	adds	r7, #88	; 0x58
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}

0800daca <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800daca:	b580      	push	{r7, lr}
 800dacc:	b084      	sub	sp, #16
 800dace:	af00      	add	r7, sp, #0
 800dad0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dad6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dadc:	2b01      	cmp	r3, #1
 800dade:	d109      	bne.n	800daf4 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dae6:	085b      	lsrs	r3, r3, #1
 800dae8:	b29b      	uxth	r3, r3
 800daea:	4619      	mov	r1, r3
 800daec:	68f8      	ldr	r0, [r7, #12]
 800daee:	f7ff fa79 	bl	800cfe4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800daf2:	e002      	b.n	800dafa <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800daf4:	68f8      	ldr	r0, [r7, #12]
 800daf6:	f7ff fa61 	bl	800cfbc <HAL_UART_RxHalfCpltCallback>
}
 800dafa:	bf00      	nop
 800dafc:	3710      	adds	r7, #16
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}

0800db02 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800db02:	b580      	push	{r7, lr}
 800db04:	b086      	sub	sp, #24
 800db06:	af00      	add	r7, sp, #0
 800db08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db0e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800db10:	697b      	ldr	r3, [r7, #20]
 800db12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db16:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800db18:	697b      	ldr	r3, [r7, #20]
 800db1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db1e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800db20:	697b      	ldr	r3, [r7, #20]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	689b      	ldr	r3, [r3, #8]
 800db26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db2a:	2b80      	cmp	r3, #128	; 0x80
 800db2c:	d109      	bne.n	800db42 <UART_DMAError+0x40>
 800db2e:	693b      	ldr	r3, [r7, #16]
 800db30:	2b21      	cmp	r3, #33	; 0x21
 800db32:	d106      	bne.n	800db42 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800db34:	697b      	ldr	r3, [r7, #20]
 800db36:	2200      	movs	r2, #0
 800db38:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800db3c:	6978      	ldr	r0, [r7, #20]
 800db3e:	f7ff fea7 	bl	800d890 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800db42:	697b      	ldr	r3, [r7, #20]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	689b      	ldr	r3, [r3, #8]
 800db48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db4c:	2b40      	cmp	r3, #64	; 0x40
 800db4e:	d109      	bne.n	800db64 <UART_DMAError+0x62>
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	2b22      	cmp	r3, #34	; 0x22
 800db54:	d106      	bne.n	800db64 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800db56:	697b      	ldr	r3, [r7, #20]
 800db58:	2200      	movs	r2, #0
 800db5a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800db5e:	6978      	ldr	r0, [r7, #20]
 800db60:	f7ff fed7 	bl	800d912 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800db64:	697b      	ldr	r3, [r7, #20]
 800db66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db6a:	f043 0210 	orr.w	r2, r3, #16
 800db6e:	697b      	ldr	r3, [r7, #20]
 800db70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800db74:	6978      	ldr	r0, [r7, #20]
 800db76:	f7ff fa2b 	bl	800cfd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800db7a:	bf00      	nop
 800db7c:	3718      	adds	r7, #24
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}

0800db82 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800db82:	b580      	push	{r7, lr}
 800db84:	b084      	sub	sp, #16
 800db86:	af00      	add	r7, sp, #0
 800db88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	2200      	movs	r2, #0
 800db94:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	2200      	movs	r2, #0
 800db9c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dba0:	68f8      	ldr	r0, [r7, #12]
 800dba2:	f7ff fa15 	bl	800cfd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dba6:	bf00      	nop
 800dba8:	3710      	adds	r7, #16
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	bd80      	pop	{r7, pc}

0800dbae <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800dbae:	b480      	push	{r7}
 800dbb0:	b08f      	sub	sp, #60	; 0x3c
 800dbb2:	af00      	add	r7, sp, #0
 800dbb4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dbbc:	2b21      	cmp	r3, #33	; 0x21
 800dbbe:	d14c      	bne.n	800dc5a <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800dbc6:	b29b      	uxth	r3, r3
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d132      	bne.n	800dc32 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbd2:	6a3b      	ldr	r3, [r7, #32]
 800dbd4:	e853 3f00 	ldrex	r3, [r3]
 800dbd8:	61fb      	str	r3, [r7, #28]
   return(result);
 800dbda:	69fb      	ldr	r3, [r7, #28]
 800dbdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dbe0:	637b      	str	r3, [r7, #52]	; 0x34
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	461a      	mov	r2, r3
 800dbe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dbec:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dbf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dbf2:	e841 2300 	strex	r3, r2, [r1]
 800dbf6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dbf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d1e6      	bne.n	800dbcc <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	e853 3f00 	ldrex	r3, [r3]
 800dc0a:	60bb      	str	r3, [r7, #8]
   return(result);
 800dc0c:	68bb      	ldr	r3, [r7, #8]
 800dc0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc12:	633b      	str	r3, [r7, #48]	; 0x30
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	461a      	mov	r2, r3
 800dc1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc1c:	61bb      	str	r3, [r7, #24]
 800dc1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc20:	6979      	ldr	r1, [r7, #20]
 800dc22:	69ba      	ldr	r2, [r7, #24]
 800dc24:	e841 2300 	strex	r3, r2, [r1]
 800dc28:	613b      	str	r3, [r7, #16]
   return(result);
 800dc2a:	693b      	ldr	r3, [r7, #16]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d1e6      	bne.n	800dbfe <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800dc30:	e013      	b.n	800dc5a <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc36:	781a      	ldrb	r2, [r3, #0]
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc42:	1c5a      	adds	r2, r3, #1
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800dc4e:	b29b      	uxth	r3, r3
 800dc50:	3b01      	subs	r3, #1
 800dc52:	b29a      	uxth	r2, r3
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800dc5a:	bf00      	nop
 800dc5c:	373c      	adds	r7, #60	; 0x3c
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc64:	4770      	bx	lr

0800dc66 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800dc66:	b480      	push	{r7}
 800dc68:	b091      	sub	sp, #68	; 0x44
 800dc6a:	af00      	add	r7, sp, #0
 800dc6c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dc74:	2b21      	cmp	r3, #33	; 0x21
 800dc76:	d151      	bne.n	800dd1c <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800dc7e:	b29b      	uxth	r3, r3
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d132      	bne.n	800dcea <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc8c:	e853 3f00 	ldrex	r3, [r3]
 800dc90:	623b      	str	r3, [r7, #32]
   return(result);
 800dc92:	6a3b      	ldr	r3, [r7, #32]
 800dc94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dc98:	63bb      	str	r3, [r7, #56]	; 0x38
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	461a      	mov	r2, r3
 800dca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dca2:	633b      	str	r3, [r7, #48]	; 0x30
 800dca4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dca6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dcaa:	e841 2300 	strex	r3, r2, [r1]
 800dcae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dcb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d1e6      	bne.n	800dc84 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcbc:	693b      	ldr	r3, [r7, #16]
 800dcbe:	e853 3f00 	ldrex	r3, [r3]
 800dcc2:	60fb      	str	r3, [r7, #12]
   return(result);
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcca:	637b      	str	r3, [r7, #52]	; 0x34
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	461a      	mov	r2, r3
 800dcd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcd4:	61fb      	str	r3, [r7, #28]
 800dcd6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcd8:	69b9      	ldr	r1, [r7, #24]
 800dcda:	69fa      	ldr	r2, [r7, #28]
 800dcdc:	e841 2300 	strex	r3, r2, [r1]
 800dce0:	617b      	str	r3, [r7, #20]
   return(result);
 800dce2:	697b      	ldr	r3, [r7, #20]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d1e6      	bne.n	800dcb6 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800dce8:	e018      	b.n	800dd1c <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dcee:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800dcf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcf2:	881b      	ldrh	r3, [r3, #0]
 800dcf4:	461a      	mov	r2, r3
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dcfe:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd04:	1c9a      	adds	r2, r3, #2
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800dd10:	b29b      	uxth	r3, r3
 800dd12:	3b01      	subs	r3, #1
 800dd14:	b29a      	uxth	r2, r3
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800dd1c:	bf00      	nop
 800dd1e:	3744      	adds	r7, #68	; 0x44
 800dd20:	46bd      	mov	sp, r7
 800dd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd26:	4770      	bx	lr

0800dd28 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800dd28:	b480      	push	{r7}
 800dd2a:	b091      	sub	sp, #68	; 0x44
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dd36:	2b21      	cmp	r3, #33	; 0x21
 800dd38:	d160      	bne.n	800ddfc <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dd40:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800dd42:	e057      	b.n	800ddf4 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800dd4a:	b29b      	uxth	r3, r3
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d133      	bne.n	800ddb8 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	3308      	adds	r3, #8
 800dd56:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd5a:	e853 3f00 	ldrex	r3, [r3]
 800dd5e:	623b      	str	r3, [r7, #32]
   return(result);
 800dd60:	6a3b      	ldr	r3, [r7, #32]
 800dd62:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800dd66:	63bb      	str	r3, [r7, #56]	; 0x38
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	3308      	adds	r3, #8
 800dd6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dd70:	633a      	str	r2, [r7, #48]	; 0x30
 800dd72:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dd76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd78:	e841 2300 	strex	r3, r2, [r1]
 800dd7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dd7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d1e5      	bne.n	800dd50 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd8a:	693b      	ldr	r3, [r7, #16]
 800dd8c:	e853 3f00 	ldrex	r3, [r3]
 800dd90:	60fb      	str	r3, [r7, #12]
   return(result);
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd98:	637b      	str	r3, [r7, #52]	; 0x34
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	461a      	mov	r2, r3
 800dda0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dda2:	61fb      	str	r3, [r7, #28]
 800dda4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dda6:	69b9      	ldr	r1, [r7, #24]
 800dda8:	69fa      	ldr	r2, [r7, #28]
 800ddaa:	e841 2300 	strex	r3, r2, [r1]
 800ddae:	617b      	str	r3, [r7, #20]
   return(result);
 800ddb0:	697b      	ldr	r3, [r7, #20]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d1e6      	bne.n	800dd84 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800ddb6:	e021      	b.n	800ddfc <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	69db      	ldr	r3, [r3, #28]
 800ddbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d013      	beq.n	800ddee <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ddca:	781a      	ldrb	r2, [r3, #0]
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ddd6:	1c5a      	adds	r2, r3, #1
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800dde2:	b29b      	uxth	r3, r3
 800dde4:	3b01      	subs	r3, #1
 800dde6:	b29a      	uxth	r2, r3
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800ddee:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ddf0:	3b01      	subs	r3, #1
 800ddf2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ddf4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d1a4      	bne.n	800dd44 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800ddfa:	e7ff      	b.n	800ddfc <UART_TxISR_8BIT_FIFOEN+0xd4>
 800ddfc:	bf00      	nop
 800ddfe:	3744      	adds	r7, #68	; 0x44
 800de00:	46bd      	mov	sp, r7
 800de02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de06:	4770      	bx	lr

0800de08 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800de08:	b480      	push	{r7}
 800de0a:	b091      	sub	sp, #68	; 0x44
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de16:	2b21      	cmp	r3, #33	; 0x21
 800de18:	d165      	bne.n	800dee6 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800de20:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800de22:	e05c      	b.n	800dede <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800de2a:	b29b      	uxth	r3, r3
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d133      	bne.n	800de98 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	3308      	adds	r3, #8
 800de36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de38:	6a3b      	ldr	r3, [r7, #32]
 800de3a:	e853 3f00 	ldrex	r3, [r3]
 800de3e:	61fb      	str	r3, [r7, #28]
   return(result);
 800de40:	69fb      	ldr	r3, [r7, #28]
 800de42:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800de46:	637b      	str	r3, [r7, #52]	; 0x34
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	3308      	adds	r3, #8
 800de4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de50:	62fa      	str	r2, [r7, #44]	; 0x2c
 800de52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800de56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de58:	e841 2300 	strex	r3, r2, [r1]
 800de5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800de5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de60:	2b00      	cmp	r3, #0
 800de62:	d1e5      	bne.n	800de30 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	e853 3f00 	ldrex	r3, [r3]
 800de70:	60bb      	str	r3, [r7, #8]
   return(result);
 800de72:	68bb      	ldr	r3, [r7, #8]
 800de74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de78:	633b      	str	r3, [r7, #48]	; 0x30
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	461a      	mov	r2, r3
 800de80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de82:	61bb      	str	r3, [r7, #24]
 800de84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de86:	6979      	ldr	r1, [r7, #20]
 800de88:	69ba      	ldr	r2, [r7, #24]
 800de8a:	e841 2300 	strex	r3, r2, [r1]
 800de8e:	613b      	str	r3, [r7, #16]
   return(result);
 800de90:	693b      	ldr	r3, [r7, #16]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d1e6      	bne.n	800de64 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800de96:	e026      	b.n	800dee6 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	69db      	ldr	r3, [r3, #28]
 800de9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d018      	beq.n	800ded8 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800deaa:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800deac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deae:	881b      	ldrh	r3, [r3, #0]
 800deb0:	461a      	mov	r2, r3
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800deba:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dec0:	1c9a      	adds	r2, r3, #2
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800decc:	b29b      	uxth	r3, r3
 800dece:	3b01      	subs	r3, #1
 800ded0:	b29a      	uxth	r2, r3
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800ded8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800deda:	3b01      	subs	r3, #1
 800dedc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800dede:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d19f      	bne.n	800de24 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800dee4:	e7ff      	b.n	800dee6 <UART_TxISR_16BIT_FIFOEN+0xde>
 800dee6:	bf00      	nop
 800dee8:	3744      	adds	r7, #68	; 0x44
 800deea:	46bd      	mov	sp, r7
 800deec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def0:	4770      	bx	lr

0800def2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800def2:	b580      	push	{r7, lr}
 800def4:	b088      	sub	sp, #32
 800def6:	af00      	add	r7, sp, #0
 800def8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	e853 3f00 	ldrex	r3, [r3]
 800df06:	60bb      	str	r3, [r7, #8]
   return(result);
 800df08:	68bb      	ldr	r3, [r7, #8]
 800df0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800df0e:	61fb      	str	r3, [r7, #28]
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	461a      	mov	r2, r3
 800df16:	69fb      	ldr	r3, [r7, #28]
 800df18:	61bb      	str	r3, [r7, #24]
 800df1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df1c:	6979      	ldr	r1, [r7, #20]
 800df1e:	69ba      	ldr	r2, [r7, #24]
 800df20:	e841 2300 	strex	r3, r2, [r1]
 800df24:	613b      	str	r3, [r7, #16]
   return(result);
 800df26:	693b      	ldr	r3, [r7, #16]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d1e6      	bne.n	800defa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2220      	movs	r2, #32
 800df30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	2200      	movs	r2, #0
 800df38:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800df3a:	6878      	ldr	r0, [r7, #4]
 800df3c:	f7ff f82a 	bl	800cf94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800df40:	bf00      	nop
 800df42:	3720      	adds	r7, #32
 800df44:	46bd      	mov	sp, r7
 800df46:	bd80      	pop	{r7, pc}

0800df48 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800df48:	b480      	push	{r7}
 800df4a:	b083      	sub	sp, #12
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800df50:	bf00      	nop
 800df52:	370c      	adds	r7, #12
 800df54:	46bd      	mov	sp, r7
 800df56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5a:	4770      	bx	lr

0800df5c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800df5c:	b480      	push	{r7}
 800df5e:	b083      	sub	sp, #12
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800df64:	bf00      	nop
 800df66:	370c      	adds	r7, #12
 800df68:	46bd      	mov	sp, r7
 800df6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6e:	4770      	bx	lr

0800df70 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800df70:	b480      	push	{r7}
 800df72:	b085      	sub	sp, #20
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800df7e:	2b01      	cmp	r3, #1
 800df80:	d101      	bne.n	800df86 <HAL_UARTEx_DisableFifoMode+0x16>
 800df82:	2302      	movs	r3, #2
 800df84:	e027      	b.n	800dfd6 <HAL_UARTEx_DisableFifoMode+0x66>
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	2201      	movs	r2, #1
 800df8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	2224      	movs	r2, #36	; 0x24
 800df92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	681a      	ldr	r2, [r3, #0]
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	f022 0201 	bic.w	r2, r2, #1
 800dfac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800dfb4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	2200      	movs	r2, #0
 800dfba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	68fa      	ldr	r2, [r7, #12]
 800dfc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	2220      	movs	r2, #32
 800dfc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	2200      	movs	r2, #0
 800dfd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dfd4:	2300      	movs	r3, #0
}
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	3714      	adds	r7, #20
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe0:	4770      	bx	lr

0800dfe2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dfe2:	b580      	push	{r7, lr}
 800dfe4:	b084      	sub	sp, #16
 800dfe6:	af00      	add	r7, sp, #0
 800dfe8:	6078      	str	r0, [r7, #4]
 800dfea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dff2:	2b01      	cmp	r3, #1
 800dff4:	d101      	bne.n	800dffa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dff6:	2302      	movs	r3, #2
 800dff8:	e02d      	b.n	800e056 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	2201      	movs	r2, #1
 800dffe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	2224      	movs	r2, #36	; 0x24
 800e006:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	681a      	ldr	r2, [r3, #0]
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	f022 0201 	bic.w	r2, r2, #1
 800e020:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	689b      	ldr	r3, [r3, #8]
 800e028:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	683a      	ldr	r2, [r7, #0]
 800e032:	430a      	orrs	r2, r1
 800e034:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e036:	6878      	ldr	r0, [r7, #4]
 800e038:	f000 f850 	bl	800e0dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	68fa      	ldr	r2, [r7, #12]
 800e042:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	2220      	movs	r2, #32
 800e048:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	2200      	movs	r2, #0
 800e050:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e054:	2300      	movs	r3, #0
}
 800e056:	4618      	mov	r0, r3
 800e058:	3710      	adds	r7, #16
 800e05a:	46bd      	mov	sp, r7
 800e05c:	bd80      	pop	{r7, pc}

0800e05e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e05e:	b580      	push	{r7, lr}
 800e060:	b084      	sub	sp, #16
 800e062:	af00      	add	r7, sp, #0
 800e064:	6078      	str	r0, [r7, #4]
 800e066:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e06e:	2b01      	cmp	r3, #1
 800e070:	d101      	bne.n	800e076 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e072:	2302      	movs	r3, #2
 800e074:	e02d      	b.n	800e0d2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	2201      	movs	r2, #1
 800e07a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	2224      	movs	r2, #36	; 0x24
 800e082:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	681a      	ldr	r2, [r3, #0]
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	f022 0201 	bic.w	r2, r2, #1
 800e09c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	689b      	ldr	r3, [r3, #8]
 800e0a4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	683a      	ldr	r2, [r7, #0]
 800e0ae:	430a      	orrs	r2, r1
 800e0b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e0b2:	6878      	ldr	r0, [r7, #4]
 800e0b4:	f000 f812 	bl	800e0dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	68fa      	ldr	r2, [r7, #12]
 800e0be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	2220      	movs	r2, #32
 800e0c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e0d0:	2300      	movs	r3, #0
}
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	3710      	adds	r7, #16
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}
	...

0800e0dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e0dc:	b480      	push	{r7}
 800e0de:	b085      	sub	sp, #20
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d108      	bne.n	800e0fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	2201      	movs	r2, #1
 800e0f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	2201      	movs	r2, #1
 800e0f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e0fc:	e031      	b.n	800e162 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e0fe:	2308      	movs	r3, #8
 800e100:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e102:	2308      	movs	r3, #8
 800e104:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	689b      	ldr	r3, [r3, #8]
 800e10c:	0e5b      	lsrs	r3, r3, #25
 800e10e:	b2db      	uxtb	r3, r3
 800e110:	f003 0307 	and.w	r3, r3, #7
 800e114:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	689b      	ldr	r3, [r3, #8]
 800e11c:	0f5b      	lsrs	r3, r3, #29
 800e11e:	b2db      	uxtb	r3, r3
 800e120:	f003 0307 	and.w	r3, r3, #7
 800e124:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e126:	7bbb      	ldrb	r3, [r7, #14]
 800e128:	7b3a      	ldrb	r2, [r7, #12]
 800e12a:	4911      	ldr	r1, [pc, #68]	; (800e170 <UARTEx_SetNbDataToProcess+0x94>)
 800e12c:	5c8a      	ldrb	r2, [r1, r2]
 800e12e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e132:	7b3a      	ldrb	r2, [r7, #12]
 800e134:	490f      	ldr	r1, [pc, #60]	; (800e174 <UARTEx_SetNbDataToProcess+0x98>)
 800e136:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e138:	fb93 f3f2 	sdiv	r3, r3, r2
 800e13c:	b29a      	uxth	r2, r3
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e144:	7bfb      	ldrb	r3, [r7, #15]
 800e146:	7b7a      	ldrb	r2, [r7, #13]
 800e148:	4909      	ldr	r1, [pc, #36]	; (800e170 <UARTEx_SetNbDataToProcess+0x94>)
 800e14a:	5c8a      	ldrb	r2, [r1, r2]
 800e14c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e150:	7b7a      	ldrb	r2, [r7, #13]
 800e152:	4908      	ldr	r1, [pc, #32]	; (800e174 <UARTEx_SetNbDataToProcess+0x98>)
 800e154:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e156:	fb93 f3f2 	sdiv	r3, r3, r2
 800e15a:	b29a      	uxth	r2, r3
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e162:	bf00      	nop
 800e164:	3714      	adds	r7, #20
 800e166:	46bd      	mov	sp, r7
 800e168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16c:	4770      	bx	lr
 800e16e:	bf00      	nop
 800e170:	0800e378 	.word	0x0800e378
 800e174:	0800e380 	.word	0x0800e380

0800e178 <__libc_init_array>:
 800e178:	b570      	push	{r4, r5, r6, lr}
 800e17a:	4d0d      	ldr	r5, [pc, #52]	; (800e1b0 <__libc_init_array+0x38>)
 800e17c:	2600      	movs	r6, #0
 800e17e:	4c0d      	ldr	r4, [pc, #52]	; (800e1b4 <__libc_init_array+0x3c>)
 800e180:	1b64      	subs	r4, r4, r5
 800e182:	10a4      	asrs	r4, r4, #2
 800e184:	42a6      	cmp	r6, r4
 800e186:	d109      	bne.n	800e19c <__libc_init_array+0x24>
 800e188:	4d0b      	ldr	r5, [pc, #44]	; (800e1b8 <__libc_init_array+0x40>)
 800e18a:	2600      	movs	r6, #0
 800e18c:	4c0b      	ldr	r4, [pc, #44]	; (800e1bc <__libc_init_array+0x44>)
 800e18e:	f000 f81f 	bl	800e1d0 <_init>
 800e192:	1b64      	subs	r4, r4, r5
 800e194:	10a4      	asrs	r4, r4, #2
 800e196:	42a6      	cmp	r6, r4
 800e198:	d105      	bne.n	800e1a6 <__libc_init_array+0x2e>
 800e19a:	bd70      	pop	{r4, r5, r6, pc}
 800e19c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e1a0:	3601      	adds	r6, #1
 800e1a2:	4798      	blx	r3
 800e1a4:	e7ee      	b.n	800e184 <__libc_init_array+0xc>
 800e1a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e1aa:	3601      	adds	r6, #1
 800e1ac:	4798      	blx	r3
 800e1ae:	e7f2      	b.n	800e196 <__libc_init_array+0x1e>
 800e1b0:	0800e390 	.word	0x0800e390
 800e1b4:	0800e390 	.word	0x0800e390
 800e1b8:	0800e390 	.word	0x0800e390
 800e1bc:	0800e394 	.word	0x0800e394

0800e1c0 <memset>:
 800e1c0:	4402      	add	r2, r0
 800e1c2:	4603      	mov	r3, r0
 800e1c4:	4293      	cmp	r3, r2
 800e1c6:	d100      	bne.n	800e1ca <memset+0xa>
 800e1c8:	4770      	bx	lr
 800e1ca:	f803 1b01 	strb.w	r1, [r3], #1
 800e1ce:	e7f9      	b.n	800e1c4 <memset+0x4>

0800e1d0 <_init>:
 800e1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1d2:	bf00      	nop
 800e1d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1d6:	bc08      	pop	{r3}
 800e1d8:	469e      	mov	lr, r3
 800e1da:	4770      	bx	lr

0800e1dc <_fini>:
 800e1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1de:	bf00      	nop
 800e1e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1e2:	bc08      	pop	{r3}
 800e1e4:	469e      	mov	lr, r3
 800e1e6:	4770      	bx	lr
